/**
 ******************************************************************************
 * File Name          : head_type.h
 * Description        : This file is generated by 위대한 송 인재 on Aug 8, 2025
 ******************************************************************************
 *
 * COPYRIGHT(c) 2024 DSN Co. Ltd.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *   1. Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 *   2. Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 *   3. Neither the name of STMicroelectronics nor the names of its contributors
 *      may be used to endorse or promote products derived from this software
 *      without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 ******************************************************************************
 */


#ifndef INC_HEAD_TYPE_H_
#define INC_HEAD_TYPE_H_

typedef enum {
	BANNER_DSN = 0,
	BANNER_ECELL,
	BANNER_SMART,
	BANNER_PEE,
	BANNER_SHIT,
	BANNER_BALLET,
	BANNER_END,
} scw_banner_t;

typedef void (* func_timeout_cb)(void *);

typedef struct {
	osTimerId_t			osTimerId;
	osTimerType_t		osTimerType;
	uint32_t			timeout_tick;
	func_timeout_cb		timeout_cb;
	char				timer_description[50];
} osTimerEntry_t;

typedef enum {
	OS_TIMER_INDEX_BEGIN = 0,
	OS_TIMER_INDEX_CLI_CONSOLE_SCAN = OS_TIMER_INDEX_BEGIN,
	OS_TIMER_INDEX_UPTIME_COUNT,
	OS_TIMER_INDEX_DOOR_CHECK,
	OS_TIMER_INDEX_HT_CHECK,
	OS_TIMER_INDEX_ADC_CHECK,
	OS_TIMER_INDEX_SCW_INFO_DISPLAY,
	OS_TIMER_INDEX_RSVD_5,
	OS_TIMER_INDEX_RSVD_6,
	OS_TIMER_INDEX_RSVD_7,
	OS_TIMER_INDEX_RSVD_8,
	OS_TIMER_INDEX_RSVD_9,
	OS_TIMER_INDEX_RSVD_10,
	OS_TIMER_INDEX_RSVD_11,
	OS_TIMER_INDEX_RSVD_12,
	OS_TIMER_INDEX_RSVD_13,
	OS_TIMER_INDEX_END,
} osTimerIndex_t;

typedef struct {
	bool				Enabled;
	uint32_t			IntrCount;
	char				IntrName[50];
	char				IntrDesc[50];
} IntrObjEntry_t;

typedef enum {
	SCW_RTU_INTR_INDEX_BEGIN = 0,

	// Copied from stm32f103ex.h
	SCW_RTU_INTR_INDEX_WWDG_IRQn			= SCW_RTU_INTR_INDEX_BEGIN,      /*!< Window WatchDog Interrupt                            */
//	SCW_RTU_INTR_INDEX_PVD_IRQn				,      /*!< PVD through EXTI Line detection Interrupt            */
//	SCW_RTU_INTR_INDEX_TAMPER_IRQn			,      /*!< Tamper Interrupt                                     */
	SCW_RTU_INTR_INDEX_RTC_IRQn				,      /*!< RTC global Interrupt                                 */
//	SCW_RTU_INTR_INDEX_FLASH_IRQn			,      /*!< FLASH global Interrupt                               */
//	SCW_RTU_INTR_INDEX_RCC_IRQn				,      /*!< RCC global Interrupt                                 */
//	SCW_RTU_INTR_INDEX_EXTI0_IRQn			,      /*!< EXTI Line0 Interrupt                                 */
//	SCW_RTU_INTR_INDEX_EXTI1_IRQn			,      /*!< EXTI Line1 Interrupt                                 */
//	SCW_RTU_INTR_INDEX_EXTI2_IRQn			,      /*!< EXTI Line2 Interrupt                                 */
//	SCW_RTU_INTR_INDEX_EXTI3_IRQn			,      /*!< EXTI Line3 Interrupt                                 */
//	SCW_RTU_INTR_INDEX_EXTI4_IRQn			,     /*!< EXTI Line4 Interrupt                                 */
	SCW_RTU_INTR_INDEX_DMA1_Channel1_IRQn	,     /*!< DMA1 Channel 1 global Interrupt                      */
//	SCW_RTU_INTR_INDEX_DMA1_Channel2_IRQn	,     /*!< DMA1 Channel 2 global Interrupt                      */
//	SCW_RTU_INTR_INDEX_DMA1_Channel3_IRQn	,     /*!< DMA1 Channel 3 global Interrupt                      */
	SCW_RTU_INTR_INDEX_DMA1_Channel4_IRQn	,     /*!< DMA1 Channel 4 global Interrupt                      */
//	SCW_RTU_INTR_INDEX_DMA1_Channel5_IRQn	,     /*!< DMA1 Channel 5 global Interrupt                      */
//	SCW_RTU_INTR_INDEX_DMA1_Channel6_IRQn	,     /*!< DMA1 Channel 6 global Interrupt                      */
//	SCW_RTU_INTR_INDEX_DMA1_Channel7_IRQn	,     /*!< DMA1 Channel 7 global Interrupt                      */
	SCW_RTU_INTR_INDEX_ADC1_2_IRQn			,     /*!< ADC1 and ADC2 global Interrupt                       */
//	SCW_RTU_INTR_INDEX_USB_HP_CAN1_TX_IRQn	,     /*!< USB Device High Priority or CAN1 TX Interrupts       */
//	SCW_RTU_INTR_INDEX_USB_LP_CAN1_RX0_IRQn	,     /*!< USB Device Low Priority or CAN1 RX0 Interrupts       */
//	SCW_RTU_INTR_INDEX_CAN1_RX1_IRQn		,     /*!< CAN1 RX1 Interrupt                                   */
//	SCW_RTU_INTR_INDEX_CAN1_SCE_IRQn		,     /*!< CAN1 SCE Interrupt                                   */
//	SCW_RTU_INTR_INDEX_EXTI9_5_IRQn			,     /*!< External Line[9:5] Interrupts                        */
//	SCW_RTU_INTR_INDEX_TIM1_BRK_IRQn		,     /*!< TIM1 Break Interrupt                                 */
//	SCW_RTU_INTR_INDEX_TIM1_UP_IRQn			,     /*!< TIM1 Update Interrupt                                */
//	SCW_RTU_INTR_INDEX_TIM1_TRG_COM_IRQn	,     /*!< TIM1 Trigger and Commutation Interrupt               */
//	SCW_RTU_INTR_INDEX_TIM1_CC_IRQn			,     /*!< TIM1 Capture Compare Interrupt                       */
//	SCW_RTU_INTR_INDEX_TIM2_IRQn			,     /*!< TIM2 global Interrupt                                */
//	SCW_RTU_INTR_INDEX_TIM3_IRQn			,     /*!< TIM3 global Interrupt                                */
//	SCW_RTU_INTR_INDEX_TIM4_IRQn			,     /*!< TIM4 global Interrupt                                */
	SCW_RTU_INTR_INDEX_I2C1_EV_IRQn			,     /*!< I2C1 Event Interrupt                                 */
	SCW_RTU_INTR_INDEX_I2C1_ER_IRQn			,     /*!< I2C1 Error Interrupt                                 */
//	SCW_RTU_INTR_INDEX_I2C2_EV_IRQn			,     /*!< I2C2 Event Interrupt                                 */
//	SCW_RTU_INTR_INDEX_I2C2_ER_IRQn			,     /*!< I2C2 Error Interrupt                                 */
//	SCW_RTU_INTR_INDEX_SPI1_IRQn			,     /*!< SPI1 global Interrupt                                */
//	SCW_RTU_INTR_INDEX_SPI2_IRQn			,     /*!< SPI2 global Interrupt                                */
	SCW_RTU_INTR_INDEX_USART1_IRQn			,     /*!< USART1 global Interrupt                              */
//	SCW_RTU_INTR_INDEX_USART2_IRQn			,     /*!< USART2 global Interrupt                              */
//	SCW_RTU_INTR_INDEX_USART3_IRQn			,     /*!< USART3 global Interrupt                              */
//	SCW_RTU_INTR_INDEX_EXTI15_10_IRQn0		,     /*!< External Line[15:10] Interrupts                      */
	SCW_RTU_INTR_INDEX_RTC_Alarm_IRQn		,     /*!< RTC Alarm through EXTI Line Interrupt                */
//	SCW_RTU_INTR_INDEX_USBWakeUp_IRQn		,     /*!< USB Device WakeUp from suspend through EXTI Line Interrupt */
//	SCW_RTU_INTR_INDEX_TIM8_BRK_IRQn		,     /*!< TIM8 Break Interrupt                                 */
	SCW_RTU_INTR_INDEX_TIM8_UP_IRQn			,     /*!< TIM8 Update Interrupt                                */
//	SCW_RTU_INTR_INDEX_TIM8_TRG_COM_IRQn	,     /*!< TIM8 Trigger and Commutation Interrupt               */
//	SCW_RTU_INTR_INDEX_TIM8_CC_IRQn			,     /*!< TIM8 Capture Compare Interrupt                       */
//	SCW_RTU_INTR_INDEX_ADC3_IRQn			,     /*!< ADC3 global Interrupt                                */
//	SCW_RTU_INTR_INDEX_FSMC_IRQn			,     /*!< FSMC global Interrupt                                */
//	SCW_RTU_INTR_INDEX_SDIO_IRQn			,     /*!< SDIO global Interrupt                                */
//	SCW_RTU_INTR_INDEX_TIM5_IRQn			,     /*!< TIM5 global Interrupt                                */
//	SCW_RTU_INTR_INDEX_SPI3_IRQn			,     /*!< SPI3 global Interrupt                                */
	SCW_RTU_INTR_INDEX_UART4_IRQn			,     /*!< UART4 global Interrupt                               */
	SCW_RTU_INTR_INDEX_UART5_IRQn			,     /*!< UART5 global Interrupt                               */
//	SCW_RTU_INTR_INDEX_TIM6_IRQn			,     /*!< TIM6 global Interrupt                                */
//	SCW_RTU_INTR_INDEX_TIM7_IRQn			,     /*!< TIM7 global Interrupt                                */
//	SCW_RTU_INTR_INDEX_DMA2_Channel1_IRQn	,     /*!< DMA2 Channel 1 global Interrupt                      */
//	SCW_RTU_INTR_INDEX_DMA2_Channel2_IRQn	,     /*!< DMA2 Channel 2 global Interrupt                      */
	SCW_RTU_INTR_INDEX_DMA2_Channel3_IRQn	,     /*!< DMA2 Channel 3 global Interrupt                      */
	SCW_RTU_INTR_INDEX_DMA2_Channel4_5_IRQn	,     /*!< DMA2 Channel 4 and Channel 5 global Interrupt        */

	SCW_RTU_INTR_INDEX_END,
} scw_Rtu_Intr_Index_t;

typedef enum {
	SCW_DOOR_CLOSED = 0,
	SCW_DOOR_OPEN,
} scw_door_status_t;

typedef enum {
	SCW_FAN_STATE_STOP = 0,
	SCW_FAN_STATE_WORKING,
} scw_fan_status_t;

typedef enum {
	SCW_HEATER_STATE_STOP = 0,
	SCW_HEATER_STATE_WORKING,
} scw_heater_status_t;

typedef struct {
	scw_door_status_t	door_1_status;
	scw_door_status_t	door_2_status;
} scw_door_t;

typedef struct
{
	float			m_tempreture;
	float			m_humidity;
	osTimerId_t		hm_check_timerId;
} SHT20_INFO_t;

typedef struct
{
	volatile uint16_t	AD1;		/* Value of voltage on GPIO pin (on which is mapped ADC channel) calculated from ADC conversion data (unit: mV) */
	volatile uint16_t	AD2;		/* Value of voltage on GPIO pin (on which is mapped ADC channe2) calculated from ADC conversion data (unit: mV) */
	volatile uint16_t	AD3;		/* Value of voltage on GPIO pin (on which is mapped ADC channe3) calculated from ADC conversion data (unit: mV) */
	volatile uint16_t	AD4;		/* Value of voltage on GPIO pin (on which is mapped ADC channe4) calculated from ADC conversion data (unit: mV) */
} scw_adc_value_t;

typedef struct {
	char				fw_version[64];
	uint32_t			hw_version;
	uint32_t 			CPUID;
	uint32_t			implementer;
	uint32_t			variant;
	uint32_t			constant;
	uint32_t			partno;
	uint32_t			version;
	uint32_t 			package_type;
	uint32_t 			uid0;
	uint32_t 			uid1;
	uint32_t 			uid2;
	uint32_t 			counter_admin;
	RTC_DateTypeDef		currentDate;
	RTC_TimeTypeDef 	currentTime;
	RTC_DateTypeDef 	launchDate;
	RTC_TimeTypeDef 	launchTime;
	scw_door_t			scw_door;
	SHT20_INFO_t		SHT20_INFO;
	scw_adc_value_t		scw_adc_value;
	uint8_t				watchdog_use;
	uint8_t				watchdog_value;
	scw_fan_status_t	scw_fan_status;
	scw_heater_status_t	scw_heater_status;
	int32_t				temp_band_high;
	int32_t				temp_band_middle;
	int32_t				temp_band_low;
} scw_infoObj_t;

typedef enum {
	WORKM_BASE = 0,
	WORKM_ROOT,
	WORKM_CLI,
	WORKM_SENSOR,
	WORKM_SUJI,
	WORKM_ADC,
	WORKM_UART1,
	WORKM_UART2,
	WORKM_UART3,
	WORKM_UART4,
	WORKM_USB,
	WORKM_TIMER,
	WORKM_EXTI,
} WorkModule_Entity_t;

// *****************************************************************************
// Event for SENSOR thread
// *****************************************************************************
typedef enum {
	SENSOR_MSG_BASE = 0,
	SENSOR_MSG_DOOR_CHECK,
	SENSOR_MSG_HM_CHECK,
	SENSOR_MSG_ADC_CHECK,
	SENSOR_MSG_INFO_DISPLAY,
	SENSOR_MSG_END,
} SENSOR_Msg_type_t;

typedef struct {
	SENSOR_Msg_type_t	type;
	WorkModule_Entity_t	dst;
	WorkModule_Entity_t	src;
	uint8_t				len;
} sensor_msg_head_t;

typedef struct {
	uint8_t				Byte[10];
} sensor_msg_body_t;

typedef struct {
	sensor_msg_head_t 	head;
	sensor_msg_body_t	body;
} sensor_msg_t;

typedef bool (* sensor_msg_func)(sensor_msg_t *);

// *****************************************************************************
// Event for SUJI thread
// *****************************************************************************
#define SUJI_MSG_Q_DEPTH			8
#define SUJI_RX_BUFF_SIZE			48U
#define SUJI_TX_BUFF_SIZE			48U

typedef enum {
	SUJI_MSG_BASE = 0,
	SUJI_MSG_COMMAND,
	SUJI_MSG_END,
} SUJI_Msg_type_t;

typedef struct {
	SUJI_Msg_type_t		type;
	WorkModule_Entity_t	dst;
	WorkModule_Entity_t	src;
	uint8_t				len;
} suji_msg_head_t;

typedef struct {
	uint8_t				Byte[SUJI_RX_BUFF_SIZE];
} suji_msg_body_t;

typedef struct {
	suji_msg_head_t 	head;
	suji_msg_body_t		body;
} suji_msg_t;

typedef bool (* suji_msg_func)(suji_msg_t *);


#define STX                     ((uint8_t)0x02)  /* start of 1024-byte data packet */
#define ETX                     ((uint8_t)0x03)  /* end of transmission */

typedef enum {
	OPCODE_POWER_RESET			= 0x11,
	OPCODE_RTU_VERSION			= 0x12,
	OPCODE_TEMPERATURE			= 0x21,
	OPCODE_HUMIDITY				= 0x22,
	OPCODE_WATCHDOG_USE			= 0x31,
	OPCODE_WATCHDOG_SET			= 0x32,
	OPCODE_TEMP_BAND_SET		= 0x41,
	OPCODE_HEATER_TEMP_SET		= 0x42,
	OPCODE_ADV_PANEL_LAMP_SET	= 0x63,
	OPCODE_DOOR_STATUS_CHANGE	= 0x51,
	OPCODE_XAVIER_CONTROL		= 0x65,
	OPCODE_LAMP_POST_CONTROL	= 0x66,
	OPCODE_STATUS_INFO			= 0xF1,

} suji_command_opcode_type_t;

typedef enum {
	OPCODE_DOOR_EVENT			= 0x51,

} suji_event_opcode_type_t;



#endif /* INC_HEAD_TYPE_H_ */
