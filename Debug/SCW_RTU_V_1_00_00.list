
SCW_RTU_V_1_00_00.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015470  080001f0  080001f0  000011f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004adc  08015660  08015660  00016660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a13c  0801a13c  0001c678  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801a13c  0801a13c  0001b13c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a144  0801a144  0001c678  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a144  0801a144  0001b144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801a148  0801a148  0001b148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000678  20000000  0801a14c  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007eac  20000678  0801a7c4  0001c678  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20008524  0801a7c4  0001d524  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001c678  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002faca  00000000  00000000  0001c6a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000083e4  00000000  00000000  0004c16b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002688  00000000  00000000  00054550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001d6b  00000000  00000000  00056bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029b16  00000000  00000000  00058943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003ce41  00000000  00000000  00082459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000beaf5  00000000  00000000  000bf29a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017dd8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000aa20  00000000  00000000  0017ddd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  001887f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000678 	.word	0x20000678
 800020c:	00000000 	.word	0x00000000
 8000210:	08015648 	.word	0x08015648

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	2000067c 	.word	0x2000067c
 800022c:	08015648 	.word	0x08015648

08000230 <strcmp>:
 8000230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000238:	2a01      	cmp	r2, #1
 800023a:	bf28      	it	cs
 800023c:	429a      	cmpcs	r2, r3
 800023e:	d0f7      	beq.n	8000230 <strcmp>
 8000240:	1ad0      	subs	r0, r2, r3
 8000242:	4770      	bx	lr

08000244 <strlen>:
 8000244:	4603      	mov	r3, r0
 8000246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800024a:	2a00      	cmp	r2, #0
 800024c:	d1fb      	bne.n	8000246 <strlen+0x2>
 800024e:	1a18      	subs	r0, r3, r0
 8000250:	3801      	subs	r0, #1
 8000252:	4770      	bx	lr

08000254 <__aeabi_fmul>:
 8000254:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000258:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800025c:	bf1e      	ittt	ne
 800025e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000262:	ea92 0f0c 	teqne	r2, ip
 8000266:	ea93 0f0c 	teqne	r3, ip
 800026a:	d06f      	beq.n	800034c <__aeabi_fmul+0xf8>
 800026c:	441a      	add	r2, r3
 800026e:	ea80 0c01 	eor.w	ip, r0, r1
 8000272:	0240      	lsls	r0, r0, #9
 8000274:	bf18      	it	ne
 8000276:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800027a:	d01e      	beq.n	80002ba <__aeabi_fmul+0x66>
 800027c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000280:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000284:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000288:	fba0 3101 	umull	r3, r1, r0, r1
 800028c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000290:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000294:	bf3e      	ittt	cc
 8000296:	0049      	lslcc	r1, r1, #1
 8000298:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800029c:	005b      	lslcc	r3, r3, #1
 800029e:	ea40 0001 	orr.w	r0, r0, r1
 80002a2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80002a6:	2afd      	cmp	r2, #253	@ 0xfd
 80002a8:	d81d      	bhi.n	80002e6 <__aeabi_fmul+0x92>
 80002aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80002ae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002b2:	bf08      	it	eq
 80002b4:	f020 0001 	biceq.w	r0, r0, #1
 80002b8:	4770      	bx	lr
 80002ba:	f090 0f00 	teq	r0, #0
 80002be:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80002c2:	bf08      	it	eq
 80002c4:	0249      	lsleq	r1, r1, #9
 80002c6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80002ca:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80002ce:	3a7f      	subs	r2, #127	@ 0x7f
 80002d0:	bfc2      	ittt	gt
 80002d2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80002d6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002da:	4770      	bxgt	lr
 80002dc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002e0:	f04f 0300 	mov.w	r3, #0
 80002e4:	3a01      	subs	r2, #1
 80002e6:	dc5d      	bgt.n	80003a4 <__aeabi_fmul+0x150>
 80002e8:	f112 0f19 	cmn.w	r2, #25
 80002ec:	bfdc      	itt	le
 80002ee:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80002f2:	4770      	bxle	lr
 80002f4:	f1c2 0200 	rsb	r2, r2, #0
 80002f8:	0041      	lsls	r1, r0, #1
 80002fa:	fa21 f102 	lsr.w	r1, r1, r2
 80002fe:	f1c2 0220 	rsb	r2, r2, #32
 8000302:	fa00 fc02 	lsl.w	ip, r0, r2
 8000306:	ea5f 0031 	movs.w	r0, r1, rrx
 800030a:	f140 0000 	adc.w	r0, r0, #0
 800030e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000312:	bf08      	it	eq
 8000314:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000318:	4770      	bx	lr
 800031a:	f092 0f00 	teq	r2, #0
 800031e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000322:	bf02      	ittt	eq
 8000324:	0040      	lsleq	r0, r0, #1
 8000326:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800032a:	3a01      	subeq	r2, #1
 800032c:	d0f9      	beq.n	8000322 <__aeabi_fmul+0xce>
 800032e:	ea40 000c 	orr.w	r0, r0, ip
 8000332:	f093 0f00 	teq	r3, #0
 8000336:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800033a:	bf02      	ittt	eq
 800033c:	0049      	lsleq	r1, r1, #1
 800033e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000342:	3b01      	subeq	r3, #1
 8000344:	d0f9      	beq.n	800033a <__aeabi_fmul+0xe6>
 8000346:	ea41 010c 	orr.w	r1, r1, ip
 800034a:	e78f      	b.n	800026c <__aeabi_fmul+0x18>
 800034c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000350:	ea92 0f0c 	teq	r2, ip
 8000354:	bf18      	it	ne
 8000356:	ea93 0f0c 	teqne	r3, ip
 800035a:	d00a      	beq.n	8000372 <__aeabi_fmul+0x11e>
 800035c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000360:	bf18      	it	ne
 8000362:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000366:	d1d8      	bne.n	800031a <__aeabi_fmul+0xc6>
 8000368:	ea80 0001 	eor.w	r0, r0, r1
 800036c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000370:	4770      	bx	lr
 8000372:	f090 0f00 	teq	r0, #0
 8000376:	bf17      	itett	ne
 8000378:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 800037c:	4608      	moveq	r0, r1
 800037e:	f091 0f00 	teqne	r1, #0
 8000382:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000386:	d014      	beq.n	80003b2 <__aeabi_fmul+0x15e>
 8000388:	ea92 0f0c 	teq	r2, ip
 800038c:	d101      	bne.n	8000392 <__aeabi_fmul+0x13e>
 800038e:	0242      	lsls	r2, r0, #9
 8000390:	d10f      	bne.n	80003b2 <__aeabi_fmul+0x15e>
 8000392:	ea93 0f0c 	teq	r3, ip
 8000396:	d103      	bne.n	80003a0 <__aeabi_fmul+0x14c>
 8000398:	024b      	lsls	r3, r1, #9
 800039a:	bf18      	it	ne
 800039c:	4608      	movne	r0, r1
 800039e:	d108      	bne.n	80003b2 <__aeabi_fmul+0x15e>
 80003a0:	ea80 0001 	eor.w	r0, r0, r1
 80003a4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80003a8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80003ac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003b0:	4770      	bx	lr
 80003b2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80003b6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80003ba:	4770      	bx	lr

080003bc <__aeabi_drsub>:
 80003bc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003c0:	e002      	b.n	80003c8 <__adddf3>
 80003c2:	bf00      	nop

080003c4 <__aeabi_dsub>:
 80003c4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003c8 <__adddf3>:
 80003c8:	b530      	push	{r4, r5, lr}
 80003ca:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003ce:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d2:	ea94 0f05 	teq	r4, r5
 80003d6:	bf08      	it	eq
 80003d8:	ea90 0f02 	teqeq	r0, r2
 80003dc:	bf1f      	itttt	ne
 80003de:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003e6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ee:	f000 80e2 	beq.w	80005b6 <__adddf3+0x1ee>
 80003f2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003f6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fa:	bfb8      	it	lt
 80003fc:	426d      	neglt	r5, r5
 80003fe:	dd0c      	ble.n	800041a <__adddf3+0x52>
 8000400:	442c      	add	r4, r5
 8000402:	ea80 0202 	eor.w	r2, r0, r2
 8000406:	ea81 0303 	eor.w	r3, r1, r3
 800040a:	ea82 0000 	eor.w	r0, r2, r0
 800040e:	ea83 0101 	eor.w	r1, r3, r1
 8000412:	ea80 0202 	eor.w	r2, r0, r2
 8000416:	ea81 0303 	eor.w	r3, r1, r3
 800041a:	2d36      	cmp	r5, #54	@ 0x36
 800041c:	bf88      	it	hi
 800041e:	bd30      	pophi	{r4, r5, pc}
 8000420:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000424:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000428:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800042c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000430:	d002      	beq.n	8000438 <__adddf3+0x70>
 8000432:	4240      	negs	r0, r0
 8000434:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000438:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800043c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000440:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000444:	d002      	beq.n	800044c <__adddf3+0x84>
 8000446:	4252      	negs	r2, r2
 8000448:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800044c:	ea94 0f05 	teq	r4, r5
 8000450:	f000 80a7 	beq.w	80005a2 <__adddf3+0x1da>
 8000454:	f1a4 0401 	sub.w	r4, r4, #1
 8000458:	f1d5 0e20 	rsbs	lr, r5, #32
 800045c:	db0d      	blt.n	800047a <__adddf3+0xb2>
 800045e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000462:	fa22 f205 	lsr.w	r2, r2, r5
 8000466:	1880      	adds	r0, r0, r2
 8000468:	f141 0100 	adc.w	r1, r1, #0
 800046c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000470:	1880      	adds	r0, r0, r2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	4159      	adcs	r1, r3
 8000478:	e00e      	b.n	8000498 <__adddf3+0xd0>
 800047a:	f1a5 0520 	sub.w	r5, r5, #32
 800047e:	f10e 0e20 	add.w	lr, lr, #32
 8000482:	2a01      	cmp	r2, #1
 8000484:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000488:	bf28      	it	cs
 800048a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800048e:	fa43 f305 	asr.w	r3, r3, r5
 8000492:	18c0      	adds	r0, r0, r3
 8000494:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800049c:	d507      	bpl.n	80004ae <__adddf3+0xe6>
 800049e:	f04f 0e00 	mov.w	lr, #0
 80004a2:	f1dc 0c00 	rsbs	ip, ip, #0
 80004a6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004aa:	eb6e 0101 	sbc.w	r1, lr, r1
 80004ae:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004b2:	d31b      	bcc.n	80004ec <__adddf3+0x124>
 80004b4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004b8:	d30c      	bcc.n	80004d4 <__adddf3+0x10c>
 80004ba:	0849      	lsrs	r1, r1, #1
 80004bc:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c4:	f104 0401 	add.w	r4, r4, #1
 80004c8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004cc:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004d0:	f080 809a 	bcs.w	8000608 <__adddf3+0x240>
 80004d4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004d8:	bf08      	it	eq
 80004da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004de:	f150 0000 	adcs.w	r0, r0, #0
 80004e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004e6:	ea41 0105 	orr.w	r1, r1, r5
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f0:	4140      	adcs	r0, r0
 80004f2:	eb41 0101 	adc.w	r1, r1, r1
 80004f6:	3c01      	subs	r4, #1
 80004f8:	bf28      	it	cs
 80004fa:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004fe:	d2e9      	bcs.n	80004d4 <__adddf3+0x10c>
 8000500:	f091 0f00 	teq	r1, #0
 8000504:	bf04      	itt	eq
 8000506:	4601      	moveq	r1, r0
 8000508:	2000      	moveq	r0, #0
 800050a:	fab1 f381 	clz	r3, r1
 800050e:	bf08      	it	eq
 8000510:	3320      	addeq	r3, #32
 8000512:	f1a3 030b 	sub.w	r3, r3, #11
 8000516:	f1b3 0220 	subs.w	r2, r3, #32
 800051a:	da0c      	bge.n	8000536 <__adddf3+0x16e>
 800051c:	320c      	adds	r2, #12
 800051e:	dd08      	ble.n	8000532 <__adddf3+0x16a>
 8000520:	f102 0c14 	add.w	ip, r2, #20
 8000524:	f1c2 020c 	rsb	r2, r2, #12
 8000528:	fa01 f00c 	lsl.w	r0, r1, ip
 800052c:	fa21 f102 	lsr.w	r1, r1, r2
 8000530:	e00c      	b.n	800054c <__adddf3+0x184>
 8000532:	f102 0214 	add.w	r2, r2, #20
 8000536:	bfd8      	it	le
 8000538:	f1c2 0c20 	rsble	ip, r2, #32
 800053c:	fa01 f102 	lsl.w	r1, r1, r2
 8000540:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000544:	bfdc      	itt	le
 8000546:	ea41 010c 	orrle.w	r1, r1, ip
 800054a:	4090      	lslle	r0, r2
 800054c:	1ae4      	subs	r4, r4, r3
 800054e:	bfa2      	ittt	ge
 8000550:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000554:	4329      	orrge	r1, r5
 8000556:	bd30      	popge	{r4, r5, pc}
 8000558:	ea6f 0404 	mvn.w	r4, r4
 800055c:	3c1f      	subs	r4, #31
 800055e:	da1c      	bge.n	800059a <__adddf3+0x1d2>
 8000560:	340c      	adds	r4, #12
 8000562:	dc0e      	bgt.n	8000582 <__adddf3+0x1ba>
 8000564:	f104 0414 	add.w	r4, r4, #20
 8000568:	f1c4 0220 	rsb	r2, r4, #32
 800056c:	fa20 f004 	lsr.w	r0, r0, r4
 8000570:	fa01 f302 	lsl.w	r3, r1, r2
 8000574:	ea40 0003 	orr.w	r0, r0, r3
 8000578:	fa21 f304 	lsr.w	r3, r1, r4
 800057c:	ea45 0103 	orr.w	r1, r5, r3
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	f1c4 040c 	rsb	r4, r4, #12
 8000586:	f1c4 0220 	rsb	r2, r4, #32
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 f304 	lsl.w	r3, r1, r4
 8000592:	ea40 0003 	orr.w	r0, r0, r3
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	fa21 f004 	lsr.w	r0, r1, r4
 800059e:	4629      	mov	r1, r5
 80005a0:	bd30      	pop	{r4, r5, pc}
 80005a2:	f094 0f00 	teq	r4, #0
 80005a6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005aa:	bf06      	itte	eq
 80005ac:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005b0:	3401      	addeq	r4, #1
 80005b2:	3d01      	subne	r5, #1
 80005b4:	e74e      	b.n	8000454 <__adddf3+0x8c>
 80005b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ba:	bf18      	it	ne
 80005bc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c0:	d029      	beq.n	8000616 <__adddf3+0x24e>
 80005c2:	ea94 0f05 	teq	r4, r5
 80005c6:	bf08      	it	eq
 80005c8:	ea90 0f02 	teqeq	r0, r2
 80005cc:	d005      	beq.n	80005da <__adddf3+0x212>
 80005ce:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d2:	bf04      	itt	eq
 80005d4:	4619      	moveq	r1, r3
 80005d6:	4610      	moveq	r0, r2
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea91 0f03 	teq	r1, r3
 80005de:	bf1e      	ittt	ne
 80005e0:	2100      	movne	r1, #0
 80005e2:	2000      	movne	r0, #0
 80005e4:	bd30      	popne	{r4, r5, pc}
 80005e6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ea:	d105      	bne.n	80005f8 <__adddf3+0x230>
 80005ec:	0040      	lsls	r0, r0, #1
 80005ee:	4149      	adcs	r1, r1
 80005f0:	bf28      	it	cs
 80005f2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005f6:	bd30      	pop	{r4, r5, pc}
 80005f8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005fc:	bf3c      	itt	cc
 80005fe:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000602:	bd30      	popcc	{r4, r5, pc}
 8000604:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000608:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800060c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000610:	f04f 0000 	mov.w	r0, #0
 8000614:	bd30      	pop	{r4, r5, pc}
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf1a      	itte	ne
 800061c:	4619      	movne	r1, r3
 800061e:	4610      	movne	r0, r2
 8000620:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000624:	bf1c      	itt	ne
 8000626:	460b      	movne	r3, r1
 8000628:	4602      	movne	r2, r0
 800062a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800062e:	bf06      	itte	eq
 8000630:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000634:	ea91 0f03 	teqeq	r1, r3
 8000638:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800063c:	bd30      	pop	{r4, r5, pc}
 800063e:	bf00      	nop

08000640 <__aeabi_ui2d>:
 8000640:	f090 0f00 	teq	r0, #0
 8000644:	bf04      	itt	eq
 8000646:	2100      	moveq	r1, #0
 8000648:	4770      	bxeq	lr
 800064a:	b530      	push	{r4, r5, lr}
 800064c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000650:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000654:	f04f 0500 	mov.w	r5, #0
 8000658:	f04f 0100 	mov.w	r1, #0
 800065c:	e750      	b.n	8000500 <__adddf3+0x138>
 800065e:	bf00      	nop

08000660 <__aeabi_i2d>:
 8000660:	f090 0f00 	teq	r0, #0
 8000664:	bf04      	itt	eq
 8000666:	2100      	moveq	r1, #0
 8000668:	4770      	bxeq	lr
 800066a:	b530      	push	{r4, r5, lr}
 800066c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000670:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000674:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000678:	bf48      	it	mi
 800067a:	4240      	negmi	r0, r0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e73e      	b.n	8000500 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_f2d>:
 8000684:	0042      	lsls	r2, r0, #1
 8000686:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068a:	ea4f 0131 	mov.w	r1, r1, rrx
 800068e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000692:	bf1f      	itttt	ne
 8000694:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000698:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800069c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006a0:	4770      	bxne	lr
 80006a2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006a6:	bf08      	it	eq
 80006a8:	4770      	bxeq	lr
 80006aa:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006ae:	bf04      	itt	eq
 80006b0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006b4:	4770      	bxeq	lr
 80006b6:	b530      	push	{r4, r5, lr}
 80006b8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	e71c      	b.n	8000500 <__adddf3+0x138>
 80006c6:	bf00      	nop

080006c8 <__aeabi_ul2d>:
 80006c8:	ea50 0201 	orrs.w	r2, r0, r1
 80006cc:	bf08      	it	eq
 80006ce:	4770      	bxeq	lr
 80006d0:	b530      	push	{r4, r5, lr}
 80006d2:	f04f 0500 	mov.w	r5, #0
 80006d6:	e00a      	b.n	80006ee <__aeabi_l2d+0x16>

080006d8 <__aeabi_l2d>:
 80006d8:	ea50 0201 	orrs.w	r2, r0, r1
 80006dc:	bf08      	it	eq
 80006de:	4770      	bxeq	lr
 80006e0:	b530      	push	{r4, r5, lr}
 80006e2:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006e6:	d502      	bpl.n	80006ee <__aeabi_l2d+0x16>
 80006e8:	4240      	negs	r0, r0
 80006ea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006ee:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006f6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fa:	f43f aed8 	beq.w	80004ae <__adddf3+0xe6>
 80006fe:	f04f 0203 	mov.w	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070e:	bf18      	it	ne
 8000710:	3203      	addne	r2, #3
 8000712:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000716:	f1c2 0320 	rsb	r3, r2, #32
 800071a:	fa00 fc03 	lsl.w	ip, r0, r3
 800071e:	fa20 f002 	lsr.w	r0, r0, r2
 8000722:	fa01 fe03 	lsl.w	lr, r1, r3
 8000726:	ea40 000e 	orr.w	r0, r0, lr
 800072a:	fa21 f102 	lsr.w	r1, r1, r2
 800072e:	4414      	add	r4, r2
 8000730:	e6bd      	b.n	80004ae <__adddf3+0xe6>
 8000732:	bf00      	nop

08000734 <__aeabi_dmul>:
 8000734:	b570      	push	{r4, r5, r6, lr}
 8000736:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800073a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800073e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000742:	bf1d      	ittte	ne
 8000744:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000748:	ea94 0f0c 	teqne	r4, ip
 800074c:	ea95 0f0c 	teqne	r5, ip
 8000750:	f000 f8de 	bleq	8000910 <__aeabi_dmul+0x1dc>
 8000754:	442c      	add	r4, r5
 8000756:	ea81 0603 	eor.w	r6, r1, r3
 800075a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800075e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000762:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000766:	bf18      	it	ne
 8000768:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800076c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000770:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000774:	d038      	beq.n	80007e8 <__aeabi_dmul+0xb4>
 8000776:	fba0 ce02 	umull	ip, lr, r0, r2
 800077a:	f04f 0500 	mov.w	r5, #0
 800077e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000782:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000786:	fbe0 e503 	umlal	lr, r5, r0, r3
 800078a:	f04f 0600 	mov.w	r6, #0
 800078e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000792:	f09c 0f00 	teq	ip, #0
 8000796:	bf18      	it	ne
 8000798:	f04e 0e01 	orrne.w	lr, lr, #1
 800079c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80007a0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80007a4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80007a8:	d204      	bcs.n	80007b4 <__aeabi_dmul+0x80>
 80007aa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80007ae:	416d      	adcs	r5, r5
 80007b0:	eb46 0606 	adc.w	r6, r6, r6
 80007b4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80007b8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80007bc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80007c0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80007c4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80007c8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80007cc:	bf88      	it	hi
 80007ce:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80007d2:	d81e      	bhi.n	8000812 <__aeabi_dmul+0xde>
 80007d4:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80007d8:	bf08      	it	eq
 80007da:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007de:	f150 0000 	adcs.w	r0, r0, #0
 80007e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007e6:	bd70      	pop	{r4, r5, r6, pc}
 80007e8:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80007ec:	ea46 0101 	orr.w	r1, r6, r1
 80007f0:	ea40 0002 	orr.w	r0, r0, r2
 80007f4:	ea81 0103 	eor.w	r1, r1, r3
 80007f8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007fc:	bfc2      	ittt	gt
 80007fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000802:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000806:	bd70      	popgt	{r4, r5, r6, pc}
 8000808:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800080c:	f04f 0e00 	mov.w	lr, #0
 8000810:	3c01      	subs	r4, #1
 8000812:	f300 80ab 	bgt.w	800096c <__aeabi_dmul+0x238>
 8000816:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800081a:	bfde      	ittt	le
 800081c:	2000      	movle	r0, #0
 800081e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000822:	bd70      	pople	{r4, r5, r6, pc}
 8000824:	f1c4 0400 	rsb	r4, r4, #0
 8000828:	3c20      	subs	r4, #32
 800082a:	da35      	bge.n	8000898 <__aeabi_dmul+0x164>
 800082c:	340c      	adds	r4, #12
 800082e:	dc1b      	bgt.n	8000868 <__aeabi_dmul+0x134>
 8000830:	f104 0414 	add.w	r4, r4, #20
 8000834:	f1c4 0520 	rsb	r5, r4, #32
 8000838:	fa00 f305 	lsl.w	r3, r0, r5
 800083c:	fa20 f004 	lsr.w	r0, r0, r4
 8000840:	fa01 f205 	lsl.w	r2, r1, r5
 8000844:	ea40 0002 	orr.w	r0, r0, r2
 8000848:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800084c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000850:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000854:	fa21 f604 	lsr.w	r6, r1, r4
 8000858:	eb42 0106 	adc.w	r1, r2, r6
 800085c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000860:	bf08      	it	eq
 8000862:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f1c4 040c 	rsb	r4, r4, #12
 800086c:	f1c4 0520 	rsb	r5, r4, #32
 8000870:	fa00 f304 	lsl.w	r3, r0, r4
 8000874:	fa20 f005 	lsr.w	r0, r0, r5
 8000878:	fa01 f204 	lsl.w	r2, r1, r4
 800087c:	ea40 0002 	orr.w	r0, r0, r2
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000888:	f141 0100 	adc.w	r1, r1, #0
 800088c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000890:	bf08      	it	eq
 8000892:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f1c4 0520 	rsb	r5, r4, #32
 800089c:	fa00 f205 	lsl.w	r2, r0, r5
 80008a0:	ea4e 0e02 	orr.w	lr, lr, r2
 80008a4:	fa20 f304 	lsr.w	r3, r0, r4
 80008a8:	fa01 f205 	lsl.w	r2, r1, r5
 80008ac:	ea43 0302 	orr.w	r3, r3, r2
 80008b0:	fa21 f004 	lsr.w	r0, r1, r4
 80008b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008b8:	fa21 f204 	lsr.w	r2, r1, r4
 80008bc:	ea20 0002 	bic.w	r0, r0, r2
 80008c0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80008c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008c8:	bf08      	it	eq
 80008ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f094 0f00 	teq	r4, #0
 80008d4:	d10f      	bne.n	80008f6 <__aeabi_dmul+0x1c2>
 80008d6:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80008da:	0040      	lsls	r0, r0, #1
 80008dc:	eb41 0101 	adc.w	r1, r1, r1
 80008e0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e4:	bf08      	it	eq
 80008e6:	3c01      	subeq	r4, #1
 80008e8:	d0f7      	beq.n	80008da <__aeabi_dmul+0x1a6>
 80008ea:	ea41 0106 	orr.w	r1, r1, r6
 80008ee:	f095 0f00 	teq	r5, #0
 80008f2:	bf18      	it	ne
 80008f4:	4770      	bxne	lr
 80008f6:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80008fa:	0052      	lsls	r2, r2, #1
 80008fc:	eb43 0303 	adc.w	r3, r3, r3
 8000900:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000904:	bf08      	it	eq
 8000906:	3d01      	subeq	r5, #1
 8000908:	d0f7      	beq.n	80008fa <__aeabi_dmul+0x1c6>
 800090a:	ea43 0306 	orr.w	r3, r3, r6
 800090e:	4770      	bx	lr
 8000910:	ea94 0f0c 	teq	r4, ip
 8000914:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000918:	bf18      	it	ne
 800091a:	ea95 0f0c 	teqne	r5, ip
 800091e:	d00c      	beq.n	800093a <__aeabi_dmul+0x206>
 8000920:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000924:	bf18      	it	ne
 8000926:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092a:	d1d1      	bne.n	80008d0 <__aeabi_dmul+0x19c>
 800092c:	ea81 0103 	eor.w	r1, r1, r3
 8000930:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	bd70      	pop	{r4, r5, r6, pc}
 800093a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800093e:	bf06      	itte	eq
 8000940:	4610      	moveq	r0, r2
 8000942:	4619      	moveq	r1, r3
 8000944:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000948:	d019      	beq.n	800097e <__aeabi_dmul+0x24a>
 800094a:	ea94 0f0c 	teq	r4, ip
 800094e:	d102      	bne.n	8000956 <__aeabi_dmul+0x222>
 8000950:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000954:	d113      	bne.n	800097e <__aeabi_dmul+0x24a>
 8000956:	ea95 0f0c 	teq	r5, ip
 800095a:	d105      	bne.n	8000968 <__aeabi_dmul+0x234>
 800095c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000960:	bf1c      	itt	ne
 8000962:	4610      	movne	r0, r2
 8000964:	4619      	movne	r1, r3
 8000966:	d10a      	bne.n	800097e <__aeabi_dmul+0x24a>
 8000968:	ea81 0103 	eor.w	r1, r1, r3
 800096c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000970:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000974:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000978:	f04f 0000 	mov.w	r0, #0
 800097c:	bd70      	pop	{r4, r5, r6, pc}
 800097e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000982:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000986:	bd70      	pop	{r4, r5, r6, pc}

08000988 <__aeabi_ddiv>:
 8000988:	b570      	push	{r4, r5, r6, lr}
 800098a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800098e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000992:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000996:	bf1d      	ittte	ne
 8000998:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800099c:	ea94 0f0c 	teqne	r4, ip
 80009a0:	ea95 0f0c 	teqne	r5, ip
 80009a4:	f000 f8a7 	bleq	8000af6 <__aeabi_ddiv+0x16e>
 80009a8:	eba4 0405 	sub.w	r4, r4, r5
 80009ac:	ea81 0e03 	eor.w	lr, r1, r3
 80009b0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80009b8:	f000 8088 	beq.w	8000acc <__aeabi_ddiv+0x144>
 80009bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80009c0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80009c4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80009c8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009cc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009d0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009d4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009d8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009dc:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80009e0:	429d      	cmp	r5, r3
 80009e2:	bf08      	it	eq
 80009e4:	4296      	cmpeq	r6, r2
 80009e6:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80009ea:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80009ee:	d202      	bcs.n	80009f6 <__aeabi_ddiv+0x6e>
 80009f0:	085b      	lsrs	r3, r3, #1
 80009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009f6:	1ab6      	subs	r6, r6, r2
 80009f8:	eb65 0503 	sbc.w	r5, r5, r3
 80009fc:	085b      	lsrs	r3, r3, #1
 80009fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a02:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000a06:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000a0a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a12:	bf22      	ittt	cs
 8000a14:	1ab6      	subcs	r6, r6, r2
 8000a16:	4675      	movcs	r5, lr
 8000a18:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a1c:	085b      	lsrs	r3, r3, #1
 8000a1e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a22:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a26:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a2a:	bf22      	ittt	cs
 8000a2c:	1ab6      	subcs	r6, r6, r2
 8000a2e:	4675      	movcs	r5, lr
 8000a30:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a34:	085b      	lsrs	r3, r3, #1
 8000a36:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a3a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a3e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a42:	bf22      	ittt	cs
 8000a44:	1ab6      	subcs	r6, r6, r2
 8000a46:	4675      	movcs	r5, lr
 8000a48:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a4c:	085b      	lsrs	r3, r3, #1
 8000a4e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a52:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a56:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a5a:	bf22      	ittt	cs
 8000a5c:	1ab6      	subcs	r6, r6, r2
 8000a5e:	4675      	movcs	r5, lr
 8000a60:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a64:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a68:	d018      	beq.n	8000a9c <__aeabi_ddiv+0x114>
 8000a6a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a6e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a72:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a76:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a7a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a7e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a82:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a86:	d1c0      	bne.n	8000a0a <__aeabi_ddiv+0x82>
 8000a88:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a8c:	d10b      	bne.n	8000aa6 <__aeabi_ddiv+0x11e>
 8000a8e:	ea41 0100 	orr.w	r1, r1, r0
 8000a92:	f04f 0000 	mov.w	r0, #0
 8000a96:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a9a:	e7b6      	b.n	8000a0a <__aeabi_ddiv+0x82>
 8000a9c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000aa0:	bf04      	itt	eq
 8000aa2:	4301      	orreq	r1, r0
 8000aa4:	2000      	moveq	r0, #0
 8000aa6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000aaa:	bf88      	it	hi
 8000aac:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000ab0:	f63f aeaf 	bhi.w	8000812 <__aeabi_dmul+0xde>
 8000ab4:	ebb5 0c03 	subs.w	ip, r5, r3
 8000ab8:	bf04      	itt	eq
 8000aba:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000abe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000ac2:	f150 0000 	adcs.w	r0, r0, #0
 8000ac6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000aca:	bd70      	pop	{r4, r5, r6, pc}
 8000acc:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000ad0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000ad4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000ad8:	bfc2      	ittt	gt
 8000ada:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ade:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ae2:	bd70      	popgt	{r4, r5, r6, pc}
 8000ae4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae8:	f04f 0e00 	mov.w	lr, #0
 8000aec:	3c01      	subs	r4, #1
 8000aee:	e690      	b.n	8000812 <__aeabi_dmul+0xde>
 8000af0:	ea45 0e06 	orr.w	lr, r5, r6
 8000af4:	e68d      	b.n	8000812 <__aeabi_dmul+0xde>
 8000af6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000afa:	ea94 0f0c 	teq	r4, ip
 8000afe:	bf08      	it	eq
 8000b00:	ea95 0f0c 	teqeq	r5, ip
 8000b04:	f43f af3b 	beq.w	800097e <__aeabi_dmul+0x24a>
 8000b08:	ea94 0f0c 	teq	r4, ip
 8000b0c:	d10a      	bne.n	8000b24 <__aeabi_ddiv+0x19c>
 8000b0e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000b12:	f47f af34 	bne.w	800097e <__aeabi_dmul+0x24a>
 8000b16:	ea95 0f0c 	teq	r5, ip
 8000b1a:	f47f af25 	bne.w	8000968 <__aeabi_dmul+0x234>
 8000b1e:	4610      	mov	r0, r2
 8000b20:	4619      	mov	r1, r3
 8000b22:	e72c      	b.n	800097e <__aeabi_dmul+0x24a>
 8000b24:	ea95 0f0c 	teq	r5, ip
 8000b28:	d106      	bne.n	8000b38 <__aeabi_ddiv+0x1b0>
 8000b2a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b2e:	f43f aefd 	beq.w	800092c <__aeabi_dmul+0x1f8>
 8000b32:	4610      	mov	r0, r2
 8000b34:	4619      	mov	r1, r3
 8000b36:	e722      	b.n	800097e <__aeabi_dmul+0x24a>
 8000b38:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b3c:	bf18      	it	ne
 8000b3e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b42:	f47f aec5 	bne.w	80008d0 <__aeabi_dmul+0x19c>
 8000b46:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b4a:	f47f af0d 	bne.w	8000968 <__aeabi_dmul+0x234>
 8000b4e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b52:	f47f aeeb 	bne.w	800092c <__aeabi_dmul+0x1f8>
 8000b56:	e712      	b.n	800097e <__aeabi_dmul+0x24a>

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_frsub>:
 8000bf8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bfc:	e002      	b.n	8000c04 <__addsf3>
 8000bfe:	bf00      	nop

08000c00 <__aeabi_fsub>:
 8000c00:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c04 <__addsf3>:
 8000c04:	0042      	lsls	r2, r0, #1
 8000c06:	bf1f      	itttt	ne
 8000c08:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c0c:	ea92 0f03 	teqne	r2, r3
 8000c10:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c14:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c18:	d06a      	beq.n	8000cf0 <__addsf3+0xec>
 8000c1a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c1e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c22:	bfc1      	itttt	gt
 8000c24:	18d2      	addgt	r2, r2, r3
 8000c26:	4041      	eorgt	r1, r0
 8000c28:	4048      	eorgt	r0, r1
 8000c2a:	4041      	eorgt	r1, r0
 8000c2c:	bfb8      	it	lt
 8000c2e:	425b      	neglt	r3, r3
 8000c30:	2b19      	cmp	r3, #25
 8000c32:	bf88      	it	hi
 8000c34:	4770      	bxhi	lr
 8000c36:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c3a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c3e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c42:	bf18      	it	ne
 8000c44:	4240      	negne	r0, r0
 8000c46:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c4a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c4e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c52:	bf18      	it	ne
 8000c54:	4249      	negne	r1, r1
 8000c56:	ea92 0f03 	teq	r2, r3
 8000c5a:	d03f      	beq.n	8000cdc <__addsf3+0xd8>
 8000c5c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c60:	fa41 fc03 	asr.w	ip, r1, r3
 8000c64:	eb10 000c 	adds.w	r0, r0, ip
 8000c68:	f1c3 0320 	rsb	r3, r3, #32
 8000c6c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c70:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__addsf3+0x78>
 8000c76:	4249      	negs	r1, r1
 8000c78:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c7c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c80:	d313      	bcc.n	8000caa <__addsf3+0xa6>
 8000c82:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c86:	d306      	bcc.n	8000c96 <__addsf3+0x92>
 8000c88:	0840      	lsrs	r0, r0, #1
 8000c8a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c8e:	f102 0201 	add.w	r2, r2, #1
 8000c92:	2afe      	cmp	r2, #254	@ 0xfe
 8000c94:	d251      	bcs.n	8000d3a <__addsf3+0x136>
 8000c96:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c9e:	bf08      	it	eq
 8000ca0:	f020 0001 	biceq.w	r0, r0, #1
 8000ca4:	ea40 0003 	orr.w	r0, r0, r3
 8000ca8:	4770      	bx	lr
 8000caa:	0049      	lsls	r1, r1, #1
 8000cac:	eb40 0000 	adc.w	r0, r0, r0
 8000cb0:	3a01      	subs	r2, #1
 8000cb2:	bf28      	it	cs
 8000cb4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cb8:	d2ed      	bcs.n	8000c96 <__addsf3+0x92>
 8000cba:	fab0 fc80 	clz	ip, r0
 8000cbe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cc2:	ebb2 020c 	subs.w	r2, r2, ip
 8000cc6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cca:	bfaa      	itet	ge
 8000ccc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cd0:	4252      	neglt	r2, r2
 8000cd2:	4318      	orrge	r0, r3
 8000cd4:	bfbc      	itt	lt
 8000cd6:	40d0      	lsrlt	r0, r2
 8000cd8:	4318      	orrlt	r0, r3
 8000cda:	4770      	bx	lr
 8000cdc:	f092 0f00 	teq	r2, #0
 8000ce0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ce4:	bf06      	itte	eq
 8000ce6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cea:	3201      	addeq	r2, #1
 8000cec:	3b01      	subne	r3, #1
 8000cee:	e7b5      	b.n	8000c5c <__addsf3+0x58>
 8000cf0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cf4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf8:	bf18      	it	ne
 8000cfa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cfe:	d021      	beq.n	8000d44 <__addsf3+0x140>
 8000d00:	ea92 0f03 	teq	r2, r3
 8000d04:	d004      	beq.n	8000d10 <__addsf3+0x10c>
 8000d06:	f092 0f00 	teq	r2, #0
 8000d0a:	bf08      	it	eq
 8000d0c:	4608      	moveq	r0, r1
 8000d0e:	4770      	bx	lr
 8000d10:	ea90 0f01 	teq	r0, r1
 8000d14:	bf1c      	itt	ne
 8000d16:	2000      	movne	r0, #0
 8000d18:	4770      	bxne	lr
 8000d1a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d1e:	d104      	bne.n	8000d2a <__addsf3+0x126>
 8000d20:	0040      	lsls	r0, r0, #1
 8000d22:	bf28      	it	cs
 8000d24:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d28:	4770      	bx	lr
 8000d2a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d2e:	bf3c      	itt	cc
 8000d30:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d34:	4770      	bxcc	lr
 8000d36:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d3a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d3e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d42:	4770      	bx	lr
 8000d44:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d48:	bf16      	itet	ne
 8000d4a:	4608      	movne	r0, r1
 8000d4c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d50:	4601      	movne	r1, r0
 8000d52:	0242      	lsls	r2, r0, #9
 8000d54:	bf06      	itte	eq
 8000d56:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d5a:	ea90 0f01 	teqeq	r0, r1
 8000d5e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d62:	4770      	bx	lr

08000d64 <__aeabi_ui2f>:
 8000d64:	f04f 0300 	mov.w	r3, #0
 8000d68:	e004      	b.n	8000d74 <__aeabi_i2f+0x8>
 8000d6a:	bf00      	nop

08000d6c <__aeabi_i2f>:
 8000d6c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d70:	bf48      	it	mi
 8000d72:	4240      	negmi	r0, r0
 8000d74:	ea5f 0c00 	movs.w	ip, r0
 8000d78:	bf08      	it	eq
 8000d7a:	4770      	bxeq	lr
 8000d7c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d80:	4601      	mov	r1, r0
 8000d82:	f04f 0000 	mov.w	r0, #0
 8000d86:	e01c      	b.n	8000dc2 <__aeabi_l2f+0x2a>

08000d88 <__aeabi_ul2f>:
 8000d88:	ea50 0201 	orrs.w	r2, r0, r1
 8000d8c:	bf08      	it	eq
 8000d8e:	4770      	bxeq	lr
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	e00a      	b.n	8000dac <__aeabi_l2f+0x14>
 8000d96:	bf00      	nop

08000d98 <__aeabi_l2f>:
 8000d98:	ea50 0201 	orrs.w	r2, r0, r1
 8000d9c:	bf08      	it	eq
 8000d9e:	4770      	bxeq	lr
 8000da0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000da4:	d502      	bpl.n	8000dac <__aeabi_l2f+0x14>
 8000da6:	4240      	negs	r0, r0
 8000da8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dac:	ea5f 0c01 	movs.w	ip, r1
 8000db0:	bf02      	ittt	eq
 8000db2:	4684      	moveq	ip, r0
 8000db4:	4601      	moveq	r1, r0
 8000db6:	2000      	moveq	r0, #0
 8000db8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000dbc:	bf08      	it	eq
 8000dbe:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000dc2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000dc6:	fabc f28c 	clz	r2, ip
 8000dca:	3a08      	subs	r2, #8
 8000dcc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dd0:	db10      	blt.n	8000df4 <__aeabi_l2f+0x5c>
 8000dd2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ddc:	f1c2 0220 	rsb	r2, r2, #32
 8000de0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000de4:	fa20 f202 	lsr.w	r2, r0, r2
 8000de8:	eb43 0002 	adc.w	r0, r3, r2
 8000dec:	bf08      	it	eq
 8000dee:	f020 0001 	biceq.w	r0, r0, #1
 8000df2:	4770      	bx	lr
 8000df4:	f102 0220 	add.w	r2, r2, #32
 8000df8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dfc:	f1c2 0220 	rsb	r2, r2, #32
 8000e00:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e04:	fa21 f202 	lsr.w	r2, r1, r2
 8000e08:	eb43 0002 	adc.w	r0, r3, r2
 8000e0c:	bf08      	it	eq
 8000e0e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e12:	4770      	bx	lr

08000e14 <__aeabi_f2iz>:
 8000e14:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e18:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000e1c:	d30f      	bcc.n	8000e3e <__aeabi_f2iz+0x2a>
 8000e1e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000e22:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e26:	d90d      	bls.n	8000e44 <__aeabi_f2iz+0x30>
 8000e28:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e2c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000e30:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000e34:	fa23 f002 	lsr.w	r0, r3, r2
 8000e38:	bf18      	it	ne
 8000e3a:	4240      	negne	r0, r0
 8000e3c:	4770      	bx	lr
 8000e3e:	f04f 0000 	mov.w	r0, #0
 8000e42:	4770      	bx	lr
 8000e44:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000e48:	d101      	bne.n	8000e4e <__aeabi_f2iz+0x3a>
 8000e4a:	0242      	lsls	r2, r0, #9
 8000e4c:	d105      	bne.n	8000e5a <__aeabi_f2iz+0x46>
 8000e4e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000e52:	bf08      	it	eq
 8000e54:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000e58:	4770      	bx	lr
 8000e5a:	f04f 0000 	mov.w	r0, #0
 8000e5e:	4770      	bx	lr

08000e60 <__aeabi_f2uiz>:
 8000e60:	0042      	lsls	r2, r0, #1
 8000e62:	d20e      	bcs.n	8000e82 <__aeabi_f2uiz+0x22>
 8000e64:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000e68:	d30b      	bcc.n	8000e82 <__aeabi_f2uiz+0x22>
 8000e6a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000e6e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e72:	d409      	bmi.n	8000e88 <__aeabi_f2uiz+0x28>
 8000e74:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e78:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000e7c:	fa23 f002 	lsr.w	r0, r3, r2
 8000e80:	4770      	bx	lr
 8000e82:	f04f 0000 	mov.w	r0, #0
 8000e86:	4770      	bx	lr
 8000e88:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000e8c:	d101      	bne.n	8000e92 <__aeabi_f2uiz+0x32>
 8000e8e:	0242      	lsls	r2, r0, #9
 8000e90:	d102      	bne.n	8000e98 <__aeabi_f2uiz+0x38>
 8000e92:	f04f 30ff 	mov.w	r0, #4294967295
 8000e96:	4770      	bx	lr
 8000e98:	f04f 0000 	mov.w	r0, #0
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_uldivmod>:
 8000ea0:	b953      	cbnz	r3, 8000eb8 <__aeabi_uldivmod+0x18>
 8000ea2:	b94a      	cbnz	r2, 8000eb8 <__aeabi_uldivmod+0x18>
 8000ea4:	2900      	cmp	r1, #0
 8000ea6:	bf08      	it	eq
 8000ea8:	2800      	cmpeq	r0, #0
 8000eaa:	bf1c      	itt	ne
 8000eac:	f04f 31ff 	movne.w	r1, #4294967295
 8000eb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000eb4:	f000 b98c 	b.w	80011d0 <__aeabi_idiv0>
 8000eb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ebc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ec0:	f000 f806 	bl	8000ed0 <__udivmoddi4>
 8000ec4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ec8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ecc:	b004      	add	sp, #16
 8000ece:	4770      	bx	lr

08000ed0 <__udivmoddi4>:
 8000ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ed4:	9d08      	ldr	r5, [sp, #32]
 8000ed6:	468e      	mov	lr, r1
 8000ed8:	4604      	mov	r4, r0
 8000eda:	4688      	mov	r8, r1
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d14a      	bne.n	8000f76 <__udivmoddi4+0xa6>
 8000ee0:	428a      	cmp	r2, r1
 8000ee2:	4617      	mov	r7, r2
 8000ee4:	d962      	bls.n	8000fac <__udivmoddi4+0xdc>
 8000ee6:	fab2 f682 	clz	r6, r2
 8000eea:	b14e      	cbz	r6, 8000f00 <__udivmoddi4+0x30>
 8000eec:	f1c6 0320 	rsb	r3, r6, #32
 8000ef0:	fa01 f806 	lsl.w	r8, r1, r6
 8000ef4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ef8:	40b7      	lsls	r7, r6
 8000efa:	ea43 0808 	orr.w	r8, r3, r8
 8000efe:	40b4      	lsls	r4, r6
 8000f00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f04:	fbb8 f1fe 	udiv	r1, r8, lr
 8000f08:	fa1f fc87 	uxth.w	ip, r7
 8000f0c:	fb0e 8811 	mls	r8, lr, r1, r8
 8000f10:	fb01 f20c 	mul.w	r2, r1, ip
 8000f14:	0c23      	lsrs	r3, r4, #16
 8000f16:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d909      	bls.n	8000f32 <__udivmoddi4+0x62>
 8000f1e:	18fb      	adds	r3, r7, r3
 8000f20:	f101 30ff 	add.w	r0, r1, #4294967295
 8000f24:	f080 80eb 	bcs.w	80010fe <__udivmoddi4+0x22e>
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	f240 80e8 	bls.w	80010fe <__udivmoddi4+0x22e>
 8000f2e:	3902      	subs	r1, #2
 8000f30:	443b      	add	r3, r7
 8000f32:	1a9a      	subs	r2, r3, r2
 8000f34:	fbb2 f0fe 	udiv	r0, r2, lr
 8000f38:	fb0e 2210 	mls	r2, lr, r0, r2
 8000f3c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000f40:	b2a3      	uxth	r3, r4
 8000f42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000f46:	459c      	cmp	ip, r3
 8000f48:	d909      	bls.n	8000f5e <__udivmoddi4+0x8e>
 8000f4a:	18fb      	adds	r3, r7, r3
 8000f4c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f50:	f080 80d7 	bcs.w	8001102 <__udivmoddi4+0x232>
 8000f54:	459c      	cmp	ip, r3
 8000f56:	f240 80d4 	bls.w	8001102 <__udivmoddi4+0x232>
 8000f5a:	443b      	add	r3, r7
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000f62:	2100      	movs	r1, #0
 8000f64:	eba3 030c 	sub.w	r3, r3, ip
 8000f68:	b11d      	cbz	r5, 8000f72 <__udivmoddi4+0xa2>
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	40f3      	lsrs	r3, r6
 8000f6e:	e9c5 3200 	strd	r3, r2, [r5]
 8000f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f76:	428b      	cmp	r3, r1
 8000f78:	d905      	bls.n	8000f86 <__udivmoddi4+0xb6>
 8000f7a:	b10d      	cbz	r5, 8000f80 <__udivmoddi4+0xb0>
 8000f7c:	e9c5 0100 	strd	r0, r1, [r5]
 8000f80:	2100      	movs	r1, #0
 8000f82:	4608      	mov	r0, r1
 8000f84:	e7f5      	b.n	8000f72 <__udivmoddi4+0xa2>
 8000f86:	fab3 f183 	clz	r1, r3
 8000f8a:	2900      	cmp	r1, #0
 8000f8c:	d146      	bne.n	800101c <__udivmoddi4+0x14c>
 8000f8e:	4573      	cmp	r3, lr
 8000f90:	d302      	bcc.n	8000f98 <__udivmoddi4+0xc8>
 8000f92:	4282      	cmp	r2, r0
 8000f94:	f200 8108 	bhi.w	80011a8 <__udivmoddi4+0x2d8>
 8000f98:	1a84      	subs	r4, r0, r2
 8000f9a:	eb6e 0203 	sbc.w	r2, lr, r3
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	4690      	mov	r8, r2
 8000fa2:	2d00      	cmp	r5, #0
 8000fa4:	d0e5      	beq.n	8000f72 <__udivmoddi4+0xa2>
 8000fa6:	e9c5 4800 	strd	r4, r8, [r5]
 8000faa:	e7e2      	b.n	8000f72 <__udivmoddi4+0xa2>
 8000fac:	2a00      	cmp	r2, #0
 8000fae:	f000 8091 	beq.w	80010d4 <__udivmoddi4+0x204>
 8000fb2:	fab2 f682 	clz	r6, r2
 8000fb6:	2e00      	cmp	r6, #0
 8000fb8:	f040 80a5 	bne.w	8001106 <__udivmoddi4+0x236>
 8000fbc:	1a8a      	subs	r2, r1, r2
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	0c03      	lsrs	r3, r0, #16
 8000fc2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fc6:	b280      	uxth	r0, r0
 8000fc8:	b2bc      	uxth	r4, r7
 8000fca:	fbb2 fcfe 	udiv	ip, r2, lr
 8000fce:	fb0e 221c 	mls	r2, lr, ip, r2
 8000fd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000fd6:	fb04 f20c 	mul.w	r2, r4, ip
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d907      	bls.n	8000fee <__udivmoddi4+0x11e>
 8000fde:	18fb      	adds	r3, r7, r3
 8000fe0:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000fe4:	d202      	bcs.n	8000fec <__udivmoddi4+0x11c>
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	f200 80e3 	bhi.w	80011b2 <__udivmoddi4+0x2e2>
 8000fec:	46c4      	mov	ip, r8
 8000fee:	1a9b      	subs	r3, r3, r2
 8000ff0:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ff4:	fb0e 3312 	mls	r3, lr, r2, r3
 8000ff8:	fb02 f404 	mul.w	r4, r2, r4
 8000ffc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8001000:	429c      	cmp	r4, r3
 8001002:	d907      	bls.n	8001014 <__udivmoddi4+0x144>
 8001004:	18fb      	adds	r3, r7, r3
 8001006:	f102 30ff 	add.w	r0, r2, #4294967295
 800100a:	d202      	bcs.n	8001012 <__udivmoddi4+0x142>
 800100c:	429c      	cmp	r4, r3
 800100e:	f200 80cd 	bhi.w	80011ac <__udivmoddi4+0x2dc>
 8001012:	4602      	mov	r2, r0
 8001014:	1b1b      	subs	r3, r3, r4
 8001016:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800101a:	e7a5      	b.n	8000f68 <__udivmoddi4+0x98>
 800101c:	f1c1 0620 	rsb	r6, r1, #32
 8001020:	408b      	lsls	r3, r1
 8001022:	fa22 f706 	lsr.w	r7, r2, r6
 8001026:	431f      	orrs	r7, r3
 8001028:	fa2e fa06 	lsr.w	sl, lr, r6
 800102c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8001030:	fbba f8f9 	udiv	r8, sl, r9
 8001034:	fa0e fe01 	lsl.w	lr, lr, r1
 8001038:	fa20 f306 	lsr.w	r3, r0, r6
 800103c:	fb09 aa18 	mls	sl, r9, r8, sl
 8001040:	fa1f fc87 	uxth.w	ip, r7
 8001044:	ea43 030e 	orr.w	r3, r3, lr
 8001048:	fa00 fe01 	lsl.w	lr, r0, r1
 800104c:	fb08 f00c 	mul.w	r0, r8, ip
 8001050:	0c1c      	lsrs	r4, r3, #16
 8001052:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001056:	42a0      	cmp	r0, r4
 8001058:	fa02 f201 	lsl.w	r2, r2, r1
 800105c:	d90a      	bls.n	8001074 <__udivmoddi4+0x1a4>
 800105e:	193c      	adds	r4, r7, r4
 8001060:	f108 3aff 	add.w	sl, r8, #4294967295
 8001064:	f080 809e 	bcs.w	80011a4 <__udivmoddi4+0x2d4>
 8001068:	42a0      	cmp	r0, r4
 800106a:	f240 809b 	bls.w	80011a4 <__udivmoddi4+0x2d4>
 800106e:	f1a8 0802 	sub.w	r8, r8, #2
 8001072:	443c      	add	r4, r7
 8001074:	1a24      	subs	r4, r4, r0
 8001076:	b298      	uxth	r0, r3
 8001078:	fbb4 f3f9 	udiv	r3, r4, r9
 800107c:	fb09 4413 	mls	r4, r9, r3, r4
 8001080:	fb03 fc0c 	mul.w	ip, r3, ip
 8001084:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8001088:	45a4      	cmp	ip, r4
 800108a:	d909      	bls.n	80010a0 <__udivmoddi4+0x1d0>
 800108c:	193c      	adds	r4, r7, r4
 800108e:	f103 30ff 	add.w	r0, r3, #4294967295
 8001092:	f080 8085 	bcs.w	80011a0 <__udivmoddi4+0x2d0>
 8001096:	45a4      	cmp	ip, r4
 8001098:	f240 8082 	bls.w	80011a0 <__udivmoddi4+0x2d0>
 800109c:	3b02      	subs	r3, #2
 800109e:	443c      	add	r4, r7
 80010a0:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80010a4:	eba4 040c 	sub.w	r4, r4, ip
 80010a8:	fba0 8c02 	umull	r8, ip, r0, r2
 80010ac:	4564      	cmp	r4, ip
 80010ae:	4643      	mov	r3, r8
 80010b0:	46e1      	mov	r9, ip
 80010b2:	d364      	bcc.n	800117e <__udivmoddi4+0x2ae>
 80010b4:	d061      	beq.n	800117a <__udivmoddi4+0x2aa>
 80010b6:	b15d      	cbz	r5, 80010d0 <__udivmoddi4+0x200>
 80010b8:	ebbe 0203 	subs.w	r2, lr, r3
 80010bc:	eb64 0409 	sbc.w	r4, r4, r9
 80010c0:	fa04 f606 	lsl.w	r6, r4, r6
 80010c4:	fa22 f301 	lsr.w	r3, r2, r1
 80010c8:	431e      	orrs	r6, r3
 80010ca:	40cc      	lsrs	r4, r1
 80010cc:	e9c5 6400 	strd	r6, r4, [r5]
 80010d0:	2100      	movs	r1, #0
 80010d2:	e74e      	b.n	8000f72 <__udivmoddi4+0xa2>
 80010d4:	fbb1 fcf2 	udiv	ip, r1, r2
 80010d8:	0c01      	lsrs	r1, r0, #16
 80010da:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80010de:	b280      	uxth	r0, r0
 80010e0:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80010e4:	463b      	mov	r3, r7
 80010e6:	fbb1 f1f7 	udiv	r1, r1, r7
 80010ea:	4638      	mov	r0, r7
 80010ec:	463c      	mov	r4, r7
 80010ee:	46b8      	mov	r8, r7
 80010f0:	46be      	mov	lr, r7
 80010f2:	2620      	movs	r6, #32
 80010f4:	eba2 0208 	sub.w	r2, r2, r8
 80010f8:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80010fc:	e765      	b.n	8000fca <__udivmoddi4+0xfa>
 80010fe:	4601      	mov	r1, r0
 8001100:	e717      	b.n	8000f32 <__udivmoddi4+0x62>
 8001102:	4610      	mov	r0, r2
 8001104:	e72b      	b.n	8000f5e <__udivmoddi4+0x8e>
 8001106:	f1c6 0120 	rsb	r1, r6, #32
 800110a:	fa2e fc01 	lsr.w	ip, lr, r1
 800110e:	40b7      	lsls	r7, r6
 8001110:	fa0e fe06 	lsl.w	lr, lr, r6
 8001114:	fa20 f101 	lsr.w	r1, r0, r1
 8001118:	ea41 010e 	orr.w	r1, r1, lr
 800111c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001120:	fbbc f8fe 	udiv	r8, ip, lr
 8001124:	b2bc      	uxth	r4, r7
 8001126:	fb0e cc18 	mls	ip, lr, r8, ip
 800112a:	fb08 f904 	mul.w	r9, r8, r4
 800112e:	0c0a      	lsrs	r2, r1, #16
 8001130:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8001134:	40b0      	lsls	r0, r6
 8001136:	4591      	cmp	r9, r2
 8001138:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800113c:	b280      	uxth	r0, r0
 800113e:	d93e      	bls.n	80011be <__udivmoddi4+0x2ee>
 8001140:	18ba      	adds	r2, r7, r2
 8001142:	f108 3cff 	add.w	ip, r8, #4294967295
 8001146:	d201      	bcs.n	800114c <__udivmoddi4+0x27c>
 8001148:	4591      	cmp	r9, r2
 800114a:	d81f      	bhi.n	800118c <__udivmoddi4+0x2bc>
 800114c:	eba2 0209 	sub.w	r2, r2, r9
 8001150:	fbb2 f9fe 	udiv	r9, r2, lr
 8001154:	fb09 f804 	mul.w	r8, r9, r4
 8001158:	fb0e 2a19 	mls	sl, lr, r9, r2
 800115c:	b28a      	uxth	r2, r1
 800115e:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8001162:	4542      	cmp	r2, r8
 8001164:	d229      	bcs.n	80011ba <__udivmoddi4+0x2ea>
 8001166:	18ba      	adds	r2, r7, r2
 8001168:	f109 31ff 	add.w	r1, r9, #4294967295
 800116c:	d2c2      	bcs.n	80010f4 <__udivmoddi4+0x224>
 800116e:	4542      	cmp	r2, r8
 8001170:	d2c0      	bcs.n	80010f4 <__udivmoddi4+0x224>
 8001172:	f1a9 0102 	sub.w	r1, r9, #2
 8001176:	443a      	add	r2, r7
 8001178:	e7bc      	b.n	80010f4 <__udivmoddi4+0x224>
 800117a:	45c6      	cmp	lr, r8
 800117c:	d29b      	bcs.n	80010b6 <__udivmoddi4+0x1e6>
 800117e:	ebb8 0302 	subs.w	r3, r8, r2
 8001182:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001186:	3801      	subs	r0, #1
 8001188:	46e1      	mov	r9, ip
 800118a:	e794      	b.n	80010b6 <__udivmoddi4+0x1e6>
 800118c:	eba7 0909 	sub.w	r9, r7, r9
 8001190:	444a      	add	r2, r9
 8001192:	fbb2 f9fe 	udiv	r9, r2, lr
 8001196:	f1a8 0c02 	sub.w	ip, r8, #2
 800119a:	fb09 f804 	mul.w	r8, r9, r4
 800119e:	e7db      	b.n	8001158 <__udivmoddi4+0x288>
 80011a0:	4603      	mov	r3, r0
 80011a2:	e77d      	b.n	80010a0 <__udivmoddi4+0x1d0>
 80011a4:	46d0      	mov	r8, sl
 80011a6:	e765      	b.n	8001074 <__udivmoddi4+0x1a4>
 80011a8:	4608      	mov	r0, r1
 80011aa:	e6fa      	b.n	8000fa2 <__udivmoddi4+0xd2>
 80011ac:	443b      	add	r3, r7
 80011ae:	3a02      	subs	r2, #2
 80011b0:	e730      	b.n	8001014 <__udivmoddi4+0x144>
 80011b2:	f1ac 0c02 	sub.w	ip, ip, #2
 80011b6:	443b      	add	r3, r7
 80011b8:	e719      	b.n	8000fee <__udivmoddi4+0x11e>
 80011ba:	4649      	mov	r1, r9
 80011bc:	e79a      	b.n	80010f4 <__udivmoddi4+0x224>
 80011be:	eba2 0209 	sub.w	r2, r2, r9
 80011c2:	fbb2 f9fe 	udiv	r9, r2, lr
 80011c6:	46c4      	mov	ip, r8
 80011c8:	fb09 f804 	mul.w	r8, r9, r4
 80011cc:	e7c4      	b.n	8001158 <__udivmoddi4+0x288>
 80011ce:	bf00      	nop

080011d0 <__aeabi_idiv0>:
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop

080011d4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011e4:	4b2e      	ldr	r3, [pc, #184]	@ (80012a0 <MX_ADC1_Init+0xcc>)
 80011e6:	4a2f      	ldr	r2, [pc, #188]	@ (80012a4 <MX_ADC1_Init+0xd0>)
 80011e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011ea:	4b2d      	ldr	r3, [pc, #180]	@ (80012a0 <MX_ADC1_Init+0xcc>)
 80011ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011f2:	4b2b      	ldr	r3, [pc, #172]	@ (80012a0 <MX_ADC1_Init+0xcc>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011f8:	4b29      	ldr	r3, [pc, #164]	@ (80012a0 <MX_ADC1_Init+0xcc>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011fe:	4b28      	ldr	r3, [pc, #160]	@ (80012a0 <MX_ADC1_Init+0xcc>)
 8001200:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001204:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001206:	4b26      	ldr	r3, [pc, #152]	@ (80012a0 <MX_ADC1_Init+0xcc>)
 8001208:	2200      	movs	r2, #0
 800120a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 800120c:	4b24      	ldr	r3, [pc, #144]	@ (80012a0 <MX_ADC1_Init+0xcc>)
 800120e:	2204      	movs	r2, #4
 8001210:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001212:	4823      	ldr	r0, [pc, #140]	@ (80012a0 <MX_ADC1_Init+0xcc>)
 8001214:	f007 f984 	bl	8008520 <HAL_ADC_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800121e:	f000 fbcb 	bl	80019b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001222:	230a      	movs	r3, #10
 8001224:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001226:	2301      	movs	r3, #1
 8001228:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 800122a:	2306      	movs	r3, #6
 800122c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	4619      	mov	r1, r3
 8001232:	481b      	ldr	r0, [pc, #108]	@ (80012a0 <MX_ADC1_Init+0xcc>)
 8001234:	f007 fc16 	bl	8008a64 <HAL_ADC_ConfigChannel>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800123e:	f000 fbbb 	bl	80019b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001242:	230b      	movs	r3, #11
 8001244:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001246:	2302      	movs	r3, #2
 8001248:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	4619      	mov	r1, r3
 800124e:	4814      	ldr	r0, [pc, #80]	@ (80012a0 <MX_ADC1_Init+0xcc>)
 8001250:	f007 fc08 	bl	8008a64 <HAL_ADC_ConfigChannel>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800125a:	f000 fbad 	bl	80019b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800125e:	230c      	movs	r3, #12
 8001260:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001262:	2303      	movs	r3, #3
 8001264:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	4619      	mov	r1, r3
 800126a:	480d      	ldr	r0, [pc, #52]	@ (80012a0 <MX_ADC1_Init+0xcc>)
 800126c:	f007 fbfa 	bl	8008a64 <HAL_ADC_ConfigChannel>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001276:	f000 fb9f 	bl	80019b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800127a:	230d      	movs	r3, #13
 800127c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800127e:	2304      	movs	r3, #4
 8001280:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	4619      	mov	r1, r3
 8001286:	4806      	ldr	r0, [pc, #24]	@ (80012a0 <MX_ADC1_Init+0xcc>)
 8001288:	f007 fbec 	bl	8008a64 <HAL_ADC_ConfigChannel>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001292:	f000 fb91 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001296:	bf00      	nop
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000694 	.word	0x20000694
 80012a4:	40012400 	.word	0x40012400

080012a8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0310 	add.w	r3, r7, #16
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a2c      	ldr	r2, [pc, #176]	@ (8001374 <HAL_ADC_MspInit+0xcc>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d151      	bne.n	800136c <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001378 <HAL_ADC_MspInit+0xd0>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a2a      	ldr	r2, [pc, #168]	@ (8001378 <HAL_ADC_MspInit+0xd0>)
 80012ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b28      	ldr	r3, [pc, #160]	@ (8001378 <HAL_ADC_MspInit+0xd0>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e0:	4b25      	ldr	r3, [pc, #148]	@ (8001378 <HAL_ADC_MspInit+0xd0>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	4a24      	ldr	r2, [pc, #144]	@ (8001378 <HAL_ADC_MspInit+0xd0>)
 80012e6:	f043 0310 	orr.w	r3, r3, #16
 80012ea:	6193      	str	r3, [r2, #24]
 80012ec:	4b22      	ldr	r3, [pc, #136]	@ (8001378 <HAL_ADC_MspInit+0xd0>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	f003 0310 	and.w	r3, r3, #16
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80012f8:	230f      	movs	r3, #15
 80012fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012fc:	2303      	movs	r3, #3
 80012fe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001300:	f107 0310 	add.w	r3, r7, #16
 8001304:	4619      	mov	r1, r3
 8001306:	481d      	ldr	r0, [pc, #116]	@ (800137c <HAL_ADC_MspInit+0xd4>)
 8001308:	f008 fca8 	bl	8009c5c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800130c:	4b1c      	ldr	r3, [pc, #112]	@ (8001380 <HAL_ADC_MspInit+0xd8>)
 800130e:	4a1d      	ldr	r2, [pc, #116]	@ (8001384 <HAL_ADC_MspInit+0xdc>)
 8001310:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001312:	4b1b      	ldr	r3, [pc, #108]	@ (8001380 <HAL_ADC_MspInit+0xd8>)
 8001314:	2200      	movs	r2, #0
 8001316:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001318:	4b19      	ldr	r3, [pc, #100]	@ (8001380 <HAL_ADC_MspInit+0xd8>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800131e:	4b18      	ldr	r3, [pc, #96]	@ (8001380 <HAL_ADC_MspInit+0xd8>)
 8001320:	2280      	movs	r2, #128	@ 0x80
 8001322:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001324:	4b16      	ldr	r3, [pc, #88]	@ (8001380 <HAL_ADC_MspInit+0xd8>)
 8001326:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800132a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800132c:	4b14      	ldr	r3, [pc, #80]	@ (8001380 <HAL_ADC_MspInit+0xd8>)
 800132e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001332:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001334:	4b12      	ldr	r3, [pc, #72]	@ (8001380 <HAL_ADC_MspInit+0xd8>)
 8001336:	2200      	movs	r2, #0
 8001338:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800133a:	4b11      	ldr	r3, [pc, #68]	@ (8001380 <HAL_ADC_MspInit+0xd8>)
 800133c:	2200      	movs	r2, #0
 800133e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001340:	480f      	ldr	r0, [pc, #60]	@ (8001380 <HAL_ADC_MspInit+0xd8>)
 8001342:	f007 ff6d 	bl	8009220 <HAL_DMA_Init>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800134c:	f000 fb34 	bl	80019b8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a0b      	ldr	r2, [pc, #44]	@ (8001380 <HAL_ADC_MspInit+0xd8>)
 8001354:	621a      	str	r2, [r3, #32]
 8001356:	4a0a      	ldr	r2, [pc, #40]	@ (8001380 <HAL_ADC_MspInit+0xd8>)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 800135c:	2200      	movs	r2, #0
 800135e:	2105      	movs	r1, #5
 8001360:	2012      	movs	r0, #18
 8001362:	f007 ff20 	bl	80091a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001366:	2012      	movs	r0, #18
 8001368:	f007 ff39 	bl	80091de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800136c:	bf00      	nop
 800136e:	3720      	adds	r7, #32
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40012400 	.word	0x40012400
 8001378:	40021000 	.word	0x40021000
 800137c:	40011000 	.word	0x40011000
 8001380:	200006c4 	.word	0x200006c4
 8001384:	40020008 	.word	0x40020008

08001388 <adc_initial_calibration>:

/* USER CODE BEGIN 1 */
volatile   uint16_t   aADCxConvertedData[ADC_CONVERTED_DATA_BUFFER_SIZE]; /* ADC group regular conversion data (array of data) */

bool adc_initial_calibration(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	607b      	str	r3, [r7, #4]

	for (i = 0; i < ADC_CONVERTED_DATA_BUFFER_SIZE; i++) {
 8001392:	2300      	movs	r3, #0
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	e008      	b.n	80013aa <adc_initial_calibration+0x22>
		aADCxConvertedData[i] = VAR_CONVERTED_DATA_INIT_VALUE;
 8001398:	4a0e      	ldr	r2, [pc, #56]	@ (80013d4 <adc_initial_calibration+0x4c>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i = 0; i < ADC_CONVERTED_DATA_BUFFER_SIZE; i++) {
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3301      	adds	r3, #1
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b03      	cmp	r3, #3
 80013ae:	d9f3      	bls.n	8001398 <adc_initial_calibration+0x10>
	}

	assert (HAL_ADCEx_Calibration_Start(&hadc1) == HAL_OK);
 80013b0:	4809      	ldr	r0, [pc, #36]	@ (80013d8 <adc_initial_calibration+0x50>)
 80013b2:	f007 fd51 	bl	8008e58 <HAL_ADCEx_Calibration_Start>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d005      	beq.n	80013c8 <adc_initial_calibration+0x40>
 80013bc:	4b07      	ldr	r3, [pc, #28]	@ (80013dc <adc_initial_calibration+0x54>)
 80013be:	4a08      	ldr	r2, [pc, #32]	@ (80013e0 <adc_initial_calibration+0x58>)
 80013c0:	21be      	movs	r1, #190	@ 0xbe
 80013c2:	4808      	ldr	r0, [pc, #32]	@ (80013e4 <adc_initial_calibration+0x5c>)
 80013c4:	f012 fda8 	bl	8013f18 <__assert_func>

	return true;
 80013c8:	2301      	movs	r3, #1
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000708 	.word	0x20000708
 80013d8:	20000694 	.word	0x20000694
 80013dc:	08015660 	.word	0x08015660
 80013e0:	080199b0 	.word	0x080199b0
 80013e4:	08015690 	.word	0x08015690

080013e8 <HAL_ADC_ConvCpltCallback>:


#define VDDA_APPLI                       ((uint16_t)3300)

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	/* Computation of ADC conversions raw data to physical values           */
	/* using LL ADC driver helper macro.                                    */
	/* Note: ADC results are transferred into array "aADCxConvertedData"    */
	/*       in the order of their rank in ADC sequencer.                   */
	// 아래 나머지 변환에서 측정된 VREF 를 고정된 VDDA_APPLI 값대신 쓰기 위해서 가장 먼저 변환함..
	scw_infoObj.scw_adc_value.AD1 			= __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI, aADCxConvertedData[0], LL_ADC_RESOLUTION_12B);
 80013f0:	4b2a      	ldr	r3, [pc, #168]	@ (800149c <HAL_ADC_ConvCpltCallback+0xb4>)
 80013f2:	881b      	ldrh	r3, [r3, #0]
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	461a      	mov	r2, r3
 80013f8:	f640 43e4 	movw	r3, #3300	@ 0xce4
 80013fc:	fb02 f303 	mul.w	r3, r2, r3
 8001400:	461a      	mov	r2, r3
 8001402:	4b27      	ldr	r3, [pc, #156]	@ (80014a0 <HAL_ADC_ConvCpltCallback+0xb8>)
 8001404:	fba3 1302 	umull	r1, r3, r3, r2
 8001408:	1ad2      	subs	r2, r2, r3
 800140a:	0852      	lsrs	r2, r2, #1
 800140c:	4413      	add	r3, r2
 800140e:	0adb      	lsrs	r3, r3, #11
 8001410:	b29a      	uxth	r2, r3
 8001412:	4b24      	ldr	r3, [pc, #144]	@ (80014a4 <HAL_ADC_ConvCpltCallback+0xbc>)
 8001414:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
	scw_infoObj.scw_adc_value.AD2 			= __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI, aADCxConvertedData[1], LL_ADC_RESOLUTION_12B);
 8001418:	4b20      	ldr	r3, [pc, #128]	@ (800149c <HAL_ADC_ConvCpltCallback+0xb4>)
 800141a:	885b      	ldrh	r3, [r3, #2]
 800141c:	b29b      	uxth	r3, r3
 800141e:	461a      	mov	r2, r3
 8001420:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8001424:	fb02 f303 	mul.w	r3, r2, r3
 8001428:	461a      	mov	r2, r3
 800142a:	4b1d      	ldr	r3, [pc, #116]	@ (80014a0 <HAL_ADC_ConvCpltCallback+0xb8>)
 800142c:	fba3 1302 	umull	r1, r3, r3, r2
 8001430:	1ad2      	subs	r2, r2, r3
 8001432:	0852      	lsrs	r2, r2, #1
 8001434:	4413      	add	r3, r2
 8001436:	0adb      	lsrs	r3, r3, #11
 8001438:	b29a      	uxth	r2, r3
 800143a:	4b1a      	ldr	r3, [pc, #104]	@ (80014a4 <HAL_ADC_ConvCpltCallback+0xbc>)
 800143c:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
	scw_infoObj.scw_adc_value.AD3 			= __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI, aADCxConvertedData[2], LL_ADC_RESOLUTION_12B);
 8001440:	4b16      	ldr	r3, [pc, #88]	@ (800149c <HAL_ADC_ConvCpltCallback+0xb4>)
 8001442:	889b      	ldrh	r3, [r3, #4]
 8001444:	b29b      	uxth	r3, r3
 8001446:	461a      	mov	r2, r3
 8001448:	f640 43e4 	movw	r3, #3300	@ 0xce4
 800144c:	fb02 f303 	mul.w	r3, r2, r3
 8001450:	461a      	mov	r2, r3
 8001452:	4b13      	ldr	r3, [pc, #76]	@ (80014a0 <HAL_ADC_ConvCpltCallback+0xb8>)
 8001454:	fba3 1302 	umull	r1, r3, r3, r2
 8001458:	1ad2      	subs	r2, r2, r3
 800145a:	0852      	lsrs	r2, r2, #1
 800145c:	4413      	add	r3, r2
 800145e:	0adb      	lsrs	r3, r3, #11
 8001460:	b29a      	uxth	r2, r3
 8001462:	4b10      	ldr	r3, [pc, #64]	@ (80014a4 <HAL_ADC_ConvCpltCallback+0xbc>)
 8001464:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
	scw_infoObj.scw_adc_value.AD4 			= __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI, aADCxConvertedData[3], LL_ADC_RESOLUTION_12B);
 8001468:	4b0c      	ldr	r3, [pc, #48]	@ (800149c <HAL_ADC_ConvCpltCallback+0xb4>)
 800146a:	88db      	ldrh	r3, [r3, #6]
 800146c:	b29b      	uxth	r3, r3
 800146e:	461a      	mov	r2, r3
 8001470:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8001474:	fb02 f303 	mul.w	r3, r2, r3
 8001478:	461a      	mov	r2, r3
 800147a:	4b09      	ldr	r3, [pc, #36]	@ (80014a0 <HAL_ADC_ConvCpltCallback+0xb8>)
 800147c:	fba3 1302 	umull	r1, r3, r3, r2
 8001480:	1ad2      	subs	r2, r2, r3
 8001482:	0852      	lsrs	r2, r2, #1
 8001484:	4413      	add	r3, r2
 8001486:	0adb      	lsrs	r3, r3, #11
 8001488:	b29a      	uxth	r2, r3
 800148a:	4b06      	ldr	r3, [pc, #24]	@ (80014a4 <HAL_ADC_ConvCpltCallback+0xbc>)
 800148c:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	20000708 	.word	0x20000708
 80014a0:	00100101 	.word	0x00100101
 80014a4:	20000b28 	.word	0x20000b28

080014a8 <app_entry>:
		.stack_size = 	CFG_SUJI_THREAD_STACK_SIZE,
		.priority = 	CFG_SUJI_THREAD_PRIORITY
};

bool app_entry ()
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
	Thread_INIT_Handler = osThreadNew(scw_thread_init, NULL, &SCW_INIT_Thread_attr);
 80014ac:	4a25      	ldr	r2, [pc, #148]	@ (8001544 <app_entry+0x9c>)
 80014ae:	2100      	movs	r1, #0
 80014b0:	4825      	ldr	r0, [pc, #148]	@ (8001548 <app_entry+0xa0>)
 80014b2:	f00e fbab 	bl	800fc0c <osThreadNew>
 80014b6:	4603      	mov	r3, r0
 80014b8:	4a24      	ldr	r2, [pc, #144]	@ (800154c <app_entry+0xa4>)
 80014ba:	6013      	str	r3, [r2, #0]
	assert (Thread_INIT_Handler != NULL);
 80014bc:	4b23      	ldr	r3, [pc, #140]	@ (800154c <app_entry+0xa4>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d105      	bne.n	80014d0 <app_entry+0x28>
 80014c4:	4b22      	ldr	r3, [pc, #136]	@ (8001550 <app_entry+0xa8>)
 80014c6:	4a23      	ldr	r2, [pc, #140]	@ (8001554 <app_entry+0xac>)
 80014c8:	2188      	movs	r1, #136	@ 0x88
 80014ca:	4823      	ldr	r0, [pc, #140]	@ (8001558 <app_entry+0xb0>)
 80014cc:	f012 fd24 	bl	8013f18 <__assert_func>

	Thread_CLI_Handler = osThreadNew(scw_thread_cli, NULL, &SCW_Cli_Thread_attr);
 80014d0:	4a22      	ldr	r2, [pc, #136]	@ (800155c <app_entry+0xb4>)
 80014d2:	2100      	movs	r1, #0
 80014d4:	4822      	ldr	r0, [pc, #136]	@ (8001560 <app_entry+0xb8>)
 80014d6:	f00e fb99 	bl	800fc0c <osThreadNew>
 80014da:	4603      	mov	r3, r0
 80014dc:	4a21      	ldr	r2, [pc, #132]	@ (8001564 <app_entry+0xbc>)
 80014de:	6013      	str	r3, [r2, #0]
	assert (Thread_CLI_Handler != NULL);
 80014e0:	4b20      	ldr	r3, [pc, #128]	@ (8001564 <app_entry+0xbc>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d105      	bne.n	80014f4 <app_entry+0x4c>
 80014e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001568 <app_entry+0xc0>)
 80014ea:	4a1a      	ldr	r2, [pc, #104]	@ (8001554 <app_entry+0xac>)
 80014ec:	218b      	movs	r1, #139	@ 0x8b
 80014ee:	481a      	ldr	r0, [pc, #104]	@ (8001558 <app_entry+0xb0>)
 80014f0:	f012 fd12 	bl	8013f18 <__assert_func>

	Thread_SENSOR_Handler = osThreadNew(scw_thread_sensor, NULL, &SCW_SENSOR_Thread_Attr);
 80014f4:	4a1d      	ldr	r2, [pc, #116]	@ (800156c <app_entry+0xc4>)
 80014f6:	2100      	movs	r1, #0
 80014f8:	481d      	ldr	r0, [pc, #116]	@ (8001570 <app_entry+0xc8>)
 80014fa:	f00e fb87 	bl	800fc0c <osThreadNew>
 80014fe:	4603      	mov	r3, r0
 8001500:	4a1c      	ldr	r2, [pc, #112]	@ (8001574 <app_entry+0xcc>)
 8001502:	6013      	str	r3, [r2, #0]
	assert (Thread_SENSOR_Handler != NULL);
 8001504:	4b1b      	ldr	r3, [pc, #108]	@ (8001574 <app_entry+0xcc>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d105      	bne.n	8001518 <app_entry+0x70>
 800150c:	4b1a      	ldr	r3, [pc, #104]	@ (8001578 <app_entry+0xd0>)
 800150e:	4a11      	ldr	r2, [pc, #68]	@ (8001554 <app_entry+0xac>)
 8001510:	218e      	movs	r1, #142	@ 0x8e
 8001512:	4811      	ldr	r0, [pc, #68]	@ (8001558 <app_entry+0xb0>)
 8001514:	f012 fd00 	bl	8013f18 <__assert_func>

	Thread_SUJI_Handler = osThreadNew(scw_thread_suji, NULL, &SCW_SUJI_Thread_Attr);
 8001518:	4a18      	ldr	r2, [pc, #96]	@ (800157c <app_entry+0xd4>)
 800151a:	2100      	movs	r1, #0
 800151c:	4818      	ldr	r0, [pc, #96]	@ (8001580 <app_entry+0xd8>)
 800151e:	f00e fb75 	bl	800fc0c <osThreadNew>
 8001522:	4603      	mov	r3, r0
 8001524:	4a17      	ldr	r2, [pc, #92]	@ (8001584 <app_entry+0xdc>)
 8001526:	6013      	str	r3, [r2, #0]
	assert (Thread_SUJI_Handler != NULL);
 8001528:	4b16      	ldr	r3, [pc, #88]	@ (8001584 <app_entry+0xdc>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d105      	bne.n	800153c <app_entry+0x94>
 8001530:	4b15      	ldr	r3, [pc, #84]	@ (8001588 <app_entry+0xe0>)
 8001532:	4a08      	ldr	r2, [pc, #32]	@ (8001554 <app_entry+0xac>)
 8001534:	2191      	movs	r1, #145	@ 0x91
 8001536:	4808      	ldr	r0, [pc, #32]	@ (8001558 <app_entry+0xb0>)
 8001538:	f012 fcee 	bl	8013f18 <__assert_func>

	return true;
 800153c:	2301      	movs	r3, #1
}
 800153e:	4618      	mov	r0, r3
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	080199c8 	.word	0x080199c8
 8001548:	08007bc5 	.word	0x08007bc5
 800154c:	20000710 	.word	0x20000710
 8001550:	080156d8 	.word	0x080156d8
 8001554:	08019a58 	.word	0x08019a58
 8001558:	080156f4 	.word	0x080156f4
 800155c:	080199ec 	.word	0x080199ec
 8001560:	08007841 	.word	0x08007841
 8001564:	20000714 	.word	0x20000714
 8001568:	0801570c 	.word	0x0801570c
 800156c:	08019a10 	.word	0x08019a10
 8001570:	08007e3d 	.word	0x08007e3d
 8001574:	20000718 	.word	0x20000718
 8001578:	08015728 	.word	0x08015728
 800157c:	08019a34 	.word	0x08019a34
 8001580:	08008009 	.word	0x08008009
 8001584:	2000071c 	.word	0x2000071c
 8001588:	08015748 	.word	0x08015748

0800158c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001592:	4b1e      	ldr	r3, [pc, #120]	@ (800160c <MX_DMA_Init+0x80>)
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	4a1d      	ldr	r2, [pc, #116]	@ (800160c <MX_DMA_Init+0x80>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6153      	str	r3, [r2, #20]
 800159e:	4b1b      	ldr	r3, [pc, #108]	@ (800160c <MX_DMA_Init+0x80>)
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015aa:	4b18      	ldr	r3, [pc, #96]	@ (800160c <MX_DMA_Init+0x80>)
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	4a17      	ldr	r2, [pc, #92]	@ (800160c <MX_DMA_Init+0x80>)
 80015b0:	f043 0302 	orr.w	r3, r3, #2
 80015b4:	6153      	str	r3, [r2, #20]
 80015b6:	4b15      	ldr	r3, [pc, #84]	@ (800160c <MX_DMA_Init+0x80>)
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2105      	movs	r1, #5
 80015c6:	200b      	movs	r0, #11
 80015c8:	f007 fded 	bl	80091a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015cc:	200b      	movs	r0, #11
 80015ce:	f007 fe06 	bl	80091de <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2105      	movs	r1, #5
 80015d6:	200e      	movs	r0, #14
 80015d8:	f007 fde5 	bl	80091a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80015dc:	200e      	movs	r0, #14
 80015de:	f007 fdfe 	bl	80091de <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 5, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2105      	movs	r1, #5
 80015e6:	203a      	movs	r0, #58	@ 0x3a
 80015e8:	f007 fddd 	bl	80091a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 80015ec:	203a      	movs	r0, #58	@ 0x3a
 80015ee:	f007 fdf6 	bl	80091de <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_5_IRQn, 5, 0);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2105      	movs	r1, #5
 80015f6:	203b      	movs	r0, #59	@ 0x3b
 80015f8:	f007 fdd5 	bl	80091a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_5_IRQn);
 80015fc:	203b      	movs	r0, #59	@ 0x3b
 80015fe:	f007 fdee 	bl	80091de <HAL_NVIC_EnableIRQ>

}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40021000 	.word	0x40021000

08001610 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ThreadRoot */
  ThreadRootHandle = osThreadNew(RootThread, NULL, &ThreadRoot_attributes);
 8001614:	4a04      	ldr	r2, [pc, #16]	@ (8001628 <MX_FREERTOS_Init+0x18>)
 8001616:	2100      	movs	r1, #0
 8001618:	4804      	ldr	r0, [pc, #16]	@ (800162c <MX_FREERTOS_Init+0x1c>)
 800161a:	f00e faf7 	bl	800fc0c <osThreadNew>
 800161e:	4603      	mov	r3, r0
 8001620:	4a03      	ldr	r2, [pc, #12]	@ (8001630 <MX_FREERTOS_Init+0x20>)
 8001622:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}
 8001628:	08019a64 	.word	0x08019a64
 800162c:	08001635 	.word	0x08001635
 8001630:	20000bc0 	.word	0x20000bc0

08001634 <RootThread>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_RootThread */
void RootThread(void *argument)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RootThread */
  /* Infinite loop */
	assert (app_entry() == true);
 800163c:	f7ff ff34 	bl	80014a8 <app_entry>
 8001640:	4603      	mov	r3, r0
 8001642:	2b01      	cmp	r3, #1
 8001644:	d005      	beq.n	8001652 <RootThread+0x1e>
 8001646:	4b04      	ldr	r3, [pc, #16]	@ (8001658 <RootThread+0x24>)
 8001648:	4a04      	ldr	r2, [pc, #16]	@ (800165c <RootThread+0x28>)
 800164a:	217a      	movs	r1, #122	@ 0x7a
 800164c:	4804      	ldr	r0, [pc, #16]	@ (8001660 <RootThread+0x2c>)
 800164e:	f012 fc63 	bl	8013f18 <__assert_func>
	osThreadExit();
 8001652:	f00e fb6d 	bl	800fd30 <osThreadExit>
 8001656:	bf00      	nop
 8001658:	08015770 	.word	0x08015770
 800165c:	08019a88 	.word	0x08019a88
 8001660:	08015784 	.word	0x08015784

08001664 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b088      	sub	sp, #32
 8001668:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166a:	f107 0310 	add.w	r3, r7, #16
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	609a      	str	r2, [r3, #8]
 8001676:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001678:	4b46      	ldr	r3, [pc, #280]	@ (8001794 <MX_GPIO_Init+0x130>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	4a45      	ldr	r2, [pc, #276]	@ (8001794 <MX_GPIO_Init+0x130>)
 800167e:	f043 0310 	orr.w	r3, r3, #16
 8001682:	6193      	str	r3, [r2, #24]
 8001684:	4b43      	ldr	r3, [pc, #268]	@ (8001794 <MX_GPIO_Init+0x130>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	f003 0310 	and.w	r3, r3, #16
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001690:	4b40      	ldr	r3, [pc, #256]	@ (8001794 <MX_GPIO_Init+0x130>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	4a3f      	ldr	r2, [pc, #252]	@ (8001794 <MX_GPIO_Init+0x130>)
 8001696:	f043 0304 	orr.w	r3, r3, #4
 800169a:	6193      	str	r3, [r2, #24]
 800169c:	4b3d      	ldr	r3, [pc, #244]	@ (8001794 <MX_GPIO_Init+0x130>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	f003 0304 	and.w	r3, r3, #4
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a8:	4b3a      	ldr	r3, [pc, #232]	@ (8001794 <MX_GPIO_Init+0x130>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	4a39      	ldr	r2, [pc, #228]	@ (8001794 <MX_GPIO_Init+0x130>)
 80016ae:	f043 0308 	orr.w	r3, r3, #8
 80016b2:	6193      	str	r3, [r2, #24]
 80016b4:	4b37      	ldr	r3, [pc, #220]	@ (8001794 <MX_GPIO_Init+0x130>)
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	f003 0308 	and.w	r3, r3, #8
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016c0:	4b34      	ldr	r3, [pc, #208]	@ (8001794 <MX_GPIO_Init+0x130>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	4a33      	ldr	r2, [pc, #204]	@ (8001794 <MX_GPIO_Init+0x130>)
 80016c6:	f043 0320 	orr.w	r3, r3, #32
 80016ca:	6193      	str	r3, [r2, #24]
 80016cc:	4b31      	ldr	r3, [pc, #196]	@ (8001794 <MX_GPIO_Init+0x130>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	f003 0320 	and.w	r3, r3, #32
 80016d4:	603b      	str	r3, [r7, #0]
 80016d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|PC_RESET_Pin, GPIO_PIN_RESET);
 80016d8:	2200      	movs	r2, #0
 80016da:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80016de:	482e      	ldr	r0, [pc, #184]	@ (8001798 <MX_GPIO_Init+0x134>)
 80016e0:	f008 fd33 	bl	800a14a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, KEY_IN1_Pin|KEY_IN2_Pin|_5V_SW1_Pin|_5V_SW2_Pin
 80016e4:	2200      	movs	r2, #0
 80016e6:	f44f 717c 	mov.w	r1, #1008	@ 0x3f0
 80016ea:	482c      	ldr	r0, [pc, #176]	@ (800179c <MX_GPIO_Init+0x138>)
 80016ec:	f008 fd2d 	bl	800a14a <HAL_GPIO_WritePin>
                          |_12V_SW2_Pin|_12V_SW1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KEY_OUT1_Pin|KEY_OUT2_Pin|KEY_OUT2B2_Pin|KEY_OUT4_Pin
 80016f0:	2200      	movs	r2, #0
 80016f2:	f64f 4107 	movw	r1, #64519	@ 0xfc07
 80016f6:	482a      	ldr	r0, [pc, #168]	@ (80017a0 <MX_GPIO_Init+0x13c>)
 80016f8:	f008 fd27 	bl	800a14a <HAL_GPIO_WritePin>
                          |MUTE_Pin|SSR_1_Pin|SSR_2_Pin|SSR_3_Pin
                          |SSR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80016fc:	2310      	movs	r3, #16
 80016fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001700:	2301      	movs	r3, #1
 8001702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001708:	2302      	movs	r3, #2
 800170a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800170c:	f107 0310 	add.w	r3, r7, #16
 8001710:	4619      	mov	r1, r3
 8001712:	4821      	ldr	r0, [pc, #132]	@ (8001798 <MX_GPIO_Init+0x134>)
 8001714:	f008 faa2 	bl	8009c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_IN1_Pin KEY_IN2_Pin _5V_SW1_Pin _5V_SW2_Pin
                           _12V_SW2_Pin _12V_SW1_Pin */
  GPIO_InitStruct.Pin = KEY_IN1_Pin|KEY_IN2_Pin|_5V_SW1_Pin|_5V_SW2_Pin
 8001718:	f44f 737c 	mov.w	r3, #1008	@ 0x3f0
 800171c:	613b      	str	r3, [r7, #16]
                          |_12V_SW2_Pin|_12V_SW1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171e:	2301      	movs	r3, #1
 8001720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001726:	2302      	movs	r3, #2
 8001728:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800172a:	f107 0310 	add.w	r3, r7, #16
 800172e:	4619      	mov	r1, r3
 8001730:	481a      	ldr	r0, [pc, #104]	@ (800179c <MX_GPIO_Init+0x138>)
 8001732:	f008 fa93 	bl	8009c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_OUT1_Pin KEY_OUT2_Pin KEY_OUT2B2_Pin KEY_OUT4_Pin
                           MUTE_Pin SSR_1_Pin SSR_2_Pin SSR_3_Pin
                           SSR_4_Pin */
  GPIO_InitStruct.Pin = KEY_OUT1_Pin|KEY_OUT2_Pin|KEY_OUT2B2_Pin|KEY_OUT4_Pin
 8001736:	f64f 4307 	movw	r3, #64519	@ 0xfc07
 800173a:	613b      	str	r3, [r7, #16]
                          |MUTE_Pin|SSR_1_Pin|SSR_2_Pin|SSR_3_Pin
                          |SSR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173c:	2301      	movs	r3, #1
 800173e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001744:	2302      	movs	r3, #2
 8001746:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001748:	f107 0310 	add.w	r3, r7, #16
 800174c:	4619      	mov	r1, r3
 800174e:	4814      	ldr	r0, [pc, #80]	@ (80017a0 <MX_GPIO_Init+0x13c>)
 8001750:	f008 fa84 	bl	8009c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC_RESET_Pin */
  GPIO_InitStruct.Pin = PC_RESET_Pin;
 8001754:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001758:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175a:	2301      	movs	r3, #1
 800175c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800175e:	2301      	movs	r3, #1
 8001760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001762:	2302      	movs	r3, #2
 8001764:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PC_RESET_GPIO_Port, &GPIO_InitStruct);
 8001766:	f107 0310 	add.w	r3, r7, #16
 800176a:	4619      	mov	r1, r3
 800176c:	480a      	ldr	r0, [pc, #40]	@ (8001798 <MX_GPIO_Init+0x134>)
 800176e:	f008 fa75 	bl	8009c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : DOOR_2_Pin DOOR_1_Pin */
  GPIO_InitStruct.Pin = DOOR_2_Pin|DOOR_1_Pin;
 8001772:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001776:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001780:	f107 0310 	add.w	r3, r7, #16
 8001784:	4619      	mov	r1, r3
 8001786:	4804      	ldr	r0, [pc, #16]	@ (8001798 <MX_GPIO_Init+0x134>)
 8001788:	f008 fa68 	bl	8009c5c <HAL_GPIO_Init>

}
 800178c:	bf00      	nop
 800178e:	3720      	adds	r7, #32
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40021000 	.word	0x40021000
 8001798:	40010800 	.word	0x40010800
 800179c:	40011000 	.word	0x40011000
 80017a0:	40010c00 	.word	0x40010c00

080017a4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017a8:	4b12      	ldr	r3, [pc, #72]	@ (80017f4 <MX_I2C1_Init+0x50>)
 80017aa:	4a13      	ldr	r2, [pc, #76]	@ (80017f8 <MX_I2C1_Init+0x54>)
 80017ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80017ae:	4b11      	ldr	r3, [pc, #68]	@ (80017f4 <MX_I2C1_Init+0x50>)
 80017b0:	4a12      	ldr	r2, [pc, #72]	@ (80017fc <MX_I2C1_Init+0x58>)
 80017b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017b4:	4b0f      	ldr	r3, [pc, #60]	@ (80017f4 <MX_I2C1_Init+0x50>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017ba:	4b0e      	ldr	r3, [pc, #56]	@ (80017f4 <MX_I2C1_Init+0x50>)
 80017bc:	2200      	movs	r2, #0
 80017be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017c0:	4b0c      	ldr	r3, [pc, #48]	@ (80017f4 <MX_I2C1_Init+0x50>)
 80017c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80017c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017c8:	4b0a      	ldr	r3, [pc, #40]	@ (80017f4 <MX_I2C1_Init+0x50>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017ce:	4b09      	ldr	r3, [pc, #36]	@ (80017f4 <MX_I2C1_Init+0x50>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017d4:	4b07      	ldr	r3, [pc, #28]	@ (80017f4 <MX_I2C1_Init+0x50>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017da:	4b06      	ldr	r3, [pc, #24]	@ (80017f4 <MX_I2C1_Init+0x50>)
 80017dc:	2200      	movs	r2, #0
 80017de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017e0:	4804      	ldr	r0, [pc, #16]	@ (80017f4 <MX_I2C1_Init+0x50>)
 80017e2:	f008 fccb 	bl	800a17c <HAL_I2C_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017ec:	f000 f8e4 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000bc4 	.word	0x20000bc4
 80017f8:	40005400 	.word	0x40005400
 80017fc:	00061a80 	.word	0x00061a80

08001800 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b088      	sub	sp, #32
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	f107 0310 	add.w	r3, r7, #16
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a1d      	ldr	r2, [pc, #116]	@ (8001890 <HAL_I2C_MspInit+0x90>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d133      	bne.n	8001888 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001820:	4b1c      	ldr	r3, [pc, #112]	@ (8001894 <HAL_I2C_MspInit+0x94>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	4a1b      	ldr	r2, [pc, #108]	@ (8001894 <HAL_I2C_MspInit+0x94>)
 8001826:	f043 0308 	orr.w	r3, r3, #8
 800182a:	6193      	str	r3, [r2, #24]
 800182c:	4b19      	ldr	r3, [pc, #100]	@ (8001894 <HAL_I2C_MspInit+0x94>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	f003 0308 	and.w	r3, r3, #8
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001838:	23c0      	movs	r3, #192	@ 0xc0
 800183a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800183c:	2312      	movs	r3, #18
 800183e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001840:	2303      	movs	r3, #3
 8001842:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001844:	f107 0310 	add.w	r3, r7, #16
 8001848:	4619      	mov	r1, r3
 800184a:	4813      	ldr	r0, [pc, #76]	@ (8001898 <HAL_I2C_MspInit+0x98>)
 800184c:	f008 fa06 	bl	8009c5c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001850:	4b10      	ldr	r3, [pc, #64]	@ (8001894 <HAL_I2C_MspInit+0x94>)
 8001852:	69db      	ldr	r3, [r3, #28]
 8001854:	4a0f      	ldr	r2, [pc, #60]	@ (8001894 <HAL_I2C_MspInit+0x94>)
 8001856:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800185a:	61d3      	str	r3, [r2, #28]
 800185c:	4b0d      	ldr	r3, [pc, #52]	@ (8001894 <HAL_I2C_MspInit+0x94>)
 800185e:	69db      	ldr	r3, [r3, #28]
 8001860:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001868:	2200      	movs	r2, #0
 800186a:	2105      	movs	r1, #5
 800186c:	201f      	movs	r0, #31
 800186e:	f007 fc9a 	bl	80091a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001872:	201f      	movs	r0, #31
 8001874:	f007 fcb3 	bl	80091de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001878:	2200      	movs	r2, #0
 800187a:	2105      	movs	r1, #5
 800187c:	2020      	movs	r0, #32
 800187e:	f007 fc92 	bl	80091a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001882:	2020      	movs	r0, #32
 8001884:	f007 fcab 	bl	80091de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001888:	bf00      	nop
 800188a:	3720      	adds	r7, #32
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40005400 	.word	0x40005400
 8001894:	40021000 	.word	0x40021000
 8001898:	40010c00 	.word	0x40010c00

0800189c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018a0:	f006 fdca 	bl	8008438 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018a4:	f000 f818 	bl	80018d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018a8:	f7ff fedc 	bl	8001664 <MX_GPIO_Init>
  MX_DMA_Init();
 80018ac:	f7ff fe6e 	bl	800158c <MX_DMA_Init>
  MX_USART1_UART_Init();
 80018b0:	f000 fc04 	bl	80020bc <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80018b4:	f7ff ff76 	bl	80017a4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80018b8:	f000 f8d4 	bl	8001a64 <MX_SPI1_Init>
  MX_ADC1_Init();
 80018bc:	f7ff fc8a 	bl	80011d4 <MX_ADC1_Init>
  MX_UART4_Init();
 80018c0:	f000 fba8 	bl	8002014 <MX_UART4_Init>
  MX_UART5_Init();
 80018c4:	f000 fbd0 	bl	8002068 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in cmsis_os2.c) */
 80018c8:	f00e f930 	bl	800fb2c <osKernelInitialize>
  MX_FREERTOS_Init();
 80018cc:	f7ff fea0 	bl	8001610 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80018d0:	f00e f976 	bl	800fbc0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018d4:	bf00      	nop
 80018d6:	e7fd      	b.n	80018d4 <main+0x38>

080018d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b096      	sub	sp, #88	@ 0x58
 80018dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018de:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80018e2:	2228      	movs	r2, #40	@ 0x28
 80018e4:	2100      	movs	r1, #0
 80018e6:	4618      	mov	r0, r3
 80018e8:	f012 fedc 	bl	80146a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018ec:	f107 031c 	add.w	r3, r7, #28
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018fc:	1d3b      	adds	r3, r7, #4
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	605a      	str	r2, [r3, #4]
 8001904:	609a      	str	r2, [r3, #8]
 8001906:	60da      	str	r2, [r3, #12]
 8001908:	611a      	str	r2, [r3, #16]
 800190a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800190c:	230a      	movs	r3, #10
 800190e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001910:	2301      	movs	r3, #1
 8001912:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001914:	2310      	movs	r3, #16
 8001916:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001918:	2301      	movs	r3, #1
 800191a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800191c:	2302      	movs	r3, #2
 800191e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001920:	2300      	movs	r3, #0
 8001922:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001924:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8001928:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800192a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800192e:	4618      	mov	r0, r3
 8001930:	f00b fa0c 	bl	800cd4c <HAL_RCC_OscConfig>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800193a:	f000 f83d 	bl	80019b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800193e:	230f      	movs	r3, #15
 8001940:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001942:	2302      	movs	r3, #2
 8001944:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001946:	2300      	movs	r3, #0
 8001948:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800194a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800194e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001950:	2300      	movs	r3, #0
 8001952:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001954:	f107 031c 	add.w	r3, r7, #28
 8001958:	2102      	movs	r1, #2
 800195a:	4618      	mov	r0, r3
 800195c:	f00b fc78 	bl	800d250 <HAL_RCC_ClockConfig>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001966:	f000 f827 	bl	80019b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 800196a:	2303      	movs	r3, #3
 800196c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800196e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001972:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001974:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001978:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800197a:	1d3b      	adds	r3, r7, #4
 800197c:	4618      	mov	r0, r3
 800197e:	f00b fe25 	bl	800d5cc <HAL_RCCEx_PeriphCLKConfig>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001988:	f000 f816 	bl	80019b8 <Error_Handler>
  }
}
 800198c:	bf00      	nop
 800198e:	3758      	adds	r7, #88	@ 0x58
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM8)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a04      	ldr	r2, [pc, #16]	@ (80019b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d101      	bne.n	80019aa <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80019a6:	f006 fd7b 	bl	80084a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40013400 	.word	0x40013400

080019b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019bc:	b672      	cpsid	i
}
 80019be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019c0:	bf00      	nop
 80019c2:	e7fd      	b.n	80019c0 <Error_Handler+0x8>

080019c4 <HAL_RTC_MspInit>:
  /* USER CODE END RTC_Init 2 */

}

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a13      	ldr	r2, [pc, #76]	@ (8001a20 <HAL_RTC_MspInit+0x5c>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d120      	bne.n	8001a18 <HAL_RTC_MspInit+0x54>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80019d6:	f00b f913 	bl	800cc00 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80019da:	4b12      	ldr	r3, [pc, #72]	@ (8001a24 <HAL_RTC_MspInit+0x60>)
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	4a11      	ldr	r2, [pc, #68]	@ (8001a24 <HAL_RTC_MspInit+0x60>)
 80019e0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80019e4:	61d3      	str	r3, [r2, #28]
 80019e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a24 <HAL_RTC_MspInit+0x60>)
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80019f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001a28 <HAL_RTC_MspInit+0x64>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 5, 0);
 80019f8:	2200      	movs	r2, #0
 80019fa:	2105      	movs	r1, #5
 80019fc:	2003      	movs	r0, #3
 80019fe:	f007 fbd2 	bl	80091a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001a02:	2003      	movs	r0, #3
 8001a04:	f007 fbeb 	bl	80091de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	2105      	movs	r1, #5
 8001a0c:	2029      	movs	r0, #41	@ 0x29
 8001a0e:	f007 fbca 	bl	80091a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001a12:	2029      	movs	r0, #41	@ 0x29
 8001a14:	f007 fbe3 	bl	80091de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001a18:	bf00      	nop
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40002800 	.word	0x40002800
 8001a24:	40021000 	.word	0x40021000
 8001a28:	4242043c 	.word	0x4242043c

08001a2c <scw_rtc_init>:
  }
}

/* USER CODE BEGIN 1 */
bool scw_rtc_init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
	  hrtc.Instance = RTC;
 8001a30:	4b0a      	ldr	r3, [pc, #40]	@ (8001a5c <scw_rtc_init+0x30>)
 8001a32:	4a0b      	ldr	r2, [pc, #44]	@ (8001a60 <scw_rtc_init+0x34>)
 8001a34:	601a      	str	r2, [r3, #0]
	  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001a36:	4b09      	ldr	r3, [pc, #36]	@ (8001a5c <scw_rtc_init+0x30>)
 8001a38:	f04f 32ff 	mov.w	r2, #4294967295
 8001a3c:	605a      	str	r2, [r3, #4]
	  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001a3e:	4b07      	ldr	r3, [pc, #28]	@ (8001a5c <scw_rtc_init+0x30>)
 8001a40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a44:	609a      	str	r2, [r3, #8]
	  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a46:	4805      	ldr	r0, [pc, #20]	@ (8001a5c <scw_rtc_init+0x30>)
 8001a48:	f00b ff4e 	bl	800d8e8 <HAL_RTC_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <scw_rtc_init+0x2a>
	  {
	    Error_Handler();
 8001a52:	f7ff ffb1 	bl	80019b8 <Error_Handler>
	  }

	return true;
 8001a56:	2301      	movs	r3, #1
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20000c18 	.word	0x20000c18
 8001a60:	40002800 	.word	0x40002800

08001a64 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001a68:	4b17      	ldr	r3, [pc, #92]	@ (8001ac8 <MX_SPI1_Init+0x64>)
 8001a6a:	4a18      	ldr	r2, [pc, #96]	@ (8001acc <MX_SPI1_Init+0x68>)
 8001a6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a6e:	4b16      	ldr	r3, [pc, #88]	@ (8001ac8 <MX_SPI1_Init+0x64>)
 8001a70:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a76:	4b14      	ldr	r3, [pc, #80]	@ (8001ac8 <MX_SPI1_Init+0x64>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a7c:	4b12      	ldr	r3, [pc, #72]	@ (8001ac8 <MX_SPI1_Init+0x64>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001a82:	4b11      	ldr	r3, [pc, #68]	@ (8001ac8 <MX_SPI1_Init+0x64>)
 8001a84:	2202      	movs	r2, #2
 8001a86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001a88:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac8 <MX_SPI1_Init+0x64>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac8 <MX_SPI1_Init+0x64>)
 8001a90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001a96:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac8 <MX_SPI1_Init+0x64>)
 8001a98:	2210      	movs	r2, #16
 8001a9a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac8 <MX_SPI1_Init+0x64>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001aa2:	4b09      	ldr	r3, [pc, #36]	@ (8001ac8 <MX_SPI1_Init+0x64>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aa8:	4b07      	ldr	r3, [pc, #28]	@ (8001ac8 <MX_SPI1_Init+0x64>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001aae:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <MX_SPI1_Init+0x64>)
 8001ab0:	220a      	movs	r2, #10
 8001ab2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ab4:	4804      	ldr	r0, [pc, #16]	@ (8001ac8 <MX_SPI1_Init+0x64>)
 8001ab6:	f00c fbd0 	bl	800e25a <HAL_SPI_Init>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ac0:	f7ff ff7a 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20000c2c 	.word	0x20000c2c
 8001acc:	40013000 	.word	0x40013000

08001ad0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b088      	sub	sp, #32
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 0310 	add.w	r3, r7, #16
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a1b      	ldr	r2, [pc, #108]	@ (8001b58 <HAL_SPI_MspInit+0x88>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d12f      	bne.n	8001b50 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001af0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b5c <HAL_SPI_MspInit+0x8c>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	4a19      	ldr	r2, [pc, #100]	@ (8001b5c <HAL_SPI_MspInit+0x8c>)
 8001af6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001afa:	6193      	str	r3, [r2, #24]
 8001afc:	4b17      	ldr	r3, [pc, #92]	@ (8001b5c <HAL_SPI_MspInit+0x8c>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b08:	4b14      	ldr	r3, [pc, #80]	@ (8001b5c <HAL_SPI_MspInit+0x8c>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	4a13      	ldr	r2, [pc, #76]	@ (8001b5c <HAL_SPI_MspInit+0x8c>)
 8001b0e:	f043 0304 	orr.w	r3, r3, #4
 8001b12:	6193      	str	r3, [r2, #24]
 8001b14:	4b11      	ldr	r3, [pc, #68]	@ (8001b5c <HAL_SPI_MspInit+0x8c>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	60bb      	str	r3, [r7, #8]
 8001b1e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001b20:	23a0      	movs	r3, #160	@ 0xa0
 8001b22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b24:	2302      	movs	r3, #2
 8001b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2c:	f107 0310 	add.w	r3, r7, #16
 8001b30:	4619      	mov	r1, r3
 8001b32:	480b      	ldr	r0, [pc, #44]	@ (8001b60 <HAL_SPI_MspInit+0x90>)
 8001b34:	f008 f892 	bl	8009c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b38:	2340      	movs	r3, #64	@ 0x40
 8001b3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b44:	f107 0310 	add.w	r3, r7, #16
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4805      	ldr	r0, [pc, #20]	@ (8001b60 <HAL_SPI_MspInit+0x90>)
 8001b4c:	f008 f886 	bl	8009c5c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001b50:	bf00      	nop
 8001b52:	3720      	adds	r7, #32
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40013000 	.word	0x40013000
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	40010800 	.word	0x40010800

08001b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b6a:	4b18      	ldr	r3, [pc, #96]	@ (8001bcc <HAL_MspInit+0x68>)
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	4a17      	ldr	r2, [pc, #92]	@ (8001bcc <HAL_MspInit+0x68>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6193      	str	r3, [r2, #24]
 8001b76:	4b15      	ldr	r3, [pc, #84]	@ (8001bcc <HAL_MspInit+0x68>)
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	60bb      	str	r3, [r7, #8]
 8001b80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b82:	4b12      	ldr	r3, [pc, #72]	@ (8001bcc <HAL_MspInit+0x68>)
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	4a11      	ldr	r2, [pc, #68]	@ (8001bcc <HAL_MspInit+0x68>)
 8001b88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b8c:	61d3      	str	r3, [r2, #28]
 8001b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001bcc <HAL_MspInit+0x68>)
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b96:	607b      	str	r3, [r7, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	210f      	movs	r1, #15
 8001b9e:	f06f 0001 	mvn.w	r0, #1
 8001ba2:	f007 fb00 	bl	80091a6 <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd0 <HAL_MspInit+0x6c>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	4a04      	ldr	r2, [pc, #16]	@ (8001bd0 <HAL_MspInit+0x6c>)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	40010000 	.word	0x40010000

08001bd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08c      	sub	sp, #48	@ 0x30
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001be0:	2300      	movs	r3, #0
 8001be2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001be4:	2300      	movs	r3, #0
 8001be6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM8 clock */
  __HAL_RCC_TIM8_CLK_ENABLE();
 8001bea:	4b2e      	ldr	r3, [pc, #184]	@ (8001ca4 <HAL_InitTick+0xd0>)
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	4a2d      	ldr	r2, [pc, #180]	@ (8001ca4 <HAL_InitTick+0xd0>)
 8001bf0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001bf4:	6193      	str	r3, [r2, #24]
 8001bf6:	4b2b      	ldr	r3, [pc, #172]	@ (8001ca4 <HAL_InitTick+0xd0>)
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bfe:	60bb      	str	r3, [r7, #8]
 8001c00:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c02:	f107 020c 	add.w	r2, r7, #12
 8001c06:	f107 0310 	add.w	r3, r7, #16
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f00b fc8f 	bl	800d530 <HAL_RCC_GetClockConfig>

  /* Compute TIM8 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001c12:	f00b fc79 	bl	800d508 <HAL_RCC_GetPCLK2Freq>
 8001c16:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM8 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c1a:	4a23      	ldr	r2, [pc, #140]	@ (8001ca8 <HAL_InitTick+0xd4>)
 8001c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c20:	0c9b      	lsrs	r3, r3, #18
 8001c22:	3b01      	subs	r3, #1
 8001c24:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM8 */
  htim8.Instance = TIM8;
 8001c26:	4b21      	ldr	r3, [pc, #132]	@ (8001cac <HAL_InitTick+0xd8>)
 8001c28:	4a21      	ldr	r2, [pc, #132]	@ (8001cb0 <HAL_InitTick+0xdc>)
 8001c2a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim8.Init.Period = (1000000U / 1000U) - 1U;
 8001c2c:	4b1f      	ldr	r3, [pc, #124]	@ (8001cac <HAL_InitTick+0xd8>)
 8001c2e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c32:	60da      	str	r2, [r3, #12]
  htim8.Init.Prescaler = uwPrescalerValue;
 8001c34:	4a1d      	ldr	r2, [pc, #116]	@ (8001cac <HAL_InitTick+0xd8>)
 8001c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c38:	6053      	str	r3, [r2, #4]
  htim8.Init.ClockDivision = 0;
 8001c3a:	4b1c      	ldr	r3, [pc, #112]	@ (8001cac <HAL_InitTick+0xd8>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	611a      	str	r2, [r3, #16]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c40:	4b1a      	ldr	r3, [pc, #104]	@ (8001cac <HAL_InitTick+0xd8>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	609a      	str	r2, [r3, #8]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c46:	4b19      	ldr	r3, [pc, #100]	@ (8001cac <HAL_InitTick+0xd8>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim8);
 8001c4c:	4817      	ldr	r0, [pc, #92]	@ (8001cac <HAL_InitTick+0xd8>)
 8001c4e:	f00c fb88 	bl	800e362 <HAL_TIM_Base_Init>
 8001c52:	4603      	mov	r3, r0
 8001c54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001c58:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d11b      	bne.n	8001c98 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim8);
 8001c60:	4812      	ldr	r0, [pc, #72]	@ (8001cac <HAL_InitTick+0xd8>)
 8001c62:	f00c fbd7 	bl	800e414 <HAL_TIM_Base_Start_IT>
 8001c66:	4603      	mov	r3, r0
 8001c68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001c6c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d111      	bne.n	8001c98 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM8 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8001c74:	202c      	movs	r0, #44	@ 0x2c
 8001c76:	f007 fab2 	bl	80091de <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2b0f      	cmp	r3, #15
 8001c7e:	d808      	bhi.n	8001c92 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_UP_IRQn, TickPriority, 0U);
 8001c80:	2200      	movs	r2, #0
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	202c      	movs	r0, #44	@ 0x2c
 8001c86:	f007 fa8e 	bl	80091a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb4 <HAL_InitTick+0xe0>)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6013      	str	r3, [r2, #0]
 8001c90:	e002      	b.n	8001c98 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001c98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3730      	adds	r7, #48	@ 0x30
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	431bde83 	.word	0x431bde83
 8001cac:	20000c84 	.word	0x20000c84
 8001cb0:	40013400 	.word	0x40013400
 8001cb4:	20000610 	.word	0x20000610

08001cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cbc:	bf00      	nop
 8001cbe:	e7fd      	b.n	8001cbc <NMI_Handler+0x4>

08001cc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cc4:	bf00      	nop
 8001cc6:	e7fd      	b.n	8001cc4 <HardFault_Handler+0x4>

08001cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ccc:	bf00      	nop
 8001cce:	e7fd      	b.n	8001ccc <MemManage_Handler+0x4>

08001cd0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cd4:	bf00      	nop
 8001cd6:	e7fd      	b.n	8001cd4 <BusFault_Handler+0x4>

08001cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cdc:	bf00      	nop
 8001cde:	e7fd      	b.n	8001cdc <UsageFault_Handler+0x4>

08001ce0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr

08001cec <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */
	IntrObjEntryList[SCW_RTU_INTR_INDEX_RTC_IRQn].IntrCount++;
 8001cf0:	4b04      	ldr	r3, [pc, #16]	@ (8001d04 <RTC_IRQHandler+0x18>)
 8001cf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	4a03      	ldr	r2, [pc, #12]	@ (8001d04 <RTC_IRQHandler+0x18>)
 8001cf8:	6713      	str	r3, [r2, #112]	@ 0x70

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8001cfa:	4803      	ldr	r0, [pc, #12]	@ (8001d08 <RTC_IRQHandler+0x1c>)
 8001cfc:	f00c fa64 	bl	800e1c8 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8001d00:	bf00      	nop
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20000024 	.word	0x20000024
 8001d08:	20000c18 	.word	0x20000c18

08001d0c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	IntrObjEntryList[SCW_RTU_INTR_INDEX_DMA1_Channel1_IRQn].IntrCount++;
 8001d10:	4b05      	ldr	r3, [pc, #20]	@ (8001d28 <DMA1_Channel1_IRQHandler+0x1c>)
 8001d12:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001d16:	3301      	adds	r3, #1
 8001d18:	4a03      	ldr	r2, [pc, #12]	@ (8001d28 <DMA1_Channel1_IRQHandler+0x1c>)
 8001d1a:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d1e:	4803      	ldr	r0, [pc, #12]	@ (8001d2c <DMA1_Channel1_IRQHandler+0x20>)
 8001d20:	f007 fd10 	bl	8009744 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d24:	bf00      	nop
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20000024 	.word	0x20000024
 8001d2c:	200006c4 	.word	0x200006c4

08001d30 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */
	IntrObjEntryList[SCW_RTU_INTR_INDEX_DMA1_Channel4_IRQn].IntrCount++;
 8001d34:	4b05      	ldr	r3, [pc, #20]	@ (8001d4c <DMA1_Channel4_IRQHandler+0x1c>)
 8001d36:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	4a03      	ldr	r2, [pc, #12]	@ (8001d4c <DMA1_Channel4_IRQHandler+0x1c>)
 8001d3e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001d42:	4803      	ldr	r0, [pc, #12]	@ (8001d50 <DMA1_Channel4_IRQHandler+0x20>)
 8001d44:	f007 fcfe 	bl	8009744 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20000024 	.word	0x20000024
 8001d50:	20000e30 	.word	0x20000e30

08001d54 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */
	IntrObjEntryList[SCW_RTU_INTR_INDEX_ADC1_2_IRQn].IntrCount++;
 8001d58:	4b05      	ldr	r3, [pc, #20]	@ (8001d70 <ADC1_2_IRQHandler+0x1c>)
 8001d5a:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 8001d5e:	3301      	adds	r3, #1
 8001d60:	4a03      	ldr	r2, [pc, #12]	@ (8001d70 <ADC1_2_IRQHandler+0x1c>)
 8001d62:	f8c2 31b4 	str.w	r3, [r2, #436]	@ 0x1b4

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001d66:	4803      	ldr	r0, [pc, #12]	@ (8001d74 <ADC1_2_IRQHandler+0x20>)
 8001d68:	f006 fda2 	bl	80088b0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001d6c:	bf00      	nop
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20000024 	.word	0x20000024
 8001d74:	20000694 	.word	0x20000694

08001d78 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */
	IntrObjEntryList[SCW_RTU_INTR_INDEX_I2C1_EV_IRQn].IntrCount++;
 8001d7c:	4b05      	ldr	r3, [pc, #20]	@ (8001d94 <I2C1_EV_IRQHandler+0x1c>)
 8001d7e:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8001d82:	3301      	adds	r3, #1
 8001d84:	4a03      	ldr	r2, [pc, #12]	@ (8001d94 <I2C1_EV_IRQHandler+0x1c>)
 8001d86:	f8c2 3220 	str.w	r3, [r2, #544]	@ 0x220

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001d8a:	4803      	ldr	r0, [pc, #12]	@ (8001d98 <I2C1_EV_IRQHandler+0x20>)
 8001d8c:	f008 feb8 	bl	800ab00 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001d90:	bf00      	nop
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20000024 	.word	0x20000024
 8001d98:	20000bc4 	.word	0x20000bc4

08001d9c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */
	IntrObjEntryList[SCW_RTU_INTR_INDEX_I2C1_ER_IRQn].IntrCount++;
 8001da0:	4b05      	ldr	r3, [pc, #20]	@ (8001db8 <I2C1_ER_IRQHandler+0x1c>)
 8001da2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001da6:	3301      	adds	r3, #1
 8001da8:	4a03      	ldr	r2, [pc, #12]	@ (8001db8 <I2C1_ER_IRQHandler+0x1c>)
 8001daa:	f8c2 328c 	str.w	r3, [r2, #652]	@ 0x28c

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001dae:	4803      	ldr	r0, [pc, #12]	@ (8001dbc <I2C1_ER_IRQHandler+0x20>)
 8001db0:	f009 f817 	bl	800ade2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001db4:	bf00      	nop
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20000024 	.word	0x20000024
 8001dbc:	20000bc4 	.word	0x20000bc4

08001dc0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	IntrObjEntryList[SCW_RTU_INTR_INDEX_USART1_IRQn].IntrCount++;
 8001dc4:	4b05      	ldr	r3, [pc, #20]	@ (8001ddc <USART1_IRQHandler+0x1c>)
 8001dc6:	f8d3 32f8 	ldr.w	r3, [r3, #760]	@ 0x2f8
 8001dca:	3301      	adds	r3, #1
 8001dcc:	4a03      	ldr	r2, [pc, #12]	@ (8001ddc <USART1_IRQHandler+0x1c>)
 8001dce:	f8c2 32f8 	str.w	r3, [r2, #760]	@ 0x2f8

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001dd2:	4803      	ldr	r0, [pc, #12]	@ (8001de0 <USART1_IRQHandler+0x20>)
 8001dd4:	f00c ff1c 	bl	800ec10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001dd8:	bf00      	nop
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	20000024 	.word	0x20000024
 8001de0:	20000d60 	.word	0x20000d60

08001de4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */
	IntrObjEntryList[SCW_RTU_INTR_INDEX_RTC_Alarm_IRQn].IntrCount++;
 8001de8:	4b05      	ldr	r3, [pc, #20]	@ (8001e00 <RTC_Alarm_IRQHandler+0x1c>)
 8001dea:	f8d3 3364 	ldr.w	r3, [r3, #868]	@ 0x364
 8001dee:	3301      	adds	r3, #1
 8001df0:	4a03      	ldr	r2, [pc, #12]	@ (8001e00 <RTC_Alarm_IRQHandler+0x1c>)
 8001df2:	f8c2 3364 	str.w	r3, [r2, #868]	@ 0x364

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001df6:	4803      	ldr	r0, [pc, #12]	@ (8001e04 <RTC_Alarm_IRQHandler+0x20>)
 8001df8:	f00b ff2e 	bl	800dc58 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001dfc:	bf00      	nop
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20000024 	.word	0x20000024
 8001e04:	20000c18 	.word	0x20000c18

08001e08 <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */
	IntrObjEntryList[SCW_RTU_INTR_INDEX_TIM8_UP_IRQn].IntrCount++;
 8001e0c:	4b05      	ldr	r3, [pc, #20]	@ (8001e24 <TIM8_UP_IRQHandler+0x1c>)
 8001e0e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8001e12:	3301      	adds	r3, #1
 8001e14:	4a03      	ldr	r2, [pc, #12]	@ (8001e24 <TIM8_UP_IRQHandler+0x1c>)
 8001e16:	f8c2 33d0 	str.w	r3, [r2, #976]	@ 0x3d0

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001e1a:	4803      	ldr	r0, [pc, #12]	@ (8001e28 <TIM8_UP_IRQHandler+0x20>)
 8001e1c:	f00c fb5a 	bl	800e4d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 8001e20:	bf00      	nop
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	20000024 	.word	0x20000024
 8001e28:	20000c84 	.word	0x20000c84

08001e2c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	IntrObjEntryList[SCW_RTU_INTR_INDEX_UART4_IRQn].IntrCount++;
 8001e30:	4b05      	ldr	r3, [pc, #20]	@ (8001e48 <UART4_IRQHandler+0x1c>)
 8001e32:	f8d3 343c 	ldr.w	r3, [r3, #1084]	@ 0x43c
 8001e36:	3301      	adds	r3, #1
 8001e38:	4a03      	ldr	r2, [pc, #12]	@ (8001e48 <UART4_IRQHandler+0x1c>)
 8001e3a:	f8c2 343c 	str.w	r3, [r2, #1084]	@ 0x43c

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001e3e:	4803      	ldr	r0, [pc, #12]	@ (8001e4c <UART4_IRQHandler+0x20>)
 8001e40:	f00c fee6 	bl	800ec10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001e44:	bf00      	nop
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20000024 	.word	0x20000024
 8001e4c:	20000cd0 	.word	0x20000cd0

08001e50 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
	IntrObjEntryList[SCW_RTU_INTR_INDEX_UART5_IRQn].IntrCount++;
 8001e54:	4b05      	ldr	r3, [pc, #20]	@ (8001e6c <UART5_IRQHandler+0x1c>)
 8001e56:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	@ 0x4a8
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	4a03      	ldr	r2, [pc, #12]	@ (8001e6c <UART5_IRQHandler+0x1c>)
 8001e5e:	f8c2 34a8 	str.w	r3, [r2, #1192]	@ 0x4a8

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001e62:	4803      	ldr	r0, [pc, #12]	@ (8001e70 <UART5_IRQHandler+0x20>)
 8001e64:	f00c fed4 	bl	800ec10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001e68:	bf00      	nop
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20000024 	.word	0x20000024
 8001e70:	20000d18 	.word	0x20000d18

08001e74 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */
	IntrObjEntryList[SCW_RTU_INTR_INDEX_DMA2_Channel3_IRQn].IntrCount++;
 8001e78:	4b05      	ldr	r3, [pc, #20]	@ (8001e90 <DMA2_Channel3_IRQHandler+0x1c>)
 8001e7a:	f8d3 3514 	ldr.w	r3, [r3, #1300]	@ 0x514
 8001e7e:	3301      	adds	r3, #1
 8001e80:	4a03      	ldr	r2, [pc, #12]	@ (8001e90 <DMA2_Channel3_IRQHandler+0x1c>)
 8001e82:	f8c2 3514 	str.w	r3, [r2, #1300]	@ 0x514

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001e86:	4803      	ldr	r0, [pc, #12]	@ (8001e94 <DMA2_Channel3_IRQHandler+0x20>)
 8001e88:	f007 fc5c 	bl	8009744 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8001e8c:	bf00      	nop
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	20000024 	.word	0x20000024
 8001e94:	20000da8 	.word	0x20000da8

08001e98 <DMA2_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 and channel5 global interrupts.
  */
void DMA2_Channel4_5_IRQHandler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 0 */
	IntrObjEntryList[SCW_RTU_INTR_INDEX_DMA2_Channel4_5_IRQn].IntrCount++;
 8001e9c:	4b05      	ldr	r3, [pc, #20]	@ (8001eb4 <DMA2_Channel4_5_IRQHandler+0x1c>)
 8001e9e:	f8d3 3580 	ldr.w	r3, [r3, #1408]	@ 0x580
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	4a03      	ldr	r2, [pc, #12]	@ (8001eb4 <DMA2_Channel4_5_IRQHandler+0x1c>)
 8001ea6:	f8c2 3580 	str.w	r3, [r2, #1408]	@ 0x580

  /* USER CODE END DMA2_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001eaa:	4803      	ldr	r0, [pc, #12]	@ (8001eb8 <DMA2_Channel4_5_IRQHandler+0x20>)
 8001eac:	f007 fc4a 	bl	8009744 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 1 */

  /* USER CODE END DMA2_Channel4_5_IRQn 1 */
}
 8001eb0:	bf00      	nop
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	20000024 	.word	0x20000024
 8001eb8:	20000dec 	.word	0x20000dec

08001ebc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return 1;
 8001ec0:	2301      	movs	r3, #1
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr

08001eca <_kill>:

int _kill(int pid, int sig)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b082      	sub	sp, #8
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
 8001ed2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ed4:	f012 fd30 	bl	8014938 <__errno>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2216      	movs	r2, #22
 8001edc:	601a      	str	r2, [r3, #0]
  return -1;
 8001ede:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <_exit>:

void _exit (int status)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ef2:	f04f 31ff 	mov.w	r1, #4294967295
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7ff ffe7 	bl	8001eca <_kill>
  while (1) {}    /* Make sure we hang here */
 8001efc:	bf00      	nop
 8001efe:	e7fd      	b.n	8001efc <_exit+0x12>

08001f00 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	e00a      	b.n	8001f28 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f12:	f3af 8000 	nop.w
 8001f16:	4601      	mov	r1, r0
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	1c5a      	adds	r2, r3, #1
 8001f1c:	60ba      	str	r2, [r7, #8]
 8001f1e:	b2ca      	uxtb	r2, r1
 8001f20:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	3301      	adds	r3, #1
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	dbf0      	blt.n	8001f12 <_read+0x12>
  }

  return len;
 8001f30:	687b      	ldr	r3, [r7, #4]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <_close>:
  }
  return len;
}

int _close(int file)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b083      	sub	sp, #12
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr

08001f50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f60:	605a      	str	r2, [r3, #4]
  return 0;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr

08001f6e <_isatty>:

int _isatty(int file)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f76:	2301      	movs	r3, #1
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr

08001f82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b085      	sub	sp, #20
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	60f8      	str	r0, [r7, #12]
 8001f8a:	60b9      	str	r1, [r7, #8]
 8001f8c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr
	...

08001f9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fa4:	4a14      	ldr	r2, [pc, #80]	@ (8001ff8 <_sbrk+0x5c>)
 8001fa6:	4b15      	ldr	r3, [pc, #84]	@ (8001ffc <_sbrk+0x60>)
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fb0:	4b13      	ldr	r3, [pc, #76]	@ (8002000 <_sbrk+0x64>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d102      	bne.n	8001fbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fb8:	4b11      	ldr	r3, [pc, #68]	@ (8002000 <_sbrk+0x64>)
 8001fba:	4a12      	ldr	r2, [pc, #72]	@ (8002004 <_sbrk+0x68>)
 8001fbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fbe:	4b10      	ldr	r3, [pc, #64]	@ (8002000 <_sbrk+0x64>)
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d207      	bcs.n	8001fdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fcc:	f012 fcb4 	bl	8014938 <__errno>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	220c      	movs	r2, #12
 8001fd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fda:	e009      	b.n	8001ff0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fdc:	4b08      	ldr	r3, [pc, #32]	@ (8002000 <_sbrk+0x64>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fe2:	4b07      	ldr	r3, [pc, #28]	@ (8002000 <_sbrk+0x64>)
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4413      	add	r3, r2
 8001fea:	4a05      	ldr	r2, [pc, #20]	@ (8002000 <_sbrk+0x64>)
 8001fec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fee:	68fb      	ldr	r3, [r7, #12]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3718      	adds	r7, #24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	20010000 	.word	0x20010000
 8001ffc:	00000400 	.word	0x00000400
 8002000:	20000ccc 	.word	0x20000ccc
 8002004:	20008528 	.word	0x20008528

08002008 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr

08002014 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_tx;
DMA_HandleTypeDef hdma_usart1_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002018:	4b11      	ldr	r3, [pc, #68]	@ (8002060 <MX_UART4_Init+0x4c>)
 800201a:	4a12      	ldr	r2, [pc, #72]	@ (8002064 <MX_UART4_Init+0x50>)
 800201c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 800201e:	4b10      	ldr	r3, [pc, #64]	@ (8002060 <MX_UART4_Init+0x4c>)
 8002020:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8002024:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002026:	4b0e      	ldr	r3, [pc, #56]	@ (8002060 <MX_UART4_Init+0x4c>)
 8002028:	2200      	movs	r2, #0
 800202a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800202c:	4b0c      	ldr	r3, [pc, #48]	@ (8002060 <MX_UART4_Init+0x4c>)
 800202e:	2200      	movs	r2, #0
 8002030:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002032:	4b0b      	ldr	r3, [pc, #44]	@ (8002060 <MX_UART4_Init+0x4c>)
 8002034:	2200      	movs	r2, #0
 8002036:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002038:	4b09      	ldr	r3, [pc, #36]	@ (8002060 <MX_UART4_Init+0x4c>)
 800203a:	220c      	movs	r2, #12
 800203c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800203e:	4b08      	ldr	r3, [pc, #32]	@ (8002060 <MX_UART4_Init+0x4c>)
 8002040:	2200      	movs	r2, #0
 8002042:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002044:	4b06      	ldr	r3, [pc, #24]	@ (8002060 <MX_UART4_Init+0x4c>)
 8002046:	2200      	movs	r2, #0
 8002048:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800204a:	4805      	ldr	r0, [pc, #20]	@ (8002060 <MX_UART4_Init+0x4c>)
 800204c:	f00c fbee 	bl	800e82c <HAL_UART_Init>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002056:	f7ff fcaf 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000cd0 	.word	0x20000cd0
 8002064:	40004c00 	.word	0x40004c00

08002068 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800206c:	4b11      	ldr	r3, [pc, #68]	@ (80020b4 <MX_UART5_Init+0x4c>)
 800206e:	4a12      	ldr	r2, [pc, #72]	@ (80020b8 <MX_UART5_Init+0x50>)
 8002070:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 38400;
 8002072:	4b10      	ldr	r3, [pc, #64]	@ (80020b4 <MX_UART5_Init+0x4c>)
 8002074:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8002078:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800207a:	4b0e      	ldr	r3, [pc, #56]	@ (80020b4 <MX_UART5_Init+0x4c>)
 800207c:	2200      	movs	r2, #0
 800207e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002080:	4b0c      	ldr	r3, [pc, #48]	@ (80020b4 <MX_UART5_Init+0x4c>)
 8002082:	2200      	movs	r2, #0
 8002084:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002086:	4b0b      	ldr	r3, [pc, #44]	@ (80020b4 <MX_UART5_Init+0x4c>)
 8002088:	2200      	movs	r2, #0
 800208a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800208c:	4b09      	ldr	r3, [pc, #36]	@ (80020b4 <MX_UART5_Init+0x4c>)
 800208e:	220c      	movs	r2, #12
 8002090:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002092:	4b08      	ldr	r3, [pc, #32]	@ (80020b4 <MX_UART5_Init+0x4c>)
 8002094:	2200      	movs	r2, #0
 8002096:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002098:	4b06      	ldr	r3, [pc, #24]	@ (80020b4 <MX_UART5_Init+0x4c>)
 800209a:	2200      	movs	r2, #0
 800209c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800209e:	4805      	ldr	r0, [pc, #20]	@ (80020b4 <MX_UART5_Init+0x4c>)
 80020a0:	f00c fbc4 	bl	800e82c <HAL_UART_Init>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80020aa:	f7ff fc85 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20000d18 	.word	0x20000d18
 80020b8:	40005000 	.word	0x40005000

080020bc <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020c0:	4b11      	ldr	r3, [pc, #68]	@ (8002108 <MX_USART1_UART_Init+0x4c>)
 80020c2:	4a12      	ldr	r2, [pc, #72]	@ (800210c <MX_USART1_UART_Init+0x50>)
 80020c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80020c6:	4b10      	ldr	r3, [pc, #64]	@ (8002108 <MX_USART1_UART_Init+0x4c>)
 80020c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002108 <MX_USART1_UART_Init+0x4c>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002108 <MX_USART1_UART_Init+0x4c>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020da:	4b0b      	ldr	r3, [pc, #44]	@ (8002108 <MX_USART1_UART_Init+0x4c>)
 80020dc:	2200      	movs	r2, #0
 80020de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020e0:	4b09      	ldr	r3, [pc, #36]	@ (8002108 <MX_USART1_UART_Init+0x4c>)
 80020e2:	220c      	movs	r2, #12
 80020e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020e6:	4b08      	ldr	r3, [pc, #32]	@ (8002108 <MX_USART1_UART_Init+0x4c>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020ec:	4b06      	ldr	r3, [pc, #24]	@ (8002108 <MX_USART1_UART_Init+0x4c>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020f2:	4805      	ldr	r0, [pc, #20]	@ (8002108 <MX_USART1_UART_Init+0x4c>)
 80020f4:	f00c fb9a 	bl	800e82c <HAL_UART_Init>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80020fe:	f7ff fc5b 	bl	80019b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20000d60 	.word	0x20000d60
 800210c:	40013800 	.word	0x40013800

08002110 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b08e      	sub	sp, #56	@ 0x38
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002118:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==UART4)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a9f      	ldr	r2, [pc, #636]	@ (80023a8 <HAL_UART_MspInit+0x298>)
 800212c:	4293      	cmp	r3, r2
 800212e:	f040 8087 	bne.w	8002240 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002132:	4b9e      	ldr	r3, [pc, #632]	@ (80023ac <HAL_UART_MspInit+0x29c>)
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	4a9d      	ldr	r2, [pc, #628]	@ (80023ac <HAL_UART_MspInit+0x29c>)
 8002138:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800213c:	61d3      	str	r3, [r2, #28]
 800213e:	4b9b      	ldr	r3, [pc, #620]	@ (80023ac <HAL_UART_MspInit+0x29c>)
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002146:	627b      	str	r3, [r7, #36]	@ 0x24
 8002148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800214a:	4b98      	ldr	r3, [pc, #608]	@ (80023ac <HAL_UART_MspInit+0x29c>)
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	4a97      	ldr	r2, [pc, #604]	@ (80023ac <HAL_UART_MspInit+0x29c>)
 8002150:	f043 0310 	orr.w	r3, r3, #16
 8002154:	6193      	str	r3, [r2, #24]
 8002156:	4b95      	ldr	r3, [pc, #596]	@ (80023ac <HAL_UART_MspInit+0x29c>)
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	f003 0310 	and.w	r3, r3, #16
 800215e:	623b      	str	r3, [r7, #32]
 8002160:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = TX_TO_PC_Pin;
 8002162:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002166:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002168:	2302      	movs	r3, #2
 800216a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800216c:	2303      	movs	r3, #3
 800216e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(TX_TO_PC_GPIO_Port, &GPIO_InitStruct);
 8002170:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002174:	4619      	mov	r1, r3
 8002176:	488e      	ldr	r0, [pc, #568]	@ (80023b0 <HAL_UART_MspInit+0x2a0>)
 8002178:	f007 fd70 	bl	8009c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_FROM_PC_Pin;
 800217c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002180:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002182:	2300      	movs	r3, #0
 8002184:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002186:	2301      	movs	r3, #1
 8002188:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(RX_FROM_PC_GPIO_Port, &GPIO_InitStruct);
 800218a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800218e:	4619      	mov	r1, r3
 8002190:	4887      	ldr	r0, [pc, #540]	@ (80023b0 <HAL_UART_MspInit+0x2a0>)
 8002192:	f007 fd63 	bl	8009c5c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel3;
 8002196:	4b87      	ldr	r3, [pc, #540]	@ (80023b4 <HAL_UART_MspInit+0x2a4>)
 8002198:	4a87      	ldr	r2, [pc, #540]	@ (80023b8 <HAL_UART_MspInit+0x2a8>)
 800219a:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800219c:	4b85      	ldr	r3, [pc, #532]	@ (80023b4 <HAL_UART_MspInit+0x2a4>)
 800219e:	2200      	movs	r2, #0
 80021a0:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021a2:	4b84      	ldr	r3, [pc, #528]	@ (80023b4 <HAL_UART_MspInit+0x2a4>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021a8:	4b82      	ldr	r3, [pc, #520]	@ (80023b4 <HAL_UART_MspInit+0x2a4>)
 80021aa:	2280      	movs	r2, #128	@ 0x80
 80021ac:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021ae:	4b81      	ldr	r3, [pc, #516]	@ (80023b4 <HAL_UART_MspInit+0x2a4>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021b4:	4b7f      	ldr	r3, [pc, #508]	@ (80023b4 <HAL_UART_MspInit+0x2a4>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80021ba:	4b7e      	ldr	r3, [pc, #504]	@ (80023b4 <HAL_UART_MspInit+0x2a4>)
 80021bc:	2200      	movs	r2, #0
 80021be:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021c0:	4b7c      	ldr	r3, [pc, #496]	@ (80023b4 <HAL_UART_MspInit+0x2a4>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80021c6:	487b      	ldr	r0, [pc, #492]	@ (80023b4 <HAL_UART_MspInit+0x2a4>)
 80021c8:	f007 f82a 	bl	8009220 <HAL_DMA_Init>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80021d2:	f7ff fbf1 	bl	80019b8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a76      	ldr	r2, [pc, #472]	@ (80023b4 <HAL_UART_MspInit+0x2a4>)
 80021da:	63da      	str	r2, [r3, #60]	@ 0x3c
 80021dc:	4a75      	ldr	r2, [pc, #468]	@ (80023b4 <HAL_UART_MspInit+0x2a4>)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6253      	str	r3, [r2, #36]	@ 0x24

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Channel5;
 80021e2:	4b76      	ldr	r3, [pc, #472]	@ (80023bc <HAL_UART_MspInit+0x2ac>)
 80021e4:	4a76      	ldr	r2, [pc, #472]	@ (80023c0 <HAL_UART_MspInit+0x2b0>)
 80021e6:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021e8:	4b74      	ldr	r3, [pc, #464]	@ (80023bc <HAL_UART_MspInit+0x2ac>)
 80021ea:	2210      	movs	r2, #16
 80021ec:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021ee:	4b73      	ldr	r3, [pc, #460]	@ (80023bc <HAL_UART_MspInit+0x2ac>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021f4:	4b71      	ldr	r3, [pc, #452]	@ (80023bc <HAL_UART_MspInit+0x2ac>)
 80021f6:	2280      	movs	r2, #128	@ 0x80
 80021f8:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021fa:	4b70      	ldr	r3, [pc, #448]	@ (80023bc <HAL_UART_MspInit+0x2ac>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002200:	4b6e      	ldr	r3, [pc, #440]	@ (80023bc <HAL_UART_MspInit+0x2ac>)
 8002202:	2200      	movs	r2, #0
 8002204:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8002206:	4b6d      	ldr	r3, [pc, #436]	@ (80023bc <HAL_UART_MspInit+0x2ac>)
 8002208:	2200      	movs	r2, #0
 800220a:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800220c:	4b6b      	ldr	r3, [pc, #428]	@ (80023bc <HAL_UART_MspInit+0x2ac>)
 800220e:	2200      	movs	r2, #0
 8002210:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8002212:	486a      	ldr	r0, [pc, #424]	@ (80023bc <HAL_UART_MspInit+0x2ac>)
 8002214:	f007 f804 	bl	8009220 <HAL_DMA_Init>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800221e:	f7ff fbcb 	bl	80019b8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a65      	ldr	r2, [pc, #404]	@ (80023bc <HAL_UART_MspInit+0x2ac>)
 8002226:	639a      	str	r2, [r3, #56]	@ 0x38
 8002228:	4a64      	ldr	r2, [pc, #400]	@ (80023bc <HAL_UART_MspInit+0x2ac>)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800222e:	2200      	movs	r2, #0
 8002230:	2105      	movs	r1, #5
 8002232:	2034      	movs	r0, #52	@ 0x34
 8002234:	f006 ffb7 	bl	80091a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002238:	2034      	movs	r0, #52	@ 0x34
 800223a:	f006 ffd0 	bl	80091de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800223e:	e0af      	b.n	80023a0 <HAL_UART_MspInit+0x290>
  else if(uartHandle->Instance==UART5)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a5f      	ldr	r2, [pc, #380]	@ (80023c4 <HAL_UART_MspInit+0x2b4>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d145      	bne.n	80022d6 <HAL_UART_MspInit+0x1c6>
    __HAL_RCC_UART5_CLK_ENABLE();
 800224a:	4b58      	ldr	r3, [pc, #352]	@ (80023ac <HAL_UART_MspInit+0x29c>)
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	4a57      	ldr	r2, [pc, #348]	@ (80023ac <HAL_UART_MspInit+0x29c>)
 8002250:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002254:	61d3      	str	r3, [r2, #28]
 8002256:	4b55      	ldr	r3, [pc, #340]	@ (80023ac <HAL_UART_MspInit+0x29c>)
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800225e:	61fb      	str	r3, [r7, #28]
 8002260:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002262:	4b52      	ldr	r3, [pc, #328]	@ (80023ac <HAL_UART_MspInit+0x29c>)
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	4a51      	ldr	r2, [pc, #324]	@ (80023ac <HAL_UART_MspInit+0x29c>)
 8002268:	f043 0310 	orr.w	r3, r3, #16
 800226c:	6193      	str	r3, [r2, #24]
 800226e:	4b4f      	ldr	r3, [pc, #316]	@ (80023ac <HAL_UART_MspInit+0x29c>)
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	f003 0310 	and.w	r3, r3, #16
 8002276:	61bb      	str	r3, [r7, #24]
 8002278:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800227a:	4b4c      	ldr	r3, [pc, #304]	@ (80023ac <HAL_UART_MspInit+0x29c>)
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	4a4b      	ldr	r2, [pc, #300]	@ (80023ac <HAL_UART_MspInit+0x29c>)
 8002280:	f043 0320 	orr.w	r3, r3, #32
 8002284:	6193      	str	r3, [r2, #24]
 8002286:	4b49      	ldr	r3, [pc, #292]	@ (80023ac <HAL_UART_MspInit+0x29c>)
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	f003 0320 	and.w	r3, r3, #32
 800228e:	617b      	str	r3, [r7, #20]
 8002290:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002292:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002296:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002298:	2302      	movs	r3, #2
 800229a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800229c:	2303      	movs	r3, #3
 800229e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022a0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80022a4:	4619      	mov	r1, r3
 80022a6:	4842      	ldr	r0, [pc, #264]	@ (80023b0 <HAL_UART_MspInit+0x2a0>)
 80022a8:	f007 fcd8 	bl	8009c5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80022ac:	2304      	movs	r3, #4
 80022ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022b0:	2300      	movs	r3, #0
 80022b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80022bc:	4619      	mov	r1, r3
 80022be:	4842      	ldr	r0, [pc, #264]	@ (80023c8 <HAL_UART_MspInit+0x2b8>)
 80022c0:	f007 fccc 	bl	8009c5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 80022c4:	2200      	movs	r2, #0
 80022c6:	2105      	movs	r1, #5
 80022c8:	2035      	movs	r0, #53	@ 0x35
 80022ca:	f006 ff6c 	bl	80091a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80022ce:	2035      	movs	r0, #53	@ 0x35
 80022d0:	f006 ff85 	bl	80091de <HAL_NVIC_EnableIRQ>
}
 80022d4:	e064      	b.n	80023a0 <HAL_UART_MspInit+0x290>
  else if(uartHandle->Instance==USART1)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a3c      	ldr	r2, [pc, #240]	@ (80023cc <HAL_UART_MspInit+0x2bc>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d15f      	bne.n	80023a0 <HAL_UART_MspInit+0x290>
    __HAL_RCC_USART1_CLK_ENABLE();
 80022e0:	4b32      	ldr	r3, [pc, #200]	@ (80023ac <HAL_UART_MspInit+0x29c>)
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	4a31      	ldr	r2, [pc, #196]	@ (80023ac <HAL_UART_MspInit+0x29c>)
 80022e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022ea:	6193      	str	r3, [r2, #24]
 80022ec:	4b2f      	ldr	r3, [pc, #188]	@ (80023ac <HAL_UART_MspInit+0x29c>)
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022f4:	613b      	str	r3, [r7, #16]
 80022f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f8:	4b2c      	ldr	r3, [pc, #176]	@ (80023ac <HAL_UART_MspInit+0x29c>)
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	4a2b      	ldr	r2, [pc, #172]	@ (80023ac <HAL_UART_MspInit+0x29c>)
 80022fe:	f043 0304 	orr.w	r3, r3, #4
 8002302:	6193      	str	r3, [r2, #24]
 8002304:	4b29      	ldr	r3, [pc, #164]	@ (80023ac <HAL_UART_MspInit+0x29c>)
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002310:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002314:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002316:	2302      	movs	r3, #2
 8002318:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800231a:	2303      	movs	r3, #3
 800231c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002322:	4619      	mov	r1, r3
 8002324:	482a      	ldr	r0, [pc, #168]	@ (80023d0 <HAL_UART_MspInit+0x2c0>)
 8002326:	f007 fc99 	bl	8009c5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800232a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800232e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002330:	2300      	movs	r3, #0
 8002332:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002334:	2300      	movs	r3, #0
 8002336:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002338:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800233c:	4619      	mov	r1, r3
 800233e:	4824      	ldr	r0, [pc, #144]	@ (80023d0 <HAL_UART_MspInit+0x2c0>)
 8002340:	f007 fc8c 	bl	8009c5c <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002344:	4b23      	ldr	r3, [pc, #140]	@ (80023d4 <HAL_UART_MspInit+0x2c4>)
 8002346:	4a24      	ldr	r2, [pc, #144]	@ (80023d8 <HAL_UART_MspInit+0x2c8>)
 8002348:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800234a:	4b22      	ldr	r3, [pc, #136]	@ (80023d4 <HAL_UART_MspInit+0x2c4>)
 800234c:	2210      	movs	r2, #16
 800234e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002350:	4b20      	ldr	r3, [pc, #128]	@ (80023d4 <HAL_UART_MspInit+0x2c4>)
 8002352:	2200      	movs	r2, #0
 8002354:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002356:	4b1f      	ldr	r3, [pc, #124]	@ (80023d4 <HAL_UART_MspInit+0x2c4>)
 8002358:	2280      	movs	r2, #128	@ 0x80
 800235a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800235c:	4b1d      	ldr	r3, [pc, #116]	@ (80023d4 <HAL_UART_MspInit+0x2c4>)
 800235e:	2200      	movs	r2, #0
 8002360:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002362:	4b1c      	ldr	r3, [pc, #112]	@ (80023d4 <HAL_UART_MspInit+0x2c4>)
 8002364:	2200      	movs	r2, #0
 8002366:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002368:	4b1a      	ldr	r3, [pc, #104]	@ (80023d4 <HAL_UART_MspInit+0x2c4>)
 800236a:	2200      	movs	r2, #0
 800236c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800236e:	4b19      	ldr	r3, [pc, #100]	@ (80023d4 <HAL_UART_MspInit+0x2c4>)
 8002370:	2200      	movs	r2, #0
 8002372:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002374:	4817      	ldr	r0, [pc, #92]	@ (80023d4 <HAL_UART_MspInit+0x2c4>)
 8002376:	f006 ff53 	bl	8009220 <HAL_DMA_Init>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <HAL_UART_MspInit+0x274>
      Error_Handler();
 8002380:	f7ff fb1a 	bl	80019b8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a13      	ldr	r2, [pc, #76]	@ (80023d4 <HAL_UART_MspInit+0x2c4>)
 8002388:	639a      	str	r2, [r3, #56]	@ 0x38
 800238a:	4a12      	ldr	r2, [pc, #72]	@ (80023d4 <HAL_UART_MspInit+0x2c4>)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002390:	2200      	movs	r2, #0
 8002392:	2105      	movs	r1, #5
 8002394:	2025      	movs	r0, #37	@ 0x25
 8002396:	f006 ff06 	bl	80091a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800239a:	2025      	movs	r0, #37	@ 0x25
 800239c:	f006 ff1f 	bl	80091de <HAL_NVIC_EnableIRQ>
}
 80023a0:	bf00      	nop
 80023a2:	3738      	adds	r7, #56	@ 0x38
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40004c00 	.word	0x40004c00
 80023ac:	40021000 	.word	0x40021000
 80023b0:	40011000 	.word	0x40011000
 80023b4:	20000da8 	.word	0x20000da8
 80023b8:	40020430 	.word	0x40020430
 80023bc:	20000dec 	.word	0x20000dec
 80023c0:	40020458 	.word	0x40020458
 80023c4:	40005000 	.word	0x40005000
 80023c8:	40011400 	.word	0x40011400
 80023cc:	40013800 	.word	0x40013800
 80023d0:	40010800 	.word	0x40010800
 80023d4:	20000e30 	.word	0x20000e30
 80023d8:	40020044 	.word	0x40020044

080023dc <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==UART4)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a27      	ldr	r2, [pc, #156]	@ (8002488 <HAL_UART_MspDeInit+0xac>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d118      	bne.n	8002420 <HAL_UART_MspDeInit+0x44>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 80023ee:	4b27      	ldr	r3, [pc, #156]	@ (800248c <HAL_UART_MspDeInit+0xb0>)
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	4a26      	ldr	r2, [pc, #152]	@ (800248c <HAL_UART_MspDeInit+0xb0>)
 80023f4:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80023f8:	61d3      	str	r3, [r2, #28]

    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOC, TX_TO_PC_Pin|RX_FROM_PC_Pin);
 80023fa:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 80023fe:	4824      	ldr	r0, [pc, #144]	@ (8002490 <HAL_UART_MspDeInit+0xb4>)
 8002400:	f007 fdc0 	bl	8009f84 <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002408:	4618      	mov	r0, r3
 800240a:	f006 ff7f 	bl	800930c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002412:	4618      	mov	r0, r3
 8002414:	f006 ff7a 	bl	800930c <HAL_DMA_DeInit>

    /* UART4 interrupt Deinit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 8002418:	2034      	movs	r0, #52	@ 0x34
 800241a:	f006 feee 	bl	80091fa <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 800241e:	e02f      	b.n	8002480 <HAL_UART_MspDeInit+0xa4>
  else if(uartHandle->Instance==UART5)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a1b      	ldr	r2, [pc, #108]	@ (8002494 <HAL_UART_MspDeInit+0xb8>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d112      	bne.n	8002450 <HAL_UART_MspDeInit+0x74>
    __HAL_RCC_UART5_CLK_DISABLE();
 800242a:	4b18      	ldr	r3, [pc, #96]	@ (800248c <HAL_UART_MspDeInit+0xb0>)
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	4a17      	ldr	r2, [pc, #92]	@ (800248c <HAL_UART_MspDeInit+0xb0>)
 8002430:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002434:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 8002436:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800243a:	4815      	ldr	r0, [pc, #84]	@ (8002490 <HAL_UART_MspDeInit+0xb4>)
 800243c:	f007 fda2 	bl	8009f84 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 8002440:	2104      	movs	r1, #4
 8002442:	4815      	ldr	r0, [pc, #84]	@ (8002498 <HAL_UART_MspDeInit+0xbc>)
 8002444:	f007 fd9e 	bl	8009f84 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 8002448:	2035      	movs	r0, #53	@ 0x35
 800244a:	f006 fed6 	bl	80091fa <HAL_NVIC_DisableIRQ>
}
 800244e:	e017      	b.n	8002480 <HAL_UART_MspDeInit+0xa4>
  else if(uartHandle->Instance==USART1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a11      	ldr	r2, [pc, #68]	@ (800249c <HAL_UART_MspDeInit+0xc0>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d112      	bne.n	8002480 <HAL_UART_MspDeInit+0xa4>
    __HAL_RCC_USART1_CLK_DISABLE();
 800245a:	4b0c      	ldr	r3, [pc, #48]	@ (800248c <HAL_UART_MspDeInit+0xb0>)
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	4a0b      	ldr	r2, [pc, #44]	@ (800248c <HAL_UART_MspDeInit+0xb0>)
 8002460:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002464:	6193      	str	r3, [r2, #24]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8002466:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800246a:	480d      	ldr	r0, [pc, #52]	@ (80024a0 <HAL_UART_MspDeInit+0xc4>)
 800246c:	f007 fd8a 	bl	8009f84 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002474:	4618      	mov	r0, r3
 8002476:	f006 ff49 	bl	800930c <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800247a:	2025      	movs	r0, #37	@ 0x25
 800247c:	f006 febd 	bl	80091fa <HAL_NVIC_DisableIRQ>
}
 8002480:	bf00      	nop
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40004c00 	.word	0x40004c00
 800248c:	40021000 	.word	0x40021000
 8002490:	40011000 	.word	0x40011000
 8002494:	40005000 	.word	0x40005000
 8002498:	40011400 	.word	0x40011400
 800249c:	40013800 	.word	0x40013800
 80024a0:	40010800 	.word	0x40010800

080024a4 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 1 */
extern uint8_t 				SujiRxBuff[];
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b088      	sub	sp, #32
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == UART4) {	// Thread Suji 로 오는 packet 수신 (PC 보드에서 보냄)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a1e      	ldr	r2, [pc, #120]	@ (8002530 <HAL_UARTEx_RxEventCallback+0x8c>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d130      	bne.n	800251c <HAL_UARTEx_RxEventCallback+0x78>
		suji_msg_t suji_msg;

		suji_msg.head.type = SUJI_MSG_COMMAND;
 80024ba:	2301      	movs	r3, #1
 80024bc:	733b      	strb	r3, [r7, #12]
		suji_msg.head.dst = WORKM_SUJI;
 80024be:	2304      	movs	r3, #4
 80024c0:	737b      	strb	r3, [r7, #13]
		suji_msg.head.src = WORKM_UART4;
 80024c2:	2309      	movs	r3, #9
 80024c4:	73bb      	strb	r3, [r7, #14]
		suji_msg.head.len = Size;
 80024c6:	887b      	ldrh	r3, [r7, #2]
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	73fb      	strb	r3, [r7, #15]
		memcpy (&suji_msg.body.Byte[0], &SujiRxBuff[0], Size);
 80024cc:	887a      	ldrh	r2, [r7, #2]
 80024ce:	f107 030c 	add.w	r3, r7, #12
 80024d2:	3304      	adds	r3, #4
 80024d4:	4917      	ldr	r1, [pc, #92]	@ (8002534 <HAL_UARTEx_RxEventCallback+0x90>)
 80024d6:	4618      	mov	r0, r3
 80024d8:	f012 fa63 	bl	80149a2 <memcpy>
		osMessageQueuePut(sujiThreadQ, &suji_msg, 0U, 0U);
 80024dc:	4b16      	ldr	r3, [pc, #88]	@ (8002538 <HAL_UARTEx_RxEventCallback+0x94>)
 80024de:	6818      	ldr	r0, [r3, #0]
 80024e0:	f107 010c 	add.w	r1, r7, #12
 80024e4:	2300      	movs	r3, #0
 80024e6:	2200      	movs	r2, #0
 80024e8:	f00d ff56 	bl	8010398 <osMessageQueuePut>

		assert (HAL_UARTEx_ReceiveToIdle_DMA(huart, SujiRxBuff, SUJI_RX_BUFF_SIZE) == HAL_OK);
 80024ec:	2210      	movs	r2, #16
 80024ee:	4911      	ldr	r1, [pc, #68]	@ (8002534 <HAL_UARTEx_RxEventCallback+0x90>)
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f00c fa81 	bl	800e9f8 <HAL_UARTEx_ReceiveToIdle_DMA>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d006      	beq.n	800250a <HAL_UARTEx_RxEventCallback+0x66>
 80024fc:	4b0f      	ldr	r3, [pc, #60]	@ (800253c <HAL_UARTEx_RxEventCallback+0x98>)
 80024fe:	4a10      	ldr	r2, [pc, #64]	@ (8002540 <HAL_UARTEx_RxEventCallback+0x9c>)
 8002500:	f240 1163 	movw	r1, #355	@ 0x163
 8002504:	480f      	ldr	r0, [pc, #60]	@ (8002544 <HAL_UARTEx_RxEventCallback+0xa0>)
 8002506:	f011 fd07 	bl	8013f18 <__assert_func>
		__HAL_DMA_DISABLE_IT(&hdma_uart4_rx, DMA_IT_HT);
 800250a:	4b0f      	ldr	r3, [pc, #60]	@ (8002548 <HAL_UARTEx_RxEventCallback+0xa4>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	4b0d      	ldr	r3, [pc, #52]	@ (8002548 <HAL_UARTEx_RxEventCallback+0xa4>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 0204 	bic.w	r2, r2, #4
 8002518:	601a      	str	r2, [r3, #0]
	}
	else {
		assert (0 == 1);
	}
}
 800251a:	e006      	b.n	800252a <HAL_UARTEx_RxEventCallback+0x86>
		assert (0 == 1);
 800251c:	4b0b      	ldr	r3, [pc, #44]	@ (800254c <HAL_UARTEx_RxEventCallback+0xa8>)
 800251e:	4a08      	ldr	r2, [pc, #32]	@ (8002540 <HAL_UARTEx_RxEventCallback+0x9c>)
 8002520:	f240 1167 	movw	r1, #359	@ 0x167
 8002524:	4807      	ldr	r0, [pc, #28]	@ (8002544 <HAL_UARTEx_RxEventCallback+0xa0>)
 8002526:	f011 fcf7 	bl	8013f18 <__assert_func>
}
 800252a:	3720      	adds	r7, #32
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40004c00 	.word	0x40004c00
 8002534:	2000116c 	.word	0x2000116c
 8002538:	20001168 	.word	0x20001168
 800253c:	0801579c 	.word	0x0801579c
 8002540:	08019aac 	.word	0x08019aac
 8002544:	080157ec 	.word	0x080157ec
 8002548:	20000da8 	.word	0x20000da8
 800254c:	08015800 	.word	0x08015800

08002550 <scw_cmd_pcreset>:
 */

#include "main.h"

static void scw_cmd_pcreset (SYS_CMD_DEVICE_NODE* pCmdIO, int argc, char **argv)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
	const void* cmdIoParam = pCmdIO->cmdIoParam;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	617b      	str	r3, [r7, #20]

	if (argc != 2) goto USAGE;
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	2b02      	cmp	r3, #2
 8002566:	d121      	bne.n	80025ac <scw_cmd_pcreset+0x5c>

	if (!strcmp(argv[1], "on")) {
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3304      	adds	r3, #4
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4916      	ldr	r1, [pc, #88]	@ (80025c8 <scw_cmd_pcreset+0x78>)
 8002570:	4618      	mov	r0, r3
 8002572:	f7fd fe5d 	bl	8000230 <strcmp>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d106      	bne.n	800258a <scw_cmd_pcreset+0x3a>
		HAL_GPIO_WritePin(PC_RESET_GPIO_Port, PC_RESET_Pin, GPIO_PIN_SET);
 800257c:	2201      	movs	r2, #1
 800257e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002582:	4812      	ldr	r0, [pc, #72]	@ (80025cc <scw_cmd_pcreset+0x7c>)
 8002584:	f007 fde1 	bl	800a14a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PC_RESET_GPIO_Port, PC_RESET_Pin, GPIO_PIN_RESET);
	}
	else {
		goto USAGE;
	}
	return;
 8002588:	e01a      	b.n	80025c0 <scw_cmd_pcreset+0x70>
	else if (!strcmp(argv[1], "off")) {
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	3304      	adds	r3, #4
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	490f      	ldr	r1, [pc, #60]	@ (80025d0 <scw_cmd_pcreset+0x80>)
 8002592:	4618      	mov	r0, r3
 8002594:	f7fd fe4c 	bl	8000230 <strcmp>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d108      	bne.n	80025b0 <scw_cmd_pcreset+0x60>
		HAL_GPIO_WritePin(PC_RESET_GPIO_Port, PC_RESET_Pin, GPIO_PIN_RESET);
 800259e:	2200      	movs	r2, #0
 80025a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025a4:	4809      	ldr	r0, [pc, #36]	@ (80025cc <scw_cmd_pcreset+0x7c>)
 80025a6:	f007 fdd0 	bl	800a14a <HAL_GPIO_WritePin>
	return;
 80025aa:	e009      	b.n	80025c0 <scw_cmd_pcreset+0x70>
	if (argc != 2) goto USAGE;
 80025ac:	bf00      	nop
 80025ae:	e000      	b.n	80025b2 <scw_cmd_pcreset+0x62>
		goto USAGE;
 80025b0:	bf00      	nop

	USAGE :
	(*pCmdIO->pCmdApi->msg)(cmdIoParam, "USAGE : pcreset on/off"LINE_TERM);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4906      	ldr	r1, [pc, #24]	@ (80025d4 <scw_cmd_pcreset+0x84>)
 80025ba:	6978      	ldr	r0, [r7, #20]
 80025bc:	4798      	blx	r3
	return;
 80025be:	bf00      	nop
}
 80025c0:	3718      	adds	r7, #24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	08015808 	.word	0x08015808
 80025cc:	40010800 	.word	0x40010800
 80025d0:	0801580c 	.word	0x0801580c
 80025d4:	08015810 	.word	0x08015810

080025d8 <scw_cmd_ssr1>:

static void scw_cmd_ssr1 (SYS_CMD_DEVICE_NODE* pCmdIO, int argc, char **argv)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
	const void* cmdIoParam = pCmdIO->cmdIoParam;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	617b      	str	r3, [r7, #20]

	if (argc != 2) goto USAGE;
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d121      	bne.n	8002634 <scw_cmd_ssr1+0x5c>

	if (!strcmp(argv[1], "on")) 	ssr1_on;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3304      	adds	r3, #4
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4916      	ldr	r1, [pc, #88]	@ (8002650 <scw_cmd_ssr1+0x78>)
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7fd fe19 	bl	8000230 <strcmp>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d106      	bne.n	8002612 <scw_cmd_ssr1+0x3a>
 8002604:	2200      	movs	r2, #0
 8002606:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800260a:	4812      	ldr	r0, [pc, #72]	@ (8002654 <scw_cmd_ssr1+0x7c>)
 800260c:	f007 fd9d 	bl	800a14a <HAL_GPIO_WritePin>
	else if (!strcmp(argv[1], "off")) ssr1_off;
	else 	goto USAGE;
	return;
 8002610:	e01a      	b.n	8002648 <scw_cmd_ssr1+0x70>
	else if (!strcmp(argv[1], "off")) ssr1_off;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	3304      	adds	r3, #4
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	490f      	ldr	r1, [pc, #60]	@ (8002658 <scw_cmd_ssr1+0x80>)
 800261a:	4618      	mov	r0, r3
 800261c:	f7fd fe08 	bl	8000230 <strcmp>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d108      	bne.n	8002638 <scw_cmd_ssr1+0x60>
 8002626:	2201      	movs	r2, #1
 8002628:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800262c:	4809      	ldr	r0, [pc, #36]	@ (8002654 <scw_cmd_ssr1+0x7c>)
 800262e:	f007 fd8c 	bl	800a14a <HAL_GPIO_WritePin>
	return;
 8002632:	e009      	b.n	8002648 <scw_cmd_ssr1+0x70>
	if (argc != 2) goto USAGE;
 8002634:	bf00      	nop
 8002636:	e000      	b.n	800263a <scw_cmd_ssr1+0x62>
	else 	goto USAGE;
 8002638:	bf00      	nop

	USAGE :
	(*pCmdIO->pCmdApi->msg)(cmdIoParam, "USAGE : ssr1 on/off"LINE_TERM);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4906      	ldr	r1, [pc, #24]	@ (800265c <scw_cmd_ssr1+0x84>)
 8002642:	6978      	ldr	r0, [r7, #20]
 8002644:	4798      	blx	r3
	return;
 8002646:	bf00      	nop
}
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	08015808 	.word	0x08015808
 8002654:	40010c00 	.word	0x40010c00
 8002658:	0801580c 	.word	0x0801580c
 800265c:	0801582c 	.word	0x0801582c

08002660 <scw_cmd_ssr2>:

static void scw_cmd_ssr2 (SYS_CMD_DEVICE_NODE* pCmdIO, int argc, char **argv)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
	const void* cmdIoParam = pCmdIO->cmdIoParam;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	617b      	str	r3, [r7, #20]

	if (argc != 2) goto USAGE;
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	2b02      	cmp	r3, #2
 8002676:	d121      	bne.n	80026bc <scw_cmd_ssr2+0x5c>

	if (!strcmp(argv[1], "on")) 	ssr2_on;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3304      	adds	r3, #4
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4916      	ldr	r1, [pc, #88]	@ (80026d8 <scw_cmd_ssr2+0x78>)
 8002680:	4618      	mov	r0, r3
 8002682:	f7fd fdd5 	bl	8000230 <strcmp>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d106      	bne.n	800269a <scw_cmd_ssr2+0x3a>
 800268c:	2200      	movs	r2, #0
 800268e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002692:	4812      	ldr	r0, [pc, #72]	@ (80026dc <scw_cmd_ssr2+0x7c>)
 8002694:	f007 fd59 	bl	800a14a <HAL_GPIO_WritePin>
	else if (!strcmp(argv[1], "off")) ssr2_off;
	else 	goto USAGE;
	return;
 8002698:	e01a      	b.n	80026d0 <scw_cmd_ssr2+0x70>
	else if (!strcmp(argv[1], "off")) ssr2_off;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	3304      	adds	r3, #4
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	490f      	ldr	r1, [pc, #60]	@ (80026e0 <scw_cmd_ssr2+0x80>)
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fd fdc4 	bl	8000230 <strcmp>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d108      	bne.n	80026c0 <scw_cmd_ssr2+0x60>
 80026ae:	2201      	movs	r2, #1
 80026b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80026b4:	4809      	ldr	r0, [pc, #36]	@ (80026dc <scw_cmd_ssr2+0x7c>)
 80026b6:	f007 fd48 	bl	800a14a <HAL_GPIO_WritePin>
	return;
 80026ba:	e009      	b.n	80026d0 <scw_cmd_ssr2+0x70>
	if (argc != 2) goto USAGE;
 80026bc:	bf00      	nop
 80026be:	e000      	b.n	80026c2 <scw_cmd_ssr2+0x62>
	else 	goto USAGE;
 80026c0:	bf00      	nop

	USAGE :
	(*pCmdIO->pCmdApi->msg)(cmdIoParam, "USAGE : ssr2 on/off"LINE_TERM);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4906      	ldr	r1, [pc, #24]	@ (80026e4 <scw_cmd_ssr2+0x84>)
 80026ca:	6978      	ldr	r0, [r7, #20]
 80026cc:	4798      	blx	r3
	return;
 80026ce:	bf00      	nop
}
 80026d0:	3718      	adds	r7, #24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	08015808 	.word	0x08015808
 80026dc:	40010c00 	.word	0x40010c00
 80026e0:	0801580c 	.word	0x0801580c
 80026e4:	08015844 	.word	0x08015844

080026e8 <scw_cmd_ssr3>:

static void scw_cmd_ssr3 (SYS_CMD_DEVICE_NODE* pCmdIO, int argc, char **argv)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
	const void* cmdIoParam = pCmdIO->cmdIoParam;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	617b      	str	r3, [r7, #20]

	if (argc != 2) goto USAGE;
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d121      	bne.n	8002744 <scw_cmd_ssr3+0x5c>

	if (!strcmp(argv[1], "on")) 	ssr3_on;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3304      	adds	r3, #4
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4916      	ldr	r1, [pc, #88]	@ (8002760 <scw_cmd_ssr3+0x78>)
 8002708:	4618      	mov	r0, r3
 800270a:	f7fd fd91 	bl	8000230 <strcmp>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d106      	bne.n	8002722 <scw_cmd_ssr3+0x3a>
 8002714:	2200      	movs	r2, #0
 8002716:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800271a:	4812      	ldr	r0, [pc, #72]	@ (8002764 <scw_cmd_ssr3+0x7c>)
 800271c:	f007 fd15 	bl	800a14a <HAL_GPIO_WritePin>
	else if (!strcmp(argv[1], "off")) ssr3_off;
	else 	goto USAGE;
	return;
 8002720:	e01a      	b.n	8002758 <scw_cmd_ssr3+0x70>
	else if (!strcmp(argv[1], "off")) ssr3_off;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	3304      	adds	r3, #4
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	490f      	ldr	r1, [pc, #60]	@ (8002768 <scw_cmd_ssr3+0x80>)
 800272a:	4618      	mov	r0, r3
 800272c:	f7fd fd80 	bl	8000230 <strcmp>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d108      	bne.n	8002748 <scw_cmd_ssr3+0x60>
 8002736:	2201      	movs	r2, #1
 8002738:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800273c:	4809      	ldr	r0, [pc, #36]	@ (8002764 <scw_cmd_ssr3+0x7c>)
 800273e:	f007 fd04 	bl	800a14a <HAL_GPIO_WritePin>
	return;
 8002742:	e009      	b.n	8002758 <scw_cmd_ssr3+0x70>
	if (argc != 2) goto USAGE;
 8002744:	bf00      	nop
 8002746:	e000      	b.n	800274a <scw_cmd_ssr3+0x62>
	else 	goto USAGE;
 8002748:	bf00      	nop

	USAGE :
	(*pCmdIO->pCmdApi->msg)(cmdIoParam, "USAGE : ssr3 on/off"LINE_TERM);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4906      	ldr	r1, [pc, #24]	@ (800276c <scw_cmd_ssr3+0x84>)
 8002752:	6978      	ldr	r0, [r7, #20]
 8002754:	4798      	blx	r3
	return;
 8002756:	bf00      	nop
}
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	08015808 	.word	0x08015808
 8002764:	40010c00 	.word	0x40010c00
 8002768:	0801580c 	.word	0x0801580c
 800276c:	0801585c 	.word	0x0801585c

08002770 <scw_cmd_ssr4>:

static void scw_cmd_ssr4 (SYS_CMD_DEVICE_NODE* pCmdIO, int argc, char **argv)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
	const void* cmdIoParam = pCmdIO->cmdIoParam;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	617b      	str	r3, [r7, #20]

	if (argc != 2) goto USAGE;
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	2b02      	cmp	r3, #2
 8002786:	d121      	bne.n	80027cc <scw_cmd_ssr4+0x5c>

	if (!strcmp(argv[1], "on")) 	ssr4_on;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3304      	adds	r3, #4
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4916      	ldr	r1, [pc, #88]	@ (80027e8 <scw_cmd_ssr4+0x78>)
 8002790:	4618      	mov	r0, r3
 8002792:	f7fd fd4d 	bl	8000230 <strcmp>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d106      	bne.n	80027aa <scw_cmd_ssr4+0x3a>
 800279c:	2200      	movs	r2, #0
 800279e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80027a2:	4812      	ldr	r0, [pc, #72]	@ (80027ec <scw_cmd_ssr4+0x7c>)
 80027a4:	f007 fcd1 	bl	800a14a <HAL_GPIO_WritePin>
	else if (!strcmp(argv[1], "off")) ssr4_off;
	else 	goto USAGE;
	return;
 80027a8:	e01a      	b.n	80027e0 <scw_cmd_ssr4+0x70>
	else if (!strcmp(argv[1], "off")) ssr4_off;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	3304      	adds	r3, #4
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	490f      	ldr	r1, [pc, #60]	@ (80027f0 <scw_cmd_ssr4+0x80>)
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fd fd3c 	bl	8000230 <strcmp>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d108      	bne.n	80027d0 <scw_cmd_ssr4+0x60>
 80027be:	2201      	movs	r2, #1
 80027c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80027c4:	4809      	ldr	r0, [pc, #36]	@ (80027ec <scw_cmd_ssr4+0x7c>)
 80027c6:	f007 fcc0 	bl	800a14a <HAL_GPIO_WritePin>
	return;
 80027ca:	e009      	b.n	80027e0 <scw_cmd_ssr4+0x70>
	if (argc != 2) goto USAGE;
 80027cc:	bf00      	nop
 80027ce:	e000      	b.n	80027d2 <scw_cmd_ssr4+0x62>
	else 	goto USAGE;
 80027d0:	bf00      	nop

	USAGE :
	(*pCmdIO->pCmdApi->msg)(cmdIoParam, "USAGE : ssr4 on/off"LINE_TERM);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4906      	ldr	r1, [pc, #24]	@ (80027f4 <scw_cmd_ssr4+0x84>)
 80027da:	6978      	ldr	r0, [r7, #20]
 80027dc:	4798      	blx	r3
	return;
 80027de:	bf00      	nop
}
 80027e0:	3718      	adds	r7, #24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	08015808 	.word	0x08015808
 80027ec:	40010c00 	.word	0x40010c00
 80027f0:	0801580c 	.word	0x0801580c
 80027f4:	08015874 	.word	0x08015874

080027f8 <scw_cmd_5v_sw1>:

static void scw_cmd_5v_sw1 (SYS_CMD_DEVICE_NODE* pCmdIO, int argc, char **argv)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
	const void* cmdIoParam = pCmdIO->cmdIoParam;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	617b      	str	r3, [r7, #20]

	if (argc != 2) goto USAGE;
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	2b02      	cmp	r3, #2
 800280e:	d11f      	bne.n	8002850 <scw_cmd_5v_sw1+0x58>

	if (!strcmp(argv[1], "on")) _5v_sw1_on;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3304      	adds	r3, #4
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4915      	ldr	r1, [pc, #84]	@ (800286c <scw_cmd_5v_sw1+0x74>)
 8002818:	4618      	mov	r0, r3
 800281a:	f7fd fd09 	bl	8000230 <strcmp>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d105      	bne.n	8002830 <scw_cmd_5v_sw1+0x38>
 8002824:	2201      	movs	r2, #1
 8002826:	2140      	movs	r1, #64	@ 0x40
 8002828:	4811      	ldr	r0, [pc, #68]	@ (8002870 <scw_cmd_5v_sw1+0x78>)
 800282a:	f007 fc8e 	bl	800a14a <HAL_GPIO_WritePin>
	else if (!strcmp(argv[1], "off")) _5v_sw1_off;
	else goto USAGE;

	return;
 800282e:	e019      	b.n	8002864 <scw_cmd_5v_sw1+0x6c>
	else if (!strcmp(argv[1], "off")) _5v_sw1_off;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3304      	adds	r3, #4
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	490f      	ldr	r1, [pc, #60]	@ (8002874 <scw_cmd_5v_sw1+0x7c>)
 8002838:	4618      	mov	r0, r3
 800283a:	f7fd fcf9 	bl	8000230 <strcmp>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d107      	bne.n	8002854 <scw_cmd_5v_sw1+0x5c>
 8002844:	2200      	movs	r2, #0
 8002846:	2140      	movs	r1, #64	@ 0x40
 8002848:	4809      	ldr	r0, [pc, #36]	@ (8002870 <scw_cmd_5v_sw1+0x78>)
 800284a:	f007 fc7e 	bl	800a14a <HAL_GPIO_WritePin>
	return;
 800284e:	e009      	b.n	8002864 <scw_cmd_5v_sw1+0x6c>
	if (argc != 2) goto USAGE;
 8002850:	bf00      	nop
 8002852:	e000      	b.n	8002856 <scw_cmd_5v_sw1+0x5e>
	else goto USAGE;
 8002854:	bf00      	nop

	USAGE :
	(*pCmdIO->pCmdApi->msg)(cmdIoParam, "USAGE : _5v_sw1 on/off"LINE_TERM);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4906      	ldr	r1, [pc, #24]	@ (8002878 <scw_cmd_5v_sw1+0x80>)
 800285e:	6978      	ldr	r0, [r7, #20]
 8002860:	4798      	blx	r3
	return;
 8002862:	bf00      	nop
}
 8002864:	3718      	adds	r7, #24
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	08015808 	.word	0x08015808
 8002870:	40011000 	.word	0x40011000
 8002874:	0801580c 	.word	0x0801580c
 8002878:	0801588c 	.word	0x0801588c

0800287c <scw_cmd_5v_sw2>:

static void scw_cmd_5v_sw2 (SYS_CMD_DEVICE_NODE* pCmdIO, int argc, char **argv)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
	const void* cmdIoParam = pCmdIO->cmdIoParam;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	617b      	str	r3, [r7, #20]

	if (argc != 2) goto USAGE;
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	2b02      	cmp	r3, #2
 8002892:	d11f      	bne.n	80028d4 <scw_cmd_5v_sw2+0x58>

	if (!strcmp(argv[1], "on")) _5v_sw2_on;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3304      	adds	r3, #4
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4915      	ldr	r1, [pc, #84]	@ (80028f0 <scw_cmd_5v_sw2+0x74>)
 800289c:	4618      	mov	r0, r3
 800289e:	f7fd fcc7 	bl	8000230 <strcmp>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d105      	bne.n	80028b4 <scw_cmd_5v_sw2+0x38>
 80028a8:	2201      	movs	r2, #1
 80028aa:	2180      	movs	r1, #128	@ 0x80
 80028ac:	4811      	ldr	r0, [pc, #68]	@ (80028f4 <scw_cmd_5v_sw2+0x78>)
 80028ae:	f007 fc4c 	bl	800a14a <HAL_GPIO_WritePin>
	else if (!strcmp(argv[1], "off")) _5v_sw2_off;
	else goto USAGE;

	return;
 80028b2:	e019      	b.n	80028e8 <scw_cmd_5v_sw2+0x6c>
	else if (!strcmp(argv[1], "off")) _5v_sw2_off;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3304      	adds	r3, #4
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	490f      	ldr	r1, [pc, #60]	@ (80028f8 <scw_cmd_5v_sw2+0x7c>)
 80028bc:	4618      	mov	r0, r3
 80028be:	f7fd fcb7 	bl	8000230 <strcmp>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d107      	bne.n	80028d8 <scw_cmd_5v_sw2+0x5c>
 80028c8:	2200      	movs	r2, #0
 80028ca:	2180      	movs	r1, #128	@ 0x80
 80028cc:	4809      	ldr	r0, [pc, #36]	@ (80028f4 <scw_cmd_5v_sw2+0x78>)
 80028ce:	f007 fc3c 	bl	800a14a <HAL_GPIO_WritePin>
	return;
 80028d2:	e009      	b.n	80028e8 <scw_cmd_5v_sw2+0x6c>
	if (argc != 2) goto USAGE;
 80028d4:	bf00      	nop
 80028d6:	e000      	b.n	80028da <scw_cmd_5v_sw2+0x5e>
	else goto USAGE;
 80028d8:	bf00      	nop

	USAGE :
	(*pCmdIO->pCmdApi->msg)(cmdIoParam, "USAGE : _5v_sw2 on/off"LINE_TERM);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4906      	ldr	r1, [pc, #24]	@ (80028fc <scw_cmd_5v_sw2+0x80>)
 80028e2:	6978      	ldr	r0, [r7, #20]
 80028e4:	4798      	blx	r3
	return;
 80028e6:	bf00      	nop
}
 80028e8:	3718      	adds	r7, #24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	08015808 	.word	0x08015808
 80028f4:	40011000 	.word	0x40011000
 80028f8:	0801580c 	.word	0x0801580c
 80028fc:	080158a8 	.word	0x080158a8

08002900 <scw_cmd_12v_sw1>:

static void scw_cmd_12v_sw1 (SYS_CMD_DEVICE_NODE* pCmdIO, int argc, char **argv)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
	const void* cmdIoParam = pCmdIO->cmdIoParam;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	617b      	str	r3, [r7, #20]

	if (argc != 2) goto USAGE;
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2b02      	cmp	r3, #2
 8002916:	d121      	bne.n	800295c <scw_cmd_12v_sw1+0x5c>

	if (!strcmp(argv[1], "on")) _12v_sw1_on;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3304      	adds	r3, #4
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4916      	ldr	r1, [pc, #88]	@ (8002978 <scw_cmd_12v_sw1+0x78>)
 8002920:	4618      	mov	r0, r3
 8002922:	f7fd fc85 	bl	8000230 <strcmp>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d106      	bne.n	800293a <scw_cmd_12v_sw1+0x3a>
 800292c:	2201      	movs	r2, #1
 800292e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002932:	4812      	ldr	r0, [pc, #72]	@ (800297c <scw_cmd_12v_sw1+0x7c>)
 8002934:	f007 fc09 	bl	800a14a <HAL_GPIO_WritePin>
	else if (!strcmp(argv[1], "off")) _12v_sw1_off;
	else goto USAGE;

	return;
 8002938:	e01a      	b.n	8002970 <scw_cmd_12v_sw1+0x70>
	else if (!strcmp(argv[1], "off")) _12v_sw1_off;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	3304      	adds	r3, #4
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	490f      	ldr	r1, [pc, #60]	@ (8002980 <scw_cmd_12v_sw1+0x80>)
 8002942:	4618      	mov	r0, r3
 8002944:	f7fd fc74 	bl	8000230 <strcmp>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d108      	bne.n	8002960 <scw_cmd_12v_sw1+0x60>
 800294e:	2200      	movs	r2, #0
 8002950:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002954:	4809      	ldr	r0, [pc, #36]	@ (800297c <scw_cmd_12v_sw1+0x7c>)
 8002956:	f007 fbf8 	bl	800a14a <HAL_GPIO_WritePin>
	return;
 800295a:	e009      	b.n	8002970 <scw_cmd_12v_sw1+0x70>
	if (argc != 2) goto USAGE;
 800295c:	bf00      	nop
 800295e:	e000      	b.n	8002962 <scw_cmd_12v_sw1+0x62>
	else goto USAGE;
 8002960:	bf00      	nop

	USAGE :
	(*pCmdIO->pCmdApi->msg)(cmdIoParam, "USAGE : _12v_sw1 on/off"LINE_TERM);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4906      	ldr	r1, [pc, #24]	@ (8002984 <scw_cmd_12v_sw1+0x84>)
 800296a:	6978      	ldr	r0, [r7, #20]
 800296c:	4798      	blx	r3
	return;
 800296e:	bf00      	nop
}
 8002970:	3718      	adds	r7, #24
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	08015808 	.word	0x08015808
 800297c:	40011000 	.word	0x40011000
 8002980:	0801580c 	.word	0x0801580c
 8002984:	080158c4 	.word	0x080158c4

08002988 <scw_cmd_12v_sw2>:

static void scw_cmd_12v_sw2 (SYS_CMD_DEVICE_NODE* pCmdIO, int argc, char **argv)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
	const void* cmdIoParam = pCmdIO->cmdIoParam;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	617b      	str	r3, [r7, #20]

	if (argc != 2) goto USAGE;
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	2b02      	cmp	r3, #2
 800299e:	d121      	bne.n	80029e4 <scw_cmd_12v_sw2+0x5c>

	if (!strcmp(argv[1], "on")) _12v_sw2_on;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3304      	adds	r3, #4
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4916      	ldr	r1, [pc, #88]	@ (8002a00 <scw_cmd_12v_sw2+0x78>)
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7fd fc41 	bl	8000230 <strcmp>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d106      	bne.n	80029c2 <scw_cmd_12v_sw2+0x3a>
 80029b4:	2201      	movs	r2, #1
 80029b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80029ba:	4812      	ldr	r0, [pc, #72]	@ (8002a04 <scw_cmd_12v_sw2+0x7c>)
 80029bc:	f007 fbc5 	bl	800a14a <HAL_GPIO_WritePin>
	else if (!strcmp(argv[1], "off")) _12v_sw2_off;
	else goto USAGE;

	return;
 80029c0:	e01a      	b.n	80029f8 <scw_cmd_12v_sw2+0x70>
	else if (!strcmp(argv[1], "off")) _12v_sw2_off;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	3304      	adds	r3, #4
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	490f      	ldr	r1, [pc, #60]	@ (8002a08 <scw_cmd_12v_sw2+0x80>)
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7fd fc30 	bl	8000230 <strcmp>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d108      	bne.n	80029e8 <scw_cmd_12v_sw2+0x60>
 80029d6:	2200      	movs	r2, #0
 80029d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80029dc:	4809      	ldr	r0, [pc, #36]	@ (8002a04 <scw_cmd_12v_sw2+0x7c>)
 80029de:	f007 fbb4 	bl	800a14a <HAL_GPIO_WritePin>
	return;
 80029e2:	e009      	b.n	80029f8 <scw_cmd_12v_sw2+0x70>
	if (argc != 2) goto USAGE;
 80029e4:	bf00      	nop
 80029e6:	e000      	b.n	80029ea <scw_cmd_12v_sw2+0x62>
	else goto USAGE;
 80029e8:	bf00      	nop

	USAGE :
	(*pCmdIO->pCmdApi->msg)(cmdIoParam, "USAGE : _12v_sw2 on/off"LINE_TERM);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4906      	ldr	r1, [pc, #24]	@ (8002a0c <scw_cmd_12v_sw2+0x84>)
 80029f2:	6978      	ldr	r0, [r7, #20]
 80029f4:	4798      	blx	r3
	return;
 80029f6:	bf00      	nop
}
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	08015808 	.word	0x08015808
 8002a04:	40011000 	.word	0x40011000
 8002a08:	0801580c 	.word	0x0801580c
 8002a0c:	080158e0 	.word	0x080158e0

08002a10 <scw_cmd_sht2x>:

static void scw_cmd_sht2x (SYS_CMD_DEVICE_NODE* pCmdIO, int argc, char **argv)
{
 8002a10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a14:	b093      	sub	sp, #76	@ 0x4c
 8002a16:	af06      	add	r7, sp, #24
 8002a18:	6178      	str	r0, [r7, #20]
 8002a1a:	6139      	str	r1, [r7, #16]
 8002a1c:	60fa      	str	r2, [r7, #12]
	const void* cmdIoParam = pCmdIO->cmdIoParam;
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (argc != 1) goto USAGE;
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d145      	bne.n	8002ab6 <scw_cmd_sht2x+0xa6>

	/* Gets current temperature & relative humidity. */
	float cel = SHT2x_GetTemperature(1);
 8002a2a:	2001      	movs	r0, #1
 8002a2c:	f004 f92c 	bl	8006c88 <SHT2x_GetTemperature>
 8002a30:	62b8      	str	r0, [r7, #40]	@ 0x28
	/* Converts temperature to degrees Fahrenheit and Kelvin */
	float fah = SHT2x_CelsiusToFahrenheit(cel);
 8002a32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a34:	f004 f9d0 	bl	8006dd8 <SHT2x_CelsiusToFahrenheit>
 8002a38:	6278      	str	r0, [r7, #36]	@ 0x24
	float kel = SHT2x_CelsiusToKelvin(cel);
 8002a3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a3c:	f004 f9f2 	bl	8006e24 <SHT2x_CelsiusToKelvin>
 8002a40:	6238      	str	r0, [r7, #32]
	float rh = SHT2x_GetRelativeHumidity(1);
 8002a42:	2001      	movs	r0, #1
 8002a44:	f004 f962 	bl	8006d0c <SHT2x_GetRelativeHumidity>
 8002a48:	61f8      	str	r0, [r7, #28]
	/* May show warning below. Ignore and proceed. */
	(*pCmdIO->pCmdApi->print)(cmdIoParam, "%d.%dºC, %d.%dºF, %d.%d K, %d.%d%% RH\n"LINE_TERM,
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	685c      	ldr	r4, [r3, #4]
 8002a50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a52:	f004 f9f7 	bl	8006e44 <SHT2x_GetInteger>
 8002a56:	4680      	mov	r8, r0
 8002a58:	2101      	movs	r1, #1
 8002a5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a5c:	f004 f9fe 	bl	8006e5c <SHT2x_GetDecimal>
 8002a60:	4681      	mov	r9, r0
 8002a62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002a64:	f004 f9ee 	bl	8006e44 <SHT2x_GetInteger>
 8002a68:	4605      	mov	r5, r0
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002a6e:	f004 f9f5 	bl	8006e5c <SHT2x_GetDecimal>
 8002a72:	4606      	mov	r6, r0
 8002a74:	6a38      	ldr	r0, [r7, #32]
 8002a76:	f004 f9e5 	bl	8006e44 <SHT2x_GetInteger>
 8002a7a:	60b8      	str	r0, [r7, #8]
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	6a38      	ldr	r0, [r7, #32]
 8002a80:	f004 f9ec 	bl	8006e5c <SHT2x_GetDecimal>
 8002a84:	6078      	str	r0, [r7, #4]
 8002a86:	69f8      	ldr	r0, [r7, #28]
 8002a88:	f004 f9dc 	bl	8006e44 <SHT2x_GetInteger>
 8002a8c:	6038      	str	r0, [r7, #0]
 8002a8e:	2101      	movs	r1, #1
 8002a90:	69f8      	ldr	r0, [r7, #28]
 8002a92:	f004 f9e3 	bl	8006e5c <SHT2x_GetDecimal>
 8002a96:	4603      	mov	r3, r0
 8002a98:	9305      	str	r3, [sp, #20]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	9304      	str	r3, [sp, #16]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	9303      	str	r3, [sp, #12]
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	9302      	str	r3, [sp, #8]
 8002aa6:	9601      	str	r6, [sp, #4]
 8002aa8:	9500      	str	r5, [sp, #0]
 8002aaa:	464b      	mov	r3, r9
 8002aac:	4642      	mov	r2, r8
 8002aae:	4908      	ldr	r1, [pc, #32]	@ (8002ad0 <scw_cmd_sht2x+0xc0>)
 8002ab0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002ab2:	47a0      	blx	r4
			SHT2x_GetInteger(cel), SHT2x_GetDecimal(cel, 1),
			SHT2x_GetInteger(fah), SHT2x_GetDecimal(fah, 1),
			SHT2x_GetInteger(kel), SHT2x_GetDecimal(kel, 1),
			SHT2x_GetInteger(rh), SHT2x_GetDecimal(rh, 1));
	return;
 8002ab4:	e007      	b.n	8002ac6 <scw_cmd_sht2x+0xb6>
	if (argc != 1) goto USAGE;
 8002ab6:	bf00      	nop

	USAGE :
	(*pCmdIO->pCmdApi->msg)(cmdIoParam, "USAGE : sht2x"LINE_TERM);
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4905      	ldr	r1, [pc, #20]	@ (8002ad4 <scw_cmd_sht2x+0xc4>)
 8002ac0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002ac2:	4798      	blx	r3
	return;
 8002ac4:	bf00      	nop
}
 8002ac6:	3734      	adds	r7, #52	@ 0x34
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002ace:	bf00      	nop
 8002ad0:	080158fc 	.word	0x080158fc
 8002ad4:	08015928 	.word	0x08015928

08002ad8 <scw_cmd_mute>:

static void scw_cmd_mute (SYS_CMD_DEVICE_NODE* pCmdIO, int argc, char **argv)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
	const void* cmdIoParam = pCmdIO->cmdIoParam;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	617b      	str	r3, [r7, #20]

	if (argc != 2) goto USAGE;
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d121      	bne.n	8002b34 <scw_cmd_mute+0x5c>

	if (!strcmp(argv[1], "on")) mute_on;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3304      	adds	r3, #4
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4916      	ldr	r1, [pc, #88]	@ (8002b50 <scw_cmd_mute+0x78>)
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7fd fb99 	bl	8000230 <strcmp>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d106      	bne.n	8002b12 <scw_cmd_mute+0x3a>
 8002b04:	2201      	movs	r2, #1
 8002b06:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002b0a:	4812      	ldr	r0, [pc, #72]	@ (8002b54 <scw_cmd_mute+0x7c>)
 8002b0c:	f007 fb1d 	bl	800a14a <HAL_GPIO_WritePin>
	else if (!strcmp(argv[1], "off")) mute_off;
	else goto USAGE;
	return;
 8002b10:	e01a      	b.n	8002b48 <scw_cmd_mute+0x70>
	else if (!strcmp(argv[1], "off")) mute_off;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	3304      	adds	r3, #4
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	490f      	ldr	r1, [pc, #60]	@ (8002b58 <scw_cmd_mute+0x80>)
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7fd fb88 	bl	8000230 <strcmp>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d108      	bne.n	8002b38 <scw_cmd_mute+0x60>
 8002b26:	2200      	movs	r2, #0
 8002b28:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002b2c:	4809      	ldr	r0, [pc, #36]	@ (8002b54 <scw_cmd_mute+0x7c>)
 8002b2e:	f007 fb0c 	bl	800a14a <HAL_GPIO_WritePin>
	return;
 8002b32:	e009      	b.n	8002b48 <scw_cmd_mute+0x70>
	if (argc != 2) goto USAGE;
 8002b34:	bf00      	nop
 8002b36:	e000      	b.n	8002b3a <scw_cmd_mute+0x62>
	else goto USAGE;
 8002b38:	bf00      	nop

	USAGE :
	(*pCmdIO->pCmdApi->msg)(cmdIoParam, "USAGE : mute on/off"LINE_TERM);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4906      	ldr	r1, [pc, #24]	@ (8002b5c <scw_cmd_mute+0x84>)
 8002b42:	6978      	ldr	r0, [r7, #20]
 8002b44:	4798      	blx	r3
	return;
 8002b46:	bf00      	nop
}
 8002b48:	3718      	adds	r7, #24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	08015808 	.word	0x08015808
 8002b54:	40010c00 	.word	0x40010c00
 8002b58:	0801580c 	.word	0x0801580c
 8002b5c:	08015938 	.word	0x08015938

08002b60 <scw_cmd_test>:

char buf[100];
static void scw_cmd_test (SYS_CMD_DEVICE_NODE* pCmdIO, int argc, char **argv)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
	const void* cmdIoParam = pCmdIO->cmdIoParam;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	617b      	str	r3, [r7, #20]

	if (argc != 1) goto USAGE;
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d108      	bne.n	8002b8a <scw_cmd_test+0x2a>

	strcpy (&buf[0], "L");
 8002b78:	4b09      	ldr	r3, [pc, #36]	@ (8002ba0 <scw_cmd_test+0x40>)
 8002b7a:	224c      	movs	r2, #76	@ 0x4c
 8002b7c:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart4, (uint8_t *)buf, 1);
 8002b7e:	2201      	movs	r2, #1
 8002b80:	4907      	ldr	r1, [pc, #28]	@ (8002ba0 <scw_cmd_test+0x40>)
 8002b82:	4808      	ldr	r0, [pc, #32]	@ (8002ba4 <scw_cmd_test+0x44>)
 8002b84:	f00b fec8 	bl	800e918 <HAL_UART_Transmit_DMA>

	return;
 8002b88:	e007      	b.n	8002b9a <scw_cmd_test+0x3a>
	if (argc != 1) goto USAGE;
 8002b8a:	bf00      	nop

	USAGE :
	(*pCmdIO->pCmdApi->msg)(cmdIoParam, "USAGE : test"LINE_TERM);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4905      	ldr	r1, [pc, #20]	@ (8002ba8 <scw_cmd_test+0x48>)
 8002b94:	6978      	ldr	r0, [r7, #20]
 8002b96:	4798      	blx	r3
	return;
 8002b98:	bf00      	nop
}
 8002b9a:	3718      	adds	r7, #24
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	20000e74 	.word	0x20000e74
 8002ba4:	20000cd0 	.word	0x20000cd0
 8002ba8:	08015950 	.word	0x08015950

08002bac <cmd_board_add>:
		{"test",     		scw_cmd_test,				"\t\t- test"},

};

bool cmd_board_add ()
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
	assert (SYS_CMD_ADDGRP(Board_CommandTbl, sizeof(Board_CommandTbl)/sizeof(*Board_CommandTbl), "board", ": board command group") == true);
 8002bb0:	4b09      	ldr	r3, [pc, #36]	@ (8002bd8 <cmd_board_add+0x2c>)
 8002bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8002bdc <cmd_board_add+0x30>)
 8002bb4:	2110      	movs	r1, #16
 8002bb6:	480a      	ldr	r0, [pc, #40]	@ (8002be0 <cmd_board_add+0x34>)
 8002bb8:	f000 ff2a 	bl	8003a10 <SYS_CMD_ADDGRP>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d006      	beq.n	8002bd0 <cmd_board_add+0x24>
 8002bc2:	4b08      	ldr	r3, [pc, #32]	@ (8002be4 <cmd_board_add+0x38>)
 8002bc4:	4a08      	ldr	r2, [pc, #32]	@ (8002be8 <cmd_board_add+0x3c>)
 8002bc6:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8002bca:	4808      	ldr	r0, [pc, #32]	@ (8002bec <cmd_board_add+0x40>)
 8002bcc:	f011 f9a4 	bl	8013f18 <__assert_func>
	return true;
 8002bd0:	2301      	movs	r3, #1
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	08015afc 	.word	0x08015afc
 8002bdc:	08015b14 	.word	0x08015b14
 8002be0:	08019ac8 	.word	0x08019ac8
 8002be4:	08015b1c 	.word	0x08015b1c
 8002be8:	08019b88 	.word	0x08019b88
 8002bec:	08015b9c 	.word	0x08015b9c

08002bf0 <LL_CPUID_GetImplementer>:
  * @brief  Get Implementer code
  * @rmtoll SCB_CPUID    IMPLEMENTER   LL_CPUID_GetImplementer
  * @retval Value should be equal to 0x41 for ARM
  */
__STATIC_INLINE uint32_t LL_CPUID_GetImplementer(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(SCB->CPUID, SCB_CPUID_IMPLEMENTER_Msk) >> SCB_CPUID_IMPLEMENTER_Pos);
 8002bf4:	4b03      	ldr	r3, [pc, #12]	@ (8002c04 <LL_CPUID_GetImplementer+0x14>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	0e1b      	lsrs	r3, r3, #24
 8002bfa:	b2db      	uxtb	r3, r3
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bc80      	pop	{r7}
 8002c02:	4770      	bx	lr
 8002c04:	e000ed00 	.word	0xe000ed00

08002c08 <LL_CPUID_GetVariant>:
  * @brief  Get Variant number (The r value in the rnpn product revision identifier)
  * @rmtoll SCB_CPUID    VARIANT       LL_CPUID_GetVariant
  * @retval Value between 0 and 255 (0x1: revision 1, 0x2: revision 2)
  */
__STATIC_INLINE uint32_t LL_CPUID_GetVariant(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(SCB->CPUID, SCB_CPUID_VARIANT_Msk) >> SCB_CPUID_VARIANT_Pos);
 8002c0c:	4b04      	ldr	r3, [pc, #16]	@ (8002c20 <LL_CPUID_GetVariant+0x18>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	0d1b      	lsrs	r3, r3, #20
 8002c12:	f003 030f 	and.w	r3, r3, #15
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bc80      	pop	{r7}
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	e000ed00 	.word	0xe000ed00

08002c24 <LL_CPUID_GetConstant>:
  * @brief  Get Constant number
  * @rmtoll SCB_CPUID    ARCHITECTURE  LL_CPUID_GetConstant
  * @retval Value should be equal to 0xF for Cortex-M3 devices
  */
__STATIC_INLINE uint32_t LL_CPUID_GetConstant(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(SCB->CPUID, SCB_CPUID_ARCHITECTURE_Msk) >> SCB_CPUID_ARCHITECTURE_Pos);
 8002c28:	4b04      	ldr	r3, [pc, #16]	@ (8002c3c <LL_CPUID_GetConstant+0x18>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	0c1b      	lsrs	r3, r3, #16
 8002c2e:	f003 030f 	and.w	r3, r3, #15
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bc80      	pop	{r7}
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	e000ed00 	.word	0xe000ed00

08002c40 <LL_CPUID_GetParNo>:
  * @brief  Get Part number
  * @rmtoll SCB_CPUID    PARTNO        LL_CPUID_GetParNo
  * @retval Value should be equal to 0xC23 for Cortex-M3
  */
__STATIC_INLINE uint32_t LL_CPUID_GetParNo(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(SCB->CPUID, SCB_CPUID_PARTNO_Msk) >> SCB_CPUID_PARTNO_Pos);
 8002c44:	4b04      	ldr	r3, [pc, #16]	@ (8002c58 <LL_CPUID_GetParNo+0x18>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	091b      	lsrs	r3, r3, #4
 8002c4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bc80      	pop	{r7}
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	e000ed00 	.word	0xe000ed00

08002c5c <LL_CPUID_GetRevision>:
  * @brief  Get Revision number (The p value in the rnpn product revision identifier, indicates patch release)
  * @rmtoll SCB_CPUID    REVISION      LL_CPUID_GetRevision
  * @retval Value between 0 and 255 (0x0: patch 0, 0x1: patch 1)
  */
__STATIC_INLINE uint32_t LL_CPUID_GetRevision(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(SCB->CPUID, SCB_CPUID_REVISION_Msk) >> SCB_CPUID_REVISION_Pos);
 8002c60:	4b03      	ldr	r3, [pc, #12]	@ (8002c70 <LL_CPUID_GetRevision+0x14>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 030f 	and.w	r3, r3, #15
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bc80      	pop	{r7}
 8002c6e:	4770      	bx	lr
 8002c70:	e000ed00 	.word	0xe000ed00

08002c74 <LL_GetUID_Word0>:
/**
  * @brief  Get Word0 of the unique device identifier (UID based on 96 bits)
  * @retval UID[31:0]
  */
__STATIC_INLINE uint32_t LL_GetUID_Word0(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID_BASE_ADDRESS)));
 8002c78:	4b02      	ldr	r3, [pc, #8]	@ (8002c84 <LL_GetUID_Word0+0x10>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr
 8002c84:	1ffff7e8 	.word	0x1ffff7e8

08002c88 <LL_GetUID_Word1>:
/**
  * @brief  Get Word1 of the unique device identifier (UID based on 96 bits)
  * @retval UID[63:32]
  */
__STATIC_INLINE uint32_t LL_GetUID_Word1(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE_ADDRESS + 4U))));
 8002c8c:	4b02      	ldr	r3, [pc, #8]	@ (8002c98 <LL_GetUID_Word1+0x10>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr
 8002c98:	1ffff7ec 	.word	0x1ffff7ec

08002c9c <LL_GetUID_Word2>:
/**
  * @brief  Get Word2 of the unique device identifier (UID based on 96 bits)
  * @retval UID[95:64]
  */
__STATIC_INLINE uint32_t LL_GetUID_Word2(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE_ADDRESS + 8U))));
 8002ca0:	4b02      	ldr	r3, [pc, #8]	@ (8002cac <LL_GetUID_Word2+0x10>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr
 8002cac:	1ffff7f0 	.word	0x1ffff7f0

08002cb0 <smb_cmd_clearScreen>:
 */

#include "main.h"

static void smb_cmd_clearScreen (SYS_CMD_DEVICE_NODE* pCmdIO, int argc, char **argv)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
	const void* cmdIoParam = pCmdIO->cmdIoParam;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	617b      	str	r3, [r7, #20]

	(*pCmdIO->pCmdApi->msg)(cmdIoParam,  CUI_ESC_CLR);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4906      	ldr	r1, [pc, #24]	@ (8002ce4 <smb_cmd_clearScreen+0x34>)
 8002cca:	6978      	ldr	r0, [r7, #20]
 8002ccc:	4798      	blx	r3
	(*pCmdIO->pCmdApi->msg)(cmdIoParam,  CUI_ESC_CUR_HOME);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4904      	ldr	r1, [pc, #16]	@ (8002ce8 <smb_cmd_clearScreen+0x38>)
 8002cd6:	6978      	ldr	r0, [r7, #20]
 8002cd8:	4798      	blx	r3
	return;
 8002cda:	bf00      	nop
}
 8002cdc:	3718      	adds	r7, #24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	08015bbc 	.word	0x08015bbc
 8002ce8:	08015bc4 	.word	0x08015bc4

08002cec <smb_cmd_taskinfo>:
	eDeleted,		/* The task being queried has been deleted, but its TCB has not yet been freed. */
	eInvalid		/* Used as an 'invalid state' value. */
} eTaskState;
#endif
static void smb_cmd_taskinfo (SYS_CMD_DEVICE_NODE *pCmdIO, int argc, char **argv)
{
 8002cec:	b590      	push	{r4, r7, lr}
 8002cee:	b08d      	sub	sp, #52	@ 0x34
 8002cf0:	af02      	add	r7, sp, #8
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
	const void* cmdIoParam = pCmdIO->cmdIoParam;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	627b      	str	r3, [r7, #36]	@ 0x24
	TaskStatus_t *pxTaskStatusArray;
	volatile UBaseType_t uxArraySize, x;
	unsigned long ulTotalRunTime, ulStatsAsPercentage;

	uxArraySize = uxTaskGetNumberOfTasks ();
 8002cfe:	f00f f87b 	bl	8011df8 <uxTaskGetNumberOfTasks>
 8002d02:	4603      	mov	r3, r0
 8002d04:	61bb      	str	r3, [r7, #24]
	(*pCmdIO->pCmdApi->print)(cmdIoParam, LINE_TERM "Total %d tasks are running now.." LINE_TERM, uxArraySize);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	499d      	ldr	r1, [pc, #628]	@ (8002f84 <smb_cmd_taskinfo+0x298>)
 8002d10:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002d12:	4798      	blx	r3

	/* Allocate a TaskStatus_t structure for each task.  An array could be allocated statically at compile time. */
	pxTaskStatusArray = pvPortMalloc( uxArraySize * sizeof( TaskStatus_t ) );
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	4613      	mov	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f010 ff0e 	bl	8013b40 <pvPortMalloc>
 8002d24:	6238      	str	r0, [r7, #32]

	if( pxTaskStatusArray != NULL ) {
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 81ab 	beq.w	8003084 <smb_cmd_taskinfo+0x398>
		/* Generate raw status information about each task. */
		uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize,	&ulTotalRunTime );
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	f107 0210 	add.w	r2, r7, #16
 8002d34:	4619      	mov	r1, r3
 8002d36:	6a38      	ldr	r0, [r7, #32]
 8002d38:	f00f f868 	bl	8011e0c <uxTaskGetSystemState>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	61bb      	str	r3, [r7, #24]
		for( x = 0; x < uxArraySize; x++ ) {
 8002d40:	2300      	movs	r3, #0
 8002d42:	617b      	str	r3, [r7, #20]
 8002d44:	e10c      	b.n	8002f60 <smb_cmd_taskinfo+0x274>
			(*pCmdIO->pCmdApi->print)(cmdIoParam, LINE_TERM "The %dth : %s", x+1, pxTaskStatusArray[ x ].pcTaskName);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685c      	ldr	r4, [r3, #4]
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	1c59      	adds	r1, r3, #1
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	4613      	mov	r3, r2
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	4413      	add	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	4413      	add	r3, r2
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	460a      	mov	r2, r1
 8002d64:	4988      	ldr	r1, [pc, #544]	@ (8002f88 <smb_cmd_taskinfo+0x29c>)
 8002d66:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002d68:	47a0      	blx	r4
			(*pCmdIO->pCmdApi->print)(cmdIoParam, LINE_TERM "xTaskNumber = %d", pxTaskStatusArray[ x ].xTaskNumber);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685c      	ldr	r4, [r3, #4]
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	4613      	mov	r3, r2
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	4413      	add	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	4413      	add	r3, r2
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	461a      	mov	r2, r3
 8002d84:	4981      	ldr	r1, [pc, #516]	@ (8002f8c <smb_cmd_taskinfo+0x2a0>)
 8002d86:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002d88:	47a0      	blx	r4
			switch (pxTaskStatusArray[ x ].eCurrentState) {
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	4413      	add	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	461a      	mov	r2, r3
 8002d96:	6a3b      	ldr	r3, [r7, #32]
 8002d98:	4413      	add	r3, r2
 8002d9a:	7b1b      	ldrb	r3, [r3, #12]
 8002d9c:	2b05      	cmp	r3, #5
 8002d9e:	d875      	bhi.n	8002e8c <smb_cmd_taskinfo+0x1a0>
 8002da0:	a201      	add	r2, pc, #4	@ (adr r2, 8002da8 <smb_cmd_taskinfo+0xbc>)
 8002da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da6:	bf00      	nop
 8002da8:	08002dc1 	.word	0x08002dc1
 8002dac:	08002de3 	.word	0x08002de3
 8002db0:	08002e05 	.word	0x08002e05
 8002db4:	08002e27 	.word	0x08002e27
 8002db8:	08002e49 	.word	0x08002e49
 8002dbc:	08002e6b 	.word	0x08002e6b
			case eRunning : (*pCmdIO->pCmdApi->print)(cmdIoParam, LINE_TERM " %s is eRunning", pxTaskStatusArray[ x ].pcTaskName); break;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685c      	ldr	r4, [r3, #4]
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	4413      	add	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	461a      	mov	r2, r3
 8002dda:	496d      	ldr	r1, [pc, #436]	@ (8002f90 <smb_cmd_taskinfo+0x2a4>)
 8002ddc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002dde:	47a0      	blx	r4
 8002de0:	e065      	b.n	8002eae <smb_cmd_taskinfo+0x1c2>
			case eReady : (*pCmdIO->pCmdApi->print)(cmdIoParam, LINE_TERM " %s is eReady", pxTaskStatusArray[ x ].pcTaskName); break;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	685c      	ldr	r4, [r3, #4]
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	4613      	mov	r3, r2
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	4413      	add	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	461a      	mov	r2, r3
 8002df4:	6a3b      	ldr	r3, [r7, #32]
 8002df6:	4413      	add	r3, r2
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	4965      	ldr	r1, [pc, #404]	@ (8002f94 <smb_cmd_taskinfo+0x2a8>)
 8002dfe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002e00:	47a0      	blx	r4
 8002e02:	e054      	b.n	8002eae <smb_cmd_taskinfo+0x1c2>
			case eBlocked : (*pCmdIO->pCmdApi->print)(cmdIoParam, LINE_TERM " %s is eBlocked", pxTaskStatusArray[ x ].pcTaskName); break;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685c      	ldr	r4, [r3, #4]
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	4413      	add	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	461a      	mov	r2, r3
 8002e16:	6a3b      	ldr	r3, [r7, #32]
 8002e18:	4413      	add	r3, r2
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	495e      	ldr	r1, [pc, #376]	@ (8002f98 <smb_cmd_taskinfo+0x2ac>)
 8002e20:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002e22:	47a0      	blx	r4
 8002e24:	e043      	b.n	8002eae <smb_cmd_taskinfo+0x1c2>
			case eSuspended : (*pCmdIO->pCmdApi->print)(cmdIoParam, LINE_TERM " %s is eSuspended", pxTaskStatusArray[ x ].pcTaskName); break;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	685c      	ldr	r4, [r3, #4]
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	4413      	add	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	461a      	mov	r2, r3
 8002e38:	6a3b      	ldr	r3, [r7, #32]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	4956      	ldr	r1, [pc, #344]	@ (8002f9c <smb_cmd_taskinfo+0x2b0>)
 8002e42:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002e44:	47a0      	blx	r4
 8002e46:	e032      	b.n	8002eae <smb_cmd_taskinfo+0x1c2>
			case eDeleted : (*pCmdIO->pCmdApi->print)(cmdIoParam, LINE_TERM " %s is eDeleted", pxTaskStatusArray[ x ].pcTaskName); break;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685c      	ldr	r4, [r3, #4]
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	4613      	mov	r3, r2
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	4413      	add	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	461a      	mov	r2, r3
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	461a      	mov	r2, r3
 8002e62:	494f      	ldr	r1, [pc, #316]	@ (8002fa0 <smb_cmd_taskinfo+0x2b4>)
 8002e64:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002e66:	47a0      	blx	r4
 8002e68:	e021      	b.n	8002eae <smb_cmd_taskinfo+0x1c2>
			case eInvalid : (*pCmdIO->pCmdApi->print)(cmdIoParam, LINE_TERM " %s is eInvalid", pxTaskStatusArray[ x ].pcTaskName); break;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685c      	ldr	r4, [r3, #4]
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	4613      	mov	r3, r2
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	4413      	add	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	6a3b      	ldr	r3, [r7, #32]
 8002e7e:	4413      	add	r3, r2
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	461a      	mov	r2, r3
 8002e84:	4947      	ldr	r1, [pc, #284]	@ (8002fa4 <smb_cmd_taskinfo+0x2b8>)
 8002e86:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002e88:	47a0      	blx	r4
 8002e8a:	e010      	b.n	8002eae <smb_cmd_taskinfo+0x1c2>
			default : (*pCmdIO->pCmdApi->print)(cmdIoParam, LINE_TERM " %s' eCurrentState is UNKNOWN !!", pxTaskStatusArray[ x ].pcTaskName); break;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685c      	ldr	r4, [r3, #4]
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	4613      	mov	r3, r2
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	4413      	add	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	6a3b      	ldr	r3, [r7, #32]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4940      	ldr	r1, [pc, #256]	@ (8002fa8 <smb_cmd_taskinfo+0x2bc>)
 8002ea8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002eaa:	47a0      	blx	r4
 8002eac:	bf00      	nop
			}
			(*pCmdIO->pCmdApi->print)(cmdIoParam, LINE_TERM "uxCurrentPriority = %d", pxTaskStatusArray[ x ].uxCurrentPriority);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	685c      	ldr	r4, [r3, #4]
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	4413      	add	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	4938      	ldr	r1, [pc, #224]	@ (8002fac <smb_cmd_taskinfo+0x2c0>)
 8002eca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002ecc:	47a0      	blx	r4
			(*pCmdIO->pCmdApi->print)(cmdIoParam, LINE_TERM "uxBasePriority = %d", pxTaskStatusArray[ x ].uxBasePriority);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685c      	ldr	r4, [r3, #4]
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	4413      	add	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	461a      	mov	r2, r3
 8002ee0:	6a3b      	ldr	r3, [r7, #32]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	4931      	ldr	r1, [pc, #196]	@ (8002fb0 <smb_cmd_taskinfo+0x2c4>)
 8002eea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002eec:	47a0      	blx	r4
			(*pCmdIO->pCmdApi->print)(cmdIoParam, LINE_TERM "ulRunTimeCounter = %d", pxTaskStatusArray[ x ].ulRunTimeCounter);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	685c      	ldr	r4, [r3, #4]
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	4413      	add	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	461a      	mov	r2, r3
 8002f00:	6a3b      	ldr	r3, [r7, #32]
 8002f02:	4413      	add	r3, r2
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	461a      	mov	r2, r3
 8002f08:	492a      	ldr	r1, [pc, #168]	@ (8002fb4 <smb_cmd_taskinfo+0x2c8>)
 8002f0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002f0c:	47a0      	blx	r4
			(*pCmdIO->pCmdApi->print)(cmdIoParam, LINE_TERM "pxStackBase = %#06"PRIx16, pxTaskStatusArray[ x ].usStackHighWaterMark);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	685c      	ldr	r4, [r3, #4]
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	4613      	mov	r3, r2
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	4413      	add	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	461a      	mov	r2, r3
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	4413      	add	r3, r2
 8002f24:	8c1b      	ldrh	r3, [r3, #32]
 8002f26:	461a      	mov	r2, r3
 8002f28:	4923      	ldr	r1, [pc, #140]	@ (8002fb8 <smb_cmd_taskinfo+0x2cc>)
 8002f2a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002f2c:	47a0      	blx	r4
			(*pCmdIO->pCmdApi->print)(cmdIoParam, LINE_TERM "usStackHighWaterMark = %d", pxTaskStatusArray[ x ].usStackHighWaterMark);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	685c      	ldr	r4, [r3, #4]
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	4613      	mov	r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	4413      	add	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	461a      	mov	r2, r3
 8002f40:	6a3b      	ldr	r3, [r7, #32]
 8002f42:	4413      	add	r3, r2
 8002f44:	8c1b      	ldrh	r3, [r3, #32]
 8002f46:	461a      	mov	r2, r3
 8002f48:	491c      	ldr	r1, [pc, #112]	@ (8002fbc <smb_cmd_taskinfo+0x2d0>)
 8002f4a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002f4c:	47a0      	blx	r4
			(*pCmdIO->pCmdApi->msg)(cmdIoParam, LINE_TERM);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	491a      	ldr	r1, [pc, #104]	@ (8002fc0 <smb_cmd_taskinfo+0x2d4>)
 8002f56:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002f58:	4798      	blx	r3
		for( x = 0; x < uxArraySize; x++ ) {
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	617b      	str	r3, [r7, #20]
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	f4ff aeee 	bcc.w	8002d46 <smb_cmd_taskinfo+0x5a>
			//			osDelay(1);	// display 하다가 잘리는 현상 방지용. Queue buffer 를 8K 로 만들었으니 이제 필요없다.
		}

		// 아래는 running time 만 표시하는 루틴..
		/* For percentage calculations. */
		ulTotalRunTime /= 100UL;
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	4a15      	ldr	r2, [pc, #84]	@ (8002fc4 <smb_cmd_taskinfo+0x2d8>)
 8002f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f72:	095b      	lsrs	r3, r3, #5
 8002f74:	613b      	str	r3, [r7, #16]

		/* Avoid divide by zero errors. */
		if( ulTotalRunTime > 0 ) {
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d073      	beq.n	8003064 <smb_cmd_taskinfo+0x378>
			/* For each populated position in the pxTaskStatusArray array,
	         format the raw data as human readable ASCII data. */
			for( x = 0; x < uxArraySize; x++ ) {
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	617b      	str	r3, [r7, #20]
 8002f80:	e06b      	b.n	800305a <smb_cmd_taskinfo+0x36e>
 8002f82:	bf00      	nop
 8002f84:	08015bc8 	.word	0x08015bc8
 8002f88:	08015bf0 	.word	0x08015bf0
 8002f8c:	08015c00 	.word	0x08015c00
 8002f90:	08015c14 	.word	0x08015c14
 8002f94:	08015c28 	.word	0x08015c28
 8002f98:	08015c38 	.word	0x08015c38
 8002f9c:	08015c4c 	.word	0x08015c4c
 8002fa0:	08015c60 	.word	0x08015c60
 8002fa4:	08015c74 	.word	0x08015c74
 8002fa8:	08015c88 	.word	0x08015c88
 8002fac:	08015cac 	.word	0x08015cac
 8002fb0:	08015cc8 	.word	0x08015cc8
 8002fb4:	08015ce0 	.word	0x08015ce0
 8002fb8:	08015cf8 	.word	0x08015cf8
 8002fbc:	08015d10 	.word	0x08015d10
 8002fc0:	08015d2c 	.word	0x08015d2c
 8002fc4:	51eb851f 	.word	0x51eb851f
				/* What percentage of the total run time has the task used?
	            This will always be rounded down to the nearest integer.
	            ulTotalRunTimeDiv100 has already been divided by 100. */
				ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalRunTime;
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	4413      	add	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	699a      	ldr	r2, [r3, #24]
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe0:	61fb      	str	r3, [r7, #28]

				if( ulStatsAsPercentage > 0UL )	{
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d01c      	beq.n	8003022 <smb_cmd_taskinfo+0x336>
					(*pCmdIO->pCmdApi->print)(cmdIoParam, LINE_TERM "%stt%lutt%lu%%rn",	\
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	685c      	ldr	r4, [r3, #4]
							pxTaskStatusArray[ x ].pcTaskName, pxTaskStatusArray[ x ].ulRunTimeCounter,	ulStatsAsPercentage );
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	4413      	add	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	4413      	add	r3, r2
					(*pCmdIO->pCmdApi->print)(cmdIoParam, LINE_TERM "%stt%lutt%lu%%rn",	\
 8002ffe:	6859      	ldr	r1, [r3, #4]
							pxTaskStatusArray[ x ].pcTaskName, pxTaskStatusArray[ x ].ulRunTimeCounter,	ulStatsAsPercentage );
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	4613      	mov	r3, r2
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	4413      	add	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	461a      	mov	r2, r3
 800300c:	6a3b      	ldr	r3, [r7, #32]
 800300e:	4413      	add	r3, r2
					(*pCmdIO->pCmdApi->print)(cmdIoParam, LINE_TERM "%stt%lutt%lu%%rn",	\
 8003010:	699a      	ldr	r2, [r3, #24]
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	4613      	mov	r3, r2
 8003018:	460a      	mov	r2, r1
 800301a:	4922      	ldr	r1, [pc, #136]	@ (80030a4 <smb_cmd_taskinfo+0x3b8>)
 800301c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800301e:	47a0      	blx	r4
 8003020:	e018      	b.n	8003054 <smb_cmd_taskinfo+0x368>
				}
				else {
					/* If the percentage is zero here then the task has
	               consumed less than 1% of the total run time. */
					(*pCmdIO->pCmdApi->print)(cmdIoParam, LINE_TERM "%stt%lutt<1%%rn", \
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685c      	ldr	r4, [r3, #4]
							pxTaskStatusArray[ x ].pcTaskName, pxTaskStatusArray[ x ].ulRunTimeCounter);
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	4613      	mov	r3, r2
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	4413      	add	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	461a      	mov	r2, r3
 8003034:	6a3b      	ldr	r3, [r7, #32]
 8003036:	4413      	add	r3, r2
					(*pCmdIO->pCmdApi->print)(cmdIoParam, LINE_TERM "%stt%lutt<1%%rn", \
 8003038:	6859      	ldr	r1, [r3, #4]
							pxTaskStatusArray[ x ].pcTaskName, pxTaskStatusArray[ x ].ulRunTimeCounter);
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	4613      	mov	r3, r2
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	4413      	add	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	461a      	mov	r2, r3
 8003046:	6a3b      	ldr	r3, [r7, #32]
 8003048:	4413      	add	r3, r2
					(*pCmdIO->pCmdApi->print)(cmdIoParam, LINE_TERM "%stt%lutt<1%%rn", \
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	460a      	mov	r2, r1
 800304e:	4916      	ldr	r1, [pc, #88]	@ (80030a8 <smb_cmd_taskinfo+0x3bc>)
 8003050:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003052:	47a0      	blx	r4
			for( x = 0; x < uxArraySize; x++ ) {
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	3301      	adds	r3, #1
 8003058:	617b      	str	r3, [r7, #20]
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	429a      	cmp	r2, r3
 8003060:	d3b2      	bcc.n	8002fc8 <smb_cmd_taskinfo+0x2dc>
 8003062:	e00b      	b.n	800307c <smb_cmd_taskinfo+0x390>
				}
			}
		}
		else {
			(*pCmdIO->pCmdApi->msg)(cmdIoParam, LINE_TERM "Actual running time is < 1");
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4910      	ldr	r1, [pc, #64]	@ (80030ac <smb_cmd_taskinfo+0x3c0>)
 800306c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800306e:	4798      	blx	r3
			(*pCmdIO->pCmdApi->msg)(cmdIoParam, LINE_TERM);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	490e      	ldr	r1, [pc, #56]	@ (80030b0 <smb_cmd_taskinfo+0x3c4>)
 8003078:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800307a:	4798      	blx	r3
		}

		/* The array is no longer needed, free the memory it consumes. */
		vPortFree( pxTaskStatusArray );
 800307c:	6a38      	ldr	r0, [r7, #32]
 800307e:	f010 fe2d 	bl	8013cdc <vPortFree>
	else {
		(*pCmdIO->pCmdApi->msg)(cmdIoParam, LINE_TERM "pvPortMalloc () return NULL");
		(*pCmdIO->pCmdApi->msg)(cmdIoParam, LINE_TERM);
	}

	return;
 8003082:	e00c      	b.n	800309e <smb_cmd_taskinfo+0x3b2>
		(*pCmdIO->pCmdApi->msg)(cmdIoParam, LINE_TERM "pvPortMalloc () return NULL");
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	490a      	ldr	r1, [pc, #40]	@ (80030b4 <smb_cmd_taskinfo+0x3c8>)
 800308c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800308e:	4798      	blx	r3
		(*pCmdIO->pCmdApi->msg)(cmdIoParam, LINE_TERM);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4906      	ldr	r1, [pc, #24]	@ (80030b0 <smb_cmd_taskinfo+0x3c4>)
 8003098:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800309a:	4798      	blx	r3
	return;
 800309c:	bf00      	nop
}
 800309e:	372c      	adds	r7, #44	@ 0x2c
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd90      	pop	{r4, r7, pc}
 80030a4:	08015d30 	.word	0x08015d30
 80030a8:	08015d44 	.word	0x08015d44
 80030ac:	08015d58 	.word	0x08015d58
 80030b0:	08015d2c 	.word	0x08015d2c
 80030b4:	08015d78 	.word	0x08015d78

080030b8 <smb_cmd_set_exti>:

static void smb_cmd_set_exti (SYS_CMD_DEVICE_NODE *pCmdIO, int argc, char **argv)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b088      	sub	sp, #32
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
	const void* cmdIoParam = pCmdIO->cmdIoParam;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	61fb      	str	r3, [r7, #28]
	uint32_t exti_no;
	EXTI_HandleTypeDef exti_handle;

	if (argc != 2) {
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d006      	beq.n	80030de <smb_cmd_set_exti+0x26>
		(*pCmdIO->pCmdApi->msg)(cmdIoParam, "Usage : setexti exti_no (0 ~ 15)"LINE_TERM);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4942      	ldr	r1, [pc, #264]	@ (80031e0 <smb_cmd_set_exti+0x128>)
 80030d8:	69f8      	ldr	r0, [r7, #28]
 80030da:	4798      	blx	r3
		return;
 80030dc:	e07c      	b.n	80031d8 <smb_cmd_set_exti+0x120>
	}

	exti_no = strtoul (argv[1], NULL, 0);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3304      	adds	r3, #4
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2200      	movs	r2, #0
 80030e6:	2100      	movs	r1, #0
 80030e8:	4618      	mov	r0, r3
 80030ea:	f011 f857 	bl	801419c <strtoul>
 80030ee:	61b8      	str	r0, [r7, #24]

	if (exti_no > 15) {
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	2b0f      	cmp	r3, #15
 80030f4:	d906      	bls.n	8003104 <smb_cmd_set_exti+0x4c>
		(*pCmdIO->pCmdApi->msg)(cmdIoParam, "Usage : setexti exti_no (0 ~ 15)"LINE_TERM);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4938      	ldr	r1, [pc, #224]	@ (80031e0 <smb_cmd_set_exti+0x128>)
 80030fe:	69f8      	ldr	r0, [r7, #28]
 8003100:	4798      	blx	r3
		return;
 8003102:	e069      	b.n	80031d8 <smb_cmd_set_exti+0x120>
#define EXTI_LINE_13                        (EXTI_GPIO     | EXTI_REG1 | EXTI_EVENT | 0x0Du)
#define EXTI_LINE_14                        (EXTI_GPIO     | EXTI_REG1 | EXTI_EVENT | 0x0Eu)
#define EXTI_LINE_15                        (EXTI_GPIO     | EXTI_REG1 | EXTI_EVENT | 0x0Fu)
#endif

	(*pCmdIO->pCmdApi->print)(cmdIoParam, "Let EXTI_LINE_%d happen"LINE_TERM, exti_no);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	4935      	ldr	r1, [pc, #212]	@ (80031e4 <smb_cmd_set_exti+0x12c>)
 800310e:	69f8      	ldr	r0, [r7, #28]
 8003110:	4798      	blx	r3

	switch (exti_no) {
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	2b0f      	cmp	r3, #15
 8003116:	d854      	bhi.n	80031c2 <smb_cmd_set_exti+0x10a>
 8003118:	a201      	add	r2, pc, #4	@ (adr r2, 8003120 <smb_cmd_set_exti+0x68>)
 800311a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311e:	bf00      	nop
 8003120:	08003161 	.word	0x08003161
 8003124:	08003169 	.word	0x08003169
 8003128:	0800316f 	.word	0x0800316f
 800312c:	08003175 	.word	0x08003175
 8003130:	0800317b 	.word	0x0800317b
 8003134:	08003181 	.word	0x08003181
 8003138:	08003187 	.word	0x08003187
 800313c:	0800318d 	.word	0x0800318d
 8003140:	08003193 	.word	0x08003193
 8003144:	08003199 	.word	0x08003199
 8003148:	0800319f 	.word	0x0800319f
 800314c:	080031a5 	.word	0x080031a5
 8003150:	080031ab 	.word	0x080031ab
 8003154:	080031b1 	.word	0x080031b1
 8003158:	080031b7 	.word	0x080031b7
 800315c:	080031bd 	.word	0x080031bd
	case 0 : exti_handle.Line = EXTI_LINE_0; break;
 8003160:	f04f 63c0 	mov.w	r3, #100663296	@ 0x6000000
 8003164:	613b      	str	r3, [r7, #16]
 8003166:	e032      	b.n	80031ce <smb_cmd_set_exti+0x116>
	case 1 : exti_handle.Line = EXTI_LINE_1; break;
 8003168:	4b1f      	ldr	r3, [pc, #124]	@ (80031e8 <smb_cmd_set_exti+0x130>)
 800316a:	613b      	str	r3, [r7, #16]
 800316c:	e02f      	b.n	80031ce <smb_cmd_set_exti+0x116>
	case 2 : exti_handle.Line = EXTI_LINE_2; break;
 800316e:	4b1f      	ldr	r3, [pc, #124]	@ (80031ec <smb_cmd_set_exti+0x134>)
 8003170:	613b      	str	r3, [r7, #16]
 8003172:	e02c      	b.n	80031ce <smb_cmd_set_exti+0x116>
	case 3 : exti_handle.Line = EXTI_LINE_3; break;
 8003174:	4b1e      	ldr	r3, [pc, #120]	@ (80031f0 <smb_cmd_set_exti+0x138>)
 8003176:	613b      	str	r3, [r7, #16]
 8003178:	e029      	b.n	80031ce <smb_cmd_set_exti+0x116>
	case 4 : exti_handle.Line = EXTI_LINE_4; break;
 800317a:	4b1e      	ldr	r3, [pc, #120]	@ (80031f4 <smb_cmd_set_exti+0x13c>)
 800317c:	613b      	str	r3, [r7, #16]
 800317e:	e026      	b.n	80031ce <smb_cmd_set_exti+0x116>
	case 5 : exti_handle.Line = EXTI_LINE_5; break;
 8003180:	4b1d      	ldr	r3, [pc, #116]	@ (80031f8 <smb_cmd_set_exti+0x140>)
 8003182:	613b      	str	r3, [r7, #16]
 8003184:	e023      	b.n	80031ce <smb_cmd_set_exti+0x116>
	case 6 : exti_handle.Line = EXTI_LINE_6; break;
 8003186:	4b1d      	ldr	r3, [pc, #116]	@ (80031fc <smb_cmd_set_exti+0x144>)
 8003188:	613b      	str	r3, [r7, #16]
 800318a:	e020      	b.n	80031ce <smb_cmd_set_exti+0x116>
	case 7 : exti_handle.Line = EXTI_LINE_7; break;
 800318c:	4b1c      	ldr	r3, [pc, #112]	@ (8003200 <smb_cmd_set_exti+0x148>)
 800318e:	613b      	str	r3, [r7, #16]
 8003190:	e01d      	b.n	80031ce <smb_cmd_set_exti+0x116>
	case 8 : exti_handle.Line = EXTI_LINE_8; break;
 8003192:	4b1c      	ldr	r3, [pc, #112]	@ (8003204 <smb_cmd_set_exti+0x14c>)
 8003194:	613b      	str	r3, [r7, #16]
 8003196:	e01a      	b.n	80031ce <smb_cmd_set_exti+0x116>
	case 9 : exti_handle.Line = EXTI_LINE_9; break;
 8003198:	4b1b      	ldr	r3, [pc, #108]	@ (8003208 <smb_cmd_set_exti+0x150>)
 800319a:	613b      	str	r3, [r7, #16]
 800319c:	e017      	b.n	80031ce <smb_cmd_set_exti+0x116>
	case 10 : exti_handle.Line = EXTI_LINE_10; break;
 800319e:	4b1b      	ldr	r3, [pc, #108]	@ (800320c <smb_cmd_set_exti+0x154>)
 80031a0:	613b      	str	r3, [r7, #16]
 80031a2:	e014      	b.n	80031ce <smb_cmd_set_exti+0x116>
	case 11 : exti_handle.Line = EXTI_LINE_11; break;
 80031a4:	4b1a      	ldr	r3, [pc, #104]	@ (8003210 <smb_cmd_set_exti+0x158>)
 80031a6:	613b      	str	r3, [r7, #16]
 80031a8:	e011      	b.n	80031ce <smb_cmd_set_exti+0x116>
	case 12 : exti_handle.Line = EXTI_LINE_12; break;
 80031aa:	4b1a      	ldr	r3, [pc, #104]	@ (8003214 <smb_cmd_set_exti+0x15c>)
 80031ac:	613b      	str	r3, [r7, #16]
 80031ae:	e00e      	b.n	80031ce <smb_cmd_set_exti+0x116>
	case 13 : exti_handle.Line = EXTI_LINE_13; break;
 80031b0:	4b19      	ldr	r3, [pc, #100]	@ (8003218 <smb_cmd_set_exti+0x160>)
 80031b2:	613b      	str	r3, [r7, #16]
 80031b4:	e00b      	b.n	80031ce <smb_cmd_set_exti+0x116>
	case 14 : exti_handle.Line = EXTI_LINE_14; break;
 80031b6:	4b19      	ldr	r3, [pc, #100]	@ (800321c <smb_cmd_set_exti+0x164>)
 80031b8:	613b      	str	r3, [r7, #16]
 80031ba:	e008      	b.n	80031ce <smb_cmd_set_exti+0x116>
	case 15 : exti_handle.Line = EXTI_LINE_15; break;
 80031bc:	4b18      	ldr	r3, [pc, #96]	@ (8003220 <smb_cmd_set_exti+0x168>)
 80031be:	613b      	str	r3, [r7, #16]
 80031c0:	e005      	b.n	80031ce <smb_cmd_set_exti+0x116>
	default : assert (0 == 1); return; break;
 80031c2:	4b18      	ldr	r3, [pc, #96]	@ (8003224 <smb_cmd_set_exti+0x16c>)
 80031c4:	4a18      	ldr	r2, [pc, #96]	@ (8003228 <smb_cmd_set_exti+0x170>)
 80031c6:	21cd      	movs	r1, #205	@ 0xcd
 80031c8:	4818      	ldr	r0, [pc, #96]	@ (800322c <smb_cmd_set_exti+0x174>)
 80031ca:	f010 fea5 	bl	8013f18 <__assert_func>
	}

	HAL_EXTI_GenerateSWI(&exti_handle);
 80031ce:	f107 0310 	add.w	r3, r7, #16
 80031d2:	4618      	mov	r0, r3
 80031d4:	f006 fd2c 	bl	8009c30 <HAL_EXTI_GenerateSWI>
}
 80031d8:	3720      	adds	r7, #32
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	08015d98 	.word	0x08015d98
 80031e4:	08015dbc 	.word	0x08015dbc
 80031e8:	06000001 	.word	0x06000001
 80031ec:	06000002 	.word	0x06000002
 80031f0:	06000003 	.word	0x06000003
 80031f4:	06000004 	.word	0x06000004
 80031f8:	06000005 	.word	0x06000005
 80031fc:	06000006 	.word	0x06000006
 8003200:	06000007 	.word	0x06000007
 8003204:	06000008 	.word	0x06000008
 8003208:	06000009 	.word	0x06000009
 800320c:	0600000a 	.word	0x0600000a
 8003210:	0600000b 	.word	0x0600000b
 8003214:	0600000c 	.word	0x0600000c
 8003218:	0600000d 	.word	0x0600000d
 800321c:	0600000e 	.word	0x0600000e
 8003220:	0600000f 	.word	0x0600000f
 8003224:	08015dd8 	.word	0x08015dd8
 8003228:	08019bf8 	.word	0x08019bf8
 800322c:	08015de0 	.word	0x08015de0

08003230 <smb_cmd_scw>:

static void smb_cmd_scw (SYS_CMD_DEVICE_NODE* pCmdIO, int argc, char **argv)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
	const void* cmdIoParam = pCmdIO->cmdIoParam;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	617b      	str	r3, [r7, #20]

	if (argc != 1) {
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d13a      	bne.n	80032be <smb_cmd_scw+0x8e>
		goto USAGE;
	}

	do_scw_info_display = !do_scw_info_display;
 8003248:	4b22      	ldr	r3, [pc, #136]	@ (80032d4 <smb_cmd_scw+0xa4>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	bf14      	ite	ne
 8003250:	2301      	movne	r3, #1
 8003252:	2300      	moveq	r3, #0
 8003254:	b2db      	uxtb	r3, r3
 8003256:	f083 0301 	eor.w	r3, r3, #1
 800325a:	b2db      	uxtb	r3, r3
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	b2da      	uxtb	r2, r3
 8003262:	4b1c      	ldr	r3, [pc, #112]	@ (80032d4 <smb_cmd_scw+0xa4>)
 8003264:	701a      	strb	r2, [r3, #0]

	if (do_scw_info_display == true) {
 8003266:	4b1b      	ldr	r3, [pc, #108]	@ (80032d4 <smb_cmd_scw+0xa4>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d01e      	beq.n	80032ac <smb_cmd_scw+0x7c>
		(*pCmdIO->pCmdApi->msg)(pCmdIO->cmdIoParam, CUI_ESC_CLR);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	6852      	ldr	r2, [r2, #4]
 8003278:	4917      	ldr	r1, [pc, #92]	@ (80032d8 <smb_cmd_scw+0xa8>)
 800327a:	4610      	mov	r0, r2
 800327c:	4798      	blx	r3
		(*pCmdIO->pCmdApi->msg)(pCmdIO->cmdIoParam, CUI_ESC_CUR_HOME); osDelay(1);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	6852      	ldr	r2, [r2, #4]
 8003288:	4914      	ldr	r1, [pc, #80]	@ (80032dc <smb_cmd_scw+0xac>)
 800328a:	4610      	mov	r0, r2
 800328c:	4798      	blx	r3
 800328e:	2001      	movs	r0, #1
 8003290:	f00c fe25 	bl	800fede <osDelay>
		(*pCmdIO->pCmdApi->msg)(pCmdIO->cmdIoParam, CUI_ESC_CUR_HIDE); osDelay(1);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	6852      	ldr	r2, [r2, #4]
 800329e:	4910      	ldr	r1, [pc, #64]	@ (80032e0 <smb_cmd_scw+0xb0>)
 80032a0:	4610      	mov	r0, r2
 80032a2:	4798      	blx	r3
 80032a4:	2001      	movs	r0, #1
 80032a6:	f00c fe1a 	bl	800fede <osDelay>
	}
	else {
		(*pCmdIO->pCmdApi->msg)(pCmdIO->cmdIoParam, CUI_ESC_CUR_SHOW);
	}
	return;
 80032aa:	e010      	b.n	80032ce <smb_cmd_scw+0x9e>
		(*pCmdIO->pCmdApi->msg)(pCmdIO->cmdIoParam, CUI_ESC_CUR_SHOW);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	6852      	ldr	r2, [r2, #4]
 80032b6:	490b      	ldr	r1, [pc, #44]	@ (80032e4 <smb_cmd_scw+0xb4>)
 80032b8:	4610      	mov	r0, r2
 80032ba:	4798      	blx	r3
	return;
 80032bc:	e007      	b.n	80032ce <smb_cmd_scw+0x9e>
		goto USAGE;
 80032be:	bf00      	nop

	USAGE:
	(*pCmdIO->pCmdApi->msg)(cmdIoParam, "scw"LINE_TERM);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4908      	ldr	r1, [pc, #32]	@ (80032e8 <smb_cmd_scw+0xb8>)
 80032c8:	6978      	ldr	r0, [r7, #20]
 80032ca:	4798      	blx	r3
	return;
 80032cc:	bf00      	nop

	return;
}
 80032ce:	3718      	adds	r7, #24
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	20000bbc 	.word	0x20000bbc
 80032d8:	08015bbc 	.word	0x08015bbc
 80032dc:	08015bc4 	.word	0x08015bc4
 80032e0:	08015e00 	.word	0x08015e00
 80032e4:	08015e08 	.word	0x08015e08
 80032e8:	08015e10 	.word	0x08015e10

080032ec <smb_cmd_show>:

static uint8_t aShowTime[16] = "hh:ms:ss";
static uint8_t aShowDate[16] = "dd-mm-yyyy";

static void smb_cmd_show (SYS_CMD_DEVICE_NODE* pCmdIO, int argc, char **argv)
{
 80032ec:	b590      	push	{r4, r7, lr}
 80032ee:	b0af      	sub	sp, #188	@ 0xbc
 80032f0:	af02      	add	r7, sp, #8
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
	const void* cmdIoParam = pCmdIO->cmdIoParam;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

	if (argc != 2) goto USAGE;
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2b02      	cmp	r3, #2
 8003304:	f040 825f 	bne.w	80037c6 <smb_cmd_show+0x4da>

	if (!strcmp(argv[1], "timer")) {
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3304      	adds	r3, #4
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4997      	ldr	r1, [pc, #604]	@ (800356c <smb_cmd_show+0x280>)
 8003310:	4618      	mov	r0, r3
 8003312:	f7fc ff8d 	bl	8000230 <strcmp>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d14e      	bne.n	80033ba <smb_cmd_show+0xce>
		(*pCmdIO->pCmdApi->msg)(cmdIoParam, " osTimerList"LINE_TERM);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4993      	ldr	r1, [pc, #588]	@ (8003570 <smb_cmd_show+0x284>)
 8003324:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8003328:	4798      	blx	r3
		for (uint32_t i = 0 ; i < OS_TIMER_INDEX_END ; i++) {
 800332a:	2300      	movs	r3, #0
 800332c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003330:	e03f      	b.n	80033b2 <smb_cmd_show+0xc6>
			if (osTimerList[i].osTimerId == NULL) continue;
 8003332:	4990      	ldr	r1, [pc, #576]	@ (8003574 <smb_cmd_show+0x288>)
 8003334:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003338:	4613      	mov	r3, r2
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	4413      	add	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	440b      	add	r3, r1
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d02e      	beq.n	80033a6 <smb_cmd_show+0xba>
			(*pCmdIO->pCmdApi->print)(cmdIoParam, " %2d : %s \t%4d ms \t%s"LINE_TERM,			\
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	685c      	ldr	r4, [r3, #4]
					i, (osTimerList[i].osTimerType == osTimerOnce)?"osTimerOnce":"osTimerPeriodic", osTimerList[i].timeout_tick, osTimerList[i].timer_description);
 800334e:	4989      	ldr	r1, [pc, #548]	@ (8003574 <smb_cmd_show+0x288>)
 8003350:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003354:	4613      	mov	r3, r2
 8003356:	011b      	lsls	r3, r3, #4
 8003358:	4413      	add	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	3304      	adds	r3, #4
 8003360:	781b      	ldrb	r3, [r3, #0]
			(*pCmdIO->pCmdApi->print)(cmdIoParam, " %2d : %s \t%4d ms \t%s"LINE_TERM,			\
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <smb_cmd_show+0x7e>
 8003366:	4884      	ldr	r0, [pc, #528]	@ (8003578 <smb_cmd_show+0x28c>)
 8003368:	e000      	b.n	800336c <smb_cmd_show+0x80>
 800336a:	4884      	ldr	r0, [pc, #528]	@ (800357c <smb_cmd_show+0x290>)
 800336c:	4981      	ldr	r1, [pc, #516]	@ (8003574 <smb_cmd_show+0x288>)
 800336e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003372:	4613      	mov	r3, r2
 8003374:	011b      	lsls	r3, r3, #4
 8003376:	4413      	add	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	440b      	add	r3, r1
 800337c:	3308      	adds	r3, #8
 800337e:	6819      	ldr	r1, [r3, #0]
					i, (osTimerList[i].osTimerType == osTimerOnce)?"osTimerOnce":"osTimerPeriodic", osTimerList[i].timeout_tick, osTimerList[i].timer_description);
 8003380:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003384:	4613      	mov	r3, r2
 8003386:	011b      	lsls	r3, r3, #4
 8003388:	4413      	add	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	3310      	adds	r3, #16
 800338e:	4a79      	ldr	r2, [pc, #484]	@ (8003574 <smb_cmd_show+0x288>)
 8003390:	4413      	add	r3, r2
			(*pCmdIO->pCmdApi->print)(cmdIoParam, " %2d : %s \t%4d ms \t%s"LINE_TERM,			\
 8003392:	9301      	str	r3, [sp, #4]
 8003394:	9100      	str	r1, [sp, #0]
 8003396:	4603      	mov	r3, r0
 8003398:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800339c:	4978      	ldr	r1, [pc, #480]	@ (8003580 <smb_cmd_show+0x294>)
 800339e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80033a2:	47a0      	blx	r4
 80033a4:	e000      	b.n	80033a8 <smb_cmd_show+0xbc>
			if (osTimerList[i].osTimerId == NULL) continue;
 80033a6:	bf00      	nop
		for (uint32_t i = 0 ; i < OS_TIMER_INDEX_END ; i++) {
 80033a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80033ac:	3301      	adds	r3, #1
 80033ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80033b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80033b6:	2b0e      	cmp	r3, #14
 80033b8:	d9bb      	bls.n	8003332 <smb_cmd_show+0x46>
		}
	}

	if (!strcmp(argv[1], "intr")) {
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	3304      	adds	r3, #4
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4970      	ldr	r1, [pc, #448]	@ (8003584 <smb_cmd_show+0x298>)
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fc ff34 	bl	8000230 <strcmp>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d168      	bne.n	80034a0 <smb_cmd_show+0x1b4>
		(*pCmdIO->pCmdApi->msg)(cmdIoParam, " IntrObjList"LINE_TERM);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	496c      	ldr	r1, [pc, #432]	@ (8003588 <smb_cmd_show+0x29c>)
 80033d6:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80033da:	4798      	blx	r3
		for (uint32_t i = SCW_RTU_INTR_INDEX_BEGIN ; i < SCW_RTU_INTR_INDEX_END ; i++) {
 80033dc:	2300      	movs	r3, #0
 80033de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80033e2:	e059      	b.n	8003498 <smb_cmd_show+0x1ac>
			if (strlen(IntrObjEntryList[i].IntrName) < 15) {
 80033e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80033e8:	226c      	movs	r2, #108	@ 0x6c
 80033ea:	fb02 f303 	mul.w	r3, r2, r3
 80033ee:	3308      	adds	r3, #8
 80033f0:	4a66      	ldr	r2, [pc, #408]	@ (800358c <smb_cmd_show+0x2a0>)
 80033f2:	4413      	add	r3, r2
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fc ff25 	bl	8000244 <strlen>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b0e      	cmp	r3, #14
 80033fe:	d823      	bhi.n	8003448 <smb_cmd_show+0x15c>
				(*pCmdIO->pCmdApi->print)(cmdIoParam, " %10d \t%s \t\t%s"LINE_TERM,			\
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685c      	ldr	r4, [r3, #4]
 8003406:	4a61      	ldr	r2, [pc, #388]	@ (800358c <smb_cmd_show+0x2a0>)
 8003408:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800340c:	216c      	movs	r1, #108	@ 0x6c
 800340e:	fb01 f303 	mul.w	r3, r1, r3
 8003412:	4413      	add	r3, r2
 8003414:	3304      	adds	r3, #4
 8003416:	681a      	ldr	r2, [r3, #0]
						IntrObjEntryList[i].IntrCount, IntrObjEntryList[i].IntrName, IntrObjEntryList[i].IntrDesc);
 8003418:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800341c:	216c      	movs	r1, #108	@ 0x6c
 800341e:	fb01 f303 	mul.w	r3, r1, r3
 8003422:	3308      	adds	r3, #8
 8003424:	4959      	ldr	r1, [pc, #356]	@ (800358c <smb_cmd_show+0x2a0>)
 8003426:	4419      	add	r1, r3
 8003428:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800342c:	206c      	movs	r0, #108	@ 0x6c
 800342e:	fb00 f303 	mul.w	r3, r0, r3
 8003432:	3338      	adds	r3, #56	@ 0x38
 8003434:	4855      	ldr	r0, [pc, #340]	@ (800358c <smb_cmd_show+0x2a0>)
 8003436:	4403      	add	r3, r0
 8003438:	3302      	adds	r3, #2
				(*pCmdIO->pCmdApi->print)(cmdIoParam, " %10d \t%s \t\t%s"LINE_TERM,			\
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	460b      	mov	r3, r1
 800343e:	4954      	ldr	r1, [pc, #336]	@ (8003590 <smb_cmd_show+0x2a4>)
 8003440:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8003444:	47a0      	blx	r4
 8003446:	e022      	b.n	800348e <smb_cmd_show+0x1a2>
			}
			else {
				(*pCmdIO->pCmdApi->print)(cmdIoParam, " %10d \t%s \t%s"LINE_TERM,			\
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685c      	ldr	r4, [r3, #4]
 800344e:	4a4f      	ldr	r2, [pc, #316]	@ (800358c <smb_cmd_show+0x2a0>)
 8003450:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003454:	216c      	movs	r1, #108	@ 0x6c
 8003456:	fb01 f303 	mul.w	r3, r1, r3
 800345a:	4413      	add	r3, r2
 800345c:	3304      	adds	r3, #4
 800345e:	681a      	ldr	r2, [r3, #0]
						IntrObjEntryList[i].IntrCount, IntrObjEntryList[i].IntrName, IntrObjEntryList[i].IntrDesc);
 8003460:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003464:	216c      	movs	r1, #108	@ 0x6c
 8003466:	fb01 f303 	mul.w	r3, r1, r3
 800346a:	3308      	adds	r3, #8
 800346c:	4947      	ldr	r1, [pc, #284]	@ (800358c <smb_cmd_show+0x2a0>)
 800346e:	4419      	add	r1, r3
 8003470:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003474:	206c      	movs	r0, #108	@ 0x6c
 8003476:	fb00 f303 	mul.w	r3, r0, r3
 800347a:	3338      	adds	r3, #56	@ 0x38
 800347c:	4843      	ldr	r0, [pc, #268]	@ (800358c <smb_cmd_show+0x2a0>)
 800347e:	4403      	add	r3, r0
 8003480:	3302      	adds	r3, #2
				(*pCmdIO->pCmdApi->print)(cmdIoParam, " %10d \t%s \t%s"LINE_TERM,			\
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	460b      	mov	r3, r1
 8003486:	4943      	ldr	r1, [pc, #268]	@ (8003594 <smb_cmd_show+0x2a8>)
 8003488:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800348c:	47a0      	blx	r4
		for (uint32_t i = SCW_RTU_INTR_INDEX_BEGIN ; i < SCW_RTU_INTR_INDEX_END ; i++) {
 800348e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003492:	3301      	adds	r3, #1
 8003494:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003498:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800349c:	2b0d      	cmp	r3, #13
 800349e:	d9a1      	bls.n	80033e4 <smb_cmd_show+0xf8>
			}
		}
	}
	if (!strcmp(argv[1], "system")) {
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3304      	adds	r3, #4
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	493c      	ldr	r1, [pc, #240]	@ (8003598 <smb_cmd_show+0x2ac>)
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7fc fec1 	bl	8000230 <strcmp>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f040 80f0 	bne.w	8003696 <smb_cmd_show+0x3aa>
		osVersion_t osv;
		osStatus_t status;
		char infobuf[100];

		// CPU ID
		CPUID = READ_REG(SCB->CPUID);
 80034b6:	4b39      	ldr	r3, [pc, #228]	@ (800359c <smb_cmd_show+0x2b0>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
		(*pCmdIO->pCmdApi->print)(cmdIoParam, "CPUID=%#010"PRIx32 LINE_TERM, CPUID);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80034c8:	4935      	ldr	r1, [pc, #212]	@ (80035a0 <smb_cmd_show+0x2b4>)
 80034ca:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80034ce:	4798      	blx	r3

		implementer = LL_CPUID_GetImplementer();
 80034d0:	f7ff fb8e 	bl	8002bf0 <LL_CPUID_GetImplementer>
 80034d4:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
		variant = LL_CPUID_GetVariant();
 80034d8:	f7ff fb96 	bl	8002c08 <LL_CPUID_GetVariant>
 80034dc:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
		constant = LL_CPUID_GetConstant();
 80034e0:	f7ff fba0 	bl	8002c24 <LL_CPUID_GetConstant>
 80034e4:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
		partno = LL_CPUID_GetParNo();
 80034e8:	f7ff fbaa 	bl	8002c40 <LL_CPUID_GetParNo>
 80034ec:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
		version = LL_CPUID_GetRevision();
 80034f0:	f7ff fbb4 	bl	8002c5c <LL_CPUID_GetRevision>
 80034f4:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
		(*pCmdIO->pCmdApi->print)(cmdIoParam, "constant = %ld"LINE_TERM, constant);
		(*pCmdIO->pCmdApi->print)(cmdIoParam, "partno = %ld"LINE_TERM, partno);
		(*pCmdIO->pCmdApi->print)(cmdIoParam, "version = %ld"LINE_TERM, version);
#endif

		assert (implementer == 0x41);
 80034f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80034fc:	2b41      	cmp	r3, #65	@ 0x41
 80034fe:	d006      	beq.n	800350e <smb_cmd_show+0x222>
 8003500:	4b28      	ldr	r3, [pc, #160]	@ (80035a4 <smb_cmd_show+0x2b8>)
 8003502:	4a29      	ldr	r2, [pc, #164]	@ (80035a8 <smb_cmd_show+0x2bc>)
 8003504:	f44f 7194 	mov.w	r1, #296	@ 0x128
 8003508:	4828      	ldr	r0, [pc, #160]	@ (80035ac <smb_cmd_show+0x2c0>)
 800350a:	f010 fd05 	bl	8013f18 <__assert_func>
		assert (variant == 1);
 800350e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003512:	2b01      	cmp	r3, #1
 8003514:	d006      	beq.n	8003524 <smb_cmd_show+0x238>
 8003516:	4b26      	ldr	r3, [pc, #152]	@ (80035b0 <smb_cmd_show+0x2c4>)
 8003518:	4a23      	ldr	r2, [pc, #140]	@ (80035a8 <smb_cmd_show+0x2bc>)
 800351a:	f240 1129 	movw	r1, #297	@ 0x129
 800351e:	4823      	ldr	r0, [pc, #140]	@ (80035ac <smb_cmd_show+0x2c0>)
 8003520:	f010 fcfa 	bl	8013f18 <__assert_func>
		assert (constant == 0x0f);
 8003524:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003528:	2b0f      	cmp	r3, #15
 800352a:	d006      	beq.n	800353a <smb_cmd_show+0x24e>
 800352c:	4b21      	ldr	r3, [pc, #132]	@ (80035b4 <smb_cmd_show+0x2c8>)
 800352e:	4a1e      	ldr	r2, [pc, #120]	@ (80035a8 <smb_cmd_show+0x2bc>)
 8003530:	f44f 7195 	mov.w	r1, #298	@ 0x12a
 8003534:	481d      	ldr	r0, [pc, #116]	@ (80035ac <smb_cmd_show+0x2c0>)
 8003536:	f010 fcef 	bl	8013f18 <__assert_func>
		assert (partno == 0xC23);
 800353a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800353e:	f640 4223 	movw	r2, #3107	@ 0xc23
 8003542:	4293      	cmp	r3, r2
 8003544:	d006      	beq.n	8003554 <smb_cmd_show+0x268>
 8003546:	4b1c      	ldr	r3, [pc, #112]	@ (80035b8 <smb_cmd_show+0x2cc>)
 8003548:	4a17      	ldr	r2, [pc, #92]	@ (80035a8 <smb_cmd_show+0x2bc>)
 800354a:	f240 112b 	movw	r1, #299	@ 0x12b
 800354e:	4817      	ldr	r0, [pc, #92]	@ (80035ac <smb_cmd_show+0x2c0>)
 8003550:	f010 fce2 	bl	8013f18 <__assert_func>
		assert (version == 0x1);
 8003554:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003558:	2b01      	cmp	r3, #1
 800355a:	d031      	beq.n	80035c0 <smb_cmd_show+0x2d4>
 800355c:	4b17      	ldr	r3, [pc, #92]	@ (80035bc <smb_cmd_show+0x2d0>)
 800355e:	4a12      	ldr	r2, [pc, #72]	@ (80035a8 <smb_cmd_show+0x2bc>)
 8003560:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8003564:	4811      	ldr	r0, [pc, #68]	@ (80035ac <smb_cmd_show+0x2c0>)
 8003566:	f010 fcd7 	bl	8013f18 <__assert_func>
 800356a:	bf00      	nop
 800356c:	08015e18 	.word	0x08015e18
 8003570:	08015e20 	.word	0x08015e20
 8003574:	20000720 	.word	0x20000720
 8003578:	08015e30 	.word	0x08015e30
 800357c:	08015e3c 	.word	0x08015e3c
 8003580:	08015e4c 	.word	0x08015e4c
 8003584:	08015e64 	.word	0x08015e64
 8003588:	08015e6c 	.word	0x08015e6c
 800358c:	20000024 	.word	0x20000024
 8003590:	08015e7c 	.word	0x08015e7c
 8003594:	08015e90 	.word	0x08015e90
 8003598:	08015ea0 	.word	0x08015ea0
 800359c:	e000ed00 	.word	0xe000ed00
 80035a0:	08015ea8 	.word	0x08015ea8
 80035a4:	08015eb8 	.word	0x08015eb8
 80035a8:	08019c0c 	.word	0x08019c0c
 80035ac:	08015de0 	.word	0x08015de0
 80035b0:	08015ecc 	.word	0x08015ecc
 80035b4:	08015edc 	.word	0x08015edc
 80035b8:	08015ef0 	.word	0x08015ef0
 80035bc:	08015f00 	.word	0x08015f00

		if (implementer == 0x41) (*pCmdIO->pCmdApi->msg)(cmdIoParam, "implementer = Arm"LINE_TERM);
 80035c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80035c4:	2b41      	cmp	r3, #65	@ 0x41
 80035c6:	d106      	bne.n	80035d6 <smb_cmd_show+0x2ea>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4984      	ldr	r1, [pc, #528]	@ (80037e0 <smb_cmd_show+0x4f4>)
 80035d0:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80035d4:	4798      	blx	r3
		if (partno == 0xC23) (*pCmdIO->pCmdApi->msg)(cmdIoParam, "partno = Cortex-M3"LINE_TERM);
 80035d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80035da:	f640 4223 	movw	r2, #3107	@ 0xc23
 80035de:	4293      	cmp	r3, r2
 80035e0:	d106      	bne.n	80035f0 <smb_cmd_show+0x304>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	497e      	ldr	r1, [pc, #504]	@ (80037e4 <smb_cmd_show+0x4f8>)
 80035ea:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80035ee:	4798      	blx	r3


		// UID. Reference manual 의 Device electronic signature 참조할 것.
		uid0 = LL_GetUID_Word0();
 80035f0:	f7ff fb40 	bl	8002c74 <LL_GetUID_Word0>
 80035f4:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
		uid1 = LL_GetUID_Word1();
 80035f8:	f7ff fb46 	bl	8002c88 <LL_GetUID_Word1>
 80035fc:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
		uid2 = LL_GetUID_Word2();
 8003600:	f7ff fb4c 	bl	8002c9c <LL_GetUID_Word2>
 8003604:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
		(*pCmdIO->pCmdApi->print)(cmdIoParam, "uid0=%#010"PRIx32 LINE_TERM, uid0);	// X and Y coordinates on the wafer
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003612:	4975      	ldr	r1, [pc, #468]	@ (80037e8 <smb_cmd_show+0x4fc>)
 8003614:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8003618:	4798      	blx	r3
		(*pCmdIO->pCmdApi->print)(cmdIoParam, "uid1=%#010"PRIx32 LINE_TERM, uid1);	// LOT_NUM[23:0], WAFER_NUM[7:0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8003624:	4971      	ldr	r1, [pc, #452]	@ (80037ec <smb_cmd_show+0x500>)
 8003626:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800362a:	4798      	blx	r3
		(*pCmdIO->pCmdApi->print)(cmdIoParam, "uid2=%#010"PRIx32 LINE_TERM, uid2);	// Lot number (ASCII encoded)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003636:	496e      	ldr	r1, [pc, #440]	@ (80037f0 <smb_cmd_show+0x504>)
 8003638:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800363c:	4798      	blx	r3

		// OS
		status = osKernelGetInfo(&osv, infobuf, sizeof(infobuf));
 800363e:	f107 0110 	add.w	r1, r7, #16
 8003642:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003646:	2264      	movs	r2, #100	@ 0x64
 8003648:	4618      	mov	r0, r3
 800364a:	f00c fa91 	bl	800fb70 <osKernelGetInfo>
 800364e:	67f8      	str	r0, [r7, #124]	@ 0x7c
		assert (status == osOK);
 8003650:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003652:	2b00      	cmp	r3, #0
 8003654:	d006      	beq.n	8003664 <smb_cmd_show+0x378>
 8003656:	4b67      	ldr	r3, [pc, #412]	@ (80037f4 <smb_cmd_show+0x508>)
 8003658:	4a67      	ldr	r2, [pc, #412]	@ (80037f8 <smb_cmd_show+0x50c>)
 800365a:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 800365e:	4867      	ldr	r0, [pc, #412]	@ (80037fc <smb_cmd_show+0x510>)
 8003660:	f010 fc5a 	bl	8013f18 <__assert_func>
		(*pCmdIO->pCmdApi->print)(cmdIoParam, "Kernel Information: %s"LINE_TERM, infobuf);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f107 0210 	add.w	r2, r7, #16
 800366e:	4964      	ldr	r1, [pc, #400]	@ (8003800 <smb_cmd_show+0x514>)
 8003670:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8003674:	4798      	blx	r3
		(*pCmdIO->pCmdApi->print)(cmdIoParam, "Kernel Version    : %d"LINE_TERM, osv.kernel);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800367e:	4961      	ldr	r1, [pc, #388]	@ (8003804 <smb_cmd_show+0x518>)
 8003680:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8003684:	4798      	blx	r3
		(*pCmdIO->pCmdApi->print)(cmdIoParam, "Kernel API Version: %d"LINE_TERM, osv.api);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800368e:	495e      	ldr	r1, [pc, #376]	@ (8003808 <smb_cmd_show+0x51c>)
 8003690:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8003694:	4798      	blx	r3
	}
	if (!strcmp(argv[1], "time")) {
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	3304      	adds	r3, #4
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	495b      	ldr	r1, [pc, #364]	@ (800380c <smb_cmd_show+0x520>)
 800369e:	4618      	mov	r0, r3
 80036a0:	f7fc fdc6 	bl	8000230 <strcmp>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f040 8096 	bne.w	80037d8 <smb_cmd_show+0x4ec>
		/* Display date Format : mm-dd-yy */
		sprintf((char *)aShowDate, "%4d/%02d/%02d", 2000 + scw_infoObj.currentDate.Year, scw_infoObj.currentDate.Month, scw_infoObj.currentDate.Date);
 80036ac:	4b58      	ldr	r3, [pc, #352]	@ (8003810 <smb_cmd_show+0x524>)
 80036ae:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 80036b2:	f503 62fa 	add.w	r2, r3, #2000	@ 0x7d0
 80036b6:	4b56      	ldr	r3, [pc, #344]	@ (8003810 <smb_cmd_show+0x524>)
 80036b8:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80036bc:	4619      	mov	r1, r3
 80036be:	4b54      	ldr	r3, [pc, #336]	@ (8003810 <smb_cmd_show+0x524>)
 80036c0:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	460b      	mov	r3, r1
 80036c8:	4952      	ldr	r1, [pc, #328]	@ (8003814 <smb_cmd_show+0x528>)
 80036ca:	4853      	ldr	r0, [pc, #332]	@ (8003818 <smb_cmd_show+0x52c>)
 80036cc:	f010 feb4 	bl	8014438 <siprintf>
		(*pCmdIO->pCmdApi->print)(cmdIoParam, LINE_TERM " %s", aShowDate);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	4a50      	ldr	r2, [pc, #320]	@ (8003818 <smb_cmd_show+0x52c>)
 80036d8:	4950      	ldr	r1, [pc, #320]	@ (800381c <smb_cmd_show+0x530>)
 80036da:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80036de:	4798      	blx	r3
		switch (scw_infoObj.currentDate.WeekDay) {
 80036e0:	4b4b      	ldr	r3, [pc, #300]	@ (8003810 <smb_cmd_show+0x524>)
 80036e2:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80036e6:	2b06      	cmp	r3, #6
 80036e8:	d83a      	bhi.n	8003760 <smb_cmd_show+0x474>
 80036ea:	a201      	add	r2, pc, #4	@ (adr r2, 80036f0 <smb_cmd_show+0x404>)
 80036ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f0:	08003755 	.word	0x08003755
 80036f4:	0800370d 	.word	0x0800370d
 80036f8:	08003719 	.word	0x08003719
 80036fc:	08003725 	.word	0x08003725
 8003700:	08003731 	.word	0x08003731
 8003704:	0800373d 	.word	0x0800373d
 8003708:	08003749 	.word	0x08003749
		case RTC_WEEKDAY_MONDAY : 		sprintf((char *)aShowDate, "%s", "(Mon)"); break;
 800370c:	4a44      	ldr	r2, [pc, #272]	@ (8003820 <smb_cmd_show+0x534>)
 800370e:	4945      	ldr	r1, [pc, #276]	@ (8003824 <smb_cmd_show+0x538>)
 8003710:	4841      	ldr	r0, [pc, #260]	@ (8003818 <smb_cmd_show+0x52c>)
 8003712:	f010 fe91 	bl	8014438 <siprintf>
 8003716:	e029      	b.n	800376c <smb_cmd_show+0x480>
		case RTC_WEEKDAY_TUESDAY : 		sprintf((char *)aShowDate, "%s", "(Tue)"); break;
 8003718:	4a43      	ldr	r2, [pc, #268]	@ (8003828 <smb_cmd_show+0x53c>)
 800371a:	4942      	ldr	r1, [pc, #264]	@ (8003824 <smb_cmd_show+0x538>)
 800371c:	483e      	ldr	r0, [pc, #248]	@ (8003818 <smb_cmd_show+0x52c>)
 800371e:	f010 fe8b 	bl	8014438 <siprintf>
 8003722:	e023      	b.n	800376c <smb_cmd_show+0x480>
		case RTC_WEEKDAY_WEDNESDAY : 	sprintf((char *)aShowDate, "%s", "(Wed)"); break;
 8003724:	4a41      	ldr	r2, [pc, #260]	@ (800382c <smb_cmd_show+0x540>)
 8003726:	493f      	ldr	r1, [pc, #252]	@ (8003824 <smb_cmd_show+0x538>)
 8003728:	483b      	ldr	r0, [pc, #236]	@ (8003818 <smb_cmd_show+0x52c>)
 800372a:	f010 fe85 	bl	8014438 <siprintf>
 800372e:	e01d      	b.n	800376c <smb_cmd_show+0x480>
		case RTC_WEEKDAY_THURSDAY : 	sprintf((char *)aShowDate, "%s", "(Thu)"); break;
 8003730:	4a3f      	ldr	r2, [pc, #252]	@ (8003830 <smb_cmd_show+0x544>)
 8003732:	493c      	ldr	r1, [pc, #240]	@ (8003824 <smb_cmd_show+0x538>)
 8003734:	4838      	ldr	r0, [pc, #224]	@ (8003818 <smb_cmd_show+0x52c>)
 8003736:	f010 fe7f 	bl	8014438 <siprintf>
 800373a:	e017      	b.n	800376c <smb_cmd_show+0x480>
		case RTC_WEEKDAY_FRIDAY : 		sprintf((char *)aShowDate, "%s", "(Fri)"); break;
 800373c:	4a3d      	ldr	r2, [pc, #244]	@ (8003834 <smb_cmd_show+0x548>)
 800373e:	4939      	ldr	r1, [pc, #228]	@ (8003824 <smb_cmd_show+0x538>)
 8003740:	4835      	ldr	r0, [pc, #212]	@ (8003818 <smb_cmd_show+0x52c>)
 8003742:	f010 fe79 	bl	8014438 <siprintf>
 8003746:	e011      	b.n	800376c <smb_cmd_show+0x480>
		case RTC_WEEKDAY_SATURDAY : 	sprintf((char *)aShowDate, "%s", "(Sat)"); break;
 8003748:	4a3b      	ldr	r2, [pc, #236]	@ (8003838 <smb_cmd_show+0x54c>)
 800374a:	4936      	ldr	r1, [pc, #216]	@ (8003824 <smb_cmd_show+0x538>)
 800374c:	4832      	ldr	r0, [pc, #200]	@ (8003818 <smb_cmd_show+0x52c>)
 800374e:	f010 fe73 	bl	8014438 <siprintf>
 8003752:	e00b      	b.n	800376c <smb_cmd_show+0x480>
		case RTC_WEEKDAY_SUNDAY : 		sprintf((char *)aShowDate, "%s", "(Sun)"); break;
 8003754:	4a39      	ldr	r2, [pc, #228]	@ (800383c <smb_cmd_show+0x550>)
 8003756:	4933      	ldr	r1, [pc, #204]	@ (8003824 <smb_cmd_show+0x538>)
 8003758:	482f      	ldr	r0, [pc, #188]	@ (8003818 <smb_cmd_show+0x52c>)
 800375a:	f010 fe6d 	bl	8014438 <siprintf>
 800375e:	e005      	b.n	800376c <smb_cmd_show+0x480>
		default : 						sprintf((char *)aShowDate, "%s", "(NULL Day)"); break;
 8003760:	4a37      	ldr	r2, [pc, #220]	@ (8003840 <smb_cmd_show+0x554>)
 8003762:	4930      	ldr	r1, [pc, #192]	@ (8003824 <smb_cmd_show+0x538>)
 8003764:	482c      	ldr	r0, [pc, #176]	@ (8003818 <smb_cmd_show+0x52c>)
 8003766:	f010 fe67 	bl	8014438 <siprintf>
 800376a:	bf00      	nop
		}
		(*pCmdIO->pCmdApi->print)(cmdIoParam, " %s", aShowDate);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	4a29      	ldr	r2, [pc, #164]	@ (8003818 <smb_cmd_show+0x52c>)
 8003774:	4933      	ldr	r1, [pc, #204]	@ (8003844 <smb_cmd_show+0x558>)
 8003776:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800377a:	4798      	blx	r3
		sprintf((char *)aShowTime, " %02d:%02d:%02d %s", scw_infoObj.currentTime.Hours, scw_infoObj.currentTime.Minutes, scw_infoObj.currentTime.Seconds, (scw_infoObj.currentTime.Hours<12)?"am":"pm");
 800377c:	4b24      	ldr	r3, [pc, #144]	@ (8003810 <smb_cmd_show+0x524>)
 800377e:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8003782:	4619      	mov	r1, r3
 8003784:	4b22      	ldr	r3, [pc, #136]	@ (8003810 <smb_cmd_show+0x524>)
 8003786:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800378a:	4618      	mov	r0, r3
 800378c:	4b20      	ldr	r3, [pc, #128]	@ (8003810 <smb_cmd_show+0x524>)
 800378e:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 8003792:	461a      	mov	r2, r3
 8003794:	4b1e      	ldr	r3, [pc, #120]	@ (8003810 <smb_cmd_show+0x524>)
 8003796:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800379a:	2b0b      	cmp	r3, #11
 800379c:	d801      	bhi.n	80037a2 <smb_cmd_show+0x4b6>
 800379e:	4b2a      	ldr	r3, [pc, #168]	@ (8003848 <smb_cmd_show+0x55c>)
 80037a0:	e000      	b.n	80037a4 <smb_cmd_show+0x4b8>
 80037a2:	4b2a      	ldr	r3, [pc, #168]	@ (800384c <smb_cmd_show+0x560>)
 80037a4:	9301      	str	r3, [sp, #4]
 80037a6:	9200      	str	r2, [sp, #0]
 80037a8:	4603      	mov	r3, r0
 80037aa:	460a      	mov	r2, r1
 80037ac:	4928      	ldr	r1, [pc, #160]	@ (8003850 <smb_cmd_show+0x564>)
 80037ae:	4829      	ldr	r0, [pc, #164]	@ (8003854 <smb_cmd_show+0x568>)
 80037b0:	f010 fe42 	bl	8014438 <siprintf>
		(*pCmdIO->pCmdApi->print)(cmdIoParam, "%s"LINE_TERM LINE_TERM , aShowTime);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	4a26      	ldr	r2, [pc, #152]	@ (8003854 <smb_cmd_show+0x568>)
 80037bc:	4926      	ldr	r1, [pc, #152]	@ (8003858 <smb_cmd_show+0x56c>)
 80037be:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80037c2:	4798      	blx	r3
	}
	return;
 80037c4:	e008      	b.n	80037d8 <smb_cmd_show+0x4ec>
	if (argc != 2) goto USAGE;
 80037c6:	bf00      	nop

	USAGE:
	(*pCmdIO->pCmdApi->msg)(cmdIoParam, " show timer/intr/system/time"LINE_TERM);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4923      	ldr	r1, [pc, #140]	@ (800385c <smb_cmd_show+0x570>)
 80037d0:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80037d4:	4798      	blx	r3
	return;
 80037d6:	e000      	b.n	80037da <smb_cmd_show+0x4ee>
	return;
 80037d8:	bf00      	nop
}
 80037da:	37b4      	adds	r7, #180	@ 0xb4
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd90      	pop	{r4, r7, pc}
 80037e0:	08015f10 	.word	0x08015f10
 80037e4:	08015f24 	.word	0x08015f24
 80037e8:	08015f3c 	.word	0x08015f3c
 80037ec:	08015f4c 	.word	0x08015f4c
 80037f0:	08015f5c 	.word	0x08015f5c
 80037f4:	08015f6c 	.word	0x08015f6c
 80037f8:	08019c0c 	.word	0x08019c0c
 80037fc:	08015de0 	.word	0x08015de0
 8003800:	08015f7c 	.word	0x08015f7c
 8003804:	08015f98 	.word	0x08015f98
 8003808:	08015fb4 	.word	0x08015fb4
 800380c:	08015fd0 	.word	0x08015fd0
 8003810:	20000b28 	.word	0x20000b28
 8003814:	08015fd8 	.word	0x08015fd8
 8003818:	20000014 	.word	0x20000014
 800381c:	08015fe8 	.word	0x08015fe8
 8003820:	08015ff0 	.word	0x08015ff0
 8003824:	08015ff8 	.word	0x08015ff8
 8003828:	08015ffc 	.word	0x08015ffc
 800382c:	08016004 	.word	0x08016004
 8003830:	0801600c 	.word	0x0801600c
 8003834:	08016014 	.word	0x08016014
 8003838:	0801601c 	.word	0x0801601c
 800383c:	08016024 	.word	0x08016024
 8003840:	0801602c 	.word	0x0801602c
 8003844:	08016038 	.word	0x08016038
 8003848:	0801603c 	.word	0x0801603c
 800384c:	08016040 	.word	0x08016040
 8003850:	08016044 	.word	0x08016044
 8003854:	20000004 	.word	0x20000004
 8003858:	08016058 	.word	0x08016058
 800385c:	08016060 	.word	0x08016060

08003860 <smb_cmd_showuptime>:


static void smb_cmd_showuptime (SYS_CMD_DEVICE_NODE* pCmdIO, int argc, char **argv)
{
 8003860:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003864:	b092      	sub	sp, #72	@ 0x48
 8003866:	af02      	add	r7, sp, #8
 8003868:	6278      	str	r0, [r7, #36]	@ 0x24
 800386a:	6239      	str	r1, [r7, #32]
 800386c:	61fa      	str	r2, [r7, #28]
	const void* cmdIoParam = pCmdIO->cmdIoParam;
 800386e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint8_t day, hour, min, sec;
	uint64_t tmp;

	tmp = uptime_counter;
 8003874:	4b40      	ldr	r3, [pc, #256]	@ (8003978 <smb_cmd_showuptime+0x118>)
 8003876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

	day = tmp /DAY_TO_SEC;
 800387e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8003882:	4a3e      	ldr	r2, [pc, #248]	@ (800397c <smb_cmd_showuptime+0x11c>)
 8003884:	f04f 0300 	mov.w	r3, #0
 8003888:	f7fd fb0a 	bl	8000ea0 <__aeabi_uldivmod>
 800388c:	4602      	mov	r2, r0
 800388e:	460b      	mov	r3, r1
 8003890:	4613      	mov	r3, r2
 8003892:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	tmp = tmp - (day*DAY_TO_SEC);
 8003896:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800389a:	4a38      	ldr	r2, [pc, #224]	@ (800397c <smb_cmd_showuptime+0x11c>)
 800389c:	fb02 f303 	mul.w	r3, r2, r3
 80038a0:	17da      	asrs	r2, r3, #31
 80038a2:	461c      	mov	r4, r3
 80038a4:	4615      	mov	r5, r2
 80038a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80038aa:	1b11      	subs	r1, r2, r4
 80038ac:	6139      	str	r1, [r7, #16]
 80038ae:	eb63 0305 	sbc.w	r3, r3, r5
 80038b2:	617b      	str	r3, [r7, #20]
 80038b4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80038b8:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

	hour = tmp/HOUR_TO_SEC;
 80038bc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80038c0:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80038c4:	f04f 0300 	mov.w	r3, #0
 80038c8:	f7fd faea 	bl	8000ea0 <__aeabi_uldivmod>
 80038cc:	4602      	mov	r2, r0
 80038ce:	460b      	mov	r3, r1
 80038d0:	4613      	mov	r3, r2
 80038d2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	tmp = tmp - (hour*HOUR_TO_SEC);
 80038d6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80038da:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80038de:	fb02 f303 	mul.w	r3, r2, r3
 80038e2:	17da      	asrs	r2, r3, #31
 80038e4:	469a      	mov	sl, r3
 80038e6:	4693      	mov	fp, r2
 80038e8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80038ec:	ebb2 010a 	subs.w	r1, r2, sl
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	eb63 030b 	sbc.w	r3, r3, fp
 80038f6:	60fb      	str	r3, [r7, #12]
 80038f8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80038fc:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

	min = tmp/MIN_TO_SEC;
 8003900:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8003904:	f04f 023c 	mov.w	r2, #60	@ 0x3c
 8003908:	f04f 0300 	mov.w	r3, #0
 800390c:	f7fd fac8 	bl	8000ea0 <__aeabi_uldivmod>
 8003910:	4602      	mov	r2, r0
 8003912:	460b      	mov	r3, r1
 8003914:	4613      	mov	r3, r2
 8003916:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	tmp = tmp - (min*MIN_TO_SEC);
 800391a:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 800391e:	4613      	mov	r3, r2
 8003920:	011b      	lsls	r3, r3, #4
 8003922:	1a9b      	subs	r3, r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	17da      	asrs	r2, r3, #31
 8003928:	4698      	mov	r8, r3
 800392a:	4691      	mov	r9, r2
 800392c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003930:	ebb2 0108 	subs.w	r1, r2, r8
 8003934:	6039      	str	r1, [r7, #0]
 8003936:	eb63 0309 	sbc.w	r3, r3, r9
 800393a:	607b      	str	r3, [r7, #4]
 800393c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003940:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

	sec = tmp;
 8003944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003946:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

	(*pCmdIO->pCmdApi->print)(cmdIoParam, " Uptime = %d days, %d hours, %d mins, %d sec"LINE_TERM, day, hour, min, sec);
 800394a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	685c      	ldr	r4, [r3, #4]
 8003950:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8003954:	f897 002e 	ldrb.w	r0, [r7, #46]	@ 0x2e
 8003958:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800395c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8003960:	9201      	str	r2, [sp, #4]
 8003962:	9300      	str	r3, [sp, #0]
 8003964:	4603      	mov	r3, r0
 8003966:	460a      	mov	r2, r1
 8003968:	4905      	ldr	r1, [pc, #20]	@ (8003980 <smb_cmd_showuptime+0x120>)
 800396a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800396c:	47a0      	blx	r4

	return;
 800396e:	bf00      	nop
}
 8003970:	3740      	adds	r7, #64	@ 0x40
 8003972:	46bd      	mov	sp, r7
 8003974:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003978:	20000b20 	.word	0x20000b20
 800397c:	00015180 	.word	0x00015180
 8003980:	08016080 	.word	0x08016080

08003984 <cmd_system_add>:
		{"runtime",     	smb_cmd_showuptime,      	"\t\t- runtime"},

};

bool cmd_system_add ()
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
	assert (SYS_CMD_ADDGRP(System_CommandTbl, sizeof(System_CommandTbl)/sizeof(*System_CommandTbl), "system", ": system command group") == true);
 8003988:	4b09      	ldr	r3, [pc, #36]	@ (80039b0 <cmd_system_add+0x2c>)
 800398a:	4a0a      	ldr	r2, [pc, #40]	@ (80039b4 <cmd_system_add+0x30>)
 800398c:	2108      	movs	r1, #8
 800398e:	480a      	ldr	r0, [pc, #40]	@ (80039b8 <cmd_system_add+0x34>)
 8003990:	f000 f83e 	bl	8003a10 <SYS_CMD_ADDGRP>
 8003994:	4603      	mov	r3, r0
 8003996:	2b01      	cmp	r3, #1
 8003998:	d006      	beq.n	80039a8 <cmd_system_add+0x24>
 800399a:	4b08      	ldr	r3, [pc, #32]	@ (80039bc <cmd_system_add+0x38>)
 800399c:	4a08      	ldr	r2, [pc, #32]	@ (80039c0 <cmd_system_add+0x3c>)
 800399e:	f44f 71c2 	mov.w	r1, #388	@ 0x184
 80039a2:	4808      	ldr	r0, [pc, #32]	@ (80039c4 <cmd_system_add+0x40>)
 80039a4:	f010 fab8 	bl	8013f18 <__assert_func>
	return true;
 80039a8:	2301      	movs	r3, #1
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	08016170 	.word	0x08016170
 80039b4:	08015ea0 	.word	0x08015ea0
 80039b8:	08019b98 	.word	0x08019b98
 80039bc:	08016188 	.word	0x08016188
 80039c0:	08019c1c 	.word	0x08019c1c
 80039c4:	08015de0 	.word	0x08015de0

080039c8 <SYS_CMD_Initialize>:

  Remarks:
    This routine should only be called once during system initialization.
 */
bool SYS_CMD_Initialize(const SYS_MODULE_INIT * const init )
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
	SYS_CMD_INIT *initConfig = (SYS_CMD_INIT*)init;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	60fb      	str	r3, [r7, #12]

	if (initConfig == 0)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <SYS_CMD_Initialize+0x16>
	{
		return false;
 80039da:	2300      	movs	r3, #0
 80039dc:	e00f      	b.n	80039fe <SYS_CMD_Initialize+0x36>
	}

	_cmdInitData = *initConfig; // save a copy of the initialization data
 80039de:	4b0a      	ldr	r3, [pc, #40]	@ (8003a08 <SYS_CMD_Initialize+0x40>)
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	6810      	ldr	r0, [r2, #0]
 80039e4:	6018      	str	r0, [r3, #0]


	cmdIODevList.head = cmdIODevList.tail = 0;
 80039e6:	4b09      	ldr	r3, [pc, #36]	@ (8003a0c <SYS_CMD_Initialize+0x44>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	605a      	str	r2, [r3, #4]
 80039ec:	4b07      	ldr	r3, [pc, #28]	@ (8003a0c <SYS_CMD_Initialize+0x44>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	4a06      	ldr	r2, [pc, #24]	@ (8003a0c <SYS_CMD_Initialize+0x44>)
 80039f2:	6013      	str	r3, [r2, #0]

	_cmdInitData.consoleIndex = initConfig->consoleIndex;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	885a      	ldrh	r2, [r3, #2]
 80039f8:	4b03      	ldr	r3, [pc, #12]	@ (8003a08 <SYS_CMD_Initialize+0x40>)
 80039fa:	805a      	strh	r2, [r3, #2]

	return true;
 80039fc:	2301      	movs	r3, #1
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bc80      	pop	{r7}
 8003a06:	4770      	bx	lr
 8003a08:	20000ee0 	.word	0x20000ee0
 8003a0c:	20000ed8 	.word	0x20000ed8

08003a10 <SYS_CMD_ADDGRP>:


// add new command group
bool  SYS_CMD_ADDGRP(const SYS_CMD_DESCRIPTOR* pCmdTbl, int nCmds, const char* groupName, const char* menuStr)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b088      	sub	sp, #32
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
 8003a1c:	603b      	str	r3, [r7, #0]
	int i, groupIx = -1, emptyIx = -1;
 8003a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a22:	61bb      	str	r3, [r7, #24]
 8003a24:	f04f 33ff 	mov.w	r3, #4294967295
 8003a28:	617b      	str	r3, [r7, #20]
	int insertIx;

	// Check if there is space for new command group; If this table already added, also simply update.
	for (i=0; i<MAX_CMD_GROUP; i++)
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	61fb      	str	r3, [r7, #28]
 8003a2e:	e028      	b.n	8003a82 <SYS_CMD_ADDGRP+0x72>
	{
		if(_usrCmdTbl[i].pCmd == 0)
 8003a30:	4a2d      	ldr	r2, [pc, #180]	@ (8003ae8 <SYS_CMD_ADDGRP+0xd8>)
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	011b      	lsls	r3, r3, #4
 8003a36:	4413      	add	r3, r2
 8003a38:	3304      	adds	r3, #4
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d102      	bne.n	8003a46 <SYS_CMD_ADDGRP+0x36>
		{   // empty slot
			emptyIx = i;
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	617b      	str	r3, [r7, #20]
 8003a44:	e01a      	b.n	8003a7c <SYS_CMD_ADDGRP+0x6c>
		}
		else if(_usrCmdTbl[i].pCmd == pCmdTbl)
 8003a46:	4a28      	ldr	r2, [pc, #160]	@ (8003ae8 <SYS_CMD_ADDGRP+0xd8>)
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	011b      	lsls	r3, r3, #4
 8003a4c:	4413      	add	r3, r2
 8003a4e:	3304      	adds	r3, #4
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d111      	bne.n	8003a7c <SYS_CMD_ADDGRP+0x6c>
		{   // already have this group; sanity check against the group name
			if(strcmp(groupName, _usrCmdTbl[i].cmdGroupName) != 0)
 8003a58:	4a23      	ldr	r2, [pc, #140]	@ (8003ae8 <SYS_CMD_ADDGRP+0xd8>)
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	011b      	lsls	r3, r3, #4
 8003a5e:	4413      	add	r3, r2
 8003a60:	3308      	adds	r3, #8
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4619      	mov	r1, r3
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7fc fbe2 	bl	8000230 <strcmp>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <SYS_CMD_ADDGRP+0x66>
			{   // name mismatch
				return false;
 8003a72:	2300      	movs	r3, #0
 8003a74:	e034      	b.n	8003ae0 <SYS_CMD_ADDGRP+0xd0>
			}

			groupIx = i;
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	61bb      	str	r3, [r7, #24]
			break;
 8003a7a:	e005      	b.n	8003a88 <SYS_CMD_ADDGRP+0x78>
	for (i=0; i<MAX_CMD_GROUP; i++)
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	3301      	adds	r3, #1
 8003a80:	61fb      	str	r3, [r7, #28]
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	2b0b      	cmp	r3, #11
 8003a86:	ddd3      	ble.n	8003a30 <SYS_CMD_ADDGRP+0x20>
		}
	}

	// reference the command group
	if (groupIx != -1)
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8e:	d002      	beq.n	8003a96 <SYS_CMD_ADDGRP+0x86>
	{
		insertIx = groupIx;
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	613b      	str	r3, [r7, #16]
 8003a94:	e008      	b.n	8003aa8 <SYS_CMD_ADDGRP+0x98>
	}
	else if(emptyIx != -1)
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9c:	d002      	beq.n	8003aa4 <SYS_CMD_ADDGRP+0x94>
	{
		insertIx = emptyIx;
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	613b      	str	r3, [r7, #16]
 8003aa2:	e001      	b.n	8003aa8 <SYS_CMD_ADDGRP+0x98>
	}
	else
	{
		return false;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	e01b      	b.n	8003ae0 <SYS_CMD_ADDGRP+0xd0>
	}

	_usrCmdTbl[insertIx].pCmd = pCmdTbl;
 8003aa8:	4a0f      	ldr	r2, [pc, #60]	@ (8003ae8 <SYS_CMD_ADDGRP+0xd8>)
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	011b      	lsls	r3, r3, #4
 8003aae:	4413      	add	r3, r2
 8003ab0:	3304      	adds	r3, #4
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	601a      	str	r2, [r3, #0]
	_usrCmdTbl[insertIx].nCmds = nCmds;
 8003ab6:	4a0c      	ldr	r2, [pc, #48]	@ (8003ae8 <SYS_CMD_ADDGRP+0xd8>)
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	011b      	lsls	r3, r3, #4
 8003abc:	4413      	add	r3, r2
 8003abe:	68ba      	ldr	r2, [r7, #8]
 8003ac0:	601a      	str	r2, [r3, #0]
	_usrCmdTbl[insertIx].cmdGroupName = groupName;
 8003ac2:	4a09      	ldr	r2, [pc, #36]	@ (8003ae8 <SYS_CMD_ADDGRP+0xd8>)
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	4413      	add	r3, r2
 8003aca:	3308      	adds	r3, #8
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	601a      	str	r2, [r3, #0]
	_usrCmdTbl[insertIx].cmdMenuStr = menuStr;
 8003ad0:	4a05      	ldr	r2, [pc, #20]	@ (8003ae8 <SYS_CMD_ADDGRP+0xd8>)
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	011b      	lsls	r3, r3, #4
 8003ad6:	4413      	add	r3, r2
 8003ad8:	330c      	adds	r3, #12
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	601a      	str	r2, [r3, #0]
	return true;
 8003ade:	2301      	movs	r3, #1

}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3720      	adds	r7, #32
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	20000fe8 	.word	0x20000fe8

08003aec <RunCmdTask>:

void RunCmdTask(SYS_CMD_IO_DCPT* pCmdIO)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b090      	sub	sp, #64	@ 0x40
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
	char newCh;
	int ix, len;
	const KEY_SEQ_DCPT *pKeyDcpt, *pFoundSeq;
	const SYS_CMD_API* pCmdApi = pCmdIO->devNode.pCmdApi;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	61bb      	str	r3, [r7, #24]
	const void* cmdIoParam = pCmdIO->devNode.cmdIoParam;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	617b      	str	r3, [r7, #20]

	// Check if there's characters available
	if(!(*pCmdApi->isRdy)(cmdIoParam))
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	6978      	ldr	r0, [r7, #20]
 8003b06:	4798      	blx	r3
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f000 81cb 	beq.w	8003ea6 <RunCmdTask+0x3ba>
	{
		return;
	}

	// read the character
	newCh = (*pCmdApi->getc)(cmdIoParam); /* Read data from console. */
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	6978      	ldr	r0, [r7, #20]
 8003b16:	4798      	blx	r3
 8003b18:	4603      	mov	r3, r0
 8003b1a:	74fb      	strb	r3, [r7, #19]

	if(pCmdIO->seqChars != 0)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d06f      	beq.n	8003c06 <RunCmdTask+0x11a>
	{   // in the middle of escape sequence
		pCmdIO->seqBuff[pCmdIO->seqChars] = newCh;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4413      	add	r3, r2
 8003b32:	7cfa      	ldrb	r2, [r7, #19]
 8003b34:	749a      	strb	r2, [r3, #18]
		pCmdIO->seqChars++;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	3301      	adds	r3, #1
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	b21a      	sxth	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	821a      	strh	r2, [r3, #16]

		if(pCmdIO->seqChars == VT100_DETECT_SEQ_SIZE)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003b4e:	2b03      	cmp	r3, #3
 8003b50:	d130      	bne.n	8003bb4 <RunCmdTask+0xc8>
		{   // detect the exact escape sequence
			pCmdIO->seqBuff[pCmdIO->seqChars] = 0;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003b58:	461a      	mov	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	2200      	movs	r2, #0
 8003b60:	749a      	strb	r2, [r3, #18]
			pKeyDcpt = keySeqTbl;
 8003b62:	4b8f      	ldr	r3, [pc, #572]	@ (8003da0 <RunCmdTask+0x2b4>)
 8003b64:	63bb      	str	r3, [r7, #56]	@ 0x38
			pFoundSeq = 0;
 8003b66:	2300      	movs	r3, #0
 8003b68:	637b      	str	r3, [r7, #52]	@ 0x34
			for(ix = 0; ix < sizeof(keySeqTbl) / sizeof(*keySeqTbl); ix++, pKeyDcpt++)
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b6e:	e014      	b.n	8003b9a <RunCmdTask+0xae>
			{
				if(strncmp(pCmdIO->seqBuff, pKeyDcpt->keyCode, VT100_DETECT_SEQ_SIZE) == 0)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f103 0012 	add.w	r0, r3, #18
 8003b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2203      	movs	r2, #3
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	f010 fda6 	bl	80146ce <strncmp>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d102      	bne.n	8003b8e <RunCmdTask+0xa2>
				{   // found it
					pFoundSeq = pKeyDcpt;
 8003b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b8a:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8003b8c:	e008      	b.n	8003ba0 <RunCmdTask+0xb4>
			for(ix = 0; ix < sizeof(keySeqTbl) / sizeof(*keySeqTbl); ix++, pKeyDcpt++)
 8003b8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b90:	3301      	adds	r3, #1
 8003b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b96:	330c      	adds	r3, #12
 8003b98:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b9c:	2b05      	cmp	r3, #5
 8003b9e:	d9e7      	bls.n	8003b70 <RunCmdTask+0x84>
				}
			}

			if(pFoundSeq == 0)
 8003ba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d103      	bne.n	8003bae <RunCmdTask+0xc2>
			{   // unknown escape sequence
				pCmdIO->seqChars = 0;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	821a      	strh	r2, [r3, #16]
				return;
 8003bac:	e17e      	b.n	8003eac <RunCmdTask+0x3c0>
			}

			pCmdIO->pSeqDcpt = pFoundSeq;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003bb2:	60da      	str	r2, [r3, #12]
		}

		if(pCmdIO->seqChars >= VT100_DETECT_SEQ_SIZE && pCmdIO->seqChars == pCmdIO->pSeqDcpt->keySize)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	f340 8175 	ble.w	8003eaa <RunCmdTask+0x3be>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	f040 816b 	bne.w	8003eaa <RunCmdTask+0x3be>
		{   // check for complete sequence
			if(strcmp(pCmdIO->seqBuff, pCmdIO->pSeqDcpt->keyCode) == 0)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f103 0212 	add.w	r2, r3, #18
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4619      	mov	r1, r3
 8003be2:	4610      	mov	r0, r2
 8003be4:	f7fc fb24 	bl	8000230 <strcmp>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d107      	bne.n	8003bfe <RunCmdTask+0x112>
			{   // process sequence
				(*pCmdIO->pSeqDcpt->keyFnc)(pCmdIO, pCmdIO->pSeqDcpt);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	68d2      	ldr	r2, [r2, #12]
 8003bf8:	4611      	mov	r1, r2
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	4798      	blx	r3
			}

			// else unknown sequence ?
			pCmdIO->seqChars = 0;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	821a      	strh	r2, [r3, #16]
			return;
 8003c04:	e152      	b.n	8003eac <RunCmdTask+0x3c0>
		}

		return;

	}
	else if((newCh == '\r') || (newCh == '\n'))
 8003c06:	7cfb      	ldrb	r3, [r7, #19]
 8003c08:	2b0d      	cmp	r3, #13
 8003c0a:	d002      	beq.n	8003c12 <RunCmdTask+0x126>
 8003c0c:	7cfb      	ldrb	r3, [r7, #19]
 8003c0e:	2b0a      	cmp	r3, #10
 8003c10:	d126      	bne.n	8003c60 <RunCmdTask+0x174>
	{   // new command assembled
		if(pCmdIO->cmdEnd ==  pCmdIO->cmdBuff)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	69da      	ldr	r2, [r3, #28]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	3320      	adds	r3, #32
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d105      	bne.n	8003c2a <RunCmdTask+0x13e>
		{   // just an extra \n or \r
			(*pCmdApi->msg)(cmdIoParam, LINE_TERM _promptStr);
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4960      	ldr	r1, [pc, #384]	@ (8003da4 <RunCmdTask+0x2b8>)
 8003c24:	6978      	ldr	r0, [r7, #20]
 8003c26:	4798      	blx	r3
			return;
 8003c28:	e140      	b.n	8003eac <RunCmdTask+0x3c0>
		}
		(*pCmdApi->msg)(cmdIoParam, LINE_TERM);
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	495e      	ldr	r1, [pc, #376]	@ (8003da8 <RunCmdTask+0x2bc>)
 8003c30:	6978      	ldr	r0, [r7, #20]
 8003c32:	4798      	blx	r3
		*pCmdIO->cmdEnd = 0;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	701a      	strb	r2, [r3, #0]
		pCmdIO->cmdPnt = pCmdIO->cmdEnd = pCmdIO->cmdBuff;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f103 0220 	add.w	r2, r3, #32
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	61da      	str	r2, [r3, #28]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	69da      	ldr	r2, [r3, #28]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	619a      	str	r2, [r3, #24]

		ParseCmdBuffer(pCmdIO);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 fc3c 	bl	80044cc <ParseCmdBuffer>
		(*pCmdApi->msg)(cmdIoParam, _promptStr);
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4954      	ldr	r1, [pc, #336]	@ (8003dac <RunCmdTask+0x2c0>)
 8003c5a:	6978      	ldr	r0, [r7, #20]
 8003c5c:	4798      	blx	r3
 8003c5e:	e125      	b.n	8003eac <RunCmdTask+0x3c0>
	}
	else if(newCh == '\b')
 8003c60:	7cfb      	ldrb	r3, [r7, #19]
 8003c62:	2b08      	cmp	r3, #8
 8003c64:	d159      	bne.n	8003d1a <RunCmdTask+0x22e>
	{
		if(pCmdIO->cmdPnt > pCmdIO->cmdBuff)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	699a      	ldr	r2, [r3, #24]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	3320      	adds	r3, #32
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	f240 811c 	bls.w	8003eac <RunCmdTask+0x3c0>
		{
			if(pCmdIO->cmdEnd > pCmdIO->cmdPnt)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	69da      	ldr	r2, [r3, #28]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d93c      	bls.n	8003cfa <RunCmdTask+0x20e>
			{
				char* pSrc = pCmdIO->cmdPnt; // current
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	633b      	str	r3, [r7, #48]	@ 0x30
				char* pDst = pCmdIO->cmdPnt - 1;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
				len = pCmdIO->cmdEnd - pSrc;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	69da      	ldr	r2, [r3, #28]
 8003c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	60bb      	str	r3, [r7, #8]
				for(ix = 0; ix < len; ix++)
 8003c98:	2300      	movs	r3, #0
 8003c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c9c:	e00a      	b.n	8003cb4 <RunCmdTask+0x1c8>
				{
					*pDst++ = *pSrc++;
 8003c9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ca0:	1c53      	adds	r3, r2, #1
 8003ca2:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ca6:	1c59      	adds	r1, r3, #1
 8003ca8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8003caa:	7812      	ldrb	r2, [r2, #0]
 8003cac:	701a      	strb	r2, [r3, #0]
				for(ix = 0; ix < len; ix++)
 8003cae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cb4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	dbf0      	blt.n	8003c9e <RunCmdTask+0x1b2>
				}
				pCmdIO->cmdPnt--; pCmdIO->cmdEnd--;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	1e5a      	subs	r2, r3, #1
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	619a      	str	r2, [r3, #24]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	1e5a      	subs	r2, r3, #1
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	61da      	str	r2, [r3, #28]
				// update the display; erase to the end of line(<ESC>[K) and move cursor backwards (<ESC>[{COUNT}D)
				*pCmdIO->cmdEnd = '\0';
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	69db      	ldr	r3, [r3, #28]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	701a      	strb	r2, [r3, #0]
				sprintf(pCmdIO->ctrlBuff, "\b\x1b[K%s\x1b[%dD", pCmdIO->cmdPnt, len);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f103 0071 	add.w	r0, r3, #113	@ 0x71
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	699a      	ldr	r2, [r3, #24]
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	4932      	ldr	r1, [pc, #200]	@ (8003db0 <RunCmdTask+0x2c4>)
 8003ce6:	f010 fba7 	bl	8014438 <siprintf>
				(*pCmdApi->msg)(cmdIoParam, pCmdIO->ctrlBuff);
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	3271      	adds	r2, #113	@ 0x71
 8003cf2:	4611      	mov	r1, r2
 8003cf4:	6978      	ldr	r0, [r7, #20]
 8003cf6:	4798      	blx	r3
 8003cf8:	e0d8      	b.n	8003eac <RunCmdTask+0x3c0>
			}
			else
			{   // delete char under cursor
				(*pCmdApi->msg)(cmdIoParam, "\b\x1b[K");
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	492d      	ldr	r1, [pc, #180]	@ (8003db4 <RunCmdTask+0x2c8>)
 8003d00:	6978      	ldr	r0, [r7, #20]
 8003d02:	4798      	blx	r3
				pCmdIO->cmdPnt--; pCmdIO->cmdEnd--;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	1e5a      	subs	r2, r3, #1
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	619a      	str	r2, [r3, #24]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	1e5a      	subs	r2, r3, #1
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	61da      	str	r2, [r3, #28]
 8003d18:	e0c8      	b.n	8003eac <RunCmdTask+0x3c0>
			}
		}
	}
	else if(newCh == 0x7f)
 8003d1a:	7cfb      	ldrb	r3, [r7, #19]
 8003d1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8003d1e:	d14d      	bne.n	8003dbc <RunCmdTask+0x2d0>
	{   // delete
		if(pCmdIO->cmdEnd > pCmdIO->cmdPnt)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	69da      	ldr	r2, [r3, #28]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	f240 80bf 	bls.w	8003eac <RunCmdTask+0x3c0>
		{
			char* pSrc = pCmdIO->cmdPnt + 1;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	3301      	adds	r3, #1
 8003d34:	62bb      	str	r3, [r7, #40]	@ 0x28
			char* pDst = pCmdIO->cmdPnt;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	627b      	str	r3, [r7, #36]	@ 0x24
			len = pCmdIO->cmdEnd - pSrc;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	69da      	ldr	r2, [r3, #28]
 8003d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	60bb      	str	r3, [r7, #8]
			for(ix = 0; ix < len; ix++)
 8003d46:	2300      	movs	r3, #0
 8003d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d4a:	e00a      	b.n	8003d62 <RunCmdTask+0x276>
			{
				*pDst++ = *pSrc++;
 8003d4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d4e:	1c53      	adds	r3, r2, #1
 8003d50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d54:	1c59      	adds	r1, r3, #1
 8003d56:	6279      	str	r1, [r7, #36]	@ 0x24
 8003d58:	7812      	ldrb	r2, [r2, #0]
 8003d5a:	701a      	strb	r2, [r3, #0]
			for(ix = 0; ix < len; ix++)
 8003d5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d5e:	3301      	adds	r3, #1
 8003d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d62:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	dbf0      	blt.n	8003d4c <RunCmdTask+0x260>
			}
			pCmdIO->cmdEnd--;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	1e5a      	subs	r2, r3, #1
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	61da      	str	r2, [r3, #28]
			// update the display; erase to the end of line(<ESC>[K) and move cursor backwards (<ESC>[{COUNT}D)
			*pCmdIO->cmdEnd = '\0';
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	69db      	ldr	r3, [r3, #28]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	701a      	strb	r2, [r3, #0]
			sprintf(pCmdIO->ctrlBuff, "\x1b[K%s\x1b[%dD", pCmdIO->cmdPnt, len);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f103 0071 	add.w	r0, r3, #113	@ 0x71
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	699a      	ldr	r2, [r3, #24]
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	490b      	ldr	r1, [pc, #44]	@ (8003db8 <RunCmdTask+0x2cc>)
 8003d8a:	f010 fb55 	bl	8014438 <siprintf>
			(*pCmdApi->msg)(cmdIoParam, pCmdIO->ctrlBuff);
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	3271      	adds	r2, #113	@ 0x71
 8003d96:	4611      	mov	r1, r2
 8003d98:	6978      	ldr	r0, [r7, #20]
 8003d9a:	4798      	blx	r3
 8003d9c:	e086      	b.n	8003eac <RunCmdTask+0x3c0>
 8003d9e:	bf00      	nop
 8003da0:	08019c58 	.word	0x08019c58
 8003da4:	08016258 	.word	0x08016258
 8003da8:	08016268 	.word	0x08016268
 8003dac:	0801626c 	.word	0x0801626c
 8003db0:	0801627c 	.word	0x0801627c
 8003db4:	08016288 	.word	0x08016288
 8003db8:	08016290 	.word	0x08016290
		}
	}
	else if(newCh == 0x1b)
 8003dbc:	7cfb      	ldrb	r3, [r7, #19]
 8003dbe:	2b1b      	cmp	r3, #27
 8003dc0:	d106      	bne.n	8003dd0 <RunCmdTask+0x2e4>
	{   // start escape sequence... wait for complete sequence
		pCmdIO->seqBuff[0] = newCh;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	7cfa      	ldrb	r2, [r7, #19]
 8003dc6:	749a      	strb	r2, [r3, #18]
		pCmdIO->seqChars = 1;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	821a      	strh	r2, [r3, #16]
 8003dce:	e06d      	b.n	8003eac <RunCmdTask+0x3c0>
	}
	else if(pCmdIO->cmdEnd - pCmdIO->cmdBuff < sizeof(pCmdIO->cmdBuff) - 1)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	69da      	ldr	r2, [r3, #28]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	3320      	adds	r3, #32
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b4f      	cmp	r3, #79	@ 0x4f
 8003ddc:	d84f      	bhi.n	8003e7e <RunCmdTask+0x392>
	{   // valid char; insert and echo it back
		int n_chars = pCmdIO->cmdEnd - pCmdIO->cmdPnt;  // existent chars
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	69da      	ldr	r2, [r3, #28]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	60fb      	str	r3, [r7, #12]
		if(n_chars != 0)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d02c      	beq.n	8003e4a <RunCmdTask+0x35e>
		{   // move the existing chars to the right, for insertion...
			char* pSrc = pCmdIO->cmdEnd - 1;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	3b01      	subs	r3, #1
 8003df6:	623b      	str	r3, [r7, #32]
			char* pDst = pCmdIO->cmdEnd;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	69db      	ldr	r3, [r3, #28]
 8003dfc:	61fb      	str	r3, [r7, #28]
			for(ix = 0; ix < n_chars; ix++)
 8003dfe:	2300      	movs	r3, #0
 8003e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e02:	e00a      	b.n	8003e1a <RunCmdTask+0x32e>
			{
				*pDst-- = *pSrc--;
 8003e04:	6a3a      	ldr	r2, [r7, #32]
 8003e06:	1e53      	subs	r3, r2, #1
 8003e08:	623b      	str	r3, [r7, #32]
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	1e59      	subs	r1, r3, #1
 8003e0e:	61f9      	str	r1, [r7, #28]
 8003e10:	7812      	ldrb	r2, [r2, #0]
 8003e12:	701a      	strb	r2, [r3, #0]
			for(ix = 0; ix < n_chars; ix++)
 8003e14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e16:	3301      	adds	r3, #1
 8003e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e1a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	dbf0      	blt.n	8003e04 <RunCmdTask+0x318>
			}
			pCmdIO->cmdEnd++;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	1c5a      	adds	r2, r3, #1
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	61da      	str	r2, [r3, #28]
			*pCmdIO->cmdEnd = '\0';
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	69db      	ldr	r3, [r3, #28]
 8003e30:	2200      	movs	r2, #0
 8003e32:	701a      	strb	r2, [r3, #0]
			sprintf(pCmdIO->ctrlBuff + 1, "%s\x1b[%dD", pCmdIO->cmdPnt + 1, n_chars);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	3371      	adds	r3, #113	@ 0x71
 8003e38:	1c58      	adds	r0, r3, #1
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	1c5a      	adds	r2, r3, #1
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	491c      	ldr	r1, [pc, #112]	@ (8003eb4 <RunCmdTask+0x3c8>)
 8003e44:	f010 faf8 	bl	8014438 <siprintf>
 8003e48:	e003      	b.n	8003e52 <RunCmdTask+0x366>
		}
		else
		{
			pCmdIO->ctrlBuff[1] = 0;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
		}
		pCmdIO->ctrlBuff[0] = newCh;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	7cfa      	ldrb	r2, [r7, #19]
 8003e56:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71

		(*pCmdApi->msg)(cmdIoParam, pCmdIO->ctrlBuff);
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	3271      	adds	r2, #113	@ 0x71
 8003e62:	4611      	mov	r1, r2
 8003e64:	6978      	ldr	r0, [r7, #20]
 8003e66:	4798      	blx	r3
		*pCmdIO->cmdPnt++ = newCh;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	1c59      	adds	r1, r3, #1
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	6191      	str	r1, [r2, #24]
 8003e72:	7cfa      	ldrb	r2, [r7, #19]
 8003e74:	701a      	strb	r2, [r3, #0]
		CmdAdjustPointers(pCmdIO);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 fe0c 	bl	8004a94 <CmdAdjustPointers>
 8003e7c:	e016      	b.n	8003eac <RunCmdTask+0x3c0>
	}
	else
	{
		(*pCmdApi->msg)(cmdIoParam, " *** Command Processor buffer exceeded. Retry. ***" LINE_TERM);
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	490d      	ldr	r1, [pc, #52]	@ (8003eb8 <RunCmdTask+0x3cc>)
 8003e84:	6978      	ldr	r0, [r7, #20]
 8003e86:	4798      	blx	r3
		pCmdIO->cmdPnt = pCmdIO->cmdEnd = pCmdIO->cmdBuff;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f103 0220 	add.w	r2, r3, #32
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	61da      	str	r2, [r3, #28]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	69da      	ldr	r2, [r3, #28]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	619a      	str	r2, [r3, #24]
		(*pCmdApi->msg)(cmdIoParam, _promptStr);
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4907      	ldr	r1, [pc, #28]	@ (8003ebc <RunCmdTask+0x3d0>)
 8003ea0:	6978      	ldr	r0, [r7, #20]
 8003ea2:	4798      	blx	r3
 8003ea4:	e002      	b.n	8003eac <RunCmdTask+0x3c0>
		return;
 8003ea6:	bf00      	nop
 8003ea8:	e000      	b.n	8003eac <RunCmdTask+0x3c0>
		return;
 8003eaa:	bf00      	nop
	}
}
 8003eac:	3740      	adds	r7, #64	@ 0x40
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	0801629c 	.word	0x0801629c
 8003eb8:	080162a4 	.word	0x080162a4
 8003ebc:	0801626c 	.word	0x0801626c

08003ec0 <SYS_CMDIO_ADD>:

	return pNode == 0 ? 0 : &pNode->devNode;
}

SYS_CMD_DEVICE_NODE* SYS_CMDIO_ADD(const SYS_CMD_API* opApi, const void* cmdIoParam, int unused)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
	int ix;

	// Create new node
	SYS_CMD_IO_DCPT* pNewIo;

	pNewIo = (SYS_CMD_IO_DCPT*)malloc (sizeof(*pNewIo));
 8003ecc:	f44f 60a5 	mov.w	r0, #1320	@ 0x528
 8003ed0:	f010 f840 	bl	8013f54 <malloc>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	613b      	str	r3, [r7, #16]
	if (!pNewIo) {
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <SYS_CMDIO_ADD+0x22>
		return 0;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	e041      	b.n	8003f66 <SYS_CMDIO_ADD+0xa6>
	}
	memset(pNewIo, 0, sizeof(*pNewIo));
 8003ee2:	f44f 62a5 	mov.w	r2, #1320	@ 0x528
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	6938      	ldr	r0, [r7, #16]
 8003eea:	f010 fbdb 	bl	80146a4 <memset>
	pNewIo->devNode.pCmdApi = opApi;
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	601a      	str	r2, [r3, #0]
	pNewIo->devNode.cmdIoParam = cmdIoParam;
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	605a      	str	r2, [r3, #4]
	pNewIo->cmdPnt = pNewIo->cmdEnd = pNewIo->cmdBuff;
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	f103 0220 	add.w	r2, r3, #32
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	61da      	str	r2, [r3, #28]
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	69da      	ldr	r2, [r3, #28]
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	619a      	str	r2, [r3, #24]

	// construct the command history list
	for(ix = 0; ix < sizeof(pNewIo->histArray) / sizeof(*pNewIo->histArray); ix++) {
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	617b      	str	r3, [r7, #20]
 8003f10:	e010      	b.n	8003f34 <SYS_CMDIO_ADD+0x74>
		CmdAddHead(&pNewIo->histList, pNewIo->histArray + ix);
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	f103 00cc 	add.w	r0, r3, #204	@ 0xcc
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	215c      	movs	r1, #92	@ 0x5c
 8003f22:	fb01 f303 	mul.w	r3, r1, r3
 8003f26:	4413      	add	r3, r2
 8003f28:	4619      	mov	r1, r3
 8003f2a:	f000 fd57 	bl	80049dc <CmdAddHead>
	for(ix = 0; ix < sizeof(pNewIo->histArray) / sizeof(*pNewIo->histArray); ix++) {
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	3301      	adds	r3, #1
 8003f32:	617b      	str	r3, [r7, #20]
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	2b0b      	cmp	r3, #11
 8003f38:	d9eb      	bls.n	8003f12 <SYS_CMDIO_ADD+0x52>
	}

	// Insert node at end
	pNewIo->next = 0;
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	609a      	str	r2, [r3, #8]
	if(cmdIODevList.head == 0) {
 8003f40:	4b0b      	ldr	r3, [pc, #44]	@ (8003f70 <SYS_CMDIO_ADD+0xb0>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d106      	bne.n	8003f56 <SYS_CMDIO_ADD+0x96>
		cmdIODevList.head = pNewIo;
 8003f48:	4a09      	ldr	r2, [pc, #36]	@ (8003f70 <SYS_CMDIO_ADD+0xb0>)
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	6013      	str	r3, [r2, #0]
		cmdIODevList.tail = pNewIo;
 8003f4e:	4a08      	ldr	r2, [pc, #32]	@ (8003f70 <SYS_CMDIO_ADD+0xb0>)
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	6053      	str	r3, [r2, #4]
 8003f54:	e006      	b.n	8003f64 <SYS_CMDIO_ADD+0xa4>
	}
	else {
		cmdIODevList.tail->next = pNewIo;
 8003f56:	4b06      	ldr	r3, [pc, #24]	@ (8003f70 <SYS_CMDIO_ADD+0xb0>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	609a      	str	r2, [r3, #8]
		cmdIODevList.tail = pNewIo;
 8003f5e:	4a04      	ldr	r2, [pc, #16]	@ (8003f70 <SYS_CMDIO_ADD+0xb0>)
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	6053      	str	r3, [r2, #4]
	}

	return &pNewIo->devNode;
 8003f64:	693b      	ldr	r3, [r7, #16]
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3718      	adds	r7, #24
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	20000ed8 	.word	0x20000ed8

08003f74 <SendCommandMessage>:
	return false;
}

// ignore the console handle for now, we support a single system console
static void SendCommandMessage(const void* cmdIoParam, const char* message)
{
 8003f74:	b590      	push	{r4, r7, lr}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
	SYS_CONSOLE_Write(_cmdInitData.consoleIndex, message, strlen(message));
 8003f7e:	4b08      	ldr	r3, [pc, #32]	@ (8003fa0 <SendCommandMessage+0x2c>)
 8003f80:	885b      	ldrh	r3, [r3, #2]
 8003f82:	461c      	mov	r4, r3
 8003f84:	6838      	ldr	r0, [r7, #0]
 8003f86:	f7fc f95d 	bl	8000244 <strlen>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	6839      	ldr	r1, [r7, #0]
 8003f90:	4620      	mov	r0, r4
 8003f92:	f000 fe97 	bl	8004cc4 <SYS_CONSOLE_Write>
}
 8003f96:	bf00      	nop
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd90      	pop	{r4, r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	20000ee0 	.word	0x20000ee0

08003fa4 <SendCommandPrint>:

static void SendCommandPrint(const void* cmdIoParam, const char* format, ...)
{
 8003fa4:	b40e      	push	{r1, r2, r3}
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b0c7      	sub	sp, #284	@ 0x11c
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003fb0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003fb4:	6018      	str	r0, [r3, #0]
	char tmpBuf[SYS_CMD_PRINT_BUFFER_SIZE];
	size_t len = 0;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	size_t padding = 0;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	va_list args = {0};
 8003fc2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003fc6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003fca:	2200      	movs	r2, #0
 8003fcc:	601a      	str	r2, [r3, #0]
	va_start( args, format );
 8003fce:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8003fd2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003fd6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003fda:	601a      	str	r2, [r3, #0]

	len = vsnprintf(tmpBuf, SYS_CMD_PRINT_BUFFER_SIZE, format, args);
 8003fdc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003fe0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003fe4:	f107 0010 	add.w	r0, r7, #16
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8003fee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003ff2:	f010 fab5 	bl	8014560 <vsniprintf>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

	va_end( args );


	if (len > 0 && len < SYS_CMD_PRINT_BUFFER_SIZE)
 8003ffc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004000:	2b00      	cmp	r3, #0
 8004002:	d044      	beq.n	800408e <SendCommandPrint+0xea>
 8004004:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004008:	2bff      	cmp	r3, #255	@ 0xff
 800400a:	d840      	bhi.n	800408e <SendCommandPrint+0xea>
	{
		tmpBuf[len] = '\0';
 800400c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004010:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8004014:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004018:	4413      	add	r3, r2
 800401a:	2200      	movs	r2, #0
 800401c:	701a      	strb	r2, [r3, #0]

		if (len + printBuffPtr >= SYS_CMD_PRINT_BUFFER_SIZE)
 800401e:	4b20      	ldr	r3, [pc, #128]	@ (80040a0 <SendCommandPrint+0xfc>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	461a      	mov	r2, r3
 8004024:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004028:	4413      	add	r3, r2
 800402a:	2bff      	cmp	r3, #255	@ 0xff
 800402c:	d902      	bls.n	8004034 <SendCommandPrint+0x90>
		{
			printBuffPtr = 0;
 800402e:	4b1c      	ldr	r3, [pc, #112]	@ (80040a0 <SendCommandPrint+0xfc>)
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]
		}

		strcpy(&printBuff[printBuffPtr], tmpBuf);
 8004034:	4b1a      	ldr	r3, [pc, #104]	@ (80040a0 <SendCommandPrint+0xfc>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a1a      	ldr	r2, [pc, #104]	@ (80040a4 <SendCommandPrint+0x100>)
 800403a:	4413      	add	r3, r2
 800403c:	f107 0210 	add.w	r2, r7, #16
 8004040:	4611      	mov	r1, r2
 8004042:	4618      	mov	r0, r3
 8004044:	f010 fca5 	bl	8014992 <strcpy>
		SendCommandMessage(NULL, &printBuff[printBuffPtr]);
 8004048:	4b15      	ldr	r3, [pc, #84]	@ (80040a0 <SendCommandPrint+0xfc>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a15      	ldr	r2, [pc, #84]	@ (80040a4 <SendCommandPrint+0x100>)
 800404e:	4413      	add	r3, r2
 8004050:	4619      	mov	r1, r3
 8004052:	2000      	movs	r0, #0
 8004054:	f7ff ff8e 	bl	8003f74 <SendCommandMessage>

		padding = len % 4;
 8004058:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800405c:	f003 0303 	and.w	r3, r3, #3
 8004060:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

		if (padding > 0)
 8004064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004068:	2b00      	cmp	r3, #0
 800406a:	d005      	beq.n	8004078 <SendCommandPrint+0xd4>
		{
			padding = 4 - padding;
 800406c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004070:	f1c3 0304 	rsb	r3, r3, #4
 8004074:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
		}

		printBuffPtr += len + padding;
 8004078:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800407c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004080:	4413      	add	r3, r2
 8004082:	4a07      	ldr	r2, [pc, #28]	@ (80040a0 <SendCommandPrint+0xfc>)
 8004084:	6812      	ldr	r2, [r2, #0]
 8004086:	4413      	add	r3, r2
 8004088:	461a      	mov	r2, r3
 800408a:	4b05      	ldr	r3, [pc, #20]	@ (80040a0 <SendCommandPrint+0xfc>)
 800408c:	601a      	str	r2, [r3, #0]
	}
}
 800408e:	bf00      	nop
 8004090:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8004094:	46bd      	mov	sp, r7
 8004096:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800409a:	b003      	add	sp, #12
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	20000fe4 	.word	0x20000fe4
 80040a4:	20000ee4 	.word	0x20000ee4

080040a8 <SendCommandCharacter>:

static void SendCommandCharacter(const void* cmdIoParam, char c)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	460b      	mov	r3, r1
 80040b2:	70fb      	strb	r3, [r7, #3]
	if (SYS_CONSOLE_Status((SYS_MODULE_OBJ)_cmdInitData.consoleIndex) == SYS_STATUS_READY)
 80040b4:	4b09      	ldr	r3, [pc, #36]	@ (80040dc <SendCommandCharacter+0x34>)
 80040b6:	885b      	ldrh	r3, [r3, #2]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f000 fd53 	bl	8004b64 <SYS_CONSOLE_Status>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d107      	bne.n	80040d4 <SendCommandCharacter+0x2c>
	{
		SYS_CONSOLE_Write(_cmdInitData.consoleIndex, (const char*)&c, 1);
 80040c4:	4b05      	ldr	r3, [pc, #20]	@ (80040dc <SendCommandCharacter+0x34>)
 80040c6:	885b      	ldrh	r3, [r3, #2]
 80040c8:	4618      	mov	r0, r3
 80040ca:	1cfb      	adds	r3, r7, #3
 80040cc:	2201      	movs	r2, #1
 80040ce:	4619      	mov	r1, r3
 80040d0:	f000 fdf8 	bl	8004cc4 <SYS_CONSOLE_Write>
	}
}
 80040d4:	bf00      	nop
 80040d6:	3708      	adds	r7, #8
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	20000ee0 	.word	0x20000ee0

080040e0 <IsCommandReady>:


static int IsCommandReady(const void* cmdIoParam)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
	return (int)SYS_CONSOLE_ReadCountGet(_cmdInitData.consoleIndex);
 80040e8:	4b04      	ldr	r3, [pc, #16]	@ (80040fc <IsCommandReady+0x1c>)
 80040ea:	885b      	ldrh	r3, [r3, #2]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f000 fdb7 	bl	8004c60 <SYS_CONSOLE_ReadCountGet>
 80040f2:	4603      	mov	r3, r0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	20000ee0 	.word	0x20000ee0

08004100 <GetCommandCharacter>:

static char GetCommandCharacter(const void* cmdIoParam)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
	char new_c;

	SYS_CONSOLE_Read(_cmdInitData.consoleIndex, &new_c, 1);
 8004108:	4b06      	ldr	r3, [pc, #24]	@ (8004124 <GetCommandCharacter+0x24>)
 800410a:	885b      	ldrh	r3, [r3, #2]
 800410c:	4618      	mov	r0, r3
 800410e:	f107 030f 	add.w	r3, r7, #15
 8004112:	2201      	movs	r2, #1
 8004114:	4619      	mov	r1, r3
 8004116:	f000 fd6f 	bl	8004bf8 <SYS_CONSOLE_Read>

	return new_c;
 800411a:	7bfb      	ldrb	r3, [r7, #15]
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	20000ee0 	.word	0x20000ee0

08004128 <doSystemReset>:

bool cli_routine_job_timer_stop ();

void doSystemReset()
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800412c:	b672      	cpsid	i
}
 800412e:	bf00      	nop
	__disable_irq ();

	/* Disable Systick timer */
	SysTick->CTRL = 0;
 8004130:	4b30      	ldr	r3, [pc, #192]	@ (80041f4 <doSystemReset+0xcc>)
 8004132:	2200      	movs	r2, #0
 8004134:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 8004136:	4b2f      	ldr	r3, [pc, #188]	@ (80041f4 <doSystemReset+0xcc>)
 8004138:	2200      	movs	r2, #0
 800413a:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 800413c:	4b2d      	ldr	r3, [pc, #180]	@ (80041f4 <doSystemReset+0xcc>)
 800413e:	2200      	movs	r2, #0
 8004140:	609a      	str	r2, [r3, #8]

	// 여기서 boot loader 에서 사용했던 uart 를 포함한 모든 controller 를 DeInit 한다.
	assert (HAL_UART_AbortReceive_IT(&huart1) == HAL_OK);		// 이것을 넣어 주니 app jump 한 다음에 app 의 console 에서 2char 받아야 반응하는 현상이 없어졌다..
 8004142:	482d      	ldr	r0, [pc, #180]	@ (80041f8 <doSystemReset+0xd0>)
 8004144:	f00a fcb2 	bl	800eaac <HAL_UART_AbortReceive_IT>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d006      	beq.n	800415c <doSystemReset+0x34>
 800414e:	4b2b      	ldr	r3, [pc, #172]	@ (80041fc <doSystemReset+0xd4>)
 8004150:	4a2b      	ldr	r2, [pc, #172]	@ (8004200 <doSystemReset+0xd8>)
 8004152:	f44f 7122 	mov.w	r1, #648	@ 0x288
 8004156:	482b      	ldr	r0, [pc, #172]	@ (8004204 <doSystemReset+0xdc>)
 8004158:	f00f fede 	bl	8013f18 <__assert_func>
	HAL_UART_MspDeInit(&huart1);
 800415c:	4826      	ldr	r0, [pc, #152]	@ (80041f8 <doSystemReset+0xd0>)
 800415e:	f7fe f93d 	bl	80023dc <HAL_UART_MspDeInit>

	//////////////////////////////////////////////////////////////////////////////////////////////////////////
	// 여기까지 모든 io contoller 를 시스템 boot 와 같은 상태로 만들기 위한 작업을 완료한다.
	//////////////////////////////////////////////////////////////////////////////////////////////////////////
	__HAL_RCC_GPIOA_CLK_DISABLE();
 8004162:	4b29      	ldr	r3, [pc, #164]	@ (8004208 <doSystemReset+0xe0>)
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	4a28      	ldr	r2, [pc, #160]	@ (8004208 <doSystemReset+0xe0>)
 8004168:	f023 0304 	bic.w	r3, r3, #4
 800416c:	6193      	str	r3, [r2, #24]
	__HAL_RCC_GPIOB_CLK_DISABLE();
 800416e:	4b26      	ldr	r3, [pc, #152]	@ (8004208 <doSystemReset+0xe0>)
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	4a25      	ldr	r2, [pc, #148]	@ (8004208 <doSystemReset+0xe0>)
 8004174:	f023 0308 	bic.w	r3, r3, #8
 8004178:	6193      	str	r3, [r2, #24]
	__HAL_RCC_GPIOC_CLK_DISABLE();
 800417a:	4b23      	ldr	r3, [pc, #140]	@ (8004208 <doSystemReset+0xe0>)
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	4a22      	ldr	r2, [pc, #136]	@ (8004208 <doSystemReset+0xe0>)
 8004180:	f023 0310 	bic.w	r3, r3, #16
 8004184:	6193      	str	r3, [r2, #24]
	__HAL_RCC_GPIOD_CLK_DISABLE();
 8004186:	4b20      	ldr	r3, [pc, #128]	@ (8004208 <doSystemReset+0xe0>)
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	4a1f      	ldr	r2, [pc, #124]	@ (8004208 <doSystemReset+0xe0>)
 800418c:	f023 0320 	bic.w	r3, r3, #32
 8004190:	6193      	str	r3, [r2, #24]
	__HAL_RCC_GPIOE_CLK_DISABLE();
 8004192:	4b1d      	ldr	r3, [pc, #116]	@ (8004208 <doSystemReset+0xe0>)
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	4a1c      	ldr	r2, [pc, #112]	@ (8004208 <doSystemReset+0xe0>)
 8004198:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800419c:	6193      	str	r3, [r2, #24]
	__HAL_RCC_GPIOF_CLK_DISABLE();
 800419e:	4b1a      	ldr	r3, [pc, #104]	@ (8004208 <doSystemReset+0xe0>)
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	4a19      	ldr	r2, [pc, #100]	@ (8004208 <doSystemReset+0xe0>)
 80041a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041a8:	6193      	str	r3, [r2, #24]
	__HAL_RCC_GPIOG_CLK_DISABLE();
 80041aa:	4b17      	ldr	r3, [pc, #92]	@ (8004208 <doSystemReset+0xe0>)
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	4a16      	ldr	r2, [pc, #88]	@ (8004208 <doSystemReset+0xe0>)
 80041b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041b4:	6193      	str	r3, [r2, #24]

	assert (HAL_RCC_DeInit() == HAL_OK);
 80041b6:	f008 fd2f 	bl	800cc18 <HAL_RCC_DeInit>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d006      	beq.n	80041ce <doSystemReset+0xa6>
 80041c0:	4b12      	ldr	r3, [pc, #72]	@ (800420c <doSystemReset+0xe4>)
 80041c2:	4a0f      	ldr	r2, [pc, #60]	@ (8004200 <doSystemReset+0xd8>)
 80041c4:	f240 2196 	movw	r1, #662	@ 0x296
 80041c8:	480e      	ldr	r0, [pc, #56]	@ (8004204 <doSystemReset+0xdc>)
 80041ca:	f00f fea5 	bl	8013f18 <__assert_func>
	assert (HAL_DeInit() == HAL_OK);
 80041ce:	f004 f949 	bl	8008464 <HAL_DeInit>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d006      	beq.n	80041e6 <doSystemReset+0xbe>
 80041d8:	4b0d      	ldr	r3, [pc, #52]	@ (8004210 <doSystemReset+0xe8>)
 80041da:	4a09      	ldr	r2, [pc, #36]	@ (8004200 <doSystemReset+0xd8>)
 80041dc:	f240 2197 	movw	r1, #663	@ 0x297
 80041e0:	4808      	ldr	r0, [pc, #32]	@ (8004204 <doSystemReset+0xdc>)
 80041e2:	f00f fe99 	bl	8013f18 <__assert_func>
  __ASM volatile ("cpsie i" : : : "memory");
 80041e6:	b662      	cpsie	i
}
 80041e8:	bf00      	nop

	__enable_irq();
	HAL_NVIC_SystemReset ();
 80041ea:	f005 f814 	bl	8009216 <HAL_NVIC_SystemReset>
}
 80041ee:	bf00      	nop
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	e000e010 	.word	0xe000e010
 80041f8:	20000d60 	.word	0x20000d60
 80041fc:	080162dc 	.word	0x080162dc
 8004200:	08019cd8 	.word	0x08019cd8
 8004204:	08016308 	.word	0x08016308
 8004208:	40021000 	.word	0x40021000
 800420c:	0801632c 	.word	0x0801632c
 8004210:	08016348 	.word	0x08016348

08004214 <CommandReset>:

static void CommandReset (SYS_CMD_DEVICE_NODE* pCmdIO, int argc, char** argv)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
	const void* cmdIoParam = pCmdIO->cmdIoParam;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	617b      	str	r3, [r7, #20]

	if (argc > 2) {
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	2b02      	cmp	r3, #2
 800422a:	dd06      	ble.n	800423a <CommandReset+0x26>
		//ShitMessage (pCmdIO);
		(*pCmdIO->pCmdApi->msg)(cmdIoParam, LINE_TERM " reset (fac) \r\n" );
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	492d      	ldr	r1, [pc, #180]	@ (80042e8 <CommandReset+0xd4>)
 8004234:	6978      	ldr	r0, [r7, #20]
 8004236:	4798      	blx	r3
		return;
 8004238:	e053      	b.n	80042e2 <CommandReset+0xce>
	}
	if (argc == 1) {
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d11e      	bne.n	800427e <CommandReset+0x6a>
		(*pCmdIO->pCmdApi->msg)(pCmdIO->cmdIoParam, CUI_ESC_CLR);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	6852      	ldr	r2, [r2, #4]
 800424a:	4928      	ldr	r1, [pc, #160]	@ (80042ec <CommandReset+0xd8>)
 800424c:	4610      	mov	r0, r2
 800424e:	4798      	blx	r3
		(*pCmdIO->pCmdApi->msg)(pCmdIO->cmdIoParam, CUI_ESC_CUR_HOME);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	6852      	ldr	r2, [r2, #4]
 800425a:	4925      	ldr	r1, [pc, #148]	@ (80042f0 <CommandReset+0xdc>)
 800425c:	4610      	mov	r0, r2
 800425e:	4798      	blx	r3
		(*pCmdIO->pCmdApi->msg)(pCmdIO->cmdIoParam, LINE_TERM"====== MANUAL SYSTEM RESET ======="LINE_TERM);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	6852      	ldr	r2, [r2, #4]
 800426a:	4922      	ldr	r1, [pc, #136]	@ (80042f4 <CommandReset+0xe0>)
 800426c:	4610      	mov	r0, r2
 800426e:	4798      	blx	r3
		HAL_Delay(4);
 8004270:	2004      	movs	r0, #4
 8004272:	f004 f931 	bl	80084d8 <HAL_Delay>
		doSystemReset();
 8004276:	f7ff ff57 	bl	8004128 <doSystemReset>
		while(1) {};
 800427a:	bf00      	nop
 800427c:	e7fd      	b.n	800427a <CommandReset+0x66>
	}
	else if (argc == 2) {
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	2b02      	cmp	r3, #2
 8004282:	d12e      	bne.n	80042e2 <CommandReset+0xce>
		if (!strcmp(argv[1], "fac") || !strcmp(argv[1], "facory")) {
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	3304      	adds	r3, #4
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	491b      	ldr	r1, [pc, #108]	@ (80042f8 <CommandReset+0xe4>)
 800428c:	4618      	mov	r0, r3
 800428e:	f7fb ffcf 	bl	8000230 <strcmp>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d009      	beq.n	80042ac <CommandReset+0x98>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3304      	adds	r3, #4
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4917      	ldr	r1, [pc, #92]	@ (80042fc <CommandReset+0xe8>)
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fb ffc5 	bl	8000230 <strcmp>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d113      	bne.n	80042d4 <CommandReset+0xc0>
			(*pCmdIO->pCmdApi->msg)(cmdIoParam, LINE_TERM " *** System Reboot with FACTORY DEFAULT ***\r\n" );
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4913      	ldr	r1, [pc, #76]	@ (8004300 <CommandReset+0xec>)
 80042b4:	6978      	ldr	r0, [r7, #20]
 80042b6:	4798      	blx	r3
			(*pCmdIO->pCmdApi->msg)(cmdIoParam, "env data gone out !!" LINE_TERM);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4911      	ldr	r1, [pc, #68]	@ (8004304 <CommandReset+0xf0>)
 80042c0:	6978      	ldr	r0, [r7, #20]
 80042c2:	4798      	blx	r3
			vTaskDelay(3 / portTICK_PERIOD_MS);
 80042c4:	2003      	movs	r0, #3
 80042c6:	f00d fbcf 	bl	8011a68 <vTaskDelay>
  __ASM volatile ("cpsid i" : : : "memory");
 80042ca:	b672      	cpsid	i
}
 80042cc:	bf00      	nop
			__disable_irq ();
			HAL_NVIC_SystemReset ();
 80042ce:	f004 ffa2 	bl	8009216 <HAL_NVIC_SystemReset>
			return;
 80042d2:	e006      	b.n	80042e2 <CommandReset+0xce>
		}
		else {
			//ShitMessage (pCmdIO);
			(*pCmdIO->pCmdApi->msg)(cmdIoParam, LINE_TERM " reset (fac) \r\n" );
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4903      	ldr	r1, [pc, #12]	@ (80042e8 <CommandReset+0xd4>)
 80042dc:	6978      	ldr	r0, [r7, #20]
 80042de:	4798      	blx	r3
			return;
 80042e0:	bf00      	nop
		}
	}
}
 80042e2:	3718      	adds	r7, #24
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	08016360 	.word	0x08016360
 80042ec:	08016374 	.word	0x08016374
 80042f0:	0801637c 	.word	0x0801637c
 80042f4:	08016380 	.word	0x08016380
 80042f8:	080163a8 	.word	0x080163a8
 80042fc:	080163ac 	.word	0x080163ac
 8004300:	080163b4 	.word	0x080163b4
 8004304:	080163e4 	.word	0x080163e4

08004308 <CommandHelp>:

static void CommandHelp(SYS_CMD_DEVICE_NODE* pCmdIO, int argc, char** argv)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b08c      	sub	sp, #48	@ 0x30
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
	int ix, groupIx;
	const SYS_CMD_DESCRIPTOR*  pDcpt;
	const SYS_CMD_DESCRIPTOR_TABLE* pTbl, *pDTbl;
	const void* cmdIoParam = pCmdIO->cmdIoParam;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	617b      	str	r3, [r7, #20]

	if(argc == 1)
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d168      	bne.n	80043f2 <CommandHelp+0xea>
	{   // no params help; display basic info
		bool hadHeader = false;
 8004320:	2300      	movs	r3, #0
 8004322:	76fb      	strb	r3, [r7, #27]
		pTbl = _usrCmdTbl;
 8004324:	4b62      	ldr	r3, [pc, #392]	@ (80044b0 <CommandHelp+0x1a8>)
 8004326:	623b      	str	r3, [r7, #32]
		for (groupIx=0; groupIx < MAX_CMD_GROUP; groupIx++)
 8004328:	2300      	movs	r3, #0
 800432a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800432c:	e02d      	b.n	800438a <CommandHelp+0x82>
		{
			if (pTbl->pCmd)
 800432e:	6a3b      	ldr	r3, [r7, #32]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d023      	beq.n	800437e <CommandHelp+0x76>
			{
				if(!hadHeader)
 8004336:	7efb      	ldrb	r3, [r7, #27]
 8004338:	f083 0301 	eor.w	r3, r3, #1
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d007      	beq.n	8004352 <CommandHelp+0x4a>
				{
					(*pCmdIO->pCmdApi->msg)(cmdIoParam, LINE_TERM "------- Supported command groups ------");
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	495a      	ldr	r1, [pc, #360]	@ (80044b4 <CommandHelp+0x1ac>)
 800434a:	6978      	ldr	r0, [r7, #20]
 800434c:	4798      	blx	r3
					hadHeader = true;
 800434e:	2301      	movs	r3, #1
 8004350:	76fb      	strb	r3, [r7, #27]
				}
				(*pCmdIO->pCmdApi->msg)(cmdIoParam, LINE_TERM " *** ");
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4957      	ldr	r1, [pc, #348]	@ (80044b8 <CommandHelp+0x1b0>)
 800435a:	6978      	ldr	r0, [r7, #20]
 800435c:	4798      	blx	r3
				(*pCmdIO->pCmdApi->msg)(cmdIoParam, pTbl->cmdGroupName);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6a3a      	ldr	r2, [r7, #32]
 8004366:	6892      	ldr	r2, [r2, #8]
 8004368:	4611      	mov	r1, r2
 800436a:	6978      	ldr	r0, [r7, #20]
 800436c:	4798      	blx	r3
				(*pCmdIO->pCmdApi->msg)(cmdIoParam, pTbl->cmdMenuStr);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6a3a      	ldr	r2, [r7, #32]
 8004376:	68d2      	ldr	r2, [r2, #12]
 8004378:	4611      	mov	r1, r2
 800437a:	6978      	ldr	r0, [r7, #20]
 800437c:	4798      	blx	r3
				//(*pCmdIO->pCmdApi->msg)(cmdIoParam, " ***");
			}
			pTbl++;
 800437e:	6a3b      	ldr	r3, [r7, #32]
 8004380:	3310      	adds	r3, #16
 8004382:	623b      	str	r3, [r7, #32]
		for (groupIx=0; groupIx < MAX_CMD_GROUP; groupIx++)
 8004384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004386:	3301      	adds	r3, #1
 8004388:	62bb      	str	r3, [r7, #40]	@ 0x28
 800438a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800438c:	2b0b      	cmp	r3, #11
 800438e:	ddce      	ble.n	800432e <CommandHelp+0x26>
		}

		(*pCmdIO->pCmdApi->msg)(cmdIoParam, LINE_TERM "---------- Built in commands ----------");
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4949      	ldr	r1, [pc, #292]	@ (80044bc <CommandHelp+0x1b4>)
 8004398:	6978      	ldr	r0, [r7, #20]
 800439a:	4798      	blx	r3
		for(ix = 0, pDcpt = _builtinCmdTbl; ix < sizeof(_builtinCmdTbl)/sizeof(*_builtinCmdTbl); ix++, pDcpt++)
 800439c:	2300      	movs	r3, #0
 800439e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043a0:	4b47      	ldr	r3, [pc, #284]	@ (80044c0 <CommandHelp+0x1b8>)
 80043a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80043a4:	e01b      	b.n	80043de <CommandHelp+0xd6>
		{
			(*pCmdIO->pCmdApi->msg)(cmdIoParam, LINE_TERM " *** ");
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4942      	ldr	r1, [pc, #264]	@ (80044b8 <CommandHelp+0x1b0>)
 80043ae:	6978      	ldr	r0, [r7, #20]
 80043b0:	4798      	blx	r3
			(*pCmdIO->pCmdApi->msg)(cmdIoParam, pDcpt->cmdStr);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043ba:	6812      	ldr	r2, [r2, #0]
 80043bc:	4611      	mov	r1, r2
 80043be:	6978      	ldr	r0, [r7, #20]
 80043c0:	4798      	blx	r3
			(*pCmdIO->pCmdApi->msg)(cmdIoParam, pDcpt->cmdDescr);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043ca:	6892      	ldr	r2, [r2, #8]
 80043cc:	4611      	mov	r1, r2
 80043ce:	6978      	ldr	r0, [r7, #20]
 80043d0:	4798      	blx	r3
		for(ix = 0, pDcpt = _builtinCmdTbl; ix < sizeof(_builtinCmdTbl)/sizeof(*_builtinCmdTbl); ix++, pDcpt++)
 80043d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043d4:	3301      	adds	r3, #1
 80043d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043da:	330c      	adds	r3, #12
 80043dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80043de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d9e0      	bls.n	80043a6 <CommandHelp+0x9e>
			//(*pCmdIO->pCmdApi->msg)(cmdIoParam, " ***");
		}
		(*pCmdIO->pCmdApi->msg)(cmdIoParam, LINE_TERM);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4936      	ldr	r1, [pc, #216]	@ (80044c4 <CommandHelp+0x1bc>)
 80043ec:	6978      	ldr	r0, [r7, #20]
 80043ee:	4798      	blx	r3
		else
		{
			(*pCmdIO->pCmdApi->msg)(cmdIoParam, LINE_TERM "Unknown command group. Try help" LINE_TERM );
		}
	}
}
 80043f0:	e059      	b.n	80044a6 <CommandHelp+0x19e>
		pDTbl = 0;
 80043f2:	2300      	movs	r3, #0
 80043f4:	61fb      	str	r3, [r7, #28]
		pTbl = _usrCmdTbl;
 80043f6:	4b2e      	ldr	r3, [pc, #184]	@ (80044b0 <CommandHelp+0x1a8>)
 80043f8:	623b      	str	r3, [r7, #32]
		for (groupIx=0; groupIx < MAX_CMD_GROUP; groupIx++)
 80043fa:	2300      	movs	r3, #0
 80043fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043fe:	e018      	b.n	8004432 <CommandHelp+0x12a>
			if (pTbl->pCmd)
 8004400:	6a3b      	ldr	r3, [r7, #32]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00e      	beq.n	8004426 <CommandHelp+0x11e>
				if(strcmp(pTbl->cmdGroupName, argv[1]) == 0)
 8004408:	6a3b      	ldr	r3, [r7, #32]
 800440a:	689a      	ldr	r2, [r3, #8]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3304      	adds	r3, #4
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4619      	mov	r1, r3
 8004414:	4610      	mov	r0, r2
 8004416:	f7fb ff0b 	bl	8000230 <strcmp>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d102      	bne.n	8004426 <CommandHelp+0x11e>
					pDTbl = pTbl;
 8004420:	6a3b      	ldr	r3, [r7, #32]
 8004422:	61fb      	str	r3, [r7, #28]
					break;
 8004424:	e008      	b.n	8004438 <CommandHelp+0x130>
			pTbl++;
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	3310      	adds	r3, #16
 800442a:	623b      	str	r3, [r7, #32]
		for (groupIx=0; groupIx < MAX_CMD_GROUP; groupIx++)
 800442c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800442e:	3301      	adds	r3, #1
 8004430:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004434:	2b0b      	cmp	r3, #11
 8004436:	dde3      	ble.n	8004400 <CommandHelp+0xf8>
		if(pDTbl)
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d02d      	beq.n	800449a <CommandHelp+0x192>
			for(ix = 0, pDcpt = pDTbl->pCmd; ix < pDTbl->nCmds; ix++, pDcpt++)
 800443e:	2300      	movs	r3, #0
 8004440:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	627b      	str	r3, [r7, #36]	@ 0x24
 8004448:	e01b      	b.n	8004482 <CommandHelp+0x17a>
				(*pCmdIO->pCmdApi->msg)(cmdIoParam, LINE_TERM " *** ");
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4919      	ldr	r1, [pc, #100]	@ (80044b8 <CommandHelp+0x1b0>)
 8004452:	6978      	ldr	r0, [r7, #20]
 8004454:	4798      	blx	r3
				(*pCmdIO->pCmdApi->msg)(cmdIoParam, pDcpt->cmdStr);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800445e:	6812      	ldr	r2, [r2, #0]
 8004460:	4611      	mov	r1, r2
 8004462:	6978      	ldr	r0, [r7, #20]
 8004464:	4798      	blx	r3
				(*pCmdIO->pCmdApi->msg)(cmdIoParam, pDcpt->cmdDescr);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800446e:	6892      	ldr	r2, [r2, #8]
 8004470:	4611      	mov	r1, r2
 8004472:	6978      	ldr	r0, [r7, #20]
 8004474:	4798      	blx	r3
			for(ix = 0, pDcpt = pDTbl->pCmd; ix < pDTbl->nCmds; ix++, pDcpt++)
 8004476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004478:	3301      	adds	r3, #1
 800447a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800447c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800447e:	330c      	adds	r3, #12
 8004480:	627b      	str	r3, [r7, #36]	@ 0x24
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004488:	429a      	cmp	r2, r3
 800448a:	dbde      	blt.n	800444a <CommandHelp+0x142>
			(*pCmdIO->pCmdApi->msg)(cmdIoParam, LINE_TERM);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	490c      	ldr	r1, [pc, #48]	@ (80044c4 <CommandHelp+0x1bc>)
 8004494:	6978      	ldr	r0, [r7, #20]
 8004496:	4798      	blx	r3
}
 8004498:	e005      	b.n	80044a6 <CommandHelp+0x19e>
			(*pCmdIO->pCmdApi->msg)(cmdIoParam, LINE_TERM "Unknown command group. Try help" LINE_TERM );
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4909      	ldr	r1, [pc, #36]	@ (80044c8 <CommandHelp+0x1c0>)
 80044a2:	6978      	ldr	r0, [r7, #20]
 80044a4:	4798      	blx	r3
}
 80044a6:	bf00      	nop
 80044a8:	3730      	adds	r7, #48	@ 0x30
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	20000fe8 	.word	0x20000fe8
 80044b4:	080163fc 	.word	0x080163fc
 80044b8:	08016428 	.word	0x08016428
 80044bc:	08016430 	.word	0x08016430
 80044c0:	08019cb4 	.word	0x08019cb4
 80044c4:	08016268 	.word	0x08016268
 80044c8:	0801645c 	.word	0x0801645c

080044cc <ParseCmdBuffer>:

static void ParseCmdBuffer(SYS_CMD_IO_DCPT* pCmdIO)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b0a6      	sub	sp, #152	@ 0x98
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
	int  argc = 0;
 80044d4:	2300      	movs	r3, #0
 80044d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	char *argv[MAX_CMD_ARGS] = {0};
 80044da:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80044de:	2220      	movs	r2, #32
 80044e0:	2100      	movs	r1, #0
 80044e2:	4618      	mov	r0, r3
 80044e4:	f010 f8de 	bl	80146a4 <memset>
	char saveCmd[SYS_CMD_MAX_LENGTH + 1];
	const void* cmdIoParam = pCmdIO->devNode.cmdIoParam;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

	int            ix, grp_ix;
	const SYS_CMD_DESCRIPTOR* pDcpt;

	strncpy(saveCmd, pCmdIO->cmdBuff, sizeof(saveCmd));     // make a copy of the command
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f103 0120 	add.w	r1, r3, #32
 80044f6:	f107 030c 	add.w	r3, r7, #12
 80044fa:	2251      	movs	r2, #81	@ 0x51
 80044fc:	4618      	mov	r0, r3
 80044fe:	f010 f8f8 	bl	80146f2 <strncpy>

	// parse a command string to *argv[]
	argc = StringToArgs(saveCmd, argv, MAX_CMD_ARGS);
 8004502:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8004506:	f107 030c 	add.w	r3, r7, #12
 800450a:	2208      	movs	r2, #8
 800450c:	4618      	mov	r0, r3
 800450e:	f000 f8c9 	bl	80046a4 <StringToArgs>
 8004512:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88

	if(argc > MAX_CMD_ARGS)
 8004516:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800451a:	2b08      	cmp	r3, #8
 800451c:	dd08      	ble.n	8004530 <ParseCmdBuffer+0x64>
	{
		(*pCmdIO->devNode.pCmdApi->print)(cmdIoParam, "\n\r Too many arguments. Maximum args supported: %d!\r\n", MAX_CMD_ARGS);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	2208      	movs	r2, #8
 8004526:	495a      	ldr	r1, [pc, #360]	@ (8004690 <ParseCmdBuffer+0x1c4>)
 8004528:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800452c:	4798      	blx	r3
 800452e:	e0ab      	b.n	8004688 <ParseCmdBuffer+0x1bc>
	}
	else if(argc == 0)
 8004530:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004534:	2b00      	cmp	r3, #0
 8004536:	d107      	bne.n	8004548 <ParseCmdBuffer+0x7c>
	{
		(*pCmdIO->devNode.pCmdApi->msg)(cmdIoParam, " *** Command Processor: Please type in a command***" LINE_TERM);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4955      	ldr	r1, [pc, #340]	@ (8004694 <ParseCmdBuffer+0x1c8>)
 8004540:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8004544:	4798      	blx	r3
 8004546:	e09f      	b.n	8004688 <ParseCmdBuffer+0x1bc>
	}
	else
	{
		if(argc > 0)
 8004548:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800454c:	2b00      	cmp	r3, #0
 800454e:	f340 8094 	ble.w	800467a <ParseCmdBuffer+0x1ae>
		{   // ok, there's smth here
			// add it to the history list
			histCmdNode* pN = CmdRemoveTail(&pCmdIO->histList);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	33cc      	adds	r3, #204	@ 0xcc
 8004556:	4618      	mov	r0, r3
 8004558:	f000 fa70 	bl	8004a3c <CmdRemoveTail>
 800455c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
			strncpy(pN->cmdBuff, pCmdIO->cmdBuff, sizeof(saveCmd)); // Need save non-parsed string
 8004560:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004564:	f103 0008 	add.w	r0, r3, #8
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	3320      	adds	r3, #32
 800456c:	2251      	movs	r2, #81	@ 0x51
 800456e:	4619      	mov	r1, r3
 8004570:	f010 f8bf 	bl	80146f2 <strncpy>
			CmdAddHead(&pCmdIO->histList, pN);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	33cc      	adds	r3, #204	@ 0xcc
 8004578:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800457c:	4618      	mov	r0, r3
 800457e:	f000 fa2d 	bl	80049dc <CmdAddHead>
			pCmdIO->currHistN = 0;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4

			// try built-in commands first
			for(ix = 0, pDcpt = _builtinCmdTbl; ix < sizeof(_builtinCmdTbl)/sizeof(*_builtinCmdTbl); ix++, pDcpt++)
 800458a:	2300      	movs	r3, #0
 800458c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004590:	4b41      	ldr	r3, [pc, #260]	@ (8004698 <ParseCmdBuffer+0x1cc>)
 8004592:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004596:	e01e      	b.n	80045d6 <ParseCmdBuffer+0x10a>
			{
				if(!strcmp(argv[0], pDcpt->cmdStr))
 8004598:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800459a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4619      	mov	r1, r3
 80045a2:	4610      	mov	r0, r2
 80045a4:	f7fb fe44 	bl	8000230 <strcmp>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d109      	bne.n	80045c2 <ParseCmdBuffer+0xf6>
				{   // command found
					(*pDcpt->cmdFnc)(&pCmdIO->devNode, argc, argv);     // call command handler
 80045ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 80045ba:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 80045be:	4798      	blx	r3
					return;
 80045c0:	e062      	b.n	8004688 <ParseCmdBuffer+0x1bc>
			for(ix = 0, pDcpt = _builtinCmdTbl; ix < sizeof(_builtinCmdTbl)/sizeof(*_builtinCmdTbl); ix++, pDcpt++)
 80045c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80045c6:	3301      	adds	r3, #1
 80045c8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80045cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045d0:	330c      	adds	r3, #12
 80045d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80045d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d9dc      	bls.n	8004598 <ParseCmdBuffer+0xcc>
				}
			}

			// search user commands
			for (grp_ix=0; grp_ix < MAX_CMD_GROUP; grp_ix++)
 80045de:	2300      	movs	r3, #0
 80045e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80045e4:	e045      	b.n	8004672 <ParseCmdBuffer+0x1a6>
			{
				if (_usrCmdTbl[grp_ix].pCmd == 0)
 80045e6:	4a2d      	ldr	r2, [pc, #180]	@ (800469c <ParseCmdBuffer+0x1d0>)
 80045e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80045ec:	011b      	lsls	r3, r3, #4
 80045ee:	4413      	add	r3, r2
 80045f0:	3304      	adds	r3, #4
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d036      	beq.n	8004666 <ParseCmdBuffer+0x19a>
				{
					continue;
				}

				for(ix = 0, pDcpt = _usrCmdTbl[grp_ix].pCmd; ix < _usrCmdTbl[grp_ix].nCmds; ix++, pDcpt++)
 80045f8:	2300      	movs	r3, #0
 80045fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80045fe:	4a27      	ldr	r2, [pc, #156]	@ (800469c <ParseCmdBuffer+0x1d0>)
 8004600:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004604:	011b      	lsls	r3, r3, #4
 8004606:	4413      	add	r3, r2
 8004608:	3304      	adds	r3, #4
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004610:	e01e      	b.n	8004650 <ParseCmdBuffer+0x184>
				{
					if(!strcmp(argv[0], pDcpt->cmdStr))
 8004612:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004614:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4619      	mov	r1, r3
 800461c:	4610      	mov	r0, r2
 800461e:	f7fb fe07 	bl	8000230 <strcmp>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d109      	bne.n	800463c <ParseCmdBuffer+0x170>
					{
						// command found
						(*pDcpt->cmdFnc)(&pCmdIO->devNode, argc, argv);
 8004628:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8004634:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8004638:	4798      	blx	r3
						return;
 800463a:	e025      	b.n	8004688 <ParseCmdBuffer+0x1bc>
				for(ix = 0, pDcpt = _usrCmdTbl[grp_ix].pCmd; ix < _usrCmdTbl[grp_ix].nCmds; ix++, pDcpt++)
 800463c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004640:	3301      	adds	r3, #1
 8004642:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004646:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800464a:	330c      	adds	r3, #12
 800464c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004650:	4a12      	ldr	r2, [pc, #72]	@ (800469c <ParseCmdBuffer+0x1d0>)
 8004652:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004656:	011b      	lsls	r3, r3, #4
 8004658:	4413      	add	r3, r2
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004660:	429a      	cmp	r2, r3
 8004662:	dbd6      	blt.n	8004612 <ParseCmdBuffer+0x146>
 8004664:	e000      	b.n	8004668 <ParseCmdBuffer+0x19c>
					continue;
 8004666:	bf00      	nop
			for (grp_ix=0; grp_ix < MAX_CMD_GROUP; grp_ix++)
 8004668:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800466c:	3301      	adds	r3, #1
 800466e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004672:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004676:	2b0b      	cmp	r3, #11
 8004678:	ddb5      	ble.n	80045e6 <ParseCmdBuffer+0x11a>
				}
			}
		}

		// command not found
		(*pCmdIO->devNode.pCmdApi->msg)(cmdIoParam, " *** Command Processor: unknown command. ***\r\n");
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4907      	ldr	r1, [pc, #28]	@ (80046a0 <ParseCmdBuffer+0x1d4>)
 8004682:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8004686:	4798      	blx	r3
	}
}
 8004688:	3798      	adds	r7, #152	@ 0x98
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	08016480 	.word	0x08016480
 8004694:	080164b8 	.word	0x080164b8
 8004698:	08019cb4 	.word	0x08019cb4
 800469c:	20000fe8 	.word	0x20000fe8
 80046a0:	080164f0 	.word	0x080164f0

080046a4 <StringToArgs>:
  parts within quotes (") are parsed as a single token
  return number of parsed tokens
  < 0 if error
 */
static int StringToArgs(char *str, char *argv[], size_t argvSize)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b088      	sub	sp, #32
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
	char* pTkn;
	char* qStart, *qEnd;   // special char '"' starting position;
	int nArgs = 0;
 80046b0:	2300      	movs	r3, #0
 80046b2:	61fb      	str	r3, [r7, #28]

	while(str)
 80046b4:	e04a      	b.n	800474c <StringToArgs+0xa8>
	{
		qStart = strchr(str, '"');
 80046b6:	2122      	movs	r1, #34	@ 0x22
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f00f fffb 	bl	80146b4 <strchr>
 80046be:	61b8      	str	r0, [r7, #24]
		if(qStart != 0)
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d012      	beq.n	80046ec <StringToArgs+0x48>
		{
			*qStart = 0;
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	2200      	movs	r2, #0
 80046ca:	701a      	strb	r2, [r3, #0]
		}

		// parse until quote
		while((pTkn = strtok(str, " \t,")) != 0)
 80046cc:	e00e      	b.n	80046ec <StringToArgs+0x48>
		{
			str = 0;
 80046ce:	2300      	movs	r3, #0
 80046d0:	60fb      	str	r3, [r7, #12]
			if(nArgs < argvSize)
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d905      	bls.n	80046e6 <StringToArgs+0x42>
			{
				argv[nArgs] = pTkn;
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	4413      	add	r3, r2
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	601a      	str	r2, [r3, #0]
			}
			nArgs++;
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	3301      	adds	r3, #1
 80046ea:	61fb      	str	r3, [r7, #28]
		while((pTkn = strtok(str, " \t,")) != 0)
 80046ec:	491c      	ldr	r1, [pc, #112]	@ (8004760 <StringToArgs+0xbc>)
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f010 f812 	bl	8014718 <strtok>
 80046f4:	6178      	str	r0, [r7, #20]
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1e8      	bne.n	80046ce <StringToArgs+0x2a>
		}

		if(qStart == 0)
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d028      	beq.n	8004754 <StringToArgs+0xb0>
		{   // done
			break;
		}

		// get end quote
		qStart++;
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	3301      	adds	r3, #1
 8004706:	61bb      	str	r3, [r7, #24]
		qEnd = strchr(qStart, '"');
 8004708:	2122      	movs	r1, #34	@ 0x22
 800470a:	69b8      	ldr	r0, [r7, #24]
 800470c:	f00f ffd2 	bl	80146b4 <strchr>
 8004710:	6138      	str	r0, [r7, #16]
		if(qEnd == 0 || qEnd - qStart == 0)
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d003      	beq.n	8004720 <StringToArgs+0x7c>
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	429a      	cmp	r2, r3
 800471e:	d102      	bne.n	8004726 <StringToArgs+0x82>
		{   // no matching quote end or empty string within quotes
			return -1;
 8004720:	f04f 33ff 	mov.w	r3, #4294967295
 8004724:	e018      	b.n	8004758 <StringToArgs+0xb4>
		}
		*qEnd = 0;
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	2200      	movs	r2, #0
 800472a:	701a      	strb	r2, [r3, #0]
		if(nArgs < argvSize)
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	429a      	cmp	r2, r3
 8004732:	d905      	bls.n	8004740 <StringToArgs+0x9c>
		{
			argv[nArgs] = qStart;
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	68ba      	ldr	r2, [r7, #8]
 800473a:	4413      	add	r3, r2
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	601a      	str	r2, [r3, #0]
		}
		nArgs++;
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	3301      	adds	r3, #1
 8004744:	61fb      	str	r3, [r7, #28]

		// continue parsing
		str = qEnd + 1;
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	3301      	adds	r3, #1
 800474a:	60fb      	str	r3, [r7, #12]
	while(str)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1b1      	bne.n	80046b6 <StringToArgs+0x12>
 8004752:	e000      	b.n	8004756 <StringToArgs+0xb2>
			break;
 8004754:	bf00      	nop
	}


	return nArgs;
 8004756:	69fb      	ldr	r3, [r7, #28]
}
 8004758:	4618      	mov	r0, r3
 800475a:	3720      	adds	r7, #32
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	08016520 	.word	0x08016520

08004764 <_keyUpProcess>:

static void _keyUpProcess(SYS_CMD_IO_DCPT* pCmdIO, const KEY_SEQ_DCPT* pSeqDcpt)
{   // up arrow
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
	histCmdNode *pNext;

	if(pCmdIO->currHistN)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00b      	beq.n	8004790 <_keyUpProcess+0x2c>
	{
		pNext = pCmdIO->currHistN->next;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	60fb      	str	r3, [r7, #12]
		if(pNext == pCmdIO->histList.head)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	429a      	cmp	r2, r3
 800478c:	d104      	bne.n	8004798 <_keyUpProcess+0x34>
		{
			return; // reached the end of list
 800478e:	e007      	b.n	80047a0 <_keyUpProcess+0x3c>
		}
	}
	else
	{
		pNext = pCmdIO->histList.head;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8004796:	60fb      	str	r3, [r7, #12]
	}

	DisplayNodeMsg(pCmdIO, pNext);
 8004798:	68f9      	ldr	r1, [r7, #12]
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f8bc 	bl	8004918 <DisplayNodeMsg>
}
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <_keyDownProcess>:

static void _keyDownProcess(SYS_CMD_IO_DCPT* pCmdIO, const KEY_SEQ_DCPT* pSeqDcpt)
{   // down arrow
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b084      	sub	sp, #16
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
 80047ae:	6039      	str	r1, [r7, #0]
	histCmdNode *pNext;

	if(pCmdIO->currHistN)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00e      	beq.n	80047d8 <_keyDownProcess+0x32>
	{
		pNext = pCmdIO->currHistN->prev;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	60fb      	str	r3, [r7, #12]
		if(pNext != pCmdIO->histList.tail)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d003      	beq.n	80047d8 <_keyDownProcess+0x32>
		{
			DisplayNodeMsg(pCmdIO, pNext);
 80047d0:	68f9      	ldr	r1, [r7, #12]
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f8a0 	bl	8004918 <DisplayNodeMsg>
		}
	}
}
 80047d8:	bf00      	nop
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <_keyRightProcess>:

static void _keyRightProcess(SYS_CMD_IO_DCPT* pCmdIO, const KEY_SEQ_DCPT* pSeqDcpt)
{   // right arrow
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
	const SYS_CMD_API* pCmdApi = pCmdIO->devNode.pCmdApi;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	60fb      	str	r3, [r7, #12]
	const void* cmdIoParam = pCmdIO->devNode.cmdIoParam;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	60bb      	str	r3, [r7, #8]

	if(pCmdIO->cmdPnt < pCmdIO->cmdEnd)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	699a      	ldr	r2, [r3, #24]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d20b      	bcs.n	800481a <_keyRightProcess+0x3a>
	{   // just advance
		(*pCmdApi->msg)(cmdIoParam, pSeqDcpt->keyCode);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	683a      	ldr	r2, [r7, #0]
 8004808:	6812      	ldr	r2, [r2, #0]
 800480a:	4611      	mov	r1, r2
 800480c:	68b8      	ldr	r0, [r7, #8]
 800480e:	4798      	blx	r3
		pCmdIO->cmdPnt++;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	1c5a      	adds	r2, r3, #1
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	619a      	str	r2, [r3, #24]
	}
}
 800481a:	bf00      	nop
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <_keyLeftProcess>:

static void _keyLeftProcess(SYS_CMD_IO_DCPT* pCmdIO, const KEY_SEQ_DCPT* pSeqDcpt)
{   // left arrow
 8004822:	b580      	push	{r7, lr}
 8004824:	b084      	sub	sp, #16
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
 800482a:	6039      	str	r1, [r7, #0]
	const SYS_CMD_API* pCmdApi = pCmdIO->devNode.pCmdApi;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	60fb      	str	r3, [r7, #12]
	const void* cmdIoParam = pCmdIO->devNode.cmdIoParam;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	60bb      	str	r3, [r7, #8]

	if(pCmdIO->cmdPnt > pCmdIO->cmdBuff)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	699a      	ldr	r2, [r3, #24]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	3320      	adds	r3, #32
 8004840:	429a      	cmp	r2, r3
 8004842:	d90b      	bls.n	800485c <_keyLeftProcess+0x3a>
	{
		pCmdIO->cmdPnt--;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	1e5a      	subs	r2, r3, #1
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	619a      	str	r2, [r3, #24]
		(*pCmdApi->msg)(cmdIoParam, pSeqDcpt->keyCode);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	683a      	ldr	r2, [r7, #0]
 8004854:	6812      	ldr	r2, [r2, #0]
 8004856:	4611      	mov	r1, r2
 8004858:	68b8      	ldr	r0, [r7, #8]
 800485a:	4798      	blx	r3
	}
}
 800485c:	bf00      	nop
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <_keyHomeProcess>:

static void _keyHomeProcess(SYS_CMD_IO_DCPT* pCmdIO, const KEY_SEQ_DCPT* pSeqDcpt)
{   // home key
 8004864:	b580      	push	{r7, lr}
 8004866:	b088      	sub	sp, #32
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
	const SYS_CMD_API* pCmdApi = pCmdIO->devNode.pCmdApi;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	61fb      	str	r3, [r7, #28]
	const void* cmdIoParam = pCmdIO->devNode.cmdIoParam;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	61bb      	str	r3, [r7, #24]
	int nChars = pCmdIO->cmdPnt - pCmdIO->cmdBuff;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	699a      	ldr	r2, [r3, #24]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	3320      	adds	r3, #32
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	617b      	str	r3, [r7, #20]
	if(nChars != 0)
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d012      	beq.n	80048b2 <_keyHomeProcess+0x4e>
	{
		// <ESC>[{COUNT}D
		char homeBuff[ 10 + 1];
		sprintf(homeBuff, "\x1b[%dD", nChars);
 800488c:	f107 0308 	add.w	r3, r7, #8
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	490a      	ldr	r1, [pc, #40]	@ (80048bc <_keyHomeProcess+0x58>)
 8004894:	4618      	mov	r0, r3
 8004896:	f00f fdcf 	bl	8014438 <siprintf>
		(*pCmdApi->msg)(cmdIoParam, homeBuff);
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f107 0208 	add.w	r2, r7, #8
 80048a2:	4611      	mov	r1, r2
 80048a4:	69b8      	ldr	r0, [r7, #24]
 80048a6:	4798      	blx	r3
		pCmdIO->cmdPnt = pCmdIO->cmdBuff;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f103 0220 	add.w	r2, r3, #32
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	619a      	str	r2, [r3, #24]
	}
}
 80048b2:	bf00      	nop
 80048b4:	3720      	adds	r7, #32
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	08016524 	.word	0x08016524

080048c0 <_keyEndProcess>:

static void _keyEndProcess(SYS_CMD_IO_DCPT* pCmdIO, const KEY_SEQ_DCPT* pSeqDcpt)
{   // end key
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b088      	sub	sp, #32
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
	const SYS_CMD_API* pCmdApi = pCmdIO->devNode.pCmdApi;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	61fb      	str	r3, [r7, #28]
	const void* cmdIoParam = pCmdIO->devNode.cmdIoParam;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	61bb      	str	r3, [r7, #24]

	int nChars = pCmdIO->cmdEnd - pCmdIO->cmdPnt;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	69da      	ldr	r2, [r3, #28]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	617b      	str	r3, [r7, #20]
	if(nChars)
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d011      	beq.n	800490c <_keyEndProcess+0x4c>
	{
		// "<ESC>[{COUNT}C"
		char endBuff[ 10 + 1];
		sprintf(endBuff, "\x1b[%dC", nChars);
 80048e8:	f107 0308 	add.w	r3, r7, #8
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	4909      	ldr	r1, [pc, #36]	@ (8004914 <_keyEndProcess+0x54>)
 80048f0:	4618      	mov	r0, r3
 80048f2:	f00f fda1 	bl	8014438 <siprintf>
		(*pCmdApi->msg)(cmdIoParam, endBuff);
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f107 0208 	add.w	r2, r7, #8
 80048fe:	4611      	mov	r1, r2
 8004900:	69b8      	ldr	r0, [r7, #24]
 8004902:	4798      	blx	r3
		pCmdIO->cmdPnt = pCmdIO->cmdEnd;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	69da      	ldr	r2, [r3, #28]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	619a      	str	r2, [r3, #24]
	}

}
 800490c:	bf00      	nop
 800490e:	3720      	adds	r7, #32
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	0801652c 	.word	0x0801652c

08004918 <DisplayNodeMsg>:

static void DisplayNodeMsg(SYS_CMD_IO_DCPT* pCmdIO, histCmdNode* pNext)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
	int oCmdLen, nCmdLen;
	const SYS_CMD_API* pCmdApi = pCmdIO->devNode.pCmdApi;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	613b      	str	r3, [r7, #16]
	const void* cmdIoParam = pCmdIO->devNode.cmdIoParam;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	60fb      	str	r3, [r7, #12]

	if((nCmdLen = strlen(pNext->cmdBuff)))
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	3308      	adds	r3, #8
 8004932:	4618      	mov	r0, r3
 8004934:	f7fb fc86 	bl	8000244 <strlen>
 8004938:	4603      	mov	r3, r0
 800493a:	60bb      	str	r3, [r7, #8]
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d041      	beq.n	80049c6 <DisplayNodeMsg+0xae>
	{   // something there
		oCmdLen = pCmdIO->cmdEnd - pCmdIO->cmdBuff;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	69da      	ldr	r2, [r3, #28]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	3320      	adds	r3, #32
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	617b      	str	r3, [r7, #20]
		while(oCmdLen > nCmdLen)
 800494e:	e007      	b.n	8004960 <DisplayNodeMsg+0x48>
		{
			(*pCmdApi->msg)(cmdIoParam, "\b \b");     // clear the old command
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	491e      	ldr	r1, [pc, #120]	@ (80049d0 <DisplayNodeMsg+0xb8>)
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	4798      	blx	r3
			oCmdLen--;
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	3b01      	subs	r3, #1
 800495e:	617b      	str	r3, [r7, #20]
		while(oCmdLen > nCmdLen)
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	429a      	cmp	r2, r3
 8004966:	dcf3      	bgt.n	8004950 <DisplayNodeMsg+0x38>
		}
		while(oCmdLen--)
 8004968:	e004      	b.n	8004974 <DisplayNodeMsg+0x5c>
		{
			(*pCmdApi->msg)(cmdIoParam, "\b");
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4919      	ldr	r1, [pc, #100]	@ (80049d4 <DisplayNodeMsg+0xbc>)
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	4798      	blx	r3
		while(oCmdLen--)
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	1e5a      	subs	r2, r3, #1
 8004978:	617a      	str	r2, [r7, #20]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1f5      	bne.n	800496a <DisplayNodeMsg+0x52>
		}
		strcpy(pCmdIO->cmdBuff, pNext->cmdBuff);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f103 0220 	add.w	r2, r3, #32
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	3308      	adds	r3, #8
 8004988:	4619      	mov	r1, r3
 800498a:	4610      	mov	r0, r2
 800498c:	f010 f801 	bl	8014992 <strcpy>
		(*pCmdApi->msg)(cmdIoParam, "\r\n>");
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4910      	ldr	r1, [pc, #64]	@ (80049d8 <DisplayNodeMsg+0xc0>)
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	4798      	blx	r3
		(*pCmdApi->msg)(cmdIoParam, pCmdIO->cmdBuff);
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	3220      	adds	r2, #32
 80049a2:	4611      	mov	r1, r2
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	4798      	blx	r3
		pCmdIO->cmdPnt = pCmdIO->cmdEnd = pCmdIO->cmdBuff + nCmdLen;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f103 0220 	add.w	r2, r3, #32
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	441a      	add	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	61da      	str	r2, [r3, #28]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	69da      	ldr	r2, [r3, #28]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	619a      	str	r2, [r3, #24]
		pCmdIO->currHistN = pNext;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	}
}
 80049c6:	bf00      	nop
 80049c8:	3718      	adds	r7, #24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	08016534 	.word	0x08016534
 80049d4:	08016538 	.word	0x08016538
 80049d8:	0801653c 	.word	0x0801653c

080049dc <CmdAddHead>:


static void CmdAddHead(histCmdList* pL, histCmdNode* pN)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
	if(pL->head == 0)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10e      	bne.n	8004a0c <CmdAddHead+0x30>
	{ // empty list, first node
		pL->head = pL->tail = pN;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	683a      	ldr	r2, [r7, #0]
 80049f2:	605a      	str	r2, [r3, #4]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685a      	ldr	r2, [r3, #4]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	601a      	str	r2, [r3, #0]
		pN->next = pN->prev = pN;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	605a      	str	r2, [r3, #4]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	601a      	str	r2, [r3, #0]
		pN->prev = pL->tail;
		pL->tail->next = pN;
		pL->head->prev = pN;
		pL->head = pN;
	}
}
 8004a0a:	e012      	b.n	8004a32 <CmdAddHead+0x56>
		pN->next = pL->head;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	601a      	str	r2, [r3, #0]
		pN->prev = pL->tail;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685a      	ldr	r2, [r3, #4]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	605a      	str	r2, [r3, #4]
		pL->tail->next = pN;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	601a      	str	r2, [r3, #0]
		pL->head->prev = pN;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	605a      	str	r2, [r3, #4]
		pL->head = pN;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	601a      	str	r2, [r3, #0]
}
 8004a32:	bf00      	nop
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bc80      	pop	{r7}
 8004a3a:	4770      	bx	lr

08004a3c <CmdRemoveTail>:

static histCmdNode* CmdRemoveTail(histCmdList* pL)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
	histCmdNode* pN;
	if(pL->head == pL->tail)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d10a      	bne.n	8004a66 <CmdRemoveTail+0x2a>
	{
		pN = pL->head;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	60fb      	str	r3, [r7, #12]
		pL->head = pL->tail = 0;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	605a      	str	r2, [r3, #4]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	e010      	b.n	8004a88 <CmdRemoveTail+0x4c>
	}
	else
	{
		pN = pL->tail;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	60fb      	str	r3, [r7, #12]
		pL->tail = pN->prev;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	685a      	ldr	r2, [r3, #4]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	605a      	str	r2, [r3, #4]
		pL->tail->next = pL->head;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	6812      	ldr	r2, [r2, #0]
 8004a7c:	601a      	str	r2, [r3, #0]
		pL->head->prev = pL->tail;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	6852      	ldr	r2, [r2, #4]
 8004a86:	605a      	str	r2, [r3, #4]
	}
	return pN;
 8004a88:	68fb      	ldr	r3, [r7, #12]
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bc80      	pop	{r7}
 8004a92:	4770      	bx	lr

08004a94 <CmdAdjustPointers>:

static void CmdAdjustPointers(SYS_CMD_IO_DCPT* pCmdIO)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
	if(pCmdIO->cmdPnt > pCmdIO->cmdEnd)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	699a      	ldr	r2, [r3, #24]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	69db      	ldr	r3, [r3, #28]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d903      	bls.n	8004ab0 <CmdAdjustPointers+0x1c>
	{
		pCmdIO->cmdEnd = pCmdIO->cmdPnt;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	699a      	ldr	r2, [r3, #24]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	61da      	str	r2, [r3, #28]
	}
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bc80      	pop	{r7}
 8004ab8:	4770      	bx	lr
	...

08004abc <SYS_CONSOLE_Initialize>:
static SYS_CONSOLE_OBJECT_INSTANCE consoleDeviceInstance[SYS_CONSOLE_DEVICE_MAX_INSTANCES];
static bool isConsoleMutexCreated = false;
#define SYS_CONSOLE_GET_INSTANCE(index)    (index >= SYS_CONSOLE_DEVICE_MAX_INSTANCES)? NULL : &consoleDeviceInstance[index]

SYS_MODULE_OBJ SYS_CONSOLE_Initialize (const SYS_MODULE_INDEX index, const SYS_MODULE_INIT* const init)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	6039      	str	r1, [r7, #0]
 8004ac6:	80fb      	strh	r3, [r7, #6]
	const SYS_CONSOLE_INIT* initConfig = (const SYS_CONSOLE_INIT* )init;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	60fb      	str	r3, [r7, #12]
	SYS_CONSOLE_OBJECT_INSTANCE* pConsoleObj;

	if (isConsoleMutexCreated == false) {
 8004acc:	4b23      	ldr	r3, [pc, #140]	@ (8004b5c <SYS_CONSOLE_Initialize+0xa0>)
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	f083 0301 	eor.w	r3, r3, #1
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00b      	beq.n	8004af2 <SYS_CONSOLE_Initialize+0x36>
		if(osMutexNew(NULL) == NULL) {
 8004ada:	2000      	movs	r0, #0
 8004adc:	f00b fada 	bl	8010094 <osMutexNew>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d102      	bne.n	8004aec <SYS_CONSOLE_Initialize+0x30>
			return SYS_MODULE_OBJ_INVALID;
 8004ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8004aea:	e033      	b.n	8004b54 <SYS_CONSOLE_Initialize+0x98>
		}
		else {
			isConsoleMutexCreated = true;
 8004aec:	4b1b      	ldr	r3, [pc, #108]	@ (8004b5c <SYS_CONSOLE_Initialize+0xa0>)
 8004aee:	2201      	movs	r2, #1
 8004af0:	701a      	strb	r2, [r3, #0]
		}
	}

	/* Confirm valid arguments */
	if (index >= SYS_CONSOLE_DEVICE_MAX_INSTANCES || init == NULL) {
 8004af2:	88fb      	ldrh	r3, [r7, #6]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d102      	bne.n	8004afe <SYS_CONSOLE_Initialize+0x42>
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d102      	bne.n	8004b04 <SYS_CONSOLE_Initialize+0x48>
		return SYS_MODULE_OBJ_INVALID;
 8004afe:	f04f 33ff 	mov.w	r3, #4294967295
 8004b02:	e027      	b.n	8004b54 <SYS_CONSOLE_Initialize+0x98>
	}

	pConsoleObj = &consoleDeviceInstance[index];
 8004b04:	88fa      	ldrh	r2, [r7, #6]
 8004b06:	4613      	mov	r3, r2
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	4413      	add	r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4a14      	ldr	r2, [pc, #80]	@ (8004b60 <SYS_CONSOLE_Initialize+0xa4>)
 8004b10:	4413      	add	r3, r2
 8004b12:	60bb      	str	r3, [r7, #8]

	if ((pConsoleObj->status == SYS_STATUS_UNINITIALIZED) && initConfig) {
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	f993 3000 	ldrsb.w	r3, [r3]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d118      	bne.n	8004b50 <SYS_CONSOLE_Initialize+0x94>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d015      	beq.n	8004b50 <SYS_CONSOLE_Initialize+0x94>
		pConsoleObj->devIndex = initConfig->deviceIndex;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	689a      	ldr	r2, [r3, #8]
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	609a      	str	r2, [r3, #8]
		pConsoleObj->devDesc = initConfig->consDevDesc;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	685a      	ldr	r2, [r3, #4]
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	605a      	str	r2, [r3, #4]
		pConsoleObj->status = SYS_STATUS_READY;
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	2202      	movs	r2, #2
 8004b38:	701a      	strb	r2, [r3, #0]
		pConsoleObj->devDesc->init( pConsoleObj->devIndex, initConfig->deviceInitData);
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	6890      	ldr	r0, [r2, #8]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	6812      	ldr	r2, [r2, #0]
 8004b48:	4611      	mov	r1, r2
 8004b4a:	4798      	blx	r3

		return index;
 8004b4c:	88fb      	ldrh	r3, [r7, #6]
 8004b4e:	e001      	b.n	8004b54 <SYS_CONSOLE_Initialize+0x98>
	}

	return SYS_MODULE_OBJ_INVALID;
 8004b50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3710      	adds	r7, #16
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	200010b4 	.word	0x200010b4
 8004b60:	200010a8 	.word	0x200010a8

08004b64 <SYS_CONSOLE_Status>:

SYS_STATUS SYS_CONSOLE_Status ( SYS_MODULE_OBJ object )
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
	SYS_STATUS ret = SYS_STATUS_ERROR;
 8004b6c:	23ff      	movs	r3, #255	@ 0xff
 8004b6e:	75fb      	strb	r3, [r7, #23]
	SYS_CONSOLE_STATUS status;
	SYS_MODULE_INDEX index = (SYS_MODULE_INDEX)object;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	82bb      	strh	r3, [r7, #20]
	SYS_CONSOLE_OBJECT_INSTANCE* pConsoleObj;

	if (index >= SYS_CONSOLE_DEVICE_MAX_INSTANCES) {
 8004b74:	8abb      	ldrh	r3, [r7, #20]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d002      	beq.n	8004b80 <SYS_CONSOLE_Status+0x1c>
		return SYS_STATUS_ERROR;
 8004b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b7e:	e034      	b.n	8004bea <SYS_CONSOLE_Status+0x86>
	}

	pConsoleObj = &consoleDeviceInstance[index];
 8004b80:	8aba      	ldrh	r2, [r7, #20]
 8004b82:	4613      	mov	r3, r2
 8004b84:	005b      	lsls	r3, r3, #1
 8004b86:	4413      	add	r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4a1a      	ldr	r2, [pc, #104]	@ (8004bf4 <SYS_CONSOLE_Status+0x90>)
 8004b8c:	4413      	add	r3, r2
 8004b8e:	613b      	str	r3, [r7, #16]

	if (pConsoleObj->devDesc == NULL) {
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d101      	bne.n	8004b9c <SYS_CONSOLE_Status+0x38>
		return SYS_STATUS_UNINITIALIZED;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	e026      	b.n	8004bea <SYS_CONSOLE_Status+0x86>
	}

	status = pConsoleObj->devDesc->status(pConsoleObj->devIndex);
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	6892      	ldr	r2, [r2, #8]
 8004ba6:	4610      	mov	r0, r2
 8004ba8:	4798      	blx	r3
 8004baa:	4603      	mov	r3, r0
 8004bac:	73fb      	strb	r3, [r7, #15]

	switch (status)	{
 8004bae:	7bfb      	ldrb	r3, [r7, #15]
 8004bb0:	2b03      	cmp	r3, #3
 8004bb2:	d817      	bhi.n	8004be4 <SYS_CONSOLE_Status+0x80>
 8004bb4:	a201      	add	r2, pc, #4	@ (adr r2, 8004bbc <SYS_CONSOLE_Status+0x58>)
 8004bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bba:	bf00      	nop
 8004bbc:	08004bcd 	.word	0x08004bcd
 8004bc0:	08004bd3 	.word	0x08004bd3
 8004bc4:	08004bd9 	.word	0x08004bd9
 8004bc8:	08004bdf 	.word	0x08004bdf
	case SYS_CONSOLE_STATUS_NOT_CONFIGURED:
		ret = SYS_STATUS_UNINITIALIZED;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	75fb      	strb	r3, [r7, #23]
		break;
 8004bd0:	e009      	b.n	8004be6 <SYS_CONSOLE_Status+0x82>
	case SYS_CONSOLE_STATUS_CONFIGURED:
		ret = SYS_STATUS_READY;
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	75fb      	strb	r3, [r7, #23]
		break;
 8004bd6:	e006      	b.n	8004be6 <SYS_CONSOLE_Status+0x82>
	case SYS_CONSOLE_STATUS_BUSY:
		ret = SYS_STATUS_BUSY;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	75fb      	strb	r3, [r7, #23]
		break;
 8004bdc:	e003      	b.n	8004be6 <SYS_CONSOLE_Status+0x82>
	case SYS_CONSOLE_STATUS_ERROR:
		ret = SYS_STATUS_ERROR;
 8004bde:	23ff      	movs	r3, #255	@ 0xff
 8004be0:	75fb      	strb	r3, [r7, #23]
		break;
 8004be2:	e000      	b.n	8004be6 <SYS_CONSOLE_Status+0x82>
	default:
		break;
 8004be4:	bf00      	nop
	}

	return ret;
 8004be6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3718      	adds	r7, #24
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	200010a8 	.word	0x200010a8

08004bf8 <SYS_CONSOLE_Read>:

size_t SYS_CONSOLE_Read(const SYS_CONSOLE_HANDLE handle, void* buf,	size_t count)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
	SYS_CONSOLE_OBJECT_INSTANCE* pConsoleObj = SYS_CONSOLE_GET_INSTANCE(handle);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d107      	bne.n	8004c1a <SYS_CONSOLE_Read+0x22>
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	005b      	lsls	r3, r3, #1
 8004c10:	4413      	add	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4a11      	ldr	r2, [pc, #68]	@ (8004c5c <SYS_CONSOLE_Read+0x64>)
 8004c16:	4413      	add	r3, r2
 8004c18:	e000      	b.n	8004c1c <SYS_CONSOLE_Read+0x24>
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	617b      	str	r3, [r7, #20]

	if (pConsoleObj) {
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d015      	beq.n	8004c50 <SYS_CONSOLE_Read+0x58>
		if (pConsoleObj->status == SYS_STATUS_UNINITIALIZED || pConsoleObj->devDesc == NULL) {
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	f993 3000 	ldrsb.w	r3, [r3]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d003      	beq.n	8004c36 <SYS_CONSOLE_Read+0x3e>
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d102      	bne.n	8004c3c <SYS_CONSOLE_Read+0x44>
			return -1;
 8004c36:	f04f 33ff 	mov.w	r3, #4294967295
 8004c3a:	e00b      	b.n	8004c54 <SYS_CONSOLE_Read+0x5c>
		}

		return pConsoleObj->devDesc->read(pConsoleObj->devIndex, buf, count);
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	6890      	ldr	r0, [r2, #8]
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	68b9      	ldr	r1, [r7, #8]
 8004c4a:	4798      	blx	r3
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	e001      	b.n	8004c54 <SYS_CONSOLE_Read+0x5c>
	}
	else {
		return -1;
 8004c50:	f04f 33ff 	mov.w	r3, #4294967295
	}

}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3718      	adds	r7, #24
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	200010a8 	.word	0x200010a8

08004c60 <SYS_CONSOLE_ReadCountGet>:

size_t SYS_CONSOLE_ReadCountGet(const SYS_CONSOLE_HANDLE handle)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
	SYS_CONSOLE_OBJECT_INSTANCE* pConsoleObj = SYS_CONSOLE_GET_INSTANCE(handle);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d107      	bne.n	8004c7e <SYS_CONSOLE_ReadCountGet+0x1e>
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	4613      	mov	r3, r2
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	4413      	add	r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4a11      	ldr	r2, [pc, #68]	@ (8004cc0 <SYS_CONSOLE_ReadCountGet+0x60>)
 8004c7a:	4413      	add	r3, r2
 8004c7c:	e000      	b.n	8004c80 <SYS_CONSOLE_ReadCountGet+0x20>
 8004c7e:	2300      	movs	r3, #0
 8004c80:	60fb      	str	r3, [r7, #12]

	if (pConsoleObj) {
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d014      	beq.n	8004cb2 <SYS_CONSOLE_ReadCountGet+0x52>
		if (pConsoleObj->status == SYS_STATUS_UNINITIALIZED || pConsoleObj->devDesc == NULL) {
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f993 3000 	ldrsb.w	r3, [r3]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d003      	beq.n	8004c9a <SYS_CONSOLE_ReadCountGet+0x3a>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d102      	bne.n	8004ca0 <SYS_CONSOLE_ReadCountGet+0x40>
			return -1;
 8004c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c9e:	e00a      	b.n	8004cb6 <SYS_CONSOLE_ReadCountGet+0x56>
		}

		return pConsoleObj->devDesc->readCountGet(pConsoleObj->devIndex);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	6892      	ldr	r2, [r2, #8]
 8004caa:	4610      	mov	r0, r2
 8004cac:	4798      	blx	r3
 8004cae:	4603      	mov	r3, r0
 8004cb0:	e001      	b.n	8004cb6 <SYS_CONSOLE_ReadCountGet+0x56>
	}
	else {
		return -1;
 8004cb2:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	200010a8 	.word	0x200010a8

08004cc4 <SYS_CONSOLE_Write>:

size_t SYS_CONSOLE_Write(const SYS_CONSOLE_HANDLE handle, const void* buf, size_t count)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b086      	sub	sp, #24
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
	SYS_CONSOLE_OBJECT_INSTANCE* pConsoleObj = SYS_CONSOLE_GET_INSTANCE(handle);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d107      	bne.n	8004ce6 <SYS_CONSOLE_Write+0x22>
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	4613      	mov	r3, r2
 8004cda:	005b      	lsls	r3, r3, #1
 8004cdc:	4413      	add	r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4a11      	ldr	r2, [pc, #68]	@ (8004d28 <SYS_CONSOLE_Write+0x64>)
 8004ce2:	4413      	add	r3, r2
 8004ce4:	e000      	b.n	8004ce8 <SYS_CONSOLE_Write+0x24>
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	617b      	str	r3, [r7, #20]

	if (pConsoleObj) {
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d015      	beq.n	8004d1c <SYS_CONSOLE_Write+0x58>
		if (pConsoleObj->status == SYS_STATUS_UNINITIALIZED || pConsoleObj->devDesc == NULL) {
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f993 3000 	ldrsb.w	r3, [r3]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d003      	beq.n	8004d02 <SYS_CONSOLE_Write+0x3e>
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d102      	bne.n	8004d08 <SYS_CONSOLE_Write+0x44>
			return -1;
 8004d02:	f04f 33ff 	mov.w	r3, #4294967295
 8004d06:	e00b      	b.n	8004d20 <SYS_CONSOLE_Write+0x5c>
		}

		return pConsoleObj->devDesc->write(pConsoleObj->devIndex, buf, count);
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	6890      	ldr	r0, [r2, #8]
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	68b9      	ldr	r1, [r7, #8]
 8004d16:	4798      	blx	r3
 8004d18:	4603      	mov	r3, r0
 8004d1a:	e001      	b.n	8004d20 <SYS_CONSOLE_Write+0x5c>
	}
	else {
		return -1;
 8004d1c:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3718      	adds	r7, #24
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	200010a8 	.word	0x200010a8

08004d2c <Console_UART_ResourceLock>:

static CONSOLE_UART_DATA gConsoleUartData[SYS_CONSOLE_UART_MAX_INSTANCES];
#define CONSOLE_UART_GET_INSTANCE(index)    (index >= SYS_CONSOLE_UART_MAX_INSTANCES)? NULL : &gConsoleUartData[index]

static bool Console_UART_ResourceLock(CONSOLE_UART_DATA* pConsoleUartData)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
    if(osMutexAcquire(pConsoleUartData->mutexTransferObjects, osWaitForever) != osOK)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f04f 31ff 	mov.w	r1, #4294967295
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f00b fa2f 	bl	80101a0 <osMutexAcquire>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <Console_UART_ResourceLock+0x20>
    {
        return false;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	e000      	b.n	8004d4e <Console_UART_ResourceLock+0x22>
    }
    else
    {
        return true;
 8004d4c:	2301      	movs	r3, #1
    }
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3708      	adds	r7, #8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <Console_UART_ResourceUnlock>:

static void Console_UART_ResourceUnlock(CONSOLE_UART_DATA* pConsoleUartData)
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b082      	sub	sp, #8
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
    /* Release mutex */
	osMutexRelease (pConsoleUartData->mutexTransferObjects);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f00b fa67 	bl	8010236 <osMutexRelease>
}
 8004d68:	bf00      	nop
 8004d6a:	3708      	adds	r7, #8
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <Console_UART_Initialize>:

void Console_UART_Initialize(uint32_t index, const void* initData)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
    CONSOLE_UART_DATA* pConsoleUartData = CONSOLE_UART_GET_INSTANCE(index);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d107      	bne.n	8004d90 <Console_UART_Initialize+0x20>
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	4613      	mov	r3, r2
 8004d84:	005b      	lsls	r3, r3, #1
 8004d86:	4413      	add	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4a11      	ldr	r2, [pc, #68]	@ (8004dd0 <Console_UART_Initialize+0x60>)
 8004d8c:	4413      	add	r3, r2
 8004d8e:	e000      	b.n	8004d92 <Console_UART_Initialize+0x22>
 8004d90:	2300      	movs	r3, #0
 8004d92:	60fb      	str	r3, [r7, #12]
    const SYS_CONSOLE_UART_INIT_DATA* consoleUsartInitData = (const SYS_CONSOLE_UART_INIT_DATA*)initData;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	60bb      	str	r3, [r7, #8]

    if (pConsoleUartData == NULL)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d011      	beq.n	8004dc2 <Console_UART_Initialize+0x52>
    {
        return;
    }

    pConsoleUartData->mutexTransferObjects = osMutexNew (NULL);
 8004d9e:	2000      	movs	r0, #0
 8004da0:	f00b f978 	bl	8010094 <osMutexNew>
 8004da4:	4602      	mov	r2, r0
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	609a      	str	r2, [r3, #8]
    if (pConsoleUartData->mutexTransferObjects == NULL)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d009      	beq.n	8004dc6 <Console_UART_Initialize+0x56>
    {
        return;
    }

    /* Assign the USART PLIB instance APIs to use */
    pConsoleUartData->uartPLIB = consoleUsartInitData->uartPLIB;
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	601a      	str	r2, [r3, #0]

    pConsoleUartData->status = SYS_CONSOLE_STATUS_CONFIGURED;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	711a      	strb	r2, [r3, #4]
 8004dc0:	e002      	b.n	8004dc8 <Console_UART_Initialize+0x58>
        return;
 8004dc2:	bf00      	nop
 8004dc4:	e000      	b.n	8004dc8 <Console_UART_Initialize+0x58>
        return;
 8004dc6:	bf00      	nop
}
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	200010b8 	.word	0x200010b8

08004dd4 <Console_UART_Read>:

/* Read out the data from the RX Ring Buffer */
size_t Console_UART_Read(uint32_t index, void* pRdBuffer, size_t count)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
    size_t nBytesRead = 0;
 8004de0:	2300      	movs	r3, #0
 8004de2:	617b      	str	r3, [r7, #20]
    CONSOLE_UART_DATA* pConsoleUartData = CONSOLE_UART_GET_INSTANCE(index);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d107      	bne.n	8004dfa <Console_UART_Read+0x26>
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	4613      	mov	r3, r2
 8004dee:	005b      	lsls	r3, r3, #1
 8004df0:	4413      	add	r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	4a12      	ldr	r2, [pc, #72]	@ (8004e40 <Console_UART_Read+0x6c>)
 8004df6:	4413      	add	r3, r2
 8004df8:	e000      	b.n	8004dfc <Console_UART_Read+0x28>
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	613b      	str	r3, [r7, #16]

    if (pConsoleUartData == NULL)
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d102      	bne.n	8004e0a <Console_UART_Read+0x36>
    {
        return -1;
 8004e04:	f04f 33ff 	mov.w	r3, #4294967295
 8004e08:	e016      	b.n	8004e38 <Console_UART_Read+0x64>
    }

    if (Console_UART_ResourceLock(pConsoleUartData) == false)
 8004e0a:	6938      	ldr	r0, [r7, #16]
 8004e0c:	f7ff ff8e 	bl	8004d2c <Console_UART_ResourceLock>
 8004e10:	4603      	mov	r3, r0
 8004e12:	f083 0301 	eor.w	r3, r3, #1
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d002      	beq.n	8004e22 <Console_UART_Read+0x4e>
    {
        return -1;
 8004e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e20:	e00a      	b.n	8004e38 <Console_UART_Read+0x64>
    }

    nBytesRead = pConsoleUartData->uartPLIB->read(pRdBuffer, count);
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6879      	ldr	r1, [r7, #4]
 8004e2a:	68b8      	ldr	r0, [r7, #8]
 8004e2c:	4798      	blx	r3
 8004e2e:	6178      	str	r0, [r7, #20]

    Console_UART_ResourceUnlock(pConsoleUartData);
 8004e30:	6938      	ldr	r0, [r7, #16]
 8004e32:	f7ff ff90 	bl	8004d56 <Console_UART_ResourceUnlock>

    return nBytesRead;
 8004e36:	697b      	ldr	r3, [r7, #20]
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3718      	adds	r7, #24
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	200010b8 	.word	0x200010b8

08004e44 <Console_UART_ReadCountGet>:

/* Return number of unread bytes available in the RX Ring Buffer */
size_t Console_UART_ReadCountGet(uint32_t index)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
    size_t nUnreadBytesAvailable = 0;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	60fb      	str	r3, [r7, #12]

    CONSOLE_UART_DATA* pConsoleUartData = CONSOLE_UART_GET_INSTANCE(index);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d107      	bne.n	8004e66 <Console_UART_ReadCountGet+0x22>
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	005b      	lsls	r3, r3, #1
 8004e5c:	4413      	add	r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	4a11      	ldr	r2, [pc, #68]	@ (8004ea8 <Console_UART_ReadCountGet+0x64>)
 8004e62:	4413      	add	r3, r2
 8004e64:	e000      	b.n	8004e68 <Console_UART_ReadCountGet+0x24>
 8004e66:	2300      	movs	r3, #0
 8004e68:	60bb      	str	r3, [r7, #8]

    if (pConsoleUartData == NULL)
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d102      	bne.n	8004e76 <Console_UART_ReadCountGet+0x32>
    {
        return -1;
 8004e70:	f04f 33ff 	mov.w	r3, #4294967295
 8004e74:	e014      	b.n	8004ea0 <Console_UART_ReadCountGet+0x5c>
    }

    if (Console_UART_ResourceLock(pConsoleUartData) == false)
 8004e76:	68b8      	ldr	r0, [r7, #8]
 8004e78:	f7ff ff58 	bl	8004d2c <Console_UART_ResourceLock>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	f083 0301 	eor.w	r3, r3, #1
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d002      	beq.n	8004e8e <Console_UART_ReadCountGet+0x4a>
    {
        return -1;
 8004e88:	f04f 33ff 	mov.w	r3, #4294967295
 8004e8c:	e008      	b.n	8004ea0 <Console_UART_ReadCountGet+0x5c>
    }

    nUnreadBytesAvailable = pConsoleUartData->uartPLIB->readCountGet();
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	4798      	blx	r3
 8004e96:	60f8      	str	r0, [r7, #12]

    Console_UART_ResourceUnlock(pConsoleUartData);
 8004e98:	68b8      	ldr	r0, [r7, #8]
 8004e9a:	f7ff ff5c 	bl	8004d56 <Console_UART_ResourceUnlock>

    return nUnreadBytesAvailable;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	200010b8 	.word	0x200010b8

08004eac <Console_UART_ReadFreeBufferCountGet>:

/* Return free space available in the RX Ring Buffer */
size_t Console_UART_ReadFreeBufferCountGet(uint32_t index)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
    size_t nFreeBufferAvailable = 0;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	60fb      	str	r3, [r7, #12]

    CONSOLE_UART_DATA* pConsoleUartData = CONSOLE_UART_GET_INSTANCE(index);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d107      	bne.n	8004ece <Console_UART_ReadFreeBufferCountGet+0x22>
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	005b      	lsls	r3, r3, #1
 8004ec4:	4413      	add	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4a11      	ldr	r2, [pc, #68]	@ (8004f10 <Console_UART_ReadFreeBufferCountGet+0x64>)
 8004eca:	4413      	add	r3, r2
 8004ecc:	e000      	b.n	8004ed0 <Console_UART_ReadFreeBufferCountGet+0x24>
 8004ece:	2300      	movs	r3, #0
 8004ed0:	60bb      	str	r3, [r7, #8]

    if (pConsoleUartData == NULL)
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d102      	bne.n	8004ede <Console_UART_ReadFreeBufferCountGet+0x32>
    {
        return -1;
 8004ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8004edc:	e014      	b.n	8004f08 <Console_UART_ReadFreeBufferCountGet+0x5c>
    }

    if (Console_UART_ResourceLock(pConsoleUartData) == false)
 8004ede:	68b8      	ldr	r0, [r7, #8]
 8004ee0:	f7ff ff24 	bl	8004d2c <Console_UART_ResourceLock>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	f083 0301 	eor.w	r3, r3, #1
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d002      	beq.n	8004ef6 <Console_UART_ReadFreeBufferCountGet+0x4a>
    {
        return -1;
 8004ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ef4:	e008      	b.n	8004f08 <Console_UART_ReadFreeBufferCountGet+0x5c>
    }

    nFreeBufferAvailable = pConsoleUartData->uartPLIB->readFreeBufferCountGet();
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	4798      	blx	r3
 8004efe:	60f8      	str	r0, [r7, #12]

    Console_UART_ResourceUnlock(pConsoleUartData);
 8004f00:	68b8      	ldr	r0, [r7, #8]
 8004f02:	f7ff ff28 	bl	8004d56 <Console_UART_ResourceUnlock>

    return nFreeBufferAvailable;
 8004f06:	68fb      	ldr	r3, [r7, #12]
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	200010b8 	.word	0x200010b8

08004f14 <Console_UART_Write>:

size_t Console_UART_Write(uint32_t index, const void* pWrBuffer, size_t count )
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
    size_t nBytesWritten = 0;
 8004f20:	2300      	movs	r3, #0
 8004f22:	617b      	str	r3, [r7, #20]

    CONSOLE_UART_DATA* pConsoleUartData = CONSOLE_UART_GET_INSTANCE(index);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d107      	bne.n	8004f3a <Console_UART_Write+0x26>
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	005b      	lsls	r3, r3, #1
 8004f30:	4413      	add	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4a12      	ldr	r2, [pc, #72]	@ (8004f80 <Console_UART_Write+0x6c>)
 8004f36:	4413      	add	r3, r2
 8004f38:	e000      	b.n	8004f3c <Console_UART_Write+0x28>
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	613b      	str	r3, [r7, #16]

    if (pConsoleUartData == NULL)
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d102      	bne.n	8004f4a <Console_UART_Write+0x36>
    {
        return -1;
 8004f44:	f04f 33ff 	mov.w	r3, #4294967295
 8004f48:	e016      	b.n	8004f78 <Console_UART_Write+0x64>
    }

    if (Console_UART_ResourceLock(pConsoleUartData) == false)
 8004f4a:	6938      	ldr	r0, [r7, #16]
 8004f4c:	f7ff feee 	bl	8004d2c <Console_UART_ResourceLock>
 8004f50:	4603      	mov	r3, r0
 8004f52:	f083 0301 	eor.w	r3, r3, #1
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d002      	beq.n	8004f62 <Console_UART_Write+0x4e>
    {
        return -1;
 8004f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f60:	e00a      	b.n	8004f78 <Console_UART_Write+0x64>
    }

    nBytesWritten = pConsoleUartData->uartPLIB->write((uint8_t*)pWrBuffer, count);
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	6879      	ldr	r1, [r7, #4]
 8004f6a:	68b8      	ldr	r0, [r7, #8]
 8004f6c:	4798      	blx	r3
 8004f6e:	6178      	str	r0, [r7, #20]

    Console_UART_ResourceUnlock(pConsoleUartData);
 8004f70:	6938      	ldr	r0, [r7, #16]
 8004f72:	f7ff fef0 	bl	8004d56 <Console_UART_ResourceUnlock>

    return nBytesWritten;
 8004f76:	697b      	ldr	r3, [r7, #20]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3718      	adds	r7, #24
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	200010b8 	.word	0x200010b8

08004f84 <Console_UART_WriteFreeBufferCountGet>:

size_t Console_UART_WriteFreeBufferCountGet(uint32_t index)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
    size_t nFreeBufferAvailable = 0;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	60fb      	str	r3, [r7, #12]

    CONSOLE_UART_DATA* pConsoleUartData = CONSOLE_UART_GET_INSTANCE(index);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d107      	bne.n	8004fa6 <Console_UART_WriteFreeBufferCountGet+0x22>
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	005b      	lsls	r3, r3, #1
 8004f9c:	4413      	add	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	4a11      	ldr	r2, [pc, #68]	@ (8004fe8 <Console_UART_WriteFreeBufferCountGet+0x64>)
 8004fa2:	4413      	add	r3, r2
 8004fa4:	e000      	b.n	8004fa8 <Console_UART_WriteFreeBufferCountGet+0x24>
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	60bb      	str	r3, [r7, #8]

    if (pConsoleUartData == NULL)
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d102      	bne.n	8004fb6 <Console_UART_WriteFreeBufferCountGet+0x32>
    {
        return -1;
 8004fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8004fb4:	e014      	b.n	8004fe0 <Console_UART_WriteFreeBufferCountGet+0x5c>
    }

    if (Console_UART_ResourceLock(pConsoleUartData) == false)
 8004fb6:	68b8      	ldr	r0, [r7, #8]
 8004fb8:	f7ff feb8 	bl	8004d2c <Console_UART_ResourceLock>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	f083 0301 	eor.w	r3, r3, #1
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d002      	beq.n	8004fce <Console_UART_WriteFreeBufferCountGet+0x4a>
    {
        return -1;
 8004fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8004fcc:	e008      	b.n	8004fe0 <Console_UART_WriteFreeBufferCountGet+0x5c>
    }

    nFreeBufferAvailable = pConsoleUartData->uartPLIB->writeFreeBufferCountGet();
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	695b      	ldr	r3, [r3, #20]
 8004fd4:	4798      	blx	r3
 8004fd6:	60f8      	str	r0, [r7, #12]

    Console_UART_ResourceUnlock(pConsoleUartData);
 8004fd8:	68b8      	ldr	r0, [r7, #8]
 8004fda:	f7ff febc 	bl	8004d56 <Console_UART_ResourceUnlock>

    return nFreeBufferAvailable;
 8004fde:	68fb      	ldr	r3, [r7, #12]
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	200010b8 	.word	0x200010b8

08004fec <Console_UART_WriteCountGet>:

size_t Console_UART_WriteCountGet(uint32_t index)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
    size_t nPendingTxBytes = 0;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	60fb      	str	r3, [r7, #12]

    CONSOLE_UART_DATA* pConsoleUartData = CONSOLE_UART_GET_INSTANCE(index);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d107      	bne.n	800500e <Console_UART_WriteCountGet+0x22>
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	4613      	mov	r3, r2
 8005002:	005b      	lsls	r3, r3, #1
 8005004:	4413      	add	r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4a11      	ldr	r2, [pc, #68]	@ (8005050 <Console_UART_WriteCountGet+0x64>)
 800500a:	4413      	add	r3, r2
 800500c:	e000      	b.n	8005010 <Console_UART_WriteCountGet+0x24>
 800500e:	2300      	movs	r3, #0
 8005010:	60bb      	str	r3, [r7, #8]

    if (pConsoleUartData == NULL)
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d102      	bne.n	800501e <Console_UART_WriteCountGet+0x32>
    {
        return -1;
 8005018:	f04f 33ff 	mov.w	r3, #4294967295
 800501c:	e014      	b.n	8005048 <Console_UART_WriteCountGet+0x5c>
    }

    if (Console_UART_ResourceLock(pConsoleUartData) == false)
 800501e:	68b8      	ldr	r0, [r7, #8]
 8005020:	f7ff fe84 	bl	8004d2c <Console_UART_ResourceLock>
 8005024:	4603      	mov	r3, r0
 8005026:	f083 0301 	eor.w	r3, r3, #1
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2b00      	cmp	r3, #0
 800502e:	d002      	beq.n	8005036 <Console_UART_WriteCountGet+0x4a>
    {
        return -1;
 8005030:	f04f 33ff 	mov.w	r3, #4294967295
 8005034:	e008      	b.n	8005048 <Console_UART_WriteCountGet+0x5c>
    }

    nPendingTxBytes = pConsoleUartData->uartPLIB->writeCountGet();
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	4798      	blx	r3
 800503e:	60f8      	str	r0, [r7, #12]

    Console_UART_ResourceUnlock(pConsoleUartData);
 8005040:	68b8      	ldr	r0, [r7, #8]
 8005042:	f7ff fe88 	bl	8004d56 <Console_UART_ResourceUnlock>

    return nPendingTxBytes;
 8005046:	68fb      	ldr	r3, [r7, #12]
}
 8005048:	4618      	mov	r0, r3
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	200010b8 	.word	0x200010b8

08005054 <Console_UART_Flush>:

bool Console_UART_Flush(uint32_t index)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
    /* Data is not buffered, nothing to flush */
    return true;
 800505c:	2301      	movs	r3, #1
}
 800505e:	4618      	mov	r0, r3
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	bc80      	pop	{r7}
 8005066:	4770      	bx	lr

08005068 <Console_UART_Status>:

SYS_CONSOLE_STATUS Console_UART_Status(uint32_t index)
{
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
    CONSOLE_UART_DATA* pConsoleUartData = CONSOLE_UART_GET_INSTANCE(index);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d107      	bne.n	8005086 <Console_UART_Status+0x1e>
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	4613      	mov	r3, r2
 800507a:	005b      	lsls	r3, r3, #1
 800507c:	4413      	add	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4a08      	ldr	r2, [pc, #32]	@ (80050a4 <Console_UART_Status+0x3c>)
 8005082:	4413      	add	r3, r2
 8005084:	e000      	b.n	8005088 <Console_UART_Status+0x20>
 8005086:	2300      	movs	r3, #0
 8005088:	60fb      	str	r3, [r7, #12]

    if (pConsoleUartData == NULL)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d101      	bne.n	8005094 <Console_UART_Status+0x2c>
    {
        return SYS_CONSOLE_STATUS_ERROR;
 8005090:	2303      	movs	r3, #3
 8005092:	e001      	b.n	8005098 <Console_UART_Status+0x30>
    }
    else
    {
        return pConsoleUartData->status;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	791b      	ldrb	r3, [r3, #4]
    }
}
 8005098:	4618      	mov	r0, r3
 800509a:	3714      	adds	r7, #20
 800509c:	46bd      	mov	sp, r7
 800509e:	bc80      	pop	{r7}
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	200010b8 	.word	0x200010b8

080050a8 <uartObj_Init>:

#define UART_READ_BUFFER_SIZE      64		// 이것을 16 으로 두면 extAddr 을 copy&paste 로 넣을 때 죽을 수 있다..
static uint8_t UART_ReadBuffer[UART_READ_BUFFER_SIZE];

bool uartObj_Init( void )
{
 80050a8:	b480      	push	{r7}
 80050aa:	af00      	add	r7, sp, #0
	/* Initialize instance object */
	uartObj.rdCallback = NULL;
 80050ac:	4b18      	ldr	r3, [pc, #96]	@ (8005110 <uartObj_Init+0x68>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	621a      	str	r2, [r3, #32]
	uartObj.rdInIndex = 0;
 80050b2:	4b17      	ldr	r3, [pc, #92]	@ (8005110 <uartObj_Init+0x68>)
 80050b4:	2200      	movs	r2, #0
 80050b6:	629a      	str	r2, [r3, #40]	@ 0x28
	uartObj.rdOutIndex = 0;
 80050b8:	4b15      	ldr	r3, [pc, #84]	@ (8005110 <uartObj_Init+0x68>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	62da      	str	r2, [r3, #44]	@ 0x2c
	uartObj.isRdNotificationEnabled = false;
 80050be:	4b14      	ldr	r3, [pc, #80]	@ (8005110 <uartObj_Init+0x68>)
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	uartObj.isRdNotifyPersistently = false;
 80050c6:	4b12      	ldr	r3, [pc, #72]	@ (8005110 <uartObj_Init+0x68>)
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	uartObj.rdThreshold = 0;
 80050ce:	4b10      	ldr	r3, [pc, #64]	@ (8005110 <uartObj_Init+0x68>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	639a      	str	r2, [r3, #56]	@ 0x38

	uartObj.wrCallback = NULL;
 80050d4:	4b0e      	ldr	r3, [pc, #56]	@ (8005110 <uartObj_Init+0x68>)
 80050d6:	2200      	movs	r2, #0
 80050d8:	601a      	str	r2, [r3, #0]
	uartObj.wrInIndex = 0;
 80050da:	4b0d      	ldr	r3, [pc, #52]	@ (8005110 <uartObj_Init+0x68>)
 80050dc:	2200      	movs	r2, #0
 80050de:	609a      	str	r2, [r3, #8]
	uartObj.wrOutIndex = 0;
 80050e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005110 <uartObj_Init+0x68>)
 80050e2:	2200      	movs	r2, #0
 80050e4:	60da      	str	r2, [r3, #12]
	uartObj.isWrNotificationEnabled = false;
 80050e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005110 <uartObj_Init+0x68>)
 80050e8:	2200      	movs	r2, #0
 80050ea:	741a      	strb	r2, [r3, #16]
	uartObj.isWrNotifyPersistently = false;
 80050ec:	4b08      	ldr	r3, [pc, #32]	@ (8005110 <uartObj_Init+0x68>)
 80050ee:	2200      	movs	r2, #0
 80050f0:	771a      	strb	r2, [r3, #28]
	uartObj.wrThreshold = 0;
 80050f2:	4b07      	ldr	r3, [pc, #28]	@ (8005110 <uartObj_Init+0x68>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	615a      	str	r2, [r3, #20]

	uartObj.errors = UART_ERROR_NONE;
 80050f8:	4b05      	ldr	r3, [pc, #20]	@ (8005110 <uartObj_Init+0x68>)
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
	uartObj.rdBufferSize = UART_READ_BUFFER_SIZE;
 8005100:	4b03      	ldr	r3, [pc, #12]	@ (8005110 <uartObj_Init+0x68>)
 8005102:	2240      	movs	r2, #64	@ 0x40
 8005104:	631a      	str	r2, [r3, #48]	@ 0x30
	//uart6Obj.wrBufferSize = UART6_WRITE_BUFFER_SIZE;
	return true;
 8005106:	2301      	movs	r3, #1
}
 8005108:	4618      	mov	r0, r3
 800510a:	46bd      	mov	sp, r7
 800510c:	bc80      	pop	{r7}
 800510e:	4770      	bx	lr
 8005110:	200010c4 	.word	0x200010c4

08005114 <UART_RxPushByte>:


/* This routine is only called from ISR. Hence do not disable/enable USART interrupts. */
static inline bool UART_RxPushByte(uint8_t rdByte)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	4603      	mov	r3, r0
 800511c:	71fb      	strb	r3, [r7, #7]
	uint32_t tempInIndex;
	bool isSuccess = false;
 800511e:	2300      	movs	r3, #0
 8005120:	72fb      	strb	r3, [r7, #11]

	tempInIndex = uartObj.rdInIndex + 1;
 8005122:	4b1d      	ldr	r3, [pc, #116]	@ (8005198 <UART_RxPushByte+0x84>)
 8005124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005126:	3301      	adds	r3, #1
 8005128:	60fb      	str	r3, [r7, #12]

	if (tempInIndex >= uartObj.rdBufferSize)
 800512a:	4b1b      	ldr	r3, [pc, #108]	@ (8005198 <UART_RxPushByte+0x84>)
 800512c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	429a      	cmp	r2, r3
 8005132:	d301      	bcc.n	8005138 <UART_RxPushByte+0x24>
	{
		tempInIndex = 0;
 8005134:	2300      	movs	r3, #0
 8005136:	60fb      	str	r3, [r7, #12]
	}

	if (tempInIndex == uartObj.rdOutIndex)
 8005138:	4b17      	ldr	r3, [pc, #92]	@ (8005198 <UART_RxPushByte+0x84>)
 800513a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	429a      	cmp	r2, r3
 8005140:	d115      	bne.n	800516e <UART_RxPushByte+0x5a>
	{
		/* Queue is full - Report it to the application. Application gets a chance to free up space by reading data out from the RX ring buffer */
		if(uartObj.rdCallback != NULL)
 8005142:	4b15      	ldr	r3, [pc, #84]	@ (8005198 <UART_RxPushByte+0x84>)
 8005144:	6a1b      	ldr	r3, [r3, #32]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d011      	beq.n	800516e <UART_RxPushByte+0x5a>
		{
			uartObj.rdCallback(UART_EVENT_READ_BUFFER_FULL, uartObj.rdContext);
 800514a:	4b13      	ldr	r3, [pc, #76]	@ (8005198 <UART_RxPushByte+0x84>)
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	4a12      	ldr	r2, [pc, #72]	@ (8005198 <UART_RxPushByte+0x84>)
 8005150:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005152:	4611      	mov	r1, r2
 8005154:	2001      	movs	r0, #1
 8005156:	4798      	blx	r3

			/* Read the indices again in case application has freed up space in RX ring buffer */
			tempInIndex = uartObj.rdInIndex + 1;
 8005158:	4b0f      	ldr	r3, [pc, #60]	@ (8005198 <UART_RxPushByte+0x84>)
 800515a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800515c:	3301      	adds	r3, #1
 800515e:	60fb      	str	r3, [r7, #12]

			if (tempInIndex >= uartObj.rdBufferSize)
 8005160:	4b0d      	ldr	r3, [pc, #52]	@ (8005198 <UART_RxPushByte+0x84>)
 8005162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	429a      	cmp	r2, r3
 8005168:	d301      	bcc.n	800516e <UART_RxPushByte+0x5a>
			{
				tempInIndex = 0;
 800516a:	2300      	movs	r3, #0
 800516c:	60fb      	str	r3, [r7, #12]
			}
		}
	}

	/* Attempt to push the data into the ring buffer */
	if (tempInIndex != uartObj.rdOutIndex)
 800516e:	4b0a      	ldr	r3, [pc, #40]	@ (8005198 <UART_RxPushByte+0x84>)
 8005170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	429a      	cmp	r2, r3
 8005176:	d009      	beq.n	800518c <UART_RxPushByte+0x78>
	{

		UART_ReadBuffer[uartObj.rdInIndex] = (uint8_t)rdByte;
 8005178:	4b07      	ldr	r3, [pc, #28]	@ (8005198 <UART_RxPushByte+0x84>)
 800517a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800517c:	4907      	ldr	r1, [pc, #28]	@ (800519c <UART_RxPushByte+0x88>)
 800517e:	79fa      	ldrb	r2, [r7, #7]
 8005180:	54ca      	strb	r2, [r1, r3]
		uartObj.rdInIndex = tempInIndex;
 8005182:	4a05      	ldr	r2, [pc, #20]	@ (8005198 <UART_RxPushByte+0x84>)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6293      	str	r3, [r2, #40]	@ 0x28

		isSuccess = true;
 8005188:	2301      	movs	r3, #1
 800518a:	72fb      	strb	r3, [r7, #11]
	else
	{
		/* Queue is full. Data will be lost. */
	}

	return isSuccess;
 800518c:	7afb      	ldrb	r3, [r7, #11]
}
 800518e:	4618      	mov	r0, r3
 8005190:	3710      	adds	r7, #16
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	200010c4 	.word	0x200010c4
 800519c:	20001104 	.word	0x20001104

080051a0 <RxPushByte>:


bool RxPushByte (uint8_t rdByte)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	4603      	mov	r3, r0
 80051a8:	71fb      	strb	r3, [r7, #7]
	assert (UART_RxPushByte( rdByte ) == true);
 80051aa:	79fb      	ldrb	r3, [r7, #7]
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7ff ffb1 	bl	8005114 <UART_RxPushByte>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d005      	beq.n	80051c4 <RxPushByte+0x24>
 80051b8:	4b05      	ldr	r3, [pc, #20]	@ (80051d0 <RxPushByte+0x30>)
 80051ba:	4a06      	ldr	r2, [pc, #24]	@ (80051d4 <RxPushByte+0x34>)
 80051bc:	2169      	movs	r1, #105	@ 0x69
 80051be:	4806      	ldr	r0, [pc, #24]	@ (80051d8 <RxPushByte+0x38>)
 80051c0:	f00e feaa 	bl	8013f18 <__assert_func>
    return true;
 80051c4:	2301      	movs	r3, #1
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3708      	adds	r7, #8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	08016540 	.word	0x08016540
 80051d4:	08019d10 	.word	0x08019d10
 80051d8:	08016564 	.word	0x08016564

080051dc <UART_Read>:

size_t UART_Read(uint8_t* pRdBuffer, const size_t size)
{
 80051dc:	b480      	push	{r7}
 80051de:	b087      	sub	sp, #28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
	size_t nBytesRead = 0;
 80051e6:	2300      	movs	r3, #0
 80051e8:	617b      	str	r3, [r7, #20]
	uint32_t rdOutIndex = 0;
 80051ea:	2300      	movs	r3, #0
 80051ec:	613b      	str	r3, [r7, #16]
	uint32_t rdInIndex = 0;
 80051ee:	2300      	movs	r3, #0
 80051f0:	60fb      	str	r3, [r7, #12]

	/* Take a snapshot of indices to avoid creation of critical section */
	rdOutIndex = uartObj.rdOutIndex;
 80051f2:	4b16      	ldr	r3, [pc, #88]	@ (800524c <UART_Read+0x70>)
 80051f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f6:	613b      	str	r3, [r7, #16]
	rdInIndex = uartObj.rdInIndex;
 80051f8:	4b14      	ldr	r3, [pc, #80]	@ (800524c <UART_Read+0x70>)
 80051fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051fc:	60fb      	str	r3, [r7, #12]

	while (nBytesRead < size)
 80051fe:	e015      	b.n	800522c <UART_Read+0x50>
	{
		if (rdOutIndex != rdInIndex)
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	429a      	cmp	r2, r3
 8005206:	d016      	beq.n	8005236 <UART_Read+0x5a>
		{

			pRdBuffer[nBytesRead++] = UART_ReadBuffer[rdOutIndex++];
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	1c5a      	adds	r2, r3, #1
 800520c:	613a      	str	r2, [r7, #16]
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	1c51      	adds	r1, r2, #1
 8005212:	6179      	str	r1, [r7, #20]
 8005214:	6879      	ldr	r1, [r7, #4]
 8005216:	440a      	add	r2, r1
 8005218:	490d      	ldr	r1, [pc, #52]	@ (8005250 <UART_Read+0x74>)
 800521a:	5ccb      	ldrb	r3, [r1, r3]
 800521c:	7013      	strb	r3, [r2, #0]
			if (rdOutIndex >= uartObj.rdBufferSize)
 800521e:	4b0b      	ldr	r3, [pc, #44]	@ (800524c <UART_Read+0x70>)
 8005220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	429a      	cmp	r2, r3
 8005226:	d301      	bcc.n	800522c <UART_Read+0x50>
			{
				rdOutIndex = 0;
 8005228:	2300      	movs	r3, #0
 800522a:	613b      	str	r3, [r7, #16]
	while (nBytesRead < size)
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	429a      	cmp	r2, r3
 8005232:	d3e5      	bcc.n	8005200 <UART_Read+0x24>
 8005234:	e000      	b.n	8005238 <UART_Read+0x5c>
			}
		}
		else
		{
			/* No more data available in the RX buffer */
			break;
 8005236:	bf00      	nop
		}
	}

	uartObj.rdOutIndex = rdOutIndex;
 8005238:	4a04      	ldr	r2, [pc, #16]	@ (800524c <UART_Read+0x70>)
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	62d3      	str	r3, [r2, #44]	@ 0x2c

	return nBytesRead;
 800523e:	697b      	ldr	r3, [r7, #20]
}
 8005240:	4618      	mov	r0, r3
 8005242:	371c      	adds	r7, #28
 8005244:	46bd      	mov	sp, r7
 8005246:	bc80      	pop	{r7}
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	200010c4 	.word	0x200010c4
 8005250:	20001104 	.word	0x20001104

08005254 <UART_ReadCountGet>:

size_t UART_ReadCountGet(void)
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
	size_t nUnreadBytesAvailable;
	uint32_t rdInIndex;
	uint32_t rdOutIndex;

	/* Take a snapshot of indices to avoid processing in critical section */
	rdInIndex = uartObj.rdInIndex;
 800525a:	4b0e      	ldr	r3, [pc, #56]	@ (8005294 <UART_ReadCountGet+0x40>)
 800525c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800525e:	60bb      	str	r3, [r7, #8]
	rdOutIndex = uartObj.rdOutIndex;
 8005260:	4b0c      	ldr	r3, [pc, #48]	@ (8005294 <UART_ReadCountGet+0x40>)
 8005262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005264:	607b      	str	r3, [r7, #4]

	if ( rdInIndex >=  rdOutIndex)
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	429a      	cmp	r2, r3
 800526c:	d304      	bcc.n	8005278 <UART_ReadCountGet+0x24>
	{
		nUnreadBytesAvailable =  rdInIndex -  rdOutIndex;
 800526e:	68ba      	ldr	r2, [r7, #8]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	60fb      	str	r3, [r7, #12]
 8005276:	e006      	b.n	8005286 <UART_ReadCountGet+0x32>
	}
	else
	{
		nUnreadBytesAvailable =  (uartObj.rdBufferSize -  rdOutIndex) + rdInIndex;
 8005278:	4b06      	ldr	r3, [pc, #24]	@ (8005294 <UART_ReadCountGet+0x40>)
 800527a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	4413      	add	r3, r2
 8005284:	60fb      	str	r3, [r7, #12]
	}

	return nUnreadBytesAvailable;
 8005286:	68fb      	ldr	r3, [r7, #12]
}
 8005288:	4618      	mov	r0, r3
 800528a:	3714      	adds	r7, #20
 800528c:	46bd      	mov	sp, r7
 800528e:	bc80      	pop	{r7}
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	200010c4 	.word	0x200010c4

08005298 <UART_ReadFreeBufferCountGet>:

size_t UART_ReadFreeBufferCountGet(void)
{
 8005298:	b598      	push	{r3, r4, r7, lr}
 800529a:	af00      	add	r7, sp, #0
	return (uartObj.rdBufferSize - 1) - UART_ReadCountGet();
 800529c:	4b04      	ldr	r3, [pc, #16]	@ (80052b0 <UART_ReadFreeBufferCountGet+0x18>)
 800529e:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 80052a0:	f7ff ffd8 	bl	8005254 <UART_ReadCountGet>
 80052a4:	4603      	mov	r3, r0
 80052a6:	1ae3      	subs	r3, r4, r3
 80052a8:	3b01      	subs	r3, #1
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	bd98      	pop	{r3, r4, r7, pc}
 80052ae:	bf00      	nop
 80052b0:	200010c4 	.word	0x200010c4

080052b4 <UART_WriteCountGet>:


size_t UART_WriteCountGet(void)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
	size_t nPendingTxBytes = 0;
 80052ba:	2300      	movs	r3, #0
 80052bc:	607b      	str	r3, [r7, #4]

	//nPendingTxBytes = UART6_WritePendingBytesGet();

	return nPendingTxBytes;
 80052be:	687b      	ldr	r3, [r7, #4]
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bc80      	pop	{r7}
 80052c8:	4770      	bx	lr

080052ca <UART_Write>:

size_t UART_Write(uint8_t* pWrBuffer, const size_t size )
{
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b084      	sub	sp, #16
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
 80052d2:	6039      	str	r1, [r7, #0]
	size_t nBytesWritten  = 0;
 80052d4:	2300      	movs	r3, #0
 80052d6:	60fb      	str	r3, [r7, #12]

	nBytesWritten = DbgTraceWrite (1, pWrBuffer, size);
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	6879      	ldr	r1, [r7, #4]
 80052dc:	2001      	movs	r0, #1
 80052de:	f002 ff6b 	bl	80081b8 <DbgTraceWrite>
 80052e2:	60f8      	str	r0, [r7, #12]
	return nBytesWritten;
 80052e4:	68fb      	ldr	r3, [r7, #12]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
	...

080052f0 <UART_WriteFreeBufferCountGet>:

size_t UART_WriteFreeBufferCountGet(void)
{
 80052f0:	b598      	push	{r3, r4, r7, lr}
 80052f2:	af00      	add	r7, sp, #0
	return (uartObj.wrBufferSize - 1) - UART_WriteCountGet();
 80052f4:	4b04      	ldr	r3, [pc, #16]	@ (8005308 <UART_WriteFreeBufferCountGet+0x18>)
 80052f6:	699c      	ldr	r4, [r3, #24]
 80052f8:	f7ff ffdc 	bl	80052b4 <UART_WriteCountGet>
 80052fc:	4603      	mov	r3, r0
 80052fe:	1ae3      	subs	r3, r4, r3
 8005300:	3b01      	subs	r3, #1
}
 8005302:	4618      	mov	r0, r3
 8005304:	bd98      	pop	{r3, r4, r7, pc}
 8005306:	bf00      	nop
 8005308:	200010c4 	.word	0x200010c4

0800530c <HexDump>:

	(*pCmdIO->pCmdApi->print)(cmdIoParam, "  %s"LINE_TERM, buff);
}

void HexDump (uint32_t nominal_addr, void *addr, uint32_t len)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b08c      	sub	sp, #48	@ 0x30
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
	uint32_t i;
	unsigned char buff[17];       // stores the ASCII data
	unsigned char *pc = addr;     // cast to make the code cleaner.
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	62bb      	str	r3, [r7, #40]	@ 0x28

	for (i = 0; i < len; i++) {
 800531c:	2300      	movs	r3, #0
 800531e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005320:	e04b      	b.n	80053ba <HexDump+0xae>
		if ((i % 16) == 0) {
 8005322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005324:	f003 030f 	and.w	r3, r3, #15
 8005328:	2b00      	cmp	r3, #0
 800532a:	d112      	bne.n	8005352 <HexDump+0x46>
			if (i != 0)	{
 800532c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800532e:	2b00      	cmp	r3, #0
 8005330:	d008      	beq.n	8005344 <HexDump+0x38>
				printf("  %s"LINE_TERM, buff);
 8005332:	f107 0314 	add.w	r3, r7, #20
 8005336:	4619      	mov	r1, r3
 8005338:	482d      	ldr	r0, [pc, #180]	@ (80053f0 <HexDump+0xe4>)
 800533a:	f00f f80d 	bl	8014358 <iprintf>
				osDelay(10);	// print buffer 가 넘쳐서 깨지는 것 때문에 이정도는 줘야 안깨지더라..
 800533e:	200a      	movs	r0, #10
 8005340:	f00a fdcd 	bl	800fede <osDelay>
			}

			printf("0x%08lX ", (uint32_t)(nominal_addr+i));
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005348:	4413      	add	r3, r2
 800534a:	4619      	mov	r1, r3
 800534c:	4829      	ldr	r0, [pc, #164]	@ (80053f4 <HexDump+0xe8>)
 800534e:	f00f f803 	bl	8014358 <iprintf>
		}

		printf(" %02X", pc[i]);
 8005352:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005356:	4413      	add	r3, r2
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	4619      	mov	r1, r3
 800535c:	4826      	ldr	r0, [pc, #152]	@ (80053f8 <HexDump+0xec>)
 800535e:	f00e fffb 	bl	8014358 <iprintf>

		if ((pc[i] < 0x20) || (pc[i] > 0x7e)) buff[i % 16] = '.';
 8005362:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005366:	4413      	add	r3, r2
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	2b1f      	cmp	r3, #31
 800536c:	d905      	bls.n	800537a <HexDump+0x6e>
 800536e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005372:	4413      	add	r3, r2
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	2b7e      	cmp	r3, #126	@ 0x7e
 8005378:	d908      	bls.n	800538c <HexDump+0x80>
 800537a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800537c:	f003 030f 	and.w	r3, r3, #15
 8005380:	3330      	adds	r3, #48	@ 0x30
 8005382:	443b      	add	r3, r7
 8005384:	222e      	movs	r2, #46	@ 0x2e
 8005386:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800538a:	e00a      	b.n	80053a2 <HexDump+0x96>
		else buff[i % 16] = pc[i];
 800538c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800538e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005390:	441a      	add	r2, r3
 8005392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005394:	f003 030f 	and.w	r3, r3, #15
 8005398:	7812      	ldrb	r2, [r2, #0]
 800539a:	3330      	adds	r3, #48	@ 0x30
 800539c:	443b      	add	r3, r7
 800539e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		buff[(i % 16) + 1] = '\0';
 80053a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053a4:	f003 030f 	and.w	r3, r3, #15
 80053a8:	3301      	adds	r3, #1
 80053aa:	3330      	adds	r3, #48	@ 0x30
 80053ac:	443b      	add	r3, r7
 80053ae:	2200      	movs	r2, #0
 80053b0:	f803 2c1c 	strb.w	r2, [r3, #-28]
	for (i = 0; i < len; i++) {
 80053b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053b6:	3301      	adds	r3, #1
 80053b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d3af      	bcc.n	8005322 <HexDump+0x16>
	}

	while ((i % 16) != 0) {
 80053c2:	e005      	b.n	80053d0 <HexDump+0xc4>
		printf("   ");
 80053c4:	480d      	ldr	r0, [pc, #52]	@ (80053fc <HexDump+0xf0>)
 80053c6:	f00e ffc7 	bl	8014358 <iprintf>
		i++;
 80053ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053cc:	3301      	adds	r3, #1
 80053ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while ((i % 16) != 0) {
 80053d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053d2:	f003 030f 	and.w	r3, r3, #15
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1f4      	bne.n	80053c4 <HexDump+0xb8>
	}

	printf("  %s"LINE_TERM, buff);
 80053da:	f107 0314 	add.w	r3, r7, #20
 80053de:	4619      	mov	r1, r3
 80053e0:	4803      	ldr	r0, [pc, #12]	@ (80053f0 <HexDump+0xe4>)
 80053e2:	f00e ffb9 	bl	8014358 <iprintf>
}
 80053e6:	bf00      	nop
 80053e8:	3730      	adds	r7, #48	@ 0x30
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	08016588 	.word	0x08016588
 80053f4:	080165a4 	.word	0x080165a4
 80053f8:	08016598 	.word	0x08016598
 80053fc:	080165a0 	.word	0x080165a0

08005400 <show_banner_dsn>:
static void show_banner_pee(void);
static void show_banner_shit(void);
static void show_banner_ballet(void);

static void show_banner_dsn(void)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	af00      	add	r7, sp, #0
	printf (LINE_TERM "8 888888888o.         d888888o.   b.             8    ");
 8005404:	480f      	ldr	r0, [pc, #60]	@ (8005444 <show_banner_dsn+0x44>)
 8005406:	f00e ffa7 	bl	8014358 <iprintf>
	printf (LINE_TERM "8 8888    `^888.    .`8888:' `88. 888o.          8    ");
 800540a:	480f      	ldr	r0, [pc, #60]	@ (8005448 <show_banner_dsn+0x48>)
 800540c:	f00e ffa4 	bl	8014358 <iprintf>
	printf (LINE_TERM "8 8888        `88.  8.`8888.   Y8 Y88888o.       8    ");
 8005410:	480e      	ldr	r0, [pc, #56]	@ (800544c <show_banner_dsn+0x4c>)
 8005412:	f00e ffa1 	bl	8014358 <iprintf>
	printf (LINE_TERM "8 8888         `88  `8.`8888.     .`Y888888o.    8    ");
 8005416:	480e      	ldr	r0, [pc, #56]	@ (8005450 <show_banner_dsn+0x50>)
 8005418:	f00e ff9e 	bl	8014358 <iprintf>
	printf (LINE_TERM "8 8888          88   `8.`8888.    8o. `Y888888o. 8    ");
 800541c:	480d      	ldr	r0, [pc, #52]	@ (8005454 <show_banner_dsn+0x54>)
 800541e:	f00e ff9b 	bl	8014358 <iprintf>
	printf (LINE_TERM "8 8888          88    `8.`8888.   8`Y8o. `Y88888o8    ");
 8005422:	480d      	ldr	r0, [pc, #52]	@ (8005458 <show_banner_dsn+0x58>)
 8005424:	f00e ff98 	bl	8014358 <iprintf>
	printf (LINE_TERM "8 8888         ,88     `8.`8888.  8   `Y8o. `Y8888    ");
 8005428:	480c      	ldr	r0, [pc, #48]	@ (800545c <show_banner_dsn+0x5c>)
 800542a:	f00e ff95 	bl	8014358 <iprintf>
	printf (LINE_TERM "8 8888        ,88' 8b   `8.`8888. 8      `Y8o. `Y8    ");
 800542e:	480c      	ldr	r0, [pc, #48]	@ (8005460 <show_banner_dsn+0x60>)
 8005430:	f00e ff92 	bl	8014358 <iprintf>
	printf (LINE_TERM "8 8888    ,o88P'   `8b.  ;8.`8888 8         `Y8o.`    ");
 8005434:	480b      	ldr	r0, [pc, #44]	@ (8005464 <show_banner_dsn+0x64>)
 8005436:	f00e ff8f 	bl	8014358 <iprintf>
	printf (LINE_TERM "8 888888888P'       `Y8888P ,88P' 8            `Yo    ");
 800543a:	480b      	ldr	r0, [pc, #44]	@ (8005468 <show_banner_dsn+0x68>)
 800543c:	f00e ff8c 	bl	8014358 <iprintf>
}
 8005440:	bf00      	nop
 8005442:	bd80      	pop	{r7, pc}
 8005444:	080165b0 	.word	0x080165b0
 8005448:	080165ec 	.word	0x080165ec
 800544c:	08016628 	.word	0x08016628
 8005450:	08016664 	.word	0x08016664
 8005454:	080166a0 	.word	0x080166a0
 8005458:	080166dc 	.word	0x080166dc
 800545c:	08016718 	.word	0x08016718
 8005460:	08016754 	.word	0x08016754
 8005464:	08016790 	.word	0x08016790
 8005468:	080167cc 	.word	0x080167cc

0800546c <show_banner_ecell>:

static void show_banner_ecell(void)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	af00      	add	r7, sp, #0
	printf (LINE_TERM "8 8888888888       ,o888888o.    8 8888888888   8 8888         8 8888         ");
 8005470:	480f      	ldr	r0, [pc, #60]	@ (80054b0 <show_banner_ecell+0x44>)
 8005472:	f00e ff71 	bl	8014358 <iprintf>
	printf (LINE_TERM "8 8888            8888     `88.  8 8888         8 8888         8 8888         ");
 8005476:	480f      	ldr	r0, [pc, #60]	@ (80054b4 <show_banner_ecell+0x48>)
 8005478:	f00e ff6e 	bl	8014358 <iprintf>
	printf (LINE_TERM "8 8888         ,8 8888       `8. 8 8888         8 8888         8 8888         ");
 800547c:	480e      	ldr	r0, [pc, #56]	@ (80054b8 <show_banner_ecell+0x4c>)
 800547e:	f00e ff6b 	bl	8014358 <iprintf>
	printf (LINE_TERM "8 8888         88 8888           8 8888         8 8888         8 8888         ");
 8005482:	480e      	ldr	r0, [pc, #56]	@ (80054bc <show_banner_ecell+0x50>)
 8005484:	f00e ff68 	bl	8014358 <iprintf>
	printf (LINE_TERM "8 888888888888 88 8888           8 888888888888 8 8888         8 8888         ");
 8005488:	480d      	ldr	r0, [pc, #52]	@ (80054c0 <show_banner_ecell+0x54>)
 800548a:	f00e ff65 	bl	8014358 <iprintf>
	printf (LINE_TERM "8 8888         88 8888           8 8888         8 8888         8 8888         ");
 800548e:	480b      	ldr	r0, [pc, #44]	@ (80054bc <show_banner_ecell+0x50>)
 8005490:	f00e ff62 	bl	8014358 <iprintf>
	printf (LINE_TERM "8 8888         88 8888           8 8888         8 8888         8 8888         ");
 8005494:	4809      	ldr	r0, [pc, #36]	@ (80054bc <show_banner_ecell+0x50>)
 8005496:	f00e ff5f 	bl	8014358 <iprintf>
	printf (LINE_TERM "8 8888         `8 8888       .8' 8 8888         8 8888         8 8888         ");
 800549a:	480a      	ldr	r0, [pc, #40]	@ (80054c4 <show_banner_ecell+0x58>)
 800549c:	f00e ff5c 	bl	8014358 <iprintf>
	printf (LINE_TERM "8 8888            8888     ,88'  8 8888         8 8888         8 8888         ");
 80054a0:	4809      	ldr	r0, [pc, #36]	@ (80054c8 <show_banner_ecell+0x5c>)
 80054a2:	f00e ff59 	bl	8014358 <iprintf>
	printf (LINE_TERM "8 888888888888     `8888888P'    8 888888888888 8 888888888888 8 888888888888 ");
 80054a6:	4809      	ldr	r0, [pc, #36]	@ (80054cc <show_banner_ecell+0x60>)
 80054a8:	f00e ff56 	bl	8014358 <iprintf>

}
 80054ac:	bf00      	nop
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	08016808 	.word	0x08016808
 80054b4:	0801685c 	.word	0x0801685c
 80054b8:	080168b0 	.word	0x080168b0
 80054bc:	08016904 	.word	0x08016904
 80054c0:	08016958 	.word	0x08016958
 80054c4:	080169ac 	.word	0x080169ac
 80054c8:	08016a00 	.word	0x08016a00
 80054cc:	08016a54 	.word	0x08016a54

080054d0 <show_banner_smart>:

static void show_banner_smart(void)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	af00      	add	r7, sp, #0
	printf (LINE_TERM "	   d888888o.            ,8.       ,8.                   .8.          8 888888888o.   8888888 8888888888	");
 80054d4:	480f      	ldr	r0, [pc, #60]	@ (8005514 <show_banner_smart+0x44>)
 80054d6:	f00e ff3f 	bl	8014358 <iprintf>
	printf (LINE_TERM "	 .`8888:' `88.         ,888.     ,888.                 .888.         8 8888    `88.        8 8888		");
 80054da:	480f      	ldr	r0, [pc, #60]	@ (8005518 <show_banner_smart+0x48>)
 80054dc:	f00e ff3c 	bl	8014358 <iprintf>
	printf (LINE_TERM "	 8.`8888.   Y8        .`8888.   .`8888.               :88888.        8 8888     `88        8 8888		");
 80054e0:	480e      	ldr	r0, [pc, #56]	@ (800551c <show_banner_smart+0x4c>)
 80054e2:	f00e ff39 	bl	8014358 <iprintf>
	printf (LINE_TERM "	 `8.`8888.           ,8.`8888. ,8.`8888.             . `88888.       8 8888     ,88        8 8888		");
 80054e6:	480e      	ldr	r0, [pc, #56]	@ (8005520 <show_banner_smart+0x50>)
 80054e8:	f00e ff36 	bl	8014358 <iprintf>
	printf (LINE_TERM "	  `8.`8888.         ,8'8.`8888,8^8.`8888.           .8. `88888.      8 8888.   ,88'        8 8888		");
 80054ec:	480d      	ldr	r0, [pc, #52]	@ (8005524 <show_banner_smart+0x54>)
 80054ee:	f00e ff33 	bl	8014358 <iprintf>
	printf (LINE_TERM "	   `8.`8888.       ,8' `8.`8888' `8.`8888.         .8`8. `88888.     8 888888888P'         8 8888		");
 80054f2:	480d      	ldr	r0, [pc, #52]	@ (8005528 <show_banner_smart+0x58>)
 80054f4:	f00e ff30 	bl	8014358 <iprintf>
	printf (LINE_TERM "	    `8.`8888.     ,8'   `8.`88'   `8.`8888.       .8' `8. `88888.    8 8888`8b             8 8888		");
 80054f8:	480c      	ldr	r0, [pc, #48]	@ (800552c <show_banner_smart+0x5c>)
 80054fa:	f00e ff2d 	bl	8014358 <iprintf>
	printf (LINE_TERM "	8b   `8.`8888.   ,8'     `8.`'     `8.`8888.     .8'   `8. `88888.   8 8888 `8b.           8 8888		");
 80054fe:	480c      	ldr	r0, [pc, #48]	@ (8005530 <show_banner_smart+0x60>)
 8005500:	f00e ff2a 	bl	8014358 <iprintf>
	printf (LINE_TERM "	`8b.  ;8.`8888  ,8'       `8        `8.`8888.   .888888888. `88888.  8 8888   `8b.         8 8888		");
 8005504:	480b      	ldr	r0, [pc, #44]	@ (8005534 <show_banner_smart+0x64>)
 8005506:	f00e ff27 	bl	8014358 <iprintf>
	printf (LINE_TERM "	 `Y8888P ,88P' ,8'         `         `8.`8888. .8'       `8. `88888. 8 8888     `88.       8 8888		");
 800550a:	480b      	ldr	r0, [pc, #44]	@ (8005538 <show_banner_smart+0x68>)
 800550c:	f00e ff24 	bl	8014358 <iprintf>
}
 8005510:	bf00      	nop
 8005512:	bd80      	pop	{r7, pc}
 8005514:	08016aa8 	.word	0x08016aa8
 8005518:	08016b14 	.word	0x08016b14
 800551c:	08016b7c 	.word	0x08016b7c
 8005520:	08016be4 	.word	0x08016be4
 8005524:	08016c4c 	.word	0x08016c4c
 8005528:	08016cb4 	.word	0x08016cb4
 800552c:	08016d1c 	.word	0x08016d1c
 8005530:	08016d84 	.word	0x08016d84
 8005534:	08016dec 	.word	0x08016dec
 8005538:	08016e54 	.word	0x08016e54

0800553c <show_banner_pee>:

static void show_banner_pee(void)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	af00      	add	r7, sp, #0
	printf (LINE_TERM "8 888888888o   8 8888888888   8 8888888888       ");
 8005540:	480f      	ldr	r0, [pc, #60]	@ (8005580 <show_banner_pee+0x44>)
 8005542:	f00e ff09 	bl	8014358 <iprintf>
	printf (LINE_TERM "8 8888    `88. 8 8888         8 8888             ");
 8005546:	480f      	ldr	r0, [pc, #60]	@ (8005584 <show_banner_pee+0x48>)
 8005548:	f00e ff06 	bl	8014358 <iprintf>
	printf (LINE_TERM "8 8888     `88 8 8888         8 8888             ");
 800554c:	480e      	ldr	r0, [pc, #56]	@ (8005588 <show_banner_pee+0x4c>)
 800554e:	f00e ff03 	bl	8014358 <iprintf>
	printf (LINE_TERM "8 8888     ,88 8 8888         8 8888             ");
 8005552:	480e      	ldr	r0, [pc, #56]	@ (800558c <show_banner_pee+0x50>)
 8005554:	f00e ff00 	bl	8014358 <iprintf>
	printf (LINE_TERM "8 8888.   ,88' 8 888888888888 8 888888888888     ");
 8005558:	480d      	ldr	r0, [pc, #52]	@ (8005590 <show_banner_pee+0x54>)
 800555a:	f00e fefd 	bl	8014358 <iprintf>
	printf (LINE_TERM "8 888888888P'  8 8888         8 8888             ");
 800555e:	480d      	ldr	r0, [pc, #52]	@ (8005594 <show_banner_pee+0x58>)
 8005560:	f00e fefa 	bl	8014358 <iprintf>
	printf (LINE_TERM "8 8888         8 8888         8 8888             ");
 8005564:	480c      	ldr	r0, [pc, #48]	@ (8005598 <show_banner_pee+0x5c>)
 8005566:	f00e fef7 	bl	8014358 <iprintf>
	printf (LINE_TERM "8 8888         8 8888         8 8888             ");
 800556a:	480b      	ldr	r0, [pc, #44]	@ (8005598 <show_banner_pee+0x5c>)
 800556c:	f00e fef4 	bl	8014358 <iprintf>
	printf (LINE_TERM "8 8888         8 8888         8 8888             ");
 8005570:	4809      	ldr	r0, [pc, #36]	@ (8005598 <show_banner_pee+0x5c>)
 8005572:	f00e fef1 	bl	8014358 <iprintf>
	printf (LINE_TERM "8 8888         8 888888888888 8 888888888888     ");
 8005576:	4809      	ldr	r0, [pc, #36]	@ (800559c <show_banner_pee+0x60>)
 8005578:	f00e feee 	bl	8014358 <iprintf>
}
 800557c:	bf00      	nop
 800557e:	bd80      	pop	{r7, pc}
 8005580:	08016ebc 	.word	0x08016ebc
 8005584:	08016ef0 	.word	0x08016ef0
 8005588:	08016f24 	.word	0x08016f24
 800558c:	08016f58 	.word	0x08016f58
 8005590:	08016f8c 	.word	0x08016f8c
 8005594:	08016fc0 	.word	0x08016fc0
 8005598:	08016ff4 	.word	0x08016ff4
 800559c:	08017028 	.word	0x08017028

080055a0 <show_banner_shit>:

static void show_banner_shit(void)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	af00      	add	r7, sp, #0
	printf (LINE_TERM "   d888888o.   8 8888        8  8 8888 8888888 8888888888         ");
 80055a4:	480f      	ldr	r0, [pc, #60]	@ (80055e4 <show_banner_shit+0x44>)
 80055a6:	f00e fed7 	bl	8014358 <iprintf>
	printf (LINE_TERM " .`8888:' `88. 8 8888        8  8 8888       8 8888               ");
 80055aa:	480f      	ldr	r0, [pc, #60]	@ (80055e8 <show_banner_shit+0x48>)
 80055ac:	f00e fed4 	bl	8014358 <iprintf>
	printf (LINE_TERM " 8.`8888.   Y8 8 8888        8  8 8888       8 8888               ");
 80055b0:	480e      	ldr	r0, [pc, #56]	@ (80055ec <show_banner_shit+0x4c>)
 80055b2:	f00e fed1 	bl	8014358 <iprintf>
	printf (LINE_TERM " `8.`8888.     8 8888        8  8 8888       8 8888               ");
 80055b6:	480e      	ldr	r0, [pc, #56]	@ (80055f0 <show_banner_shit+0x50>)
 80055b8:	f00e fece 	bl	8014358 <iprintf>
	printf (LINE_TERM "  `8.`8888.    8 8888        8  8 8888       8 8888               ");
 80055bc:	480d      	ldr	r0, [pc, #52]	@ (80055f4 <show_banner_shit+0x54>)
 80055be:	f00e fecb 	bl	8014358 <iprintf>
	printf (LINE_TERM "   `8.`8888.   8 8888        8  8 8888       8 8888               ");
 80055c2:	480d      	ldr	r0, [pc, #52]	@ (80055f8 <show_banner_shit+0x58>)
 80055c4:	f00e fec8 	bl	8014358 <iprintf>
	printf (LINE_TERM "    `8.`8888.  8 8888888888888  8 8888       8 8888               ");
 80055c8:	480c      	ldr	r0, [pc, #48]	@ (80055fc <show_banner_shit+0x5c>)
 80055ca:	f00e fec5 	bl	8014358 <iprintf>
	printf (LINE_TERM "8b   `8.`8888. 8 8888        8  8 8888       8 8888               ");
 80055ce:	480c      	ldr	r0, [pc, #48]	@ (8005600 <show_banner_shit+0x60>)
 80055d0:	f00e fec2 	bl	8014358 <iprintf>
	printf (LINE_TERM "`8b.  ;8.`8888 8 8888        8  8 8888       8 8888               ");
 80055d4:	480b      	ldr	r0, [pc, #44]	@ (8005604 <show_banner_shit+0x64>)
 80055d6:	f00e febf 	bl	8014358 <iprintf>
	printf (LINE_TERM " `Y8888P ,88P' 8 8888        8  8 8888       8 8888               ");
 80055da:	480b      	ldr	r0, [pc, #44]	@ (8005608 <show_banner_shit+0x68>)
 80055dc:	f00e febc 	bl	8014358 <iprintf>
}
 80055e0:	bf00      	nop
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	0801705c 	.word	0x0801705c
 80055e8:	080170a4 	.word	0x080170a4
 80055ec:	080170ec 	.word	0x080170ec
 80055f0:	08017134 	.word	0x08017134
 80055f4:	0801717c 	.word	0x0801717c
 80055f8:	080171c4 	.word	0x080171c4
 80055fc:	0801720c 	.word	0x0801720c
 8005600:	08017254 	.word	0x08017254
 8005604:	0801729c 	.word	0x0801729c
 8005608:	080172e4 	.word	0x080172e4

0800560c <show_banner_ballet>:

static void show_banner_ballet(void)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	af00      	add	r7, sp, #0
	printf (LINE_TERM "                                  .,"); HAL_Delay(1);
 8005610:	4896      	ldr	r0, [pc, #600]	@ (800586c <show_banner_ballet+0x260>)
 8005612:	f00e fea1 	bl	8014358 <iprintf>
 8005616:	2001      	movs	r0, #1
 8005618:	f002 ff5e 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "                                  $."); HAL_Delay(1);
 800561c:	4894      	ldr	r0, [pc, #592]	@ (8005870 <show_banner_ballet+0x264>)
 800561e:	f00e fe9b 	bl	8014358 <iprintf>
 8005622:	2001      	movs	r0, #1
 8005624:	f002 ff58 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "                                  =*.                   .**;-          :**."); HAL_Delay(1);
 8005628:	4892      	ldr	r0, [pc, #584]	@ (8005874 <show_banner_ballet+0x268>)
 800562a:	f00e fe95 	bl	8014358 <iprintf>
 800562e:	2001      	movs	r0, #1
 8005630:	f002 ff52 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "                          :.:     =.                   ;=$::-         .:=$$=."); HAL_Delay(1);
 8005634:	4890      	ldr	r0, [pc, #576]	@ (8005878 <show_banner_ballet+0x26c>)
 8005636:	f00e fe8f 	bl	8014358 <iprintf>
 800563a:	2001      	movs	r0, #1
 800563c:	f002 ff4c 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "                          ~==:   ~*                   =* -!                *;"); HAL_Delay(1);
 8005640:	488e      	ldr	r0, [pc, #568]	@ (800587c <show_banner_ballet+0x270>)
 8005642:	f00e fe89 	bl	8014358 <iprintf>
 8005646:	2001      	movs	r0, #1
 8005648:	f002 ff46 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "                            *$  ~ =.                 !=:                   .="); HAL_Delay(1);
 800564c:	488c      	ldr	r0, [pc, #560]	@ (8005880 <show_banner_ballet+0x274>)
 800564e:	f00e fe83 	bl	8014358 <iprintf>
 8005652:	2001      	movs	r0, #1
 8005654:	f002 ff40 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "                             $ $==~=,               -=$                    .=~       *!"); HAL_Delay(1);
 8005658:	488a      	ldr	r0, [pc, #552]	@ (8005884 <show_banner_ballet+0x278>)
 800565a:	f00e fe7d 	bl	8014358 <iprintf>
 800565e:	2001      	movs	r0, #1
 8005660:	f002 ff3a 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "                            ,$ $=!-=;               ==,                    .=:      !==."); HAL_Delay(1);
 8005664:	4888      	ldr	r0, [pc, #544]	@ (8005888 <show_banner_ballet+0x27c>)
 8005666:	f00e fe77 	bl	8014358 <iprintf>
 800566a:	2001      	movs	r0, #1
 800566c:	f002 ff34 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "           ,                *=~===*!=;              =$,   ,**.              *=     -$=$."); HAL_Delay(1);
 8005670:	4886      	ldr	r0, [pc, #536]	@ (800588c <show_banner_ballet+0x280>)
 8005672:	f00e fe71 	bl	8014358 <iprintf>
 8005676:	2001      	movs	r0, #1
 8005678:	f002 ff2e 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "          ;=$.              *=$===$.$;              ==, -$===$              *=-    ====."); HAL_Delay(1);
 800567c:	4884      	ldr	r0, [pc, #528]	@ (8005890 <show_banner_ballet+0x284>)
 800567e:	f00e fe6b 	bl	8014358 <iprintf>
 8005682:	2001      	movs	r0, #1
 8005684:	f002 ff28 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "        *====.              *:-====.=;              *=, ======~             .==   ,====$"); HAL_Delay(1);
 8005688:	4882      	ldr	r0, [pc, #520]	@ (8005894 <show_banner_ballet+0x288>)
 800568a:	f00e fe65 	bl	8014358 <iprintf>
 800568e:	2001      	movs	r0, #1
 8005690:	f002 ff22 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "       !=====;,             *$ ====.=;              -=-.;=====,              ;=:  -===$."); HAL_Delay(1);
 8005694:	4880      	ldr	r0, [pc, #512]	@ (8005898 <show_banner_ballet+0x28c>)
 8005696:	f00e fe5f 	bl	8014358 <iprintf>
 800569a:	2001      	movs	r0, #1
 800569c:	f002 ff1c 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "       =======$,,,,,        ;=* *==.=;              -=$.-=**=-                ==- -==$;"); HAL_Delay(1);
 80056a0:	487e      	ldr	r0, [pc, #504]	@ (800589c <show_banner_ballet+0x290>)
 80056a2:	f00e fe59 	bl	8014358 <iprintf>
 80056a6:	2001      	movs	r0, #1
 80056a8:	f002 ff16 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "       $====.=======         $=! :=$=;              -=====-===                -== ==$"); HAL_Delay(1);
 80056ac:	487c      	ldr	r0, [pc, #496]	@ (80058a0 <show_banner_ballet+0x294>)
 80056ae:	f00e fe53 	bl	8014358 <iprintf>
 80056b2:	2001      	movs	r0, #1
 80056b4:	f002 ff10 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "       .$==;=========        ,==$====;               =====-:=-                 $===="); HAL_Delay(1);
 80056b8:	487a      	ldr	r0, [pc, #488]	@ (80058a4 <show_banner_ballet+0x298>)
 80056ba:	f00e fe4d 	bl	8014358 <iprintf>
 80056be:	2001      	movs	r0, #1
 80056c0:	f002 ff0a 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "        :$;==========;        ;=======~             ;=====$~                   =====;-"); HAL_Delay(1);
 80056c4:	4878      	ldr	r0, [pc, #480]	@ (80058a8 <show_banner_ballet+0x29c>)
 80056c6:	f00e fe47 	bl	8014358 <iprintf>
 80056ca:	2001      	movs	r0, #1
 80056cc:	f002 ff04 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "        =$==*=!=======.        *======*            ;========:                 -=======-"); HAL_Delay(1);
 80056d0:	4876      	ldr	r0, [pc, #472]	@ (80058ac <show_banner_ballet+0x2a0>)
 80056d2:	f00e fe41 	bl	8014358 <iprintf>
 80056d6:	2001      	movs	r0, #1
 80056d8:	f002 fefe 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "       ;===$=:. $=====;         !$=====            :=========.                ;====$$==$"); HAL_Delay(1);
 80056dc:	4874      	ldr	r0, [pc, #464]	@ (80058b0 <show_banner_ballet+0x2a4>)
 80056de:	f00e fe3b 	bl	8014358 <iprintf>
 80056e2:	2001      	movs	r0, #1
 80056e4:	f002 fef8 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "     ,==*==-  !;;*;===;          ~====*            .======.;=$-               -=====.:=$*"); HAL_Delay(1);
 80056e8:	4872      	ldr	r0, [pc, #456]	@ (80058b4 <show_banner_ballet+0x2a8>)
 80056ea:	f00e fe35 	bl	8014358 <iprintf>
 80056ee:	2001      	movs	r0, #1
 80056f0:	f002 fef2 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "    ,==$;  ~*=========;           !===*            -=====   ;==.              ,===$:  .:$*~"); HAL_Delay(1);
 80056f4:	4870      	ldr	r0, [pc, #448]	@ (80058b8 <show_banner_ballet+0x2ac>)
 80056f6:	f00e fe2f 	bl	8014358 <iprintf>
 80056fa:	2001      	movs	r0, #1
 80056fc:	f002 feec 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "   .=*-~$.  ==========;      .~$=======            ;===$.,.  !=!,              ===$     ;*$=-."); HAL_Delay(1);
 8005700:	486e      	ldr	r0, [pc, #440]	@ (80058bc <show_banner_ballet+0x2b0>)
 8005702:	f00e fe29 	bl	8014358 <iprintf>
 8005706:	2001      	movs	r0, #1
 8005708:	f002 fee6 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "   =~  $~.   .========;     .===========           ~========*=!=$=            ,$====*=,   ,===-"); HAL_Delay(1);
 800570c:	486c      	ldr	r0, [pc, #432]	@ (80058c0 <show_banner_ballet+0x2b4>)
 800570e:	f00e fe23 	bl	8014358 <iprintf>
 8005712:	2001      	movs	r0, #1
 8005714:	f002 fee0 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "  :=~  =.    ~========$;   ;============$~        ;*==========~.~:$;:      .;$==========!~  ,-$!"); HAL_Delay(1);
 8005718:	486a      	ldr	r0, [pc, #424]	@ (80058c4 <show_banner_ballet+0x2b8>)
 800571a:	f00e fe1d 	bl	8014358 <iprintf>
 800571e:	2001      	movs	r0, #1
 8005720:	f002 feda 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "  *!!  **     ;=========. -;==============$.    .;============~    ,;;!~  ,================    !!"); HAL_Delay(1);
 8005724:	4868      	ldr	r0, [pc, #416]	@ (80058c8 <show_banner_ballet+0x2bc>)
 8005726:	f00e fe17 	bl	8014358 <iprintf>
 800572a:	2001      	movs	r0, #1
 800572c:	f002 fed4 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "  *~.  ,;     :=========$    ~=============,    :=============         ;. $===============*    !~"); HAL_Delay(1);
 8005730:	4866      	ldr	r0, [pc, #408]	@ (80058cc <show_banner_ballet+0x2c0>)
 8005732:	f00e fe11 	bl	8014358 <iprintf>
 8005736:	2001      	movs	r0, #1
 8005738:	f002 fece 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "  *=            .========~   ..============    .===========$$.           ;=================    . !"); HAL_Delay(1);
 800573c:	4864      	ldr	r0, [pc, #400]	@ (80058d0 <show_banner_ballet+0x2c4>)
 800573e:	f00e fe0b 	bl	8014358 <iprintf>
 8005742:	2001      	movs	r0, #1
 8005744:	f002 fec8 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "  -,             ========:     $=========-~    !=$=========!~           ;$==============;-       -"); HAL_Delay(1);
 8005748:	4862      	ldr	r0, [pc, #392]	@ (80058d4 <show_banner_ballet+0x2c8>)
 800574a:	f00e fe05 	bl	8014358 <iprintf>
 800574e:	2001      	movs	r0, #1
 8005750:	f002 fec2 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "                $=========     .====$==~;      =*!======= :             ,-,.*==========;!    "); HAL_Delay(1);
 8005754:	4860      	ldr	r0, [pc, #384]	@ (80058d8 <show_banner_ballet+0x2cc>)
 8005756:	f00e fdff 	bl	8014358 <iprintf>
 800575a:	2001      	movs	r0, #1
 800575c:	f002 febc 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "               .====$====-      ====$=.             $===$                     ===$====:"); HAL_Delay(1);
 8005760:	485e      	ldr	r0, [pc, #376]	@ (80058dc <show_banner_ballet+0x2d0>)
 8005762:	f00e fdf9 	bl	8014358 <iprintf>
 8005766:	2001      	movs	r0, #1
 8005768:	f002 feb6 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "               -===;,$:-,       !=====              ====!.                     $=====;"); HAL_Delay(1);
 800576c:	485c      	ldr	r0, [pc, #368]	@ (80058e0 <show_banner_ballet+0x2d4>)
 800576e:	f00e fdf3 	bl	8014358 <iprintf>
 8005772:	2001      	movs	r0, #1
 8005774:	f002 feb0 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "               ~==*~            !==$**              ===!=,                     -=$==="); HAL_Delay(1);
 8005778:	485a      	ldr	r0, [pc, #360]	@ (80058e4 <show_banner_ballet+0x2d8>)
 800577a:	f00e fded 	bl	8014358 <iprintf>
 800577e:	2001      	movs	r0, #1
 8005780:	f002 feaa 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "               $==!              ===;;              ===*=:                      =$==*"); HAL_Delay(1);
 8005784:	4858      	ldr	r0, [pc, #352]	@ (80058e8 <show_banner_ballet+0x2dc>)
 8005786:	f00e fde7 	bl	8014358 <iprintf>
 800578a:	2001      	movs	r0, #1
 800578c:	f002 fea4 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "               ==$~              ===;               ======                      !$==-"); HAL_Delay(1);
 8005790:	4856      	ldr	r0, [pc, #344]	@ (80058ec <show_banner_ballet+0x2e0>)
 8005792:	f00e fde1 	bl	8014358 <iprintf>
 8005796:	2001      	movs	r0, #1
 8005798:	f002 fe9e 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "              :===               :$=,               ==,:==-                     ,==="); HAL_Delay(1);
 800579c:	4854      	ldr	r0, [pc, #336]	@ (80058f0 <show_banner_ballet+0x2e4>)
 800579e:	f00e fddb 	bl	8014358 <iprintf>
 80057a2:	2001      	movs	r0, #1
 80057a4:	f002 fe98 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "             :*=~.               ,==-              ~==, ;=$                      ==!"); HAL_Delay(1);
 80057a8:	4852      	ldr	r0, [pc, #328]	@ (80058f4 <show_banner_ballet+0x2e8>)
 80057aa:	f00e fdd5 	bl	8014358 <iprintf>
 80057ae:	2001      	movs	r0, #1
 80057b0:	f002 fe92 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "            ~$=*!                :==~              ;==  ,==!                     !=!"); HAL_Delay(1);
 80057b4:	4850      	ldr	r0, [pc, #320]	@ (80058f8 <show_banner_ballet+0x2ec>)
 80057b6:	f00e fdcf 	bl	8014358 <iprintf>
 80057ba:	2001      	movs	r0, #1
 80057bc:	f002 fe8c 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "           ~$==!                 $$=~              ===   $==                     =$$"); HAL_Delay(1);
 80057c0:	484e      	ldr	r0, [pc, #312]	@ (80058fc <show_banner_ballet+0x2f0>)
 80057c2:	f00e fdc9 	bl	8014358 <iprintf>
 80057c6:	2001      	movs	r0, #1
 80057c8:	f002 fe86 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "           ===*,                .=$=*             ~==,    ==*                    =$=-"); HAL_Delay(1);
 80057cc:	484c      	ldr	r0, [pc, #304]	@ (8005900 <show_banner_ballet+0x2f4>)
 80057ce:	f00e fdc3 	bl	8014358 <iprintf>
 80057d2:	2001      	movs	r0, #1
 80057d4:	f002 fe80 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "           ==$;                 !$;=$             *=*     ;=*                   ,===*"); HAL_Delay(1);
 80057d8:	484a      	ldr	r0, [pc, #296]	@ (8005904 <show_banner_ballet+0x2f8>)
 80057da:	f00e fdbd 	bl	8014358 <iprintf>
 80057de:	2001      	movs	r0, #1
 80057e0:	f002 fe7a 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "           ==$,                 !====            .==.      $=.                  *=*=$"); HAL_Delay(1);
 80057e4:	4848      	ldr	r0, [pc, #288]	@ (8005908 <show_banner_ballet+0x2fc>)
 80057e6:	f00e fdb7 	bl	8014358 <iprintf>
 80057ea:	2001      	movs	r0, #1
 80057ec:	f002 fe74 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "          ;===                  !=*==.           .=~       ~$.                  !$,=="); HAL_Delay(1);
 80057f0:	4846      	ldr	r0, [pc, #280]	@ (800590c <show_banner_ballet+0x300>)
 80057f2:	f00e fdb1 	bl	8014358 <iprintf>
 80057f6:	2001      	movs	r0, #1
 80057f8:	f002 fe6e 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "          !=-,                  != ,=;           =!        ,=.                  !; =="); HAL_Delay(1);
 80057fc:	4844      	ldr	r0, [pc, #272]	@ (8005910 <show_banner_ballet+0x304>)
 80057fe:	f00e fdab 	bl	8014358 <iprintf>
 8005802:	2001      	movs	r0, #1
 8005804:	f002 fe68 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "          !==                   !=  *;          ~=.         =~                  $: =="); HAL_Delay(1);
 8005808:	4842      	ldr	r0, [pc, #264]	@ (8005914 <show_banner_ballet+0x308>)
 800580a:	f00e fda5 	bl	8014358 <iprintf>
 800580e:	2001      	movs	r0, #1
 8005810:	f002 fe62 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "          !!=                   !$  ;*          $*          $$-                 =  =="); HAL_Delay(1);
 8005814:	4840      	ldr	r0, [pc, #256]	@ (8005918 <show_banner_ballet+0x30c>)
 8005816:	f00e fd9f 	bl	8014358 <iprintf>
 800581a:	2001      	movs	r0, #1
 800581c:	f002 fe5c 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "          ;$=                   ==  ;=          =*          :==                ;=  -=:"); HAL_Delay(1);
 8005820:	483e      	ldr	r0, [pc, #248]	@ (800591c <show_banner_ballet+0x310>)
 8005822:	f00e fd99 	bl	8014358 <iprintf>
 8005826:	2001      	movs	r0, #1
 8005828:	f002 fe56 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "         ==**                  $=;  ;=         ;=*          ,==                ==   $;"); HAL_Delay(1);
 800582c:	483c      	ldr	r0, [pc, #240]	@ (8005920 <show_banner_ballet+0x314>)
 800582e:	f00e fd93 	bl	8014358 <iprintf>
 8005832:	2001      	movs	r0, #1
 8005834:	f002 fe50 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "         :=$                    =:  ;==        !=*          ,=~                $=   ="); HAL_Delay(1);
 8005838:	483a      	ldr	r0, [pc, #232]	@ (8005924 <show_banner_ballet+0x318>)
 800583a:	f00e fd8d 	bl	8014358 <iprintf>
 800583e:	2001      	movs	r0, #1
 8005840:	f002 fe4a 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "         .==                    !:  ;==        !=*          .=~                $=   ="); HAL_Delay(1);
 8005844:	4838      	ldr	r0, [pc, #224]	@ (8005928 <show_banner_ballet+0x31c>)
 8005846:	f00e fd87 	bl	8014358 <iprintf>
 800584a:	2001      	movs	r0, #1
 800584c:	f002 fe44 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "         =$;                    !:  ;==        ;=*           =~                ==   $"); HAL_Delay(1);
 8005850:	4836      	ldr	r0, [pc, #216]	@ (800592c <show_banner_ballet+0x320>)
 8005852:	f00e fd81 	bl	8014358 <iprintf>
 8005856:	2001      	movs	r0, #1
 8005858:	f002 fe3e 	bl	80084d8 <HAL_Delay>
	printf (LINE_TERM "        .=~                     ~~   ;-        ,=-           -:"); HAL_Delay(1);
 800585c:	4834      	ldr	r0, [pc, #208]	@ (8005930 <show_banner_ballet+0x324>)
 800585e:	f00e fd7b 	bl	8014358 <iprintf>
 8005862:	2001      	movs	r0, #1
 8005864:	f002 fe38 	bl	80084d8 <HAL_Delay>
}
 8005868:	bf00      	nop
 800586a:	bd80      	pop	{r7, pc}
 800586c:	0801732c 	.word	0x0801732c
 8005870:	08017354 	.word	0x08017354
 8005874:	0801737c 	.word	0x0801737c
 8005878:	080173cc 	.word	0x080173cc
 800587c:	0801741c 	.word	0x0801741c
 8005880:	0801746c 	.word	0x0801746c
 8005884:	080174bc 	.word	0x080174bc
 8005888:	08017518 	.word	0x08017518
 800588c:	08017574 	.word	0x08017574
 8005890:	080175d0 	.word	0x080175d0
 8005894:	0801762c 	.word	0x0801762c
 8005898:	08017688 	.word	0x08017688
 800589c:	080176e4 	.word	0x080176e4
 80058a0:	08017740 	.word	0x08017740
 80058a4:	08017798 	.word	0x08017798
 80058a8:	080177f0 	.word	0x080177f0
 80058ac:	0801784c 	.word	0x0801784c
 80058b0:	080178a8 	.word	0x080178a8
 80058b4:	08017904 	.word	0x08017904
 80058b8:	08017960 	.word	0x08017960
 80058bc:	080179c0 	.word	0x080179c0
 80058c0:	08017a24 	.word	0x08017a24
 80058c4:	08017a88 	.word	0x08017a88
 80058c8:	08017aec 	.word	0x08017aec
 80058cc:	08017b50 	.word	0x08017b50
 80058d0:	08017bb4 	.word	0x08017bb4
 80058d4:	08017c1c 	.word	0x08017c1c
 80058d8:	08017c84 	.word	0x08017c84
 80058dc:	08017ce4 	.word	0x08017ce4
 80058e0:	08017d40 	.word	0x08017d40
 80058e4:	08017d9c 	.word	0x08017d9c
 80058e8:	08017df4 	.word	0x08017df4
 80058ec:	08017e4c 	.word	0x08017e4c
 80058f0:	08017ea4 	.word	0x08017ea4
 80058f4:	08017efc 	.word	0x08017efc
 80058f8:	08017f54 	.word	0x08017f54
 80058fc:	08017fac 	.word	0x08017fac
 8005900:	08018004 	.word	0x08018004
 8005904:	0801805c 	.word	0x0801805c
 8005908:	080180b4 	.word	0x080180b4
 800590c:	0801810c 	.word	0x0801810c
 8005910:	08018164 	.word	0x08018164
 8005914:	080181bc 	.word	0x080181bc
 8005918:	08018214 	.word	0x08018214
 800591c:	0801826c 	.word	0x0801826c
 8005920:	080182c8 	.word	0x080182c8
 8005924:	08018324 	.word	0x08018324
 8005928:	0801837c 	.word	0x0801837c
 800592c:	080183d4 	.word	0x080183d4
 8005930:	0801842c 	.word	0x0801842c

08005934 <Greeting>:

void Greeting(void)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	af00      	add	r7, sp, #0
	printf (RTT_COLOR_CODE_BOLD_CYAN);
 8005938:	481e      	ldr	r0, [pc, #120]	@ (80059b4 <Greeting+0x80>)
 800593a:	f00e fd0d 	bl	8014358 <iprintf>
	switch (scw_banner) {
 800593e:	4b1e      	ldr	r3, [pc, #120]	@ (80059b8 <Greeting+0x84>)
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	2b05      	cmp	r3, #5
 8005944:	d820      	bhi.n	8005988 <Greeting+0x54>
 8005946:	a201      	add	r2, pc, #4	@ (adr r2, 800594c <Greeting+0x18>)
 8005948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800594c:	08005965 	.word	0x08005965
 8005950:	0800596b 	.word	0x0800596b
 8005954:	08005971 	.word	0x08005971
 8005958:	08005977 	.word	0x08005977
 800595c:	0800597d 	.word	0x0800597d
 8005960:	08005983 	.word	0x08005983
	case BANNER_DSN :		show_banner_dsn(); break;
 8005964:	f7ff fd4c 	bl	8005400 <show_banner_dsn>
 8005968:	e00f      	b.n	800598a <Greeting+0x56>
	case BANNER_ECELL :		show_banner_ecell(); break;
 800596a:	f7ff fd7f 	bl	800546c <show_banner_ecell>
 800596e:	e00c      	b.n	800598a <Greeting+0x56>
	case BANNER_SMART :		show_banner_smart(); break;
 8005970:	f7ff fdae 	bl	80054d0 <show_banner_smart>
 8005974:	e009      	b.n	800598a <Greeting+0x56>
	case BANNER_PEE :		show_banner_pee(); break;
 8005976:	f7ff fde1 	bl	800553c <show_banner_pee>
 800597a:	e006      	b.n	800598a <Greeting+0x56>
	case BANNER_SHIT :		show_banner_shit(); break;
 800597c:	f7ff fe10 	bl	80055a0 <show_banner_shit>
 8005980:	e003      	b.n	800598a <Greeting+0x56>
	case BANNER_BALLET :	show_banner_ballet(); break;
 8005982:	f7ff fe43 	bl	800560c <show_banner_ballet>
 8005986:	e000      	b.n	800598a <Greeting+0x56>
	default : break;
 8005988:	bf00      	nop
	}

	printf (RTT_COLOR_CODE_DEFAULT);
 800598a:	480c      	ldr	r0, [pc, #48]	@ (80059bc <Greeting+0x88>)
 800598c:	f00e fce4 	bl	8014358 <iprintf>
	printf (LINE_TERM);
 8005990:	480b      	ldr	r0, [pc, #44]	@ (80059c0 <Greeting+0x8c>)
 8005992:	f00e fd49 	bl	8014428 <puts>
	printf (LINE_TERM "Have a GoooooooooooooooooooooD day !!"LINE_TERM);
 8005996:	480b      	ldr	r0, [pc, #44]	@ (80059c4 <Greeting+0x90>)
 8005998:	f00e fd46 	bl	8014428 <puts>
	printf (RTT_COLOR_CODE_DEFAULT);
 800599c:	4807      	ldr	r0, [pc, #28]	@ (80059bc <Greeting+0x88>)
 800599e:	f00e fcdb 	bl	8014358 <iprintf>
	printf (RTT_COLOR_LIGHT_WHITE);
 80059a2:	4809      	ldr	r0, [pc, #36]	@ (80059c8 <Greeting+0x94>)
 80059a4:	f00e fcd8 	bl	8014358 <iprintf>
	printf (LINE_TERM);
 80059a8:	4805      	ldr	r0, [pc, #20]	@ (80059c0 <Greeting+0x8c>)
 80059aa:	f00e fd3d 	bl	8014428 <puts>

	return;
 80059ae:	bf00      	nop
}
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	08018470 	.word	0x08018470
 80059b8:	20001144 	.word	0x20001144
 80059bc:	08018478 	.word	0x08018478
 80059c0:	08018480 	.word	0x08018480
 80059c4:	08018484 	.word	0x08018484
 80059c8:	080184b0 	.word	0x080184b0

080059cc <sensor_msg_handler_default>:
#include "main.h"

extern sensor_msg_func sensor_msg_handler_tbl[SENSOR_MSG_END];

static bool sensor_msg_handler_default(sensor_msg_t *pq_msg)
{
 80059cc:	b5b0      	push	{r4, r5, r7, lr}
 80059ce:	b09c      	sub	sp, #112	@ 0x70
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
	char sensor_msg[100];

	switch (pq_msg->head.type) {
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	2b05      	cmp	r3, #5
 80059da:	d01c      	beq.n	8005a16 <sensor_msg_handler_default+0x4a>
 80059dc:	2b05      	cmp	r3, #5
 80059de:	dc26      	bgt.n	8005a2e <sensor_msg_handler_default+0x62>
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d002      	beq.n	80059ea <sensor_msg_handler_default+0x1e>
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d009      	beq.n	80059fc <sensor_msg_handler_default+0x30>
 80059e8:	e021      	b.n	8005a2e <sensor_msg_handler_default+0x62>
	case SENSOR_MSG_BASE : strcpy (sensor_msg, "SENSOR_MSG_BASE"); break;
 80059ea:	f107 030c 	add.w	r3, r7, #12
 80059ee:	4a1a      	ldr	r2, [pc, #104]	@ (8005a58 <sensor_msg_handler_default+0x8c>)
 80059f0:	461c      	mov	r4, r3
 80059f2:	4613      	mov	r3, r2
 80059f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80059f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80059fa:	e021      	b.n	8005a40 <sensor_msg_handler_default+0x74>
	case SENSOR_MSG_DOOR_CHECK : strcpy (sensor_msg, "SENSOR_MSG_DOOR_CHECK"); break;
 80059fc:	f107 030c 	add.w	r3, r7, #12
 8005a00:	4a16      	ldr	r2, [pc, #88]	@ (8005a5c <sensor_msg_handler_default+0x90>)
 8005a02:	461c      	mov	r4, r3
 8005a04:	4615      	mov	r5, r2
 8005a06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a0a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005a0e:	6020      	str	r0, [r4, #0]
 8005a10:	3404      	adds	r4, #4
 8005a12:	8021      	strh	r1, [r4, #0]
 8005a14:	e014      	b.n	8005a40 <sensor_msg_handler_default+0x74>
	case SENSOR_MSG_END : strcpy (sensor_msg, "SENSOR_MSG_END"); break;
 8005a16:	f107 030c 	add.w	r3, r7, #12
 8005a1a:	4a11      	ldr	r2, [pc, #68]	@ (8005a60 <sensor_msg_handler_default+0x94>)
 8005a1c:	461c      	mov	r4, r3
 8005a1e:	4613      	mov	r3, r2
 8005a20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005a22:	c407      	stmia	r4!, {r0, r1, r2}
 8005a24:	8023      	strh	r3, [r4, #0]
 8005a26:	3402      	adds	r4, #2
 8005a28:	0c1b      	lsrs	r3, r3, #16
 8005a2a:	7023      	strb	r3, [r4, #0]
 8005a2c:	e008      	b.n	8005a40 <sensor_msg_handler_default+0x74>
	default : strcpy (sensor_msg, "UNKNOWN type"); break;
 8005a2e:	f107 030c 	add.w	r3, r7, #12
 8005a32:	4a0c      	ldr	r2, [pc, #48]	@ (8005a64 <sensor_msg_handler_default+0x98>)
 8005a34:	461c      	mov	r4, r3
 8005a36:	4613      	mov	r3, r2
 8005a38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005a3a:	c407      	stmia	r4!, {r0, r1, r2}
 8005a3c:	7023      	strb	r3, [r4, #0]
 8005a3e:	bf00      	nop
	}

	printf("%s() : sensor_msg_type = %s"LINE_TERM, __FUNCTION__, sensor_msg);
 8005a40:	f107 030c 	add.w	r3, r7, #12
 8005a44:	461a      	mov	r2, r3
 8005a46:	4908      	ldr	r1, [pc, #32]	@ (8005a68 <sensor_msg_handler_default+0x9c>)
 8005a48:	4808      	ldr	r0, [pc, #32]	@ (8005a6c <sensor_msg_handler_default+0xa0>)
 8005a4a:	f00e fc85 	bl	8014358 <iprintf>

	return true;
 8005a4e:	2301      	movs	r3, #1
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3770      	adds	r7, #112	@ 0x70
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bdb0      	pop	{r4, r5, r7, pc}
 8005a58:	080184b8 	.word	0x080184b8
 8005a5c:	080184c8 	.word	0x080184c8
 8005a60:	080184e0 	.word	0x080184e0
 8005a64:	080184f0 	.word	0x080184f0
 8005a68:	08019d1c 	.word	0x08019d1c
 8005a6c:	08018500 	.word	0x08018500

08005a70 <get_door_1_status>:

scw_door_status_t get_door_1_status()
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
	scw_door_status_t Door1_state;
	Door1_state = (HAL_GPIO_ReadPin(DOOR_1_GPIO_Port, DOOR_1_Pin) == GPIO_PIN_SET)?SCW_DOOR_CLOSED:SCW_DOOR_OPEN;
 8005a76:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005a7a:	4807      	ldr	r0, [pc, #28]	@ (8005a98 <get_door_1_status+0x28>)
 8005a7c:	f004 fb4e 	bl	800a11c <HAL_GPIO_ReadPin>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	bf0c      	ite	eq
 8005a86:	2301      	moveq	r3, #1
 8005a88:	2300      	movne	r3, #0
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	71fb      	strb	r3, [r7, #7]
	return Door1_state;
 8005a8e:	79fb      	ldrb	r3, [r7, #7]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3708      	adds	r7, #8
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	40010800 	.word	0x40010800

08005a9c <get_door_2_status>:

scw_door_status_t get_door_2_status()
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
	scw_door_status_t Door2_state;
	Door2_state = (HAL_GPIO_ReadPin(DOOR_2_GPIO_Port, DOOR_2_Pin) == GPIO_PIN_SET)?SCW_DOOR_CLOSED:SCW_DOOR_OPEN;
 8005aa2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005aa6:	4807      	ldr	r0, [pc, #28]	@ (8005ac4 <get_door_2_status+0x28>)
 8005aa8:	f004 fb38 	bl	800a11c <HAL_GPIO_ReadPin>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	bf0c      	ite	eq
 8005ab2:	2301      	moveq	r3, #1
 8005ab4:	2300      	movne	r3, #0
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	71fb      	strb	r3, [r7, #7]
	return Door2_state;
 8005aba:	79fb      	ldrb	r3, [r7, #7]
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3708      	adds	r7, #8
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	40010800 	.word	0x40010800

08005ac8 <sensor_msg_handler_door_check>:

static bool sensor_msg_handler_door_check(sensor_msg_t *pq_msg)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
//
//	if (scw_infoObj.scw_door.door_2_status != get_door_2_status()) {
//		printf(" Door2_state -> %s"LINE_TERM, (get_door_2_status() == SCW_DOOR_OPEN)?"OPEN":"CLOSED");
//	}

	scw_infoObj.scw_door.door_1_status = get_door_1_status();
 8005ad0:	f7ff ffce 	bl	8005a70 <get_door_1_status>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	4b10      	ldr	r3, [pc, #64]	@ (8005b1c <sensor_msg_handler_door_check+0x54>)
 8005ada:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
	scw_infoObj.scw_door.door_2_status = get_door_2_status();
 8005ade:	f7ff ffdd 	bl	8005a9c <get_door_2_status>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8005b1c <sensor_msg_handler_door_check+0x54>)
 8005ae8:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f

	assert (osTimerStart(osTimerList[OS_TIMER_INDEX_DOOR_CHECK].osTimerId, osTimerList[OS_TIMER_INDEX_DOOR_CHECK].timeout_tick) == osOK);
 8005aec:	4b0c      	ldr	r3, [pc, #48]	@ (8005b20 <sensor_msg_handler_door_check+0x58>)
 8005aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005af2:	4a0b      	ldr	r2, [pc, #44]	@ (8005b20 <sensor_msg_handler_door_check+0x58>)
 8005af4:	f8d2 2090 	ldr.w	r2, [r2, #144]	@ 0x90
 8005af8:	4611      	mov	r1, r2
 8005afa:	4618      	mov	r0, r3
 8005afc:	f00a fa9c 	bl	8010038 <osTimerStart>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d005      	beq.n	8005b12 <sensor_msg_handler_door_check+0x4a>
 8005b06:	4b07      	ldr	r3, [pc, #28]	@ (8005b24 <sensor_msg_handler_door_check+0x5c>)
 8005b08:	4a07      	ldr	r2, [pc, #28]	@ (8005b28 <sensor_msg_handler_door_check+0x60>)
 8005b0a:	2153      	movs	r1, #83	@ 0x53
 8005b0c:	4807      	ldr	r0, [pc, #28]	@ (8005b2c <sensor_msg_handler_door_check+0x64>)
 8005b0e:	f00e fa03 	bl	8013f18 <__assert_func>

	return true;
 8005b12:	2301      	movs	r3, #1
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3708      	adds	r7, #8
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	20000b28 	.word	0x20000b28
 8005b20:	20000720 	.word	0x20000720
 8005b24:	08018520 	.word	0x08018520
 8005b28:	08019d38 	.word	0x08019d38
 8005b2c:	0801859c 	.word	0x0801859c

08005b30 <sensor_msg_handler_ht_check>:

static bool sensor_msg_handler_ht_check(sensor_msg_t *pq_msg)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
	UNUSED(pq_msg);

	scw_infoObj.SHT20_INFO.m_tempreture = SHT2x_GetTemperature(1);
 8005b38:	2001      	movs	r0, #1
 8005b3a:	f001 f8a5 	bl	8006c88 <SHT2x_GetTemperature>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	4a10      	ldr	r2, [pc, #64]	@ (8005b84 <sensor_msg_handler_ht_check+0x54>)
 8005b42:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
	scw_infoObj.SHT20_INFO.m_humidity = SHT2x_GetRelativeHumidity(1);
 8005b46:	2001      	movs	r0, #1
 8005b48:	f001 f8e0 	bl	8006d0c <SHT2x_GetRelativeHumidity>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	4a0d      	ldr	r2, [pc, #52]	@ (8005b84 <sensor_msg_handler_ht_check+0x54>)
 8005b50:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
			SHT2x_GetInteger(cel), SHT2x_GetDecimal(cel, 1),
			SHT2x_GetInteger(fah), SHT2x_GetDecimal(fah, 1),
			SHT2x_GetInteger(kel), SHT2x_GetDecimal(kel, 1),
			SHT2x_GetInteger(rh), SHT2x_GetDecimal(rh, 1));
#endif
	assert (osTimerStart(osTimerList[OS_TIMER_INDEX_HT_CHECK].osTimerId, osTimerList[OS_TIMER_INDEX_HT_CHECK].timeout_tick) == osOK);
 8005b54:	4b0c      	ldr	r3, [pc, #48]	@ (8005b88 <sensor_msg_handler_ht_check+0x58>)
 8005b56:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8005b5a:	4a0b      	ldr	r2, [pc, #44]	@ (8005b88 <sensor_msg_handler_ht_check+0x58>)
 8005b5c:	f8d2 20d4 	ldr.w	r2, [r2, #212]	@ 0xd4
 8005b60:	4611      	mov	r1, r2
 8005b62:	4618      	mov	r0, r3
 8005b64:	f00a fa68 	bl	8010038 <osTimerStart>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d005      	beq.n	8005b7a <sensor_msg_handler_ht_check+0x4a>
 8005b6e:	4b07      	ldr	r3, [pc, #28]	@ (8005b8c <sensor_msg_handler_ht_check+0x5c>)
 8005b70:	4a07      	ldr	r2, [pc, #28]	@ (8005b90 <sensor_msg_handler_ht_check+0x60>)
 8005b72:	216e      	movs	r1, #110	@ 0x6e
 8005b74:	4807      	ldr	r0, [pc, #28]	@ (8005b94 <sensor_msg_handler_ht_check+0x64>)
 8005b76:	f00e f9cf 	bl	8013f18 <__assert_func>

	return true;
 8005b7a:	2301      	movs	r3, #1
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3708      	adds	r7, #8
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	20000b28 	.word	0x20000b28
 8005b88:	20000720 	.word	0x20000720
 8005b8c:	080185bc 	.word	0x080185bc
 8005b90:	08019d58 	.word	0x08019d58
 8005b94:	0801859c 	.word	0x0801859c

08005b98 <sensor_msg_handler_adc_check>:

static bool sensor_msg_handler_adc_check(sensor_msg_t *pq_msg)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
	UNUSED(pq_msg);
	assert (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)aADCxConvertedData, ADC_CONVERTED_DATA_BUFFER_SIZE) == HAL_OK);
 8005ba0:	2204      	movs	r2, #4
 8005ba2:	4912      	ldr	r1, [pc, #72]	@ (8005bec <sensor_msg_handler_adc_check+0x54>)
 8005ba4:	4812      	ldr	r0, [pc, #72]	@ (8005bf0 <sensor_msg_handler_adc_check+0x58>)
 8005ba6:	f002 fda5 	bl	80086f4 <HAL_ADC_Start_DMA>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d005      	beq.n	8005bbc <sensor_msg_handler_adc_check+0x24>
 8005bb0:	4b10      	ldr	r3, [pc, #64]	@ (8005bf4 <sensor_msg_handler_adc_check+0x5c>)
 8005bb2:	4a11      	ldr	r2, [pc, #68]	@ (8005bf8 <sensor_msg_handler_adc_check+0x60>)
 8005bb4:	2176      	movs	r1, #118	@ 0x76
 8005bb6:	4811      	ldr	r0, [pc, #68]	@ (8005bfc <sensor_msg_handler_adc_check+0x64>)
 8005bb8:	f00e f9ae 	bl	8013f18 <__assert_func>
	assert (osTimerStart(osTimerList[OS_TIMER_INDEX_ADC_CHECK].osTimerId, osTimerList[OS_TIMER_INDEX_ADC_CHECK].timeout_tick) == osOK);
 8005bbc:	4b10      	ldr	r3, [pc, #64]	@ (8005c00 <sensor_msg_handler_adc_check+0x68>)
 8005bbe:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8005bc2:	4a0f      	ldr	r2, [pc, #60]	@ (8005c00 <sensor_msg_handler_adc_check+0x68>)
 8005bc4:	f8d2 2118 	ldr.w	r2, [r2, #280]	@ 0x118
 8005bc8:	4611      	mov	r1, r2
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f00a fa34 	bl	8010038 <osTimerStart>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d005      	beq.n	8005be2 <sensor_msg_handler_adc_check+0x4a>
 8005bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8005c04 <sensor_msg_handler_adc_check+0x6c>)
 8005bd8:	4a07      	ldr	r2, [pc, #28]	@ (8005bf8 <sensor_msg_handler_adc_check+0x60>)
 8005bda:	2177      	movs	r1, #119	@ 0x77
 8005bdc:	4807      	ldr	r0, [pc, #28]	@ (8005bfc <sensor_msg_handler_adc_check+0x64>)
 8005bde:	f00e f99b 	bl	8013f18 <__assert_func>

	return true;
 8005be2:	2301      	movs	r3, #1
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3708      	adds	r7, #8
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	20000708 	.word	0x20000708
 8005bf0:	20000694 	.word	0x20000694
 8005bf4:	08018634 	.word	0x08018634
 8005bf8:	08019d74 	.word	0x08019d74
 8005bfc:	0801859c 	.word	0x0801859c
 8005c00:	20000720 	.word	0x20000720
 8005c04:	08018698 	.word	0x08018698

08005c08 <sensor_msg_handler_info_display>:

static bool sensor_msg_handler_info_display(sensor_msg_t *pq_msg)
{
 8005c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c0c:	b09d      	sub	sp, #116	@ 0x74
 8005c0e:	af06      	add	r7, sp, #24
 8005c10:	6378      	str	r0, [r7, #52]	@ 0x34
	UNUSED(pq_msg);
	if (do_scw_info_display == true) {
 8005c12:	4bb4      	ldr	r3, [pc, #720]	@ (8005ee4 <sensor_msg_handler_info_display+0x2dc>)
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f000 815d 	beq.w	8005ed6 <sensor_msg_handler_info_display+0x2ce>
		printf (RTT_COLOR_CODE_CYAN);
 8005c1c:	48b2      	ldr	r0, [pc, #712]	@ (8005ee8 <sensor_msg_handler_info_display+0x2e0>)
 8005c1e:	f00e fb9b 	bl	8014358 <iprintf>
		printf (CUI_ESC_CLR);
 8005c22:	48b2      	ldr	r0, [pc, #712]	@ (8005eec <sensor_msg_handler_info_display+0x2e4>)
 8005c24:	f00e fb98 	bl	8014358 <iprintf>
		printf (CUI_ESC_CUR_HOME);
 8005c28:	48b1      	ldr	r0, [pc, #708]	@ (8005ef0 <sensor_msg_handler_info_display+0x2e8>)
 8005c2a:	f00e fb95 	bl	8014358 <iprintf>
		printf ("***************************************************"LINE_TERM);
 8005c2e:	48b1      	ldr	r0, [pc, #708]	@ (8005ef4 <sensor_msg_handler_info_display+0x2ec>)
 8005c30:	f00e fbfa 	bl	8014428 <puts>
		printf ("*                                                 *"LINE_TERM);
 8005c34:	48b0      	ldr	r0, [pc, #704]	@ (8005ef8 <sensor_msg_handler_info_display+0x2f0>)
 8005c36:	f00e fbf7 	bl	8014428 <puts>
		printf ("*             Smart Crosswalk Status              *"LINE_TERM);
 8005c3a:	48b0      	ldr	r0, [pc, #704]	@ (8005efc <sensor_msg_handler_info_display+0x2f4>)
 8005c3c:	f00e fbf4 	bl	8014428 <puts>
		printf ("*                                                 *"LINE_TERM);
 8005c40:	48ad      	ldr	r0, [pc, #692]	@ (8005ef8 <sensor_msg_handler_info_display+0x2f0>)
 8005c42:	f00e fbf1 	bl	8014428 <puts>
		printf ("***************************************************"LINE_TERM);
 8005c46:	48ab      	ldr	r0, [pc, #684]	@ (8005ef4 <sensor_msg_handler_info_display+0x2ec>)
 8005c48:	f00e fbee 	bl	8014428 <puts>
		printf (RTT_COLOR_CODE_DEFAULT);
 8005c4c:	48ac      	ldr	r0, [pc, #688]	@ (8005f00 <sensor_msg_handler_info_display+0x2f8>)
 8005c4e:	f00e fb83 	bl	8014358 <iprintf>

		printf("fw_version \t= %s"LINE_TERM, scw_infoObj.fw_version);
 8005c52:	49ac      	ldr	r1, [pc, #688]	@ (8005f04 <sensor_msg_handler_info_display+0x2fc>)
 8005c54:	48ac      	ldr	r0, [pc, #688]	@ (8005f08 <sensor_msg_handler_info_display+0x300>)
 8005c56:	f00e fb7f 	bl	8014358 <iprintf>

		if (scw_infoObj.implementer == 0x41) printf("implementer \t= Arm"LINE_TERM);
 8005c5a:	4baa      	ldr	r3, [pc, #680]	@ (8005f04 <sensor_msg_handler_info_display+0x2fc>)
 8005c5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c5e:	2b41      	cmp	r3, #65	@ 0x41
 8005c60:	d102      	bne.n	8005c68 <sensor_msg_handler_info_display+0x60>
 8005c62:	48aa      	ldr	r0, [pc, #680]	@ (8005f0c <sensor_msg_handler_info_display+0x304>)
 8005c64:	f00e fbe0 	bl	8014428 <puts>
		if (scw_infoObj.partno == 0xC24) printf("partno \t\t= Cortex-M4"LINE_TERM);
 8005c68:	4ba6      	ldr	r3, [pc, #664]	@ (8005f04 <sensor_msg_handler_info_display+0x2fc>)
 8005c6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c6c:	f640 4224 	movw	r2, #3108	@ 0xc24
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d102      	bne.n	8005c7a <sensor_msg_handler_info_display+0x72>
 8005c74:	48a6      	ldr	r0, [pc, #664]	@ (8005f10 <sensor_msg_handler_info_display+0x308>)
 8005c76:	f00e fbd7 	bl	8014428 <puts>

		printf ("uid0 \t\t= %#010"PRIx32 LINE_TERM, scw_infoObj.uid0);
 8005c7a:	4ba2      	ldr	r3, [pc, #648]	@ (8005f04 <sensor_msg_handler_info_display+0x2fc>)
 8005c7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c7e:	4619      	mov	r1, r3
 8005c80:	48a4      	ldr	r0, [pc, #656]	@ (8005f14 <sensor_msg_handler_info_display+0x30c>)
 8005c82:	f00e fb69 	bl	8014358 <iprintf>
		printf ("uid1 \t\t= %#010"PRIx32 LINE_TERM, scw_infoObj.uid1);
 8005c86:	4b9f      	ldr	r3, [pc, #636]	@ (8005f04 <sensor_msg_handler_info_display+0x2fc>)
 8005c88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	48a2      	ldr	r0, [pc, #648]	@ (8005f18 <sensor_msg_handler_info_display+0x310>)
 8005c8e:	f00e fb63 	bl	8014358 <iprintf>
		printf ("uid2 \t\t= %#010"PRIx32 LINE_TERM, scw_infoObj.uid2);
 8005c92:	4b9c      	ldr	r3, [pc, #624]	@ (8005f04 <sensor_msg_handler_info_display+0x2fc>)
 8005c94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c96:	4619      	mov	r1, r3
 8005c98:	48a0      	ldr	r0, [pc, #640]	@ (8005f1c <sensor_msg_handler_info_display+0x314>)
 8005c9a:	f00e fb5d 	bl	8014358 <iprintf>
		printf(LINE_TERM);
 8005c9e:	48a0      	ldr	r0, [pc, #640]	@ (8005f20 <sensor_msg_handler_info_display+0x318>)
 8005ca0:	f00e fbc2 	bl	8014428 <puts>

		printf("Time \t\t= %2d:%2d:%2d %s"LINE_TERM, \
				scw_infoObj.currentTime.Hours, scw_infoObj.currentTime.Minutes, scw_infoObj.currentTime.Seconds, (scw_infoObj.currentTime.Hours < 12)?"am":"pm");
 8005ca4:	4b97      	ldr	r3, [pc, #604]	@ (8005f04 <sensor_msg_handler_info_display+0x2fc>)
 8005ca6:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
		printf("Time \t\t= %2d:%2d:%2d %s"LINE_TERM, \
 8005caa:	4618      	mov	r0, r3
				scw_infoObj.currentTime.Hours, scw_infoObj.currentTime.Minutes, scw_infoObj.currentTime.Seconds, (scw_infoObj.currentTime.Hours < 12)?"am":"pm");
 8005cac:	4b95      	ldr	r3, [pc, #596]	@ (8005f04 <sensor_msg_handler_info_display+0x2fc>)
 8005cae:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
		printf("Time \t\t= %2d:%2d:%2d %s"LINE_TERM, \
 8005cb2:	4619      	mov	r1, r3
				scw_infoObj.currentTime.Hours, scw_infoObj.currentTime.Minutes, scw_infoObj.currentTime.Seconds, (scw_infoObj.currentTime.Hours < 12)?"am":"pm");
 8005cb4:	4b93      	ldr	r3, [pc, #588]	@ (8005f04 <sensor_msg_handler_info_display+0x2fc>)
 8005cb6:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
		printf("Time \t\t= %2d:%2d:%2d %s"LINE_TERM, \
 8005cba:	461a      	mov	r2, r3
				scw_infoObj.currentTime.Hours, scw_infoObj.currentTime.Minutes, scw_infoObj.currentTime.Seconds, (scw_infoObj.currentTime.Hours < 12)?"am":"pm");
 8005cbc:	4b91      	ldr	r3, [pc, #580]	@ (8005f04 <sensor_msg_handler_info_display+0x2fc>)
 8005cbe:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
		printf("Time \t\t= %2d:%2d:%2d %s"LINE_TERM, \
 8005cc2:	2b0b      	cmp	r3, #11
 8005cc4:	d801      	bhi.n	8005cca <sensor_msg_handler_info_display+0xc2>
 8005cc6:	4b97      	ldr	r3, [pc, #604]	@ (8005f24 <sensor_msg_handler_info_display+0x31c>)
 8005cc8:	e000      	b.n	8005ccc <sensor_msg_handler_info_display+0xc4>
 8005cca:	4b97      	ldr	r3, [pc, #604]	@ (8005f28 <sensor_msg_handler_info_display+0x320>)
 8005ccc:	9300      	str	r3, [sp, #0]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	460a      	mov	r2, r1
 8005cd2:	4601      	mov	r1, r0
 8005cd4:	4895      	ldr	r0, [pc, #596]	@ (8005f2c <sensor_msg_handler_info_display+0x324>)
 8005cd6:	f00e fb3f 	bl	8014358 <iprintf>

		printf(LINE_TERM);
 8005cda:	4891      	ldr	r0, [pc, #580]	@ (8005f20 <sensor_msg_handler_info_display+0x318>)
 8005cdc:	f00e fba4 	bl	8014428 <puts>
		printf("door_1 = %s"LINE_TERM, (scw_infoObj.scw_door.door_1_status == SCW_DOOR_OPEN)?"SCW_DOOR_OPEN  ":"SCW_DOOR_CLOSED");
 8005ce0:	4b88      	ldr	r3, [pc, #544]	@ (8005f04 <sensor_msg_handler_info_display+0x2fc>)
 8005ce2:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d101      	bne.n	8005cee <sensor_msg_handler_info_display+0xe6>
 8005cea:	4b91      	ldr	r3, [pc, #580]	@ (8005f30 <sensor_msg_handler_info_display+0x328>)
 8005cec:	e000      	b.n	8005cf0 <sensor_msg_handler_info_display+0xe8>
 8005cee:	4b91      	ldr	r3, [pc, #580]	@ (8005f34 <sensor_msg_handler_info_display+0x32c>)
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	4891      	ldr	r0, [pc, #580]	@ (8005f38 <sensor_msg_handler_info_display+0x330>)
 8005cf4:	f00e fb30 	bl	8014358 <iprintf>
		printf("door_2 = %s"LINE_TERM, (scw_infoObj.scw_door.door_2_status == SCW_DOOR_OPEN)?"SCW_DOOR_OPEN  ":"SCW_DOOR_CLOSED");
 8005cf8:	4b82      	ldr	r3, [pc, #520]	@ (8005f04 <sensor_msg_handler_info_display+0x2fc>)
 8005cfa:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d101      	bne.n	8005d06 <sensor_msg_handler_info_display+0xfe>
 8005d02:	4b8b      	ldr	r3, [pc, #556]	@ (8005f30 <sensor_msg_handler_info_display+0x328>)
 8005d04:	e000      	b.n	8005d08 <sensor_msg_handler_info_display+0x100>
 8005d06:	4b8b      	ldr	r3, [pc, #556]	@ (8005f34 <sensor_msg_handler_info_display+0x32c>)
 8005d08:	4619      	mov	r1, r3
 8005d0a:	488c      	ldr	r0, [pc, #560]	@ (8005f3c <sensor_msg_handler_info_display+0x334>)
 8005d0c:	f00e fb24 	bl	8014358 <iprintf>

		printf(LINE_TERM"Ondo/Humidity"LINE_TERM);
 8005d10:	488b      	ldr	r0, [pc, #556]	@ (8005f40 <sensor_msg_handler_info_display+0x338>)
 8005d12:	f00e fb89 	bl	8014428 <puts>
		/* Gets current temperature & relative humidity. */
		float cel = SHT2x_GetTemperature(1);
 8005d16:	2001      	movs	r0, #1
 8005d18:	f000 ffb6 	bl	8006c88 <SHT2x_GetTemperature>
 8005d1c:	6578      	str	r0, [r7, #84]	@ 0x54
		/* Converts temperature to degrees Fahrenheit and Kelvin */
		float fah = SHT2x_CelsiusToFahrenheit(cel);
 8005d1e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005d20:	f001 f85a 	bl	8006dd8 <SHT2x_CelsiusToFahrenheit>
 8005d24:	6538      	str	r0, [r7, #80]	@ 0x50
		float kel = SHT2x_CelsiusToKelvin(cel);
 8005d26:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005d28:	f001 f87c 	bl	8006e24 <SHT2x_CelsiusToKelvin>
 8005d2c:	64f8      	str	r0, [r7, #76]	@ 0x4c
		float rh = SHT2x_GetRelativeHumidity(1);
 8005d2e:	2001      	movs	r0, #1
 8005d30:	f000 ffec 	bl	8006d0c <SHT2x_GetRelativeHumidity>
 8005d34:	64b8      	str	r0, [r7, #72]	@ 0x48
		/* May show warning below. Ignore and proceed. */
		printf(	" Ondo = %ld.%ldºC, %ld.%ldºF, %ld.%ld K, Humidity = %ld.%ld%% RH"LINE_TERM,
 8005d36:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005d38:	f001 f884 	bl	8006e44 <SHT2x_GetInteger>
 8005d3c:	6338      	str	r0, [r7, #48]	@ 0x30
 8005d3e:	2101      	movs	r1, #1
 8005d40:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005d42:	f001 f88b 	bl	8006e5c <SHT2x_GetDecimal>
 8005d46:	4681      	mov	r9, r0
 8005d48:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8005d4a:	f001 f87b 	bl	8006e44 <SHT2x_GetInteger>
 8005d4e:	4680      	mov	r8, r0
 8005d50:	2101      	movs	r1, #1
 8005d52:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8005d54:	f001 f882 	bl	8006e5c <SHT2x_GetDecimal>
 8005d58:	6078      	str	r0, [r7, #4]
 8005d5a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005d5c:	f001 f872 	bl	8006e44 <SHT2x_GetInteger>
 8005d60:	4606      	mov	r6, r0
 8005d62:	2101      	movs	r1, #1
 8005d64:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005d66:	f001 f879 	bl	8006e5c <SHT2x_GetDecimal>
 8005d6a:	4605      	mov	r5, r0
 8005d6c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8005d6e:	f001 f869 	bl	8006e44 <SHT2x_GetInteger>
 8005d72:	4604      	mov	r4, r0
 8005d74:	2101      	movs	r1, #1
 8005d76:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8005d78:	f001 f870 	bl	8006e5c <SHT2x_GetDecimal>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	9304      	str	r3, [sp, #16]
 8005d80:	9403      	str	r4, [sp, #12]
 8005d82:	9502      	str	r5, [sp, #8]
 8005d84:	9601      	str	r6, [sp, #4]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	9300      	str	r3, [sp, #0]
 8005d8a:	4643      	mov	r3, r8
 8005d8c:	464a      	mov	r2, r9
 8005d8e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005d90:	486c      	ldr	r0, [pc, #432]	@ (8005f44 <sensor_msg_handler_info_display+0x33c>)
 8005d92:	f00e fae1 	bl	8014358 <iprintf>
				SHT2x_GetInteger(cel), SHT2x_GetDecimal(cel, 1),
				SHT2x_GetInteger(fah), SHT2x_GetDecimal(fah, 1),
				SHT2x_GetInteger(kel), SHT2x_GetDecimal(kel, 1),
				SHT2x_GetInteger(rh), SHT2x_GetDecimal(rh, 1));

		printf(LINE_TERM"ADC"LINE_TERM);
 8005d96:	486c      	ldr	r0, [pc, #432]	@ (8005f48 <sensor_msg_handler_info_display+0x340>)
 8005d98:	f00e fb46 	bl	8014428 <puts>
		printf(" AD1 = %d"LINE_TERM, scw_infoObj.scw_adc_value.AD1);
 8005d9c:	4b59      	ldr	r3, [pc, #356]	@ (8005f04 <sensor_msg_handler_info_display+0x2fc>)
 8005d9e:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	4619      	mov	r1, r3
 8005da6:	4869      	ldr	r0, [pc, #420]	@ (8005f4c <sensor_msg_handler_info_display+0x344>)
 8005da8:	f00e fad6 	bl	8014358 <iprintf>
		printf(" AD2 = %d"LINE_TERM, scw_infoObj.scw_adc_value.AD2);
 8005dac:	4b55      	ldr	r3, [pc, #340]	@ (8005f04 <sensor_msg_handler_info_display+0x2fc>)
 8005dae:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	4619      	mov	r1, r3
 8005db6:	4866      	ldr	r0, [pc, #408]	@ (8005f50 <sensor_msg_handler_info_display+0x348>)
 8005db8:	f00e face 	bl	8014358 <iprintf>
		printf(" AD3 = %d"LINE_TERM, scw_infoObj.scw_adc_value.AD3);
 8005dbc:	4b51      	ldr	r3, [pc, #324]	@ (8005f04 <sensor_msg_handler_info_display+0x2fc>)
 8005dbe:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	4863      	ldr	r0, [pc, #396]	@ (8005f54 <sensor_msg_handler_info_display+0x34c>)
 8005dc8:	f00e fac6 	bl	8014358 <iprintf>
		printf(" AD4 = %d"LINE_TERM, scw_infoObj.scw_adc_value.AD4);
 8005dcc:	4b4d      	ldr	r3, [pc, #308]	@ (8005f04 <sensor_msg_handler_info_display+0x2fc>)
 8005dce:	f8b3 3092 	ldrh.w	r3, [r3, #146]	@ 0x92
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	4860      	ldr	r0, [pc, #384]	@ (8005f58 <sensor_msg_handler_info_display+0x350>)
 8005dd8:	f00e fabe 	bl	8014358 <iprintf>

		{
			uint8_t day, hour, min, sec;
			uint64_t tmp;
			tmp = uptime_counter;
 8005ddc:	4b5f      	ldr	r3, [pc, #380]	@ (8005f5c <sensor_msg_handler_info_display+0x354>)
 8005dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de2:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

			day = tmp /DAY_TO_SEC;
 8005de6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8005dea:	4a5d      	ldr	r2, [pc, #372]	@ (8005f60 <sensor_msg_handler_info_display+0x358>)
 8005dec:	f04f 0300 	mov.w	r3, #0
 8005df0:	f7fb f856 	bl	8000ea0 <__aeabi_uldivmod>
 8005df4:	4602      	mov	r2, r0
 8005df6:	460b      	mov	r3, r1
 8005df8:	4613      	mov	r3, r2
 8005dfa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			tmp = tmp - (day*DAY_TO_SEC);
 8005dfe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005e02:	4a57      	ldr	r2, [pc, #348]	@ (8005f60 <sensor_msg_handler_info_display+0x358>)
 8005e04:	fb02 f303 	mul.w	r3, r2, r3
 8005e08:	17da      	asrs	r2, r3, #31
 8005e0a:	469a      	mov	sl, r3
 8005e0c:	4693      	mov	fp, r2
 8005e0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005e12:	ebb2 010a 	subs.w	r1, r2, sl
 8005e16:	61b9      	str	r1, [r7, #24]
 8005e18:	eb63 030b 	sbc.w	r3, r3, fp
 8005e1c:	61fb      	str	r3, [r7, #28]
 8005e1e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8005e22:	e9c7 3410 	strd	r3, r4, [r7, #64]	@ 0x40

			hour = tmp/HOUR_TO_SEC;
 8005e26:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8005e2a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8005e2e:	f04f 0300 	mov.w	r3, #0
 8005e32:	f7fb f835 	bl	8000ea0 <__aeabi_uldivmod>
 8005e36:	4602      	mov	r2, r0
 8005e38:	460b      	mov	r3, r1
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
			tmp = tmp - (hour*HOUR_TO_SEC);
 8005e40:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8005e44:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8005e48:	fb02 f303 	mul.w	r3, r2, r3
 8005e4c:	17da      	asrs	r2, r3, #31
 8005e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e50:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005e56:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005e5a:	4604      	mov	r4, r0
 8005e5c:	1b14      	subs	r4, r2, r4
 8005e5e:	613c      	str	r4, [r7, #16]
 8005e60:	eb63 0301 	sbc.w	r3, r3, r1
 8005e64:	617b      	str	r3, [r7, #20]
 8005e66:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005e6a:	e9c7 3410 	strd	r3, r4, [r7, #64]	@ 0x40

			min = tmp/MIN_TO_SEC;
 8005e6e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8005e72:	f04f 023c 	mov.w	r2, #60	@ 0x3c
 8005e76:	f04f 0300 	mov.w	r3, #0
 8005e7a:	f7fb f811 	bl	8000ea0 <__aeabi_uldivmod>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	460b      	mov	r3, r1
 8005e82:	4613      	mov	r3, r2
 8005e84:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
			tmp = tmp - (min*MIN_TO_SEC);
 8005e88:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	011b      	lsls	r3, r3, #4
 8005e90:	1a9b      	subs	r3, r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	17da      	asrs	r2, r3, #31
 8005e96:	623b      	str	r3, [r7, #32]
 8005e98:	627a      	str	r2, [r7, #36]	@ 0x24
 8005e9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005e9e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005ea2:	4604      	mov	r4, r0
 8005ea4:	1b14      	subs	r4, r2, r4
 8005ea6:	60bc      	str	r4, [r7, #8]
 8005ea8:	eb63 0301 	sbc.w	r3, r3, r1
 8005eac:	60fb      	str	r3, [r7, #12]
 8005eae:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005eb2:	e9c7 3410 	strd	r3, r4, [r7, #64]	@ 0x40

			sec = tmp;
 8005eb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005eb8:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
			printf(LINE_TERM"Uptime : %d days, %d hours, %d mins, %d sec"LINE_TERM, day, hour, min, sec);
 8005ebc:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 8005ec0:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8005ec4:	f897 003d 	ldrb.w	r0, [r7, #61]	@ 0x3d
 8005ec8:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8005ecc:	9300      	str	r3, [sp, #0]
 8005ece:	4603      	mov	r3, r0
 8005ed0:	4824      	ldr	r0, [pc, #144]	@ (8005f64 <sensor_msg_handler_info_display+0x35c>)
 8005ed2:	f00e fa41 	bl	8014358 <iprintf>
		}

	}

	return true;
 8005ed6:	2301      	movs	r3, #1
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	375c      	adds	r7, #92	@ 0x5c
 8005edc:	46bd      	mov	sp, r7
 8005ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ee2:	bf00      	nop
 8005ee4:	20000bbc 	.word	0x20000bbc
 8005ee8:	08018714 	.word	0x08018714
 8005eec:	0801871c 	.word	0x0801871c
 8005ef0:	08018724 	.word	0x08018724
 8005ef4:	08018728 	.word	0x08018728
 8005ef8:	08018760 	.word	0x08018760
 8005efc:	08018798 	.word	0x08018798
 8005f00:	080187d0 	.word	0x080187d0
 8005f04:	20000b28 	.word	0x20000b28
 8005f08:	080187d8 	.word	0x080187d8
 8005f0c:	080187ec 	.word	0x080187ec
 8005f10:	08018800 	.word	0x08018800
 8005f14:	08018818 	.word	0x08018818
 8005f18:	0801882c 	.word	0x0801882c
 8005f1c:	08018840 	.word	0x08018840
 8005f20:	08018854 	.word	0x08018854
 8005f24:	08018858 	.word	0x08018858
 8005f28:	0801885c 	.word	0x0801885c
 8005f2c:	08018860 	.word	0x08018860
 8005f30:	0801887c 	.word	0x0801887c
 8005f34:	0801888c 	.word	0x0801888c
 8005f38:	0801889c 	.word	0x0801889c
 8005f3c:	080188ac 	.word	0x080188ac
 8005f40:	080188bc 	.word	0x080188bc
 8005f44:	080188d0 	.word	0x080188d0
 8005f48:	08018918 	.word	0x08018918
 8005f4c:	08018920 	.word	0x08018920
 8005f50:	0801892c 	.word	0x0801892c
 8005f54:	08018938 	.word	0x08018938
 8005f58:	08018944 	.word	0x08018944
 8005f5c:	20000b20 	.word	0x20000b20
 8005f60:	00015180 	.word	0x00015180
 8005f64:	08018950 	.word	0x08018950

08005f68 <sensor_msg_handler_tbl_init>:

bool sensor_msg_handler_tbl_init()
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
	for (uint32_t i = 0 ; i < SENSOR_MSG_END ; i++) {
 8005f6e:	2300      	movs	r3, #0
 8005f70:	607b      	str	r3, [r7, #4]
 8005f72:	e007      	b.n	8005f84 <sensor_msg_handler_tbl_init+0x1c>
		sensor_msg_handler_tbl[i] = sensor_msg_handler_default;
 8005f74:	4a0e      	ldr	r2, [pc, #56]	@ (8005fb0 <sensor_msg_handler_tbl_init+0x48>)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	490e      	ldr	r1, [pc, #56]	@ (8005fb4 <sensor_msg_handler_tbl_init+0x4c>)
 8005f7a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint32_t i = 0 ; i < SENSOR_MSG_END ; i++) {
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	3301      	adds	r3, #1
 8005f82:	607b      	str	r3, [r7, #4]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2b04      	cmp	r3, #4
 8005f88:	d9f4      	bls.n	8005f74 <sensor_msg_handler_tbl_init+0xc>
	}

	sensor_msg_handler_tbl[SENSOR_MSG_DOOR_CHECK] = sensor_msg_handler_door_check;
 8005f8a:	4b09      	ldr	r3, [pc, #36]	@ (8005fb0 <sensor_msg_handler_tbl_init+0x48>)
 8005f8c:	4a0a      	ldr	r2, [pc, #40]	@ (8005fb8 <sensor_msg_handler_tbl_init+0x50>)
 8005f8e:	605a      	str	r2, [r3, #4]
	sensor_msg_handler_tbl[SENSOR_MSG_HM_CHECK] = sensor_msg_handler_ht_check;
 8005f90:	4b07      	ldr	r3, [pc, #28]	@ (8005fb0 <sensor_msg_handler_tbl_init+0x48>)
 8005f92:	4a0a      	ldr	r2, [pc, #40]	@ (8005fbc <sensor_msg_handler_tbl_init+0x54>)
 8005f94:	609a      	str	r2, [r3, #8]
	sensor_msg_handler_tbl[SENSOR_MSG_ADC_CHECK] = sensor_msg_handler_adc_check;
 8005f96:	4b06      	ldr	r3, [pc, #24]	@ (8005fb0 <sensor_msg_handler_tbl_init+0x48>)
 8005f98:	4a09      	ldr	r2, [pc, #36]	@ (8005fc0 <sensor_msg_handler_tbl_init+0x58>)
 8005f9a:	60da      	str	r2, [r3, #12]
	sensor_msg_handler_tbl[SENSOR_MSG_INFO_DISPLAY] = sensor_msg_handler_info_display;
 8005f9c:	4b04      	ldr	r3, [pc, #16]	@ (8005fb0 <sensor_msg_handler_tbl_init+0x48>)
 8005f9e:	4a09      	ldr	r2, [pc, #36]	@ (8005fc4 <sensor_msg_handler_tbl_init+0x5c>)
 8005fa0:	611a      	str	r2, [r3, #16]

	return true;
 8005fa2:	2301      	movs	r3, #1
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bc80      	pop	{r7}
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	20001150 	.word	0x20001150
 8005fb4:	080059cd 	.word	0x080059cd
 8005fb8:	08005ac9 	.word	0x08005ac9
 8005fbc:	08005b31 	.word	0x08005b31
 8005fc0:	08005b99 	.word	0x08005b99
 8005fc4:	08005c09 	.word	0x08005c09

08005fc8 <send_rtu_version>:
//	HAL_UART_Transmit_DMA(&huart4, buf, size);
//	return true;
//}

static void send_rtu_version(suji_msg_body_t *pbody)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
	uint8_t len = sizeof(FW_VERSION) + 2;
 8005fd0:	230c      	movs	r3, #12
 8005fd2:	73fb      	strb	r3, [r7, #15]
	memset (&SujiTxBuff[0], 0, SUJI_TX_BUFF_SIZE);
 8005fd4:	2240      	movs	r2, #64	@ 0x40
 8005fd6:	2100      	movs	r1, #0
 8005fd8:	4818      	ldr	r0, [pc, #96]	@ (800603c <send_rtu_version+0x74>)
 8005fda:	f00e fb63 	bl	80146a4 <memset>
	SujiTxBuff[0] = STX;
 8005fde:	4b17      	ldr	r3, [pc, #92]	@ (800603c <send_rtu_version+0x74>)
 8005fe0:	2202      	movs	r2, #2
 8005fe2:	701a      	strb	r2, [r3, #0]
	SujiTxBuff[1] = STX;
 8005fe4:	4b15      	ldr	r3, [pc, #84]	@ (800603c <send_rtu_version+0x74>)
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	705a      	strb	r2, [r3, #1]
	SujiTxBuff[2] = 0;
 8005fea:	4b14      	ldr	r3, [pc, #80]	@ (800603c <send_rtu_version+0x74>)
 8005fec:	2200      	movs	r2, #0
 8005fee:	709a      	strb	r2, [r3, #2]
	SujiTxBuff[3] = 0;
 8005ff0:	4b12      	ldr	r3, [pc, #72]	@ (800603c <send_rtu_version+0x74>)
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	70da      	strb	r2, [r3, #3]
	SujiTxBuff[4] = 0;
 8005ff6:	4b11      	ldr	r3, [pc, #68]	@ (800603c <send_rtu_version+0x74>)
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	711a      	strb	r2, [r3, #4]
	SujiTxBuff[5] = len;
 8005ffc:	4a0f      	ldr	r2, [pc, #60]	@ (800603c <send_rtu_version+0x74>)
 8005ffe:	7bfb      	ldrb	r3, [r7, #15]
 8006000:	7153      	strb	r3, [r2, #5]
	SujiTxBuff[6] = OPCODE_RTU_VERSION;
 8006002:	4b0e      	ldr	r3, [pc, #56]	@ (800603c <send_rtu_version+0x74>)
 8006004:	2212      	movs	r2, #18
 8006006:	719a      	strb	r2, [r3, #6]
	SujiTxBuff[7] = 0x01;
 8006008:	4b0c      	ldr	r3, [pc, #48]	@ (800603c <send_rtu_version+0x74>)
 800600a:	2201      	movs	r2, #1
 800600c:	71da      	strb	r2, [r3, #7]
	memcpy(&SujiTxBuff[8], FW_VERSION, sizeof(FW_VERSION));
 800600e:	220a      	movs	r2, #10
 8006010:	490b      	ldr	r1, [pc, #44]	@ (8006040 <send_rtu_version+0x78>)
 8006012:	480c      	ldr	r0, [pc, #48]	@ (8006044 <send_rtu_version+0x7c>)
 8006014:	f00e fcc5 	bl	80149a2 <memcpy>
	SujiTxBuff[len+6] = ETX;
 8006018:	7bfb      	ldrb	r3, [r7, #15]
 800601a:	3306      	adds	r3, #6
 800601c:	4a07      	ldr	r2, [pc, #28]	@ (800603c <send_rtu_version+0x74>)
 800601e:	2103      	movs	r1, #3
 8006020:	54d1      	strb	r1, [r2, r3]

	HAL_UART_Transmit_DMA(&huart4, &SujiTxBuff[0], len + 6 + 1);		// sizeof() 로 string 의 길이를 잴 때 마지막 NULL 문자 포함한 길이 return 하기 때문에 1 을 추가한다.
 8006022:	7bfb      	ldrb	r3, [r7, #15]
 8006024:	b29b      	uxth	r3, r3
 8006026:	3307      	adds	r3, #7
 8006028:	b29b      	uxth	r3, r3
 800602a:	461a      	mov	r2, r3
 800602c:	4903      	ldr	r1, [pc, #12]	@ (800603c <send_rtu_version+0x74>)
 800602e:	4806      	ldr	r0, [pc, #24]	@ (8006048 <send_rtu_version+0x80>)
 8006030:	f008 fc72 	bl	800e918 <HAL_UART_Transmit_DMA>
}
 8006034:	bf00      	nop
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}
 800603c:	2000117c 	.word	0x2000117c
 8006040:	08018980 	.word	0x08018980
 8006044:	20001184 	.word	0x20001184
 8006048:	20000cd0 	.word	0x20000cd0

0800604c <send_rtu_temperature>:

static void send_rtu_temperature(suji_msg_body_t *pbody, float temperature)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
//	printf("%s() Got OPCODE_TEMPERATURE"LINE_TERM, __FUNCTION__);

	memset (&SujiTxBuff[0], 0, SUJI_TX_BUFF_SIZE);
 8006056:	2240      	movs	r2, #64	@ 0x40
 8006058:	2100      	movs	r1, #0
 800605a:	4815      	ldr	r0, [pc, #84]	@ (80060b0 <send_rtu_temperature+0x64>)
 800605c:	f00e fb22 	bl	80146a4 <memset>
	SujiTxBuff[0] = STX;
 8006060:	4b13      	ldr	r3, [pc, #76]	@ (80060b0 <send_rtu_temperature+0x64>)
 8006062:	2202      	movs	r2, #2
 8006064:	701a      	strb	r2, [r3, #0]
	SujiTxBuff[1] = STX;
 8006066:	4b12      	ldr	r3, [pc, #72]	@ (80060b0 <send_rtu_temperature+0x64>)
 8006068:	2202      	movs	r2, #2
 800606a:	705a      	strb	r2, [r3, #1]
	SujiTxBuff[2] = 0;
 800606c:	4b10      	ldr	r3, [pc, #64]	@ (80060b0 <send_rtu_temperature+0x64>)
 800606e:	2200      	movs	r2, #0
 8006070:	709a      	strb	r2, [r3, #2]
	SujiTxBuff[3] = 0;
 8006072:	4b0f      	ldr	r3, [pc, #60]	@ (80060b0 <send_rtu_temperature+0x64>)
 8006074:	2200      	movs	r2, #0
 8006076:	70da      	strb	r2, [r3, #3]
	SujiTxBuff[4] = 0;
 8006078:	4b0d      	ldr	r3, [pc, #52]	@ (80060b0 <send_rtu_temperature+0x64>)
 800607a:	2200      	movs	r2, #0
 800607c:	711a      	strb	r2, [r3, #4]
	SujiTxBuff[5] = 6;
 800607e:	4b0c      	ldr	r3, [pc, #48]	@ (80060b0 <send_rtu_temperature+0x64>)
 8006080:	2206      	movs	r2, #6
 8006082:	715a      	strb	r2, [r3, #5]
	SujiTxBuff[6] = OPCODE_TEMPERATURE;
 8006084:	4b0a      	ldr	r3, [pc, #40]	@ (80060b0 <send_rtu_temperature+0x64>)
 8006086:	2221      	movs	r2, #33	@ 0x21
 8006088:	719a      	strb	r2, [r3, #6]
	SujiTxBuff[7] = 0x01;
 800608a:	4b09      	ldr	r3, [pc, #36]	@ (80060b0 <send_rtu_temperature+0x64>)
 800608c:	2201      	movs	r2, #1
 800608e:	71da      	strb	r2, [r3, #7]
	memcpy(&SujiTxBuff[8], &temperature, sizeof(float));
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	4a07      	ldr	r2, [pc, #28]	@ (80060b0 <send_rtu_temperature+0x64>)
 8006094:	6093      	str	r3, [r2, #8]
	SujiTxBuff[12] = ETX;
 8006096:	4b06      	ldr	r3, [pc, #24]	@ (80060b0 <send_rtu_temperature+0x64>)
 8006098:	2203      	movs	r2, #3
 800609a:	731a      	strb	r2, [r3, #12]

	HAL_UART_Transmit_DMA(&huart4, &SujiTxBuff[0], 13);
 800609c:	220d      	movs	r2, #13
 800609e:	4904      	ldr	r1, [pc, #16]	@ (80060b0 <send_rtu_temperature+0x64>)
 80060a0:	4804      	ldr	r0, [pc, #16]	@ (80060b4 <send_rtu_temperature+0x68>)
 80060a2:	f008 fc39 	bl	800e918 <HAL_UART_Transmit_DMA>
}
 80060a6:	bf00      	nop
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	2000117c 	.word	0x2000117c
 80060b4:	20000cd0 	.word	0x20000cd0

080060b8 <send_rtu_humidity>:

static void send_rtu_humidity(suji_msg_body_t *pbody, float humidity)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
//	printf("%s() Got OPCODE_HUMIDITY"LINE_TERM, __FUNCTION__);

	memset (&SujiTxBuff[0], 0, SUJI_TX_BUFF_SIZE);
 80060c2:	2240      	movs	r2, #64	@ 0x40
 80060c4:	2100      	movs	r1, #0
 80060c6:	4815      	ldr	r0, [pc, #84]	@ (800611c <send_rtu_humidity+0x64>)
 80060c8:	f00e faec 	bl	80146a4 <memset>
	SujiTxBuff[0] = STX;
 80060cc:	4b13      	ldr	r3, [pc, #76]	@ (800611c <send_rtu_humidity+0x64>)
 80060ce:	2202      	movs	r2, #2
 80060d0:	701a      	strb	r2, [r3, #0]
	SujiTxBuff[1] = STX;
 80060d2:	4b12      	ldr	r3, [pc, #72]	@ (800611c <send_rtu_humidity+0x64>)
 80060d4:	2202      	movs	r2, #2
 80060d6:	705a      	strb	r2, [r3, #1]
	SujiTxBuff[2] = 0;
 80060d8:	4b10      	ldr	r3, [pc, #64]	@ (800611c <send_rtu_humidity+0x64>)
 80060da:	2200      	movs	r2, #0
 80060dc:	709a      	strb	r2, [r3, #2]
	SujiTxBuff[3] = 0;
 80060de:	4b0f      	ldr	r3, [pc, #60]	@ (800611c <send_rtu_humidity+0x64>)
 80060e0:	2200      	movs	r2, #0
 80060e2:	70da      	strb	r2, [r3, #3]
	SujiTxBuff[4] = 0;
 80060e4:	4b0d      	ldr	r3, [pc, #52]	@ (800611c <send_rtu_humidity+0x64>)
 80060e6:	2200      	movs	r2, #0
 80060e8:	711a      	strb	r2, [r3, #4]
	SujiTxBuff[5] = 6;
 80060ea:	4b0c      	ldr	r3, [pc, #48]	@ (800611c <send_rtu_humidity+0x64>)
 80060ec:	2206      	movs	r2, #6
 80060ee:	715a      	strb	r2, [r3, #5]
	SujiTxBuff[6] = OPCODE_HUMIDITY;
 80060f0:	4b0a      	ldr	r3, [pc, #40]	@ (800611c <send_rtu_humidity+0x64>)
 80060f2:	2222      	movs	r2, #34	@ 0x22
 80060f4:	719a      	strb	r2, [r3, #6]
	SujiTxBuff[7] = 0x01;
 80060f6:	4b09      	ldr	r3, [pc, #36]	@ (800611c <send_rtu_humidity+0x64>)
 80060f8:	2201      	movs	r2, #1
 80060fa:	71da      	strb	r2, [r3, #7]
	memcpy(&SujiTxBuff[8], &humidity, sizeof(float));
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	4a07      	ldr	r2, [pc, #28]	@ (800611c <send_rtu_humidity+0x64>)
 8006100:	6093      	str	r3, [r2, #8]
	SujiTxBuff[12] = ETX;
 8006102:	4b06      	ldr	r3, [pc, #24]	@ (800611c <send_rtu_humidity+0x64>)
 8006104:	2203      	movs	r2, #3
 8006106:	731a      	strb	r2, [r3, #12]

	HAL_UART_Transmit_DMA(&huart4, &SujiTxBuff[0], 13);
 8006108:	220d      	movs	r2, #13
 800610a:	4904      	ldr	r1, [pc, #16]	@ (800611c <send_rtu_humidity+0x64>)
 800610c:	4804      	ldr	r0, [pc, #16]	@ (8006120 <send_rtu_humidity+0x68>)
 800610e:	f008 fc03 	bl	800e918 <HAL_UART_Transmit_DMA>
}
 8006112:	bf00      	nop
 8006114:	3708      	adds	r7, #8
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	2000117c 	.word	0x2000117c
 8006120:	20000cd0 	.word	0x20000cd0

08006124 <send_rtu_watchdog_use>:

static void send_rtu_watchdog_use(suji_msg_body_t *pbody)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
//	printf("%s() Got OPCODE_WATCHDOG_USE"LINE_TERM, __FUNCTION__);
	memset (&SujiTxBuff[0], 0, SUJI_TX_BUFF_SIZE);
 800612c:	2240      	movs	r2, #64	@ 0x40
 800612e:	2100      	movs	r1, #0
 8006130:	4808      	ldr	r0, [pc, #32]	@ (8006154 <send_rtu_watchdog_use+0x30>)
 8006132:	f00e fab7 	bl	80146a4 <memset>
	memcpy (&SujiTxBuff[0], pbody, SUJI_TX_BUFF_SIZE);
 8006136:	2240      	movs	r2, #64	@ 0x40
 8006138:	6879      	ldr	r1, [r7, #4]
 800613a:	4806      	ldr	r0, [pc, #24]	@ (8006154 <send_rtu_watchdog_use+0x30>)
 800613c:	f00e fc31 	bl	80149a2 <memcpy>
	HAL_UART_Transmit_DMA(&huart4, &SujiTxBuff[0], 10);
 8006140:	220a      	movs	r2, #10
 8006142:	4904      	ldr	r1, [pc, #16]	@ (8006154 <send_rtu_watchdog_use+0x30>)
 8006144:	4804      	ldr	r0, [pc, #16]	@ (8006158 <send_rtu_watchdog_use+0x34>)
 8006146:	f008 fbe7 	bl	800e918 <HAL_UART_Transmit_DMA>
}
 800614a:	bf00      	nop
 800614c:	3708      	adds	r7, #8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	2000117c 	.word	0x2000117c
 8006158:	20000cd0 	.word	0x20000cd0

0800615c <send_rtu_watchdog_set>:

static void send_rtu_watchdog_set(suji_msg_body_t *pbody)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
//	printf("%s() Got OPCODE_WATCHDOG_SET"LINE_TERM, __FUNCTION__);
	memset (&SujiTxBuff[0], 0, SUJI_TX_BUFF_SIZE);
 8006164:	2240      	movs	r2, #64	@ 0x40
 8006166:	2100      	movs	r1, #0
 8006168:	4808      	ldr	r0, [pc, #32]	@ (800618c <send_rtu_watchdog_set+0x30>)
 800616a:	f00e fa9b 	bl	80146a4 <memset>
	memcpy (&SujiTxBuff[0], pbody, SUJI_TX_BUFF_SIZE);
 800616e:	2240      	movs	r2, #64	@ 0x40
 8006170:	6879      	ldr	r1, [r7, #4]
 8006172:	4806      	ldr	r0, [pc, #24]	@ (800618c <send_rtu_watchdog_set+0x30>)
 8006174:	f00e fc15 	bl	80149a2 <memcpy>
	HAL_UART_Transmit_DMA(&huart4, &SujiTxBuff[0], 10);
 8006178:	220a      	movs	r2, #10
 800617a:	4904      	ldr	r1, [pc, #16]	@ (800618c <send_rtu_watchdog_set+0x30>)
 800617c:	4804      	ldr	r0, [pc, #16]	@ (8006190 <send_rtu_watchdog_set+0x34>)
 800617e:	f008 fbcb 	bl	800e918 <HAL_UART_Transmit_DMA>
}
 8006182:	bf00      	nop
 8006184:	3708      	adds	r7, #8
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	2000117c 	.word	0x2000117c
 8006190:	20000cd0 	.word	0x20000cd0

08006194 <send_rtu_fan_temp_set>:

static void send_rtu_fan_temp_set(suji_msg_body_t *pbody)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
//	printf("%s() Got OPCODE_FAN_TEMP_SET"LINE_TERM, __FUNCTION__);
	memset (&SujiTxBuff[0], 0, SUJI_TX_BUFF_SIZE);
 800619c:	2240      	movs	r2, #64	@ 0x40
 800619e:	2100      	movs	r1, #0
 80061a0:	4808      	ldr	r0, [pc, #32]	@ (80061c4 <send_rtu_fan_temp_set+0x30>)
 80061a2:	f00e fa7f 	bl	80146a4 <memset>
	memcpy (&SujiTxBuff[0], pbody, SUJI_TX_BUFF_SIZE);
 80061a6:	2240      	movs	r2, #64	@ 0x40
 80061a8:	6879      	ldr	r1, [r7, #4]
 80061aa:	4806      	ldr	r0, [pc, #24]	@ (80061c4 <send_rtu_fan_temp_set+0x30>)
 80061ac:	f00e fbf9 	bl	80149a2 <memcpy>
	HAL_UART_Transmit_DMA(&huart4, &SujiTxBuff[0], 10);
 80061b0:	220a      	movs	r2, #10
 80061b2:	4904      	ldr	r1, [pc, #16]	@ (80061c4 <send_rtu_fan_temp_set+0x30>)
 80061b4:	4804      	ldr	r0, [pc, #16]	@ (80061c8 <send_rtu_fan_temp_set+0x34>)
 80061b6:	f008 fbaf 	bl	800e918 <HAL_UART_Transmit_DMA>
}
 80061ba:	bf00      	nop
 80061bc:	3708      	adds	r7, #8
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	2000117c 	.word	0x2000117c
 80061c8:	20000cd0 	.word	0x20000cd0

080061cc <send_rtu_heater_temp_set>:

static void send_rtu_heater_temp_set(suji_msg_body_t *pbody)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
//	printf("%s() Got OPCODE_HEATER_TEMP_SET"LINE_TERM, __FUNCTION__);
	memset (&SujiTxBuff[0], 0, SUJI_TX_BUFF_SIZE);
 80061d4:	2240      	movs	r2, #64	@ 0x40
 80061d6:	2100      	movs	r1, #0
 80061d8:	4808      	ldr	r0, [pc, #32]	@ (80061fc <send_rtu_heater_temp_set+0x30>)
 80061da:	f00e fa63 	bl	80146a4 <memset>
	memcpy (&SujiTxBuff[0], pbody, SUJI_TX_BUFF_SIZE);
 80061de:	2240      	movs	r2, #64	@ 0x40
 80061e0:	6879      	ldr	r1, [r7, #4]
 80061e2:	4806      	ldr	r0, [pc, #24]	@ (80061fc <send_rtu_heater_temp_set+0x30>)
 80061e4:	f00e fbdd 	bl	80149a2 <memcpy>
	HAL_UART_Transmit_DMA(&huart4, &SujiTxBuff[0], 10);
 80061e8:	220a      	movs	r2, #10
 80061ea:	4904      	ldr	r1, [pc, #16]	@ (80061fc <send_rtu_heater_temp_set+0x30>)
 80061ec:	4804      	ldr	r0, [pc, #16]	@ (8006200 <send_rtu_heater_temp_set+0x34>)
 80061ee:	f008 fb93 	bl	800e918 <HAL_UART_Transmit_DMA>
}
 80061f2:	bf00      	nop
 80061f4:	3708      	adds	r7, #8
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	2000117c 	.word	0x2000117c
 8006200:	20000cd0 	.word	0x20000cd0

08006204 <send_rtu_adv_panel_lamp_set>:

static void send_rtu_adv_panel_lamp_set(suji_msg_body_t *pbody)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
//	printf("%s() Got OPCODE_ADV_PANEL_LAMP_SET"LINE_TERM, __FUNCTION__);
	memset (&SujiTxBuff[0], 0, SUJI_TX_BUFF_SIZE);
 800620c:	2240      	movs	r2, #64	@ 0x40
 800620e:	2100      	movs	r1, #0
 8006210:	4808      	ldr	r0, [pc, #32]	@ (8006234 <send_rtu_adv_panel_lamp_set+0x30>)
 8006212:	f00e fa47 	bl	80146a4 <memset>
	memcpy (&SujiTxBuff[0], pbody, SUJI_TX_BUFF_SIZE);
 8006216:	2240      	movs	r2, #64	@ 0x40
 8006218:	6879      	ldr	r1, [r7, #4]
 800621a:	4806      	ldr	r0, [pc, #24]	@ (8006234 <send_rtu_adv_panel_lamp_set+0x30>)
 800621c:	f00e fbc1 	bl	80149a2 <memcpy>
	HAL_UART_Transmit_DMA(&huart4, &SujiTxBuff[0], 10);
 8006220:	220a      	movs	r2, #10
 8006222:	4904      	ldr	r1, [pc, #16]	@ (8006234 <send_rtu_adv_panel_lamp_set+0x30>)
 8006224:	4804      	ldr	r0, [pc, #16]	@ (8006238 <send_rtu_adv_panel_lamp_set+0x34>)
 8006226:	f008 fb77 	bl	800e918 <HAL_UART_Transmit_DMA>
}
 800622a:	bf00      	nop
 800622c:	3708      	adds	r7, #8
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	2000117c 	.word	0x2000117c
 8006238:	20000cd0 	.word	0x20000cd0

0800623c <send_rtu_xavier_control>:

static void send_rtu_xavier_control(suji_msg_body_t *pbody)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
//	printf("%s() Got OPCODE_XAVIER_CONTROL"LINE_TERM, __FUNCTION__);
	memset (&SujiTxBuff[0], 0, SUJI_TX_BUFF_SIZE);
 8006244:	2240      	movs	r2, #64	@ 0x40
 8006246:	2100      	movs	r1, #0
 8006248:	4808      	ldr	r0, [pc, #32]	@ (800626c <send_rtu_xavier_control+0x30>)
 800624a:	f00e fa2b 	bl	80146a4 <memset>
	memcpy (&SujiTxBuff[0], pbody, SUJI_TX_BUFF_SIZE);
 800624e:	2240      	movs	r2, #64	@ 0x40
 8006250:	6879      	ldr	r1, [r7, #4]
 8006252:	4806      	ldr	r0, [pc, #24]	@ (800626c <send_rtu_xavier_control+0x30>)
 8006254:	f00e fba5 	bl	80149a2 <memcpy>
	HAL_UART_Transmit_DMA(&huart4, &SujiTxBuff[0], 10);
 8006258:	220a      	movs	r2, #10
 800625a:	4904      	ldr	r1, [pc, #16]	@ (800626c <send_rtu_xavier_control+0x30>)
 800625c:	4804      	ldr	r0, [pc, #16]	@ (8006270 <send_rtu_xavier_control+0x34>)
 800625e:	f008 fb5b 	bl	800e918 <HAL_UART_Transmit_DMA>
}
 8006262:	bf00      	nop
 8006264:	3708      	adds	r7, #8
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	2000117c 	.word	0x2000117c
 8006270:	20000cd0 	.word	0x20000cd0

08006274 <send_rtu_lamp_post_control>:

static void send_rtu_lamp_post_control(suji_msg_body_t *pbody)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
//	printf("%s() Got OPCODE_LAMP_POST_CONTROL"LINE_TERM, __FUNCTION__);
	memset (&SujiTxBuff[0], 0, SUJI_TX_BUFF_SIZE);
 800627c:	2240      	movs	r2, #64	@ 0x40
 800627e:	2100      	movs	r1, #0
 8006280:	4808      	ldr	r0, [pc, #32]	@ (80062a4 <send_rtu_lamp_post_control+0x30>)
 8006282:	f00e fa0f 	bl	80146a4 <memset>
	memcpy (&SujiTxBuff[0], pbody, SUJI_TX_BUFF_SIZE);
 8006286:	2240      	movs	r2, #64	@ 0x40
 8006288:	6879      	ldr	r1, [r7, #4]
 800628a:	4806      	ldr	r0, [pc, #24]	@ (80062a4 <send_rtu_lamp_post_control+0x30>)
 800628c:	f00e fb89 	bl	80149a2 <memcpy>
	HAL_UART_Transmit_DMA(&huart4, &SujiTxBuff[0], 10);
 8006290:	220a      	movs	r2, #10
 8006292:	4904      	ldr	r1, [pc, #16]	@ (80062a4 <send_rtu_lamp_post_control+0x30>)
 8006294:	4804      	ldr	r0, [pc, #16]	@ (80062a8 <send_rtu_lamp_post_control+0x34>)
 8006296:	f008 fb3f 	bl	800e918 <HAL_UART_Transmit_DMA>
}
 800629a:	bf00      	nop
 800629c:	3708      	adds	r7, #8
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	2000117c 	.word	0x2000117c
 80062a8:	20000cd0 	.word	0x20000cd0

080062ac <send_rtu_status_info>:

static void send_rtu_status_info(suji_msg_body_t *pbody)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
	memset (&SujiTxBuff[0], 0, SUJI_TX_BUFF_SIZE);
 80062b4:	2240      	movs	r2, #64	@ 0x40
 80062b6:	2100      	movs	r1, #0
 80062b8:	4825      	ldr	r0, [pc, #148]	@ (8006350 <send_rtu_status_info+0xa4>)
 80062ba:	f00e f9f3 	bl	80146a4 <memset>
	SujiTxBuff[0] = STX;
 80062be:	4b24      	ldr	r3, [pc, #144]	@ (8006350 <send_rtu_status_info+0xa4>)
 80062c0:	2202      	movs	r2, #2
 80062c2:	701a      	strb	r2, [r3, #0]
	SujiTxBuff[1] = STX;
 80062c4:	4b22      	ldr	r3, [pc, #136]	@ (8006350 <send_rtu_status_info+0xa4>)
 80062c6:	2202      	movs	r2, #2
 80062c8:	705a      	strb	r2, [r3, #1]
	SujiTxBuff[2] = 0;
 80062ca:	4b21      	ldr	r3, [pc, #132]	@ (8006350 <send_rtu_status_info+0xa4>)
 80062cc:	2200      	movs	r2, #0
 80062ce:	709a      	strb	r2, [r3, #2]
	SujiTxBuff[3] = 0;
 80062d0:	4b1f      	ldr	r3, [pc, #124]	@ (8006350 <send_rtu_status_info+0xa4>)
 80062d2:	2200      	movs	r2, #0
 80062d4:	70da      	strb	r2, [r3, #3]
	SujiTxBuff[4] = 0;
 80062d6:	4b1e      	ldr	r3, [pc, #120]	@ (8006350 <send_rtu_status_info+0xa4>)
 80062d8:	2200      	movs	r2, #0
 80062da:	711a      	strb	r2, [r3, #4]
	SujiTxBuff[5] = 0x2D;
 80062dc:	4b1c      	ldr	r3, [pc, #112]	@ (8006350 <send_rtu_status_info+0xa4>)
 80062de:	222d      	movs	r2, #45	@ 0x2d
 80062e0:	715a      	strb	r2, [r3, #5]
	SujiTxBuff[6] = OPCODE_STATUS_INFO;
 80062e2:	4b1b      	ldr	r3, [pc, #108]	@ (8006350 <send_rtu_status_info+0xa4>)
 80062e4:	22f1      	movs	r2, #241	@ 0xf1
 80062e6:	719a      	strb	r2, [r3, #6]
	SujiTxBuff[7] = 0x01;
 80062e8:	4b19      	ldr	r3, [pc, #100]	@ (8006350 <send_rtu_status_info+0xa4>)
 80062ea:	2201      	movs	r2, #1
 80062ec:	71da      	strb	r2, [r3, #7]

	SujiTxBuff[8] = 0x01;		// watchdog 사용 상태
 80062ee:	4b18      	ldr	r3, [pc, #96]	@ (8006350 <send_rtu_status_info+0xa4>)
 80062f0:	2201      	movs	r2, #1
 80062f2:	721a      	strb	r2, [r3, #8]
	SujiTxBuff[9] = 0x01;		// watchdog 값
 80062f4:	4b16      	ldr	r3, [pc, #88]	@ (8006350 <send_rtu_status_info+0xa4>)
 80062f6:	2201      	movs	r2, #1
 80062f8:	725a      	strb	r2, [r3, #9]
	SujiTxBuff[10] = 0x01;		// door_1
 80062fa:	4b15      	ldr	r3, [pc, #84]	@ (8006350 <send_rtu_status_info+0xa4>)
 80062fc:	2201      	movs	r2, #1
 80062fe:	729a      	strb	r2, [r3, #10]
	SujiTxBuff[11] = 0x01;		// door_2
 8006300:	4b13      	ldr	r3, [pc, #76]	@ (8006350 <send_rtu_status_info+0xa4>)
 8006302:	2201      	movs	r2, #1
 8006304:	72da      	strb	r2, [r3, #11]
	SujiTxBuff[12] = 0x01;		// fan 동작 상태
 8006306:	4b12      	ldr	r3, [pc, #72]	@ (8006350 <send_rtu_status_info+0xa4>)
 8006308:	2201      	movs	r2, #1
 800630a:	731a      	strb	r2, [r3, #12]
	SujiTxBuff[13] = 0x46;		// fan 온도 max
 800630c:	4b10      	ldr	r3, [pc, #64]	@ (8006350 <send_rtu_status_info+0xa4>)
 800630e:	2246      	movs	r2, #70	@ 0x46
 8006310:	735a      	strb	r2, [r3, #13]
	SujiTxBuff[14] = 0x0;		// fan 온도 min
 8006312:	4b0f      	ldr	r3, [pc, #60]	@ (8006350 <send_rtu_status_info+0xa4>)
 8006314:	2200      	movs	r2, #0
 8006316:	739a      	strb	r2, [r3, #14]
	SujiTxBuff[15] = 0x01;		// heater 동작 상태
 8006318:	4b0d      	ldr	r3, [pc, #52]	@ (8006350 <send_rtu_status_info+0xa4>)
 800631a:	2201      	movs	r2, #1
 800631c:	73da      	strb	r2, [r3, #15]
	SujiTxBuff[16] = 0x46;		// heater 온도 max
 800631e:	4b0c      	ldr	r3, [pc, #48]	@ (8006350 <send_rtu_status_info+0xa4>)
 8006320:	2246      	movs	r2, #70	@ 0x46
 8006322:	741a      	strb	r2, [r3, #16]
	SujiTxBuff[17] = 0x00;		// heater 온도 min
 8006324:	4b0a      	ldr	r3, [pc, #40]	@ (8006350 <send_rtu_status_info+0xa4>)
 8006326:	2200      	movs	r2, #0
 8006328:	745a      	strb	r2, [r3, #17]
	SujiTxBuff[18] = 0x20;		// 현재 온도 (float 4Byte)
 800632a:	4b09      	ldr	r3, [pc, #36]	@ (8006350 <send_rtu_status_info+0xa4>)
 800632c:	2220      	movs	r2, #32
 800632e:	749a      	strb	r2, [r3, #18]
	SujiTxBuff[22] = 0x40;		// 현재 습도 (float 4Byte)
 8006330:	4b07      	ldr	r3, [pc, #28]	@ (8006350 <send_rtu_status_info+0xa4>)
 8006332:	2240      	movs	r2, #64	@ 0x40
 8006334:	759a      	strb	r2, [r3, #22]

	SujiTxBuff[51] = ETX;
 8006336:	4b06      	ldr	r3, [pc, #24]	@ (8006350 <send_rtu_status_info+0xa4>)
 8006338:	2203      	movs	r2, #3
 800633a:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
	HAL_UART_Transmit_DMA(&huart4, &SujiTxBuff[0], 52);
 800633e:	2234      	movs	r2, #52	@ 0x34
 8006340:	4903      	ldr	r1, [pc, #12]	@ (8006350 <send_rtu_status_info+0xa4>)
 8006342:	4804      	ldr	r0, [pc, #16]	@ (8006354 <send_rtu_status_info+0xa8>)
 8006344:	f008 fae8 	bl	800e918 <HAL_UART_Transmit_DMA>
}
 8006348:	bf00      	nop
 800634a:	3708      	adds	r7, #8
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	2000117c 	.word	0x2000117c
 8006354:	20000cd0 	.word	0x20000cd0

08006358 <suji_msg_handler_default>:

static bool suji_msg_handler_default(suji_msg_t *pmsg)
{
 8006358:	b5b0      	push	{r4, r5, r7, lr}
 800635a:	b09c      	sub	sp, #112	@ 0x70
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
	char suji_msg[100];

	switch (pmsg->head.type) {
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d002      	beq.n	800636e <suji_msg_handler_default+0x16>
 8006368:	2b01      	cmp	r3, #1
 800636a:	d009      	beq.n	8006380 <suji_msg_handler_default+0x28>
 800636c:	e012      	b.n	8006394 <suji_msg_handler_default+0x3c>
	case SUJI_MSG_BASE : strcpy (suji_msg, "SUJI_MSG_BASE"); break;
 800636e:	f107 030c 	add.w	r3, r7, #12
 8006372:	4a13      	ldr	r2, [pc, #76]	@ (80063c0 <suji_msg_handler_default+0x68>)
 8006374:	461c      	mov	r4, r3
 8006376:	4613      	mov	r3, r2
 8006378:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800637a:	c407      	stmia	r4!, {r0, r1, r2}
 800637c:	8023      	strh	r3, [r4, #0]
 800637e:	e012      	b.n	80063a6 <suji_msg_handler_default+0x4e>
	case SUJI_MSG_COMMAND : strcpy (suji_msg, "SUJI_MSG_COMMAND"); break;
 8006380:	f107 030c 	add.w	r3, r7, #12
 8006384:	4a0f      	ldr	r2, [pc, #60]	@ (80063c4 <suji_msg_handler_default+0x6c>)
 8006386:	461c      	mov	r4, r3
 8006388:	4615      	mov	r5, r2
 800638a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800638c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800638e:	682b      	ldr	r3, [r5, #0]
 8006390:	7023      	strb	r3, [r4, #0]
 8006392:	e008      	b.n	80063a6 <suji_msg_handler_default+0x4e>
	default : strcpy (suji_msg, "UNKNOWN type"); break;
 8006394:	f107 030c 	add.w	r3, r7, #12
 8006398:	4a0b      	ldr	r2, [pc, #44]	@ (80063c8 <suji_msg_handler_default+0x70>)
 800639a:	461c      	mov	r4, r3
 800639c:	4613      	mov	r3, r2
 800639e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80063a0:	c407      	stmia	r4!, {r0, r1, r2}
 80063a2:	7023      	strb	r3, [r4, #0]
 80063a4:	bf00      	nop
	}

	printf("%s() : suji_msg_type = %s"LINE_TERM, __FUNCTION__, suji_msg);
 80063a6:	f107 030c 	add.w	r3, r7, #12
 80063aa:	461a      	mov	r2, r3
 80063ac:	4907      	ldr	r1, [pc, #28]	@ (80063cc <suji_msg_handler_default+0x74>)
 80063ae:	4808      	ldr	r0, [pc, #32]	@ (80063d0 <suji_msg_handler_default+0x78>)
 80063b0:	f00d ffd2 	bl	8014358 <iprintf>

	return true;
 80063b4:	2301      	movs	r3, #1
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3770      	adds	r7, #112	@ 0x70
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bdb0      	pop	{r4, r5, r7, pc}
 80063be:	bf00      	nop
 80063c0:	0801898c 	.word	0x0801898c
 80063c4:	0801899c 	.word	0x0801899c
 80063c8:	080189b0 	.word	0x080189b0
 80063cc:	08019d94 	.word	0x08019d94
 80063d0:	080189c0 	.word	0x080189c0

080063d4 <suji_command_integrity_check>:

static bool suji_command_integrity_check(suji_msg_body_t *pbody)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
	if (pbody->Byte[0] != STX) return false;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d001      	beq.n	80063e8 <suji_command_integrity_check+0x14>
 80063e4:	2300      	movs	r3, #0
 80063e6:	e006      	b.n	80063f6 <suji_command_integrity_check+0x22>
	if (pbody->Byte[1] != STX) return false;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	785b      	ldrb	r3, [r3, #1]
 80063ec:	2b02      	cmp	r3, #2
 80063ee:	d001      	beq.n	80063f4 <suji_command_integrity_check+0x20>
 80063f0:	2300      	movs	r3, #0
 80063f2:	e000      	b.n	80063f6 <suji_command_integrity_check+0x22>
	else return true;
 80063f4:	2301      	movs	r3, #1
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	370c      	adds	r7, #12
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bc80      	pop	{r7}
 80063fe:	4770      	bx	lr

08006400 <suji_msg_handler_command>:

void doSystemReset();
static bool suji_msg_handler_command(suji_msg_t *pmsg)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
	if (suji_command_integrity_check(&pmsg->body) != true) {
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	3304      	adds	r3, #4
 800640c:	4618      	mov	r0, r3
 800640e:	f7ff ffe1 	bl	80063d4 <suji_command_integrity_check>
 8006412:	4603      	mov	r3, r0
 8006414:	f083 0301 	eor.w	r3, r3, #1
 8006418:	b2db      	uxtb	r3, r3
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00b      	beq.n	8006436 <suji_msg_handler_command+0x36>
		printf("%s() Incorrect command"LINE_TERM, __FUNCTION__);
 800641e:	4995      	ldr	r1, [pc, #596]	@ (8006674 <suji_msg_handler_command+0x274>)
 8006420:	4895      	ldr	r0, [pc, #596]	@ (8006678 <suji_msg_handler_command+0x278>)
 8006422:	f00d ff99 	bl	8014358 <iprintf>
		HexDump(0, &pmsg->body.Byte[0], pmsg->head.len);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	1d19      	adds	r1, r3, #4
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	78db      	ldrb	r3, [r3, #3]
 800642e:	461a      	mov	r2, r3
 8006430:	2000      	movs	r0, #0
 8006432:	f7fe ff6b 	bl	800530c <HexDump>
	}

	suji_command_opcode_type_t suji_command_opcode = pmsg->body.Byte[6];
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	7a9b      	ldrb	r3, [r3, #10]
 800643a:	73fb      	strb	r3, [r7, #15]
	switch (suji_command_opcode) {
 800643c:	7bfb      	ldrb	r3, [r7, #15]
 800643e:	2b66      	cmp	r3, #102	@ 0x66
 8006440:	f300 80b6 	bgt.w	80065b0 <suji_msg_handler_command+0x1b0>
 8006444:	2b11      	cmp	r3, #17
 8006446:	f2c0 810b 	blt.w	8006660 <suji_msg_handler_command+0x260>
 800644a:	3b11      	subs	r3, #17
 800644c:	2b55      	cmp	r3, #85	@ 0x55
 800644e:	f200 8107 	bhi.w	8006660 <suji_msg_handler_command+0x260>
 8006452:	a201      	add	r2, pc, #4	@ (adr r2, 8006458 <suji_msg_handler_command+0x58>)
 8006454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006458:	080065b7 	.word	0x080065b7
 800645c:	080065d5 	.word	0x080065d5
 8006460:	08006661 	.word	0x08006661
 8006464:	08006661 	.word	0x08006661
 8006468:	08006661 	.word	0x08006661
 800646c:	08006661 	.word	0x08006661
 8006470:	08006661 	.word	0x08006661
 8006474:	08006661 	.word	0x08006661
 8006478:	08006661 	.word	0x08006661
 800647c:	08006661 	.word	0x08006661
 8006480:	08006661 	.word	0x08006661
 8006484:	08006661 	.word	0x08006661
 8006488:	08006661 	.word	0x08006661
 800648c:	08006661 	.word	0x08006661
 8006490:	08006661 	.word	0x08006661
 8006494:	08006661 	.word	0x08006661
 8006498:	080065e1 	.word	0x080065e1
 800649c:	080065f1 	.word	0x080065f1
 80064a0:	08006661 	.word	0x08006661
 80064a4:	08006661 	.word	0x08006661
 80064a8:	08006661 	.word	0x08006661
 80064ac:	08006661 	.word	0x08006661
 80064b0:	08006661 	.word	0x08006661
 80064b4:	08006661 	.word	0x08006661
 80064b8:	08006661 	.word	0x08006661
 80064bc:	08006661 	.word	0x08006661
 80064c0:	08006661 	.word	0x08006661
 80064c4:	08006661 	.word	0x08006661
 80064c8:	08006661 	.word	0x08006661
 80064cc:	08006661 	.word	0x08006661
 80064d0:	08006661 	.word	0x08006661
 80064d4:	08006661 	.word	0x08006661
 80064d8:	08006601 	.word	0x08006601
 80064dc:	0800660d 	.word	0x0800660d
 80064e0:	08006661 	.word	0x08006661
 80064e4:	08006661 	.word	0x08006661
 80064e8:	08006661 	.word	0x08006661
 80064ec:	08006661 	.word	0x08006661
 80064f0:	08006661 	.word	0x08006661
 80064f4:	08006661 	.word	0x08006661
 80064f8:	08006661 	.word	0x08006661
 80064fc:	08006661 	.word	0x08006661
 8006500:	08006661 	.word	0x08006661
 8006504:	08006661 	.word	0x08006661
 8006508:	08006661 	.word	0x08006661
 800650c:	08006661 	.word	0x08006661
 8006510:	08006661 	.word	0x08006661
 8006514:	08006661 	.word	0x08006661
 8006518:	08006619 	.word	0x08006619
 800651c:	08006625 	.word	0x08006625
 8006520:	08006661 	.word	0x08006661
 8006524:	08006661 	.word	0x08006661
 8006528:	08006661 	.word	0x08006661
 800652c:	08006661 	.word	0x08006661
 8006530:	08006661 	.word	0x08006661
 8006534:	08006661 	.word	0x08006661
 8006538:	08006661 	.word	0x08006661
 800653c:	08006661 	.word	0x08006661
 8006540:	08006661 	.word	0x08006661
 8006544:	08006661 	.word	0x08006661
 8006548:	08006661 	.word	0x08006661
 800654c:	08006661 	.word	0x08006661
 8006550:	08006661 	.word	0x08006661
 8006554:	08006661 	.word	0x08006661
 8006558:	08006661 	.word	0x08006661
 800655c:	08006661 	.word	0x08006661
 8006560:	08006661 	.word	0x08006661
 8006564:	08006661 	.word	0x08006661
 8006568:	08006661 	.word	0x08006661
 800656c:	08006661 	.word	0x08006661
 8006570:	08006661 	.word	0x08006661
 8006574:	08006661 	.word	0x08006661
 8006578:	08006661 	.word	0x08006661
 800657c:	08006661 	.word	0x08006661
 8006580:	08006661 	.word	0x08006661
 8006584:	08006661 	.word	0x08006661
 8006588:	08006661 	.word	0x08006661
 800658c:	08006661 	.word	0x08006661
 8006590:	08006661 	.word	0x08006661
 8006594:	08006661 	.word	0x08006661
 8006598:	08006661 	.word	0x08006661
 800659c:	08006661 	.word	0x08006661
 80065a0:	08006631 	.word	0x08006631
 80065a4:	08006661 	.word	0x08006661
 80065a8:	0800663d 	.word	0x0800663d
 80065ac:	08006649 	.word	0x08006649
 80065b0:	2bf1      	cmp	r3, #241	@ 0xf1
 80065b2:	d04f      	beq.n	8006654 <suji_msg_handler_command+0x254>
 80065b4:	e054      	b.n	8006660 <suji_msg_handler_command+0x260>
	case OPCODE_POWER_RESET :
		printf(CUI_ESC_CLR);
 80065b6:	4831      	ldr	r0, [pc, #196]	@ (800667c <suji_msg_handler_command+0x27c>)
 80065b8:	f00d fece 	bl	8014358 <iprintf>
		printf(CUI_ESC_CUR_HOME);
 80065bc:	4830      	ldr	r0, [pc, #192]	@ (8006680 <suji_msg_handler_command+0x280>)
 80065be:	f00d fecb 	bl	8014358 <iprintf>
		printf(LINE_TERM"====== MANUAL SYSTEM RESET ======="LINE_TERM);
 80065c2:	4830      	ldr	r0, [pc, #192]	@ (8006684 <suji_msg_handler_command+0x284>)
 80065c4:	f00d ff30 	bl	8014428 <puts>
		HAL_Delay(4);
 80065c8:	2004      	movs	r0, #4
 80065ca:	f001 ff85 	bl	80084d8 <HAL_Delay>
		doSystemReset();
 80065ce:	f7fd fdab 	bl	8004128 <doSystemReset>
		break;
 80065d2:	e04a      	b.n	800666a <suji_msg_handler_command+0x26a>

	case OPCODE_RTU_VERSION :
		send_rtu_version((suji_msg_body_t *)&pmsg->body);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	3304      	adds	r3, #4
 80065d8:	4618      	mov	r0, r3
 80065da:	f7ff fcf5 	bl	8005fc8 <send_rtu_version>
		break;
 80065de:	e044      	b.n	800666a <suji_msg_handler_command+0x26a>

	case OPCODE_TEMPERATURE :
		send_rtu_temperature((suji_msg_body_t *)&pmsg->body, 0.0);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	3304      	adds	r3, #4
 80065e4:	f04f 0100 	mov.w	r1, #0
 80065e8:	4618      	mov	r0, r3
 80065ea:	f7ff fd2f 	bl	800604c <send_rtu_temperature>
		break;
 80065ee:	e03c      	b.n	800666a <suji_msg_handler_command+0x26a>

	case OPCODE_HUMIDITY :
		send_rtu_humidity((suji_msg_body_t *)&pmsg->body, 0.0);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	3304      	adds	r3, #4
 80065f4:	f04f 0100 	mov.w	r1, #0
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7ff fd5d 	bl	80060b8 <send_rtu_humidity>
		break;
 80065fe:	e034      	b.n	800666a <suji_msg_handler_command+0x26a>

	case OPCODE_WATCHDOG_USE :
		send_rtu_watchdog_use((suji_msg_body_t *)&pmsg->body);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	3304      	adds	r3, #4
 8006604:	4618      	mov	r0, r3
 8006606:	f7ff fd8d 	bl	8006124 <send_rtu_watchdog_use>
		break;
 800660a:	e02e      	b.n	800666a <suji_msg_handler_command+0x26a>

	case OPCODE_WATCHDOG_SET :
		send_rtu_watchdog_set((suji_msg_body_t *)&pmsg->body);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	3304      	adds	r3, #4
 8006610:	4618      	mov	r0, r3
 8006612:	f7ff fda3 	bl	800615c <send_rtu_watchdog_set>
		break;
 8006616:	e028      	b.n	800666a <suji_msg_handler_command+0x26a>

	case OPCODE_FAN_TEMP_SET :
		send_rtu_fan_temp_set((suji_msg_body_t *)&pmsg->body);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	3304      	adds	r3, #4
 800661c:	4618      	mov	r0, r3
 800661e:	f7ff fdb9 	bl	8006194 <send_rtu_fan_temp_set>
		break;
 8006622:	e022      	b.n	800666a <suji_msg_handler_command+0x26a>

	case OPCODE_HEATER_TEMP_SET :
		send_rtu_heater_temp_set((suji_msg_body_t *)&pmsg->body);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	3304      	adds	r3, #4
 8006628:	4618      	mov	r0, r3
 800662a:	f7ff fdcf 	bl	80061cc <send_rtu_heater_temp_set>
		break;
 800662e:	e01c      	b.n	800666a <suji_msg_handler_command+0x26a>

	case OPCODE_ADV_PANEL_LAMP_SET :
		send_rtu_adv_panel_lamp_set((suji_msg_body_t *)&pmsg->body);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	3304      	adds	r3, #4
 8006634:	4618      	mov	r0, r3
 8006636:	f7ff fde5 	bl	8006204 <send_rtu_adv_panel_lamp_set>
		break;
 800663a:	e016      	b.n	800666a <suji_msg_handler_command+0x26a>

	case OPCODE_XAVIER_CONTROL :
		send_rtu_xavier_control((suji_msg_body_t *)&pmsg->body);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	3304      	adds	r3, #4
 8006640:	4618      	mov	r0, r3
 8006642:	f7ff fdfb 	bl	800623c <send_rtu_xavier_control>
		break;
 8006646:	e010      	b.n	800666a <suji_msg_handler_command+0x26a>

	case OPCODE_LAMP_POST_CONTROL :
		send_rtu_lamp_post_control((suji_msg_body_t *)&pmsg->body);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	3304      	adds	r3, #4
 800664c:	4618      	mov	r0, r3
 800664e:	f7ff fe11 	bl	8006274 <send_rtu_lamp_post_control>
		break;
 8006652:	e00a      	b.n	800666a <suji_msg_handler_command+0x26a>

	case OPCODE_STATUS_INFO :
		send_rtu_status_info((suji_msg_body_t *)&pmsg->body);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	3304      	adds	r3, #4
 8006658:	4618      	mov	r0, r3
 800665a:	f7ff fe27 	bl	80062ac <send_rtu_status_info>
		break;
 800665e:	e004      	b.n	800666a <suji_msg_handler_command+0x26a>

	default :
		printf("%s() Got UNDEFINED OP_CODE"LINE_TERM, __FUNCTION__);
 8006660:	4904      	ldr	r1, [pc, #16]	@ (8006674 <suji_msg_handler_command+0x274>)
 8006662:	4809      	ldr	r0, [pc, #36]	@ (8006688 <suji_msg_handler_command+0x288>)
 8006664:	f00d fe78 	bl	8014358 <iprintf>
		break;
 8006668:	bf00      	nop
	}
	return true;
 800666a:	2301      	movs	r3, #1
}
 800666c:	4618      	mov	r0, r3
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}
 8006674:	08019db0 	.word	0x08019db0
 8006678:	080189dc 	.word	0x080189dc
 800667c:	080189f8 	.word	0x080189f8
 8006680:	08018a00 	.word	0x08018a00
 8006684:	08018a04 	.word	0x08018a04
 8006688:	08018a2c 	.word	0x08018a2c

0800668c <suji_msg_handler_tbl_init>:

bool suji_msg_handler_tbl_init(void)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
	for (uint32_t i = 0 ; i < SUJI_MSG_END ; i++) {
 8006692:	2300      	movs	r3, #0
 8006694:	607b      	str	r3, [r7, #4]
 8006696:	e007      	b.n	80066a8 <suji_msg_handler_tbl_init+0x1c>
		suji_msg_handler_tbl[i] = suji_msg_handler_default;
 8006698:	4a09      	ldr	r2, [pc, #36]	@ (80066c0 <suji_msg_handler_tbl_init+0x34>)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4909      	ldr	r1, [pc, #36]	@ (80066c4 <suji_msg_handler_tbl_init+0x38>)
 800669e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint32_t i = 0 ; i < SUJI_MSG_END ; i++) {
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	3301      	adds	r3, #1
 80066a6:	607b      	str	r3, [r7, #4]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d9f4      	bls.n	8006698 <suji_msg_handler_tbl_init+0xc>
	}

	suji_msg_handler_tbl[SUJI_MSG_COMMAND] = suji_msg_handler_command;
 80066ae:	4b04      	ldr	r3, [pc, #16]	@ (80066c0 <suji_msg_handler_tbl_init+0x34>)
 80066b0:	4a05      	ldr	r2, [pc, #20]	@ (80066c8 <suji_msg_handler_tbl_init+0x3c>)
 80066b2:	605a      	str	r2, [r3, #4]

	return true;
 80066b4:	2301      	movs	r3, #1
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	370c      	adds	r7, #12
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bc80      	pop	{r7}
 80066be:	4770      	bx	lr
 80066c0:	200011bc 	.word	0x200011bc
 80066c4:	08006359 	.word	0x08006359
 80066c8:	08006401 	.word	0x08006401

080066cc <console_scan_timeout_cb>:
#define	ADC_CHECK_TIMEOUT		TIMEOUT_1_SEC
#define	INFO_DISPLAY_TIMEOUT	TIMEOUT_1_SEC


static void console_scan_timeout_cb (void *arg)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
	osThreadFlagsSet(Thread_CLI_Handler, EF_CONSOLE_SCAN);
 80066d4:	4b04      	ldr	r3, [pc, #16]	@ (80066e8 <console_scan_timeout_cb+0x1c>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2101      	movs	r1, #1
 80066da:	4618      	mov	r0, r3
 80066dc:	f009 fb30 	bl	800fd40 <osThreadFlagsSet>
}
 80066e0:	bf00      	nop
 80066e2:	3708      	adds	r7, #8
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	20000714 	.word	0x20000714

080066ec <uptime_counter_timeout_cb>:

static void uptime_counter_timeout_cb (void *arg)
{
 80066ec:	b5b0      	push	{r4, r5, r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
	uptime_counter++;
 80066f4:	4b14      	ldr	r3, [pc, #80]	@ (8006748 <uptime_counter_timeout_cb+0x5c>)
 80066f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fa:	1c54      	adds	r4, r2, #1
 80066fc:	f143 0500 	adc.w	r5, r3, #0
 8006700:	4b11      	ldr	r3, [pc, #68]	@ (8006748 <uptime_counter_timeout_cb+0x5c>)
 8006702:	e9c3 4500 	strd	r4, r5, [r3]
	assert (HAL_RTC_GetTime(&hrtc, &scw_infoObj.currentTime, RTC_FORMAT_BIN) == HAL_OK);
 8006706:	2200      	movs	r2, #0
 8006708:	4910      	ldr	r1, [pc, #64]	@ (800674c <uptime_counter_timeout_cb+0x60>)
 800670a:	4811      	ldr	r0, [pc, #68]	@ (8006750 <uptime_counter_timeout_cb+0x64>)
 800670c:	f007 f978 	bl	800da00 <HAL_RTC_GetTime>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d005      	beq.n	8006722 <uptime_counter_timeout_cb+0x36>
 8006716:	4b0f      	ldr	r3, [pc, #60]	@ (8006754 <uptime_counter_timeout_cb+0x68>)
 8006718:	4a0f      	ldr	r2, [pc, #60]	@ (8006758 <uptime_counter_timeout_cb+0x6c>)
 800671a:	2134      	movs	r1, #52	@ 0x34
 800671c:	480f      	ldr	r0, [pc, #60]	@ (800675c <uptime_counter_timeout_cb+0x70>)
 800671e:	f00d fbfb 	bl	8013f18 <__assert_func>
	assert (HAL_RTC_GetDate(&hrtc, &scw_infoObj.currentDate, RTC_FORMAT_BIN) == HAL_OK);
 8006722:	2200      	movs	r2, #0
 8006724:	490e      	ldr	r1, [pc, #56]	@ (8006760 <uptime_counter_timeout_cb+0x74>)
 8006726:	480a      	ldr	r0, [pc, #40]	@ (8006750 <uptime_counter_timeout_cb+0x64>)
 8006728:	f007 fa42 	bl	800dbb0 <HAL_RTC_GetDate>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d005      	beq.n	800673e <uptime_counter_timeout_cb+0x52>
 8006732:	4b0c      	ldr	r3, [pc, #48]	@ (8006764 <uptime_counter_timeout_cb+0x78>)
 8006734:	4a08      	ldr	r2, [pc, #32]	@ (8006758 <uptime_counter_timeout_cb+0x6c>)
 8006736:	2135      	movs	r1, #53	@ 0x35
 8006738:	4808      	ldr	r0, [pc, #32]	@ (800675c <uptime_counter_timeout_cb+0x70>)
 800673a:	f00d fbed 	bl	8013f18 <__assert_func>
}
 800673e:	bf00      	nop
 8006740:	3708      	adds	r7, #8
 8006742:	46bd      	mov	sp, r7
 8006744:	bdb0      	pop	{r4, r5, r7, pc}
 8006746:	bf00      	nop
 8006748:	20000b20 	.word	0x20000b20
 800674c:	20000b9c 	.word	0x20000b9c
 8006750:	20000c18 	.word	0x20000c18
 8006754:	08018a4c 	.word	0x08018a4c
 8006758:	08019dcc 	.word	0x08019dcc
 800675c:	08018a98 	.word	0x08018a98
 8006760:	20000b98 	.word	0x20000b98
 8006764:	08018abc 	.word	0x08018abc

08006768 <door_check_timeout_cb>:

static void door_check_timeout_cb (void *arg)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b086      	sub	sp, #24
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
	sensor_msg_t sensor_msg;
	sensor_msg.head.type = SENSOR_MSG_DOOR_CHECK;
 8006770:	2301      	movs	r3, #1
 8006772:	723b      	strb	r3, [r7, #8]
	sensor_msg.head.dst = WORKM_SENSOR;
 8006774:	2303      	movs	r3, #3
 8006776:	727b      	strb	r3, [r7, #9]
	sensor_msg.head.src = WORKM_TIMER;
 8006778:	230b      	movs	r3, #11
 800677a:	72bb      	strb	r3, [r7, #10]
	sensor_msg.head.len = 0;
 800677c:	2300      	movs	r3, #0
 800677e:	72fb      	strb	r3, [r7, #11]
	osMessageQueuePut(sensorThreadQ, &sensor_msg, 0U, 0U);
 8006780:	4b05      	ldr	r3, [pc, #20]	@ (8006798 <door_check_timeout_cb+0x30>)
 8006782:	6818      	ldr	r0, [r3, #0]
 8006784:	f107 0108 	add.w	r1, r7, #8
 8006788:	2300      	movs	r3, #0
 800678a:	2200      	movs	r2, #0
 800678c:	f009 fe04 	bl	8010398 <osMessageQueuePut>
}
 8006790:	bf00      	nop
 8006792:	3718      	adds	r7, #24
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}
 8006798:	20001164 	.word	0x20001164

0800679c <ht_check_timeout_cb>:

static void ht_check_timeout_cb (void *arg)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b086      	sub	sp, #24
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
	sensor_msg_t sensor_msg;
	sensor_msg.head.type = SENSOR_MSG_HM_CHECK;
 80067a4:	2302      	movs	r3, #2
 80067a6:	723b      	strb	r3, [r7, #8]
	sensor_msg.head.dst = WORKM_SENSOR;
 80067a8:	2303      	movs	r3, #3
 80067aa:	727b      	strb	r3, [r7, #9]
	sensor_msg.head.src = WORKM_TIMER;
 80067ac:	230b      	movs	r3, #11
 80067ae:	72bb      	strb	r3, [r7, #10]
	sensor_msg.head.len = 0;
 80067b0:	2300      	movs	r3, #0
 80067b2:	72fb      	strb	r3, [r7, #11]
	osMessageQueuePut(sensorThreadQ, &sensor_msg, 0U, 0U);
 80067b4:	4b05      	ldr	r3, [pc, #20]	@ (80067cc <ht_check_timeout_cb+0x30>)
 80067b6:	6818      	ldr	r0, [r3, #0]
 80067b8:	f107 0108 	add.w	r1, r7, #8
 80067bc:	2300      	movs	r3, #0
 80067be:	2200      	movs	r2, #0
 80067c0:	f009 fdea 	bl	8010398 <osMessageQueuePut>
}
 80067c4:	bf00      	nop
 80067c6:	3718      	adds	r7, #24
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	20001164 	.word	0x20001164

080067d0 <adc_check_timeout_cb>:

static void adc_check_timeout_cb (void *arg)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
	sensor_msg_t sensor_msg;
	sensor_msg.head.type = SENSOR_MSG_ADC_CHECK;
 80067d8:	2303      	movs	r3, #3
 80067da:	723b      	strb	r3, [r7, #8]
	sensor_msg.head.dst = WORKM_SENSOR;
 80067dc:	2303      	movs	r3, #3
 80067de:	727b      	strb	r3, [r7, #9]
	sensor_msg.head.src = WORKM_TIMER;
 80067e0:	230b      	movs	r3, #11
 80067e2:	72bb      	strb	r3, [r7, #10]
	sensor_msg.head.len = 0;
 80067e4:	2300      	movs	r3, #0
 80067e6:	72fb      	strb	r3, [r7, #11]
	osMessageQueuePut(sensorThreadQ, &sensor_msg, 0U, 0U);
 80067e8:	4b05      	ldr	r3, [pc, #20]	@ (8006800 <adc_check_timeout_cb+0x30>)
 80067ea:	6818      	ldr	r0, [r3, #0]
 80067ec:	f107 0108 	add.w	r1, r7, #8
 80067f0:	2300      	movs	r3, #0
 80067f2:	2200      	movs	r2, #0
 80067f4:	f009 fdd0 	bl	8010398 <osMessageQueuePut>
}
 80067f8:	bf00      	nop
 80067fa:	3718      	adds	r7, #24
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	20001164 	.word	0x20001164

08006804 <info_display_timeout_cb>:

static void info_display_timeout_cb (void *arg)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b086      	sub	sp, #24
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
	sensor_msg_t sensor_msg;
	sensor_msg.head.type = SENSOR_MSG_INFO_DISPLAY;
 800680c:	2304      	movs	r3, #4
 800680e:	723b      	strb	r3, [r7, #8]
	sensor_msg.head.dst = WORKM_SENSOR;
 8006810:	2303      	movs	r3, #3
 8006812:	727b      	strb	r3, [r7, #9]
	sensor_msg.head.src = WORKM_TIMER;
 8006814:	230b      	movs	r3, #11
 8006816:	72bb      	strb	r3, [r7, #10]
	sensor_msg.head.len = 0;
 8006818:	2300      	movs	r3, #0
 800681a:	72fb      	strb	r3, [r7, #11]
	osMessageQueuePut(sensorThreadQ, &sensor_msg, 0U, 0U);
 800681c:	4b05      	ldr	r3, [pc, #20]	@ (8006834 <info_display_timeout_cb+0x30>)
 800681e:	6818      	ldr	r0, [r3, #0]
 8006820:	f107 0108 	add.w	r1, r7, #8
 8006824:	2300      	movs	r3, #0
 8006826:	2200      	movs	r2, #0
 8006828:	f009 fdb6 	bl	8010398 <osMessageQueuePut>
}
 800682c:	bf00      	nop
 800682e:	3718      	adds	r7, #24
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	20001164 	.word	0x20001164

08006838 <osTimerList_init>:

bool osTimerList_init(osTimerEntry_t osTimerList[])
{
 8006838:	b5b0      	push	{r4, r5, r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
	for (uint32_t i = OS_TIMER_INDEX_BEGIN ; i < OS_TIMER_INDEX_END ; i++) {
 8006840:	2300      	movs	r3, #0
 8006842:	60fb      	str	r3, [r7, #12]
 8006844:	e03b      	b.n	80068be <osTimerList_init+0x86>
		osTimerList[i].osTimerId_t = NULL;
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	4613      	mov	r3, r2
 800684a:	011b      	lsls	r3, r3, #4
 800684c:	4413      	add	r3, r2
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	461a      	mov	r2, r3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4413      	add	r3, r2
 8006856:	2200      	movs	r2, #0
 8006858:	601a      	str	r2, [r3, #0]
		osTimerList[i].osTimerType = osTimerOnce;
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	4613      	mov	r3, r2
 800685e:	011b      	lsls	r3, r3, #4
 8006860:	4413      	add	r3, r2
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	461a      	mov	r2, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4413      	add	r3, r2
 800686a:	2200      	movs	r2, #0
 800686c:	711a      	strb	r2, [r3, #4]
		osTimerList[i].timeout_tick = 0;
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	4613      	mov	r3, r2
 8006872:	011b      	lsls	r3, r3, #4
 8006874:	4413      	add	r3, r2
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	461a      	mov	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4413      	add	r3, r2
 800687e:	2200      	movs	r2, #0
 8006880:	609a      	str	r2, [r3, #8]
		osTimerList[i].timeout_cb = NULL;
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	4613      	mov	r3, r2
 8006886:	011b      	lsls	r3, r3, #4
 8006888:	4413      	add	r3, r2
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	461a      	mov	r2, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4413      	add	r3, r2
 8006892:	2200      	movs	r2, #0
 8006894:	60da      	str	r2, [r3, #12]
		strcpy (osTimerList[i].timer_description, "UNDEFINED TIMER");
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	4613      	mov	r3, r2
 800689a:	011b      	lsls	r3, r3, #4
 800689c:	4413      	add	r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	461a      	mov	r2, r3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4413      	add	r3, r2
 80068a6:	3310      	adds	r3, #16
 80068a8:	4ab1      	ldr	r2, [pc, #708]	@ (8006b70 <osTimerList_init+0x338>)
 80068aa:	461c      	mov	r4, r3
 80068ac:	4615      	mov	r5, r2
 80068ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80068b0:	6020      	str	r0, [r4, #0]
 80068b2:	6061      	str	r1, [r4, #4]
 80068b4:	60a2      	str	r2, [r4, #8]
 80068b6:	60e3      	str	r3, [r4, #12]
	for (uint32_t i = OS_TIMER_INDEX_BEGIN ; i < OS_TIMER_INDEX_END ; i++) {
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	3301      	adds	r3, #1
 80068bc:	60fb      	str	r3, [r7, #12]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2b0e      	cmp	r3, #14
 80068c2:	d9c0      	bls.n	8006846 <osTimerList_init+0xe>
	}

	osTimerList[OS_TIMER_INDEX_CLI_CONSOLE_SCAN].osTimerType = osTimerOnce;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	711a      	strb	r2, [r3, #4]
	osTimerList[OS_TIMER_INDEX_CLI_CONSOLE_SCAN].timeout_tick = CONSOLE_SCAN_TIMEOUT;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	220a      	movs	r2, #10
 80068ce:	609a      	str	r2, [r3, #8]
	osTimerList[OS_TIMER_INDEX_CLI_CONSOLE_SCAN].timeout_cb = console_scan_timeout_cb;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4aa8      	ldr	r2, [pc, #672]	@ (8006b74 <osTimerList_init+0x33c>)
 80068d4:	60da      	str	r2, [r3, #12]
	osTimerList[OS_TIMER_INDEX_CLI_CONSOLE_SCAN].osTimerId = osTimerNew(osTimerList[OS_TIMER_INDEX_CLI_CONSOLE_SCAN].timeout_cb, osTimerList[OS_TIMER_INDEX_CLI_CONSOLE_SCAN].timeout_tick, NULL, NULL);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68d8      	ldr	r0, [r3, #12]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	b2d9      	uxtb	r1, r3
 80068e0:	2300      	movs	r3, #0
 80068e2:	2200      	movs	r2, #0
 80068e4:	f009 fb2c 	bl	800ff40 <osTimerNew>
 80068e8:	4602      	mov	r2, r0
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	601a      	str	r2, [r3, #0]
	assert (osTimerList[OS_TIMER_INDEX_CLI_CONSOLE_SCAN].osTimerId != NULL);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d105      	bne.n	8006902 <osTimerList_init+0xca>
 80068f6:	4ba0      	ldr	r3, [pc, #640]	@ (8006b78 <osTimerList_init+0x340>)
 80068f8:	4aa0      	ldr	r2, [pc, #640]	@ (8006b7c <osTimerList_init+0x344>)
 80068fa:	216e      	movs	r1, #110	@ 0x6e
 80068fc:	48a0      	ldr	r0, [pc, #640]	@ (8006b80 <osTimerList_init+0x348>)
 80068fe:	f00d fb0b 	bl	8013f18 <__assert_func>
	strcpy (osTimerList[OS_TIMER_INDEX_CLI_CONSOLE_SCAN].timer_description, "OS_TIMER_INDEX_CLI_CONSOLE_SCAN");
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	3310      	adds	r3, #16
 8006906:	4a9f      	ldr	r2, [pc, #636]	@ (8006b84 <osTimerList_init+0x34c>)
 8006908:	461c      	mov	r4, r3
 800690a:	4615      	mov	r5, r2
 800690c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800690e:	6020      	str	r0, [r4, #0]
 8006910:	6061      	str	r1, [r4, #4]
 8006912:	60a2      	str	r2, [r4, #8]
 8006914:	60e3      	str	r3, [r4, #12]
 8006916:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006918:	6120      	str	r0, [r4, #16]
 800691a:	6161      	str	r1, [r4, #20]
 800691c:	61a2      	str	r2, [r4, #24]
 800691e:	61e3      	str	r3, [r4, #28]

	osTimerList[OS_TIMER_INDEX_UPTIME_COUNT].osTimerType = osTimerPeriodic;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	3344      	adds	r3, #68	@ 0x44
 8006924:	2201      	movs	r2, #1
 8006926:	711a      	strb	r2, [r3, #4]
	osTimerList[OS_TIMER_INDEX_UPTIME_COUNT].timeout_tick = UPTIME_COUNT_TIMEOUT;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	3344      	adds	r3, #68	@ 0x44
 800692c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006930:	609a      	str	r2, [r3, #8]
	osTimerList[OS_TIMER_INDEX_UPTIME_COUNT].timeout_cb = uptime_counter_timeout_cb;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	3344      	adds	r3, #68	@ 0x44
 8006936:	4a94      	ldr	r2, [pc, #592]	@ (8006b88 <osTimerList_init+0x350>)
 8006938:	60da      	str	r2, [r3, #12]
	osTimerList[OS_TIMER_INDEX_UPTIME_COUNT].osTimerId = osTimerNew(osTimerList[OS_TIMER_INDEX_UPTIME_COUNT].timeout_cb, osTimerList[OS_TIMER_INDEX_UPTIME_COUNT].timeout_tick, NULL, NULL);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	3344      	adds	r3, #68	@ 0x44
 800693e:	68d8      	ldr	r0, [r3, #12]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	3344      	adds	r3, #68	@ 0x44
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	b2d9      	uxtb	r1, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f103 0444 	add.w	r4, r3, #68	@ 0x44
 800694e:	2300      	movs	r3, #0
 8006950:	2200      	movs	r2, #0
 8006952:	f009 faf5 	bl	800ff40 <osTimerNew>
 8006956:	4603      	mov	r3, r0
 8006958:	6023      	str	r3, [r4, #0]
	assert (osTimerList[OS_TIMER_INDEX_UPTIME_COUNT].osTimerId != NULL);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	3344      	adds	r3, #68	@ 0x44
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d105      	bne.n	8006970 <osTimerList_init+0x138>
 8006964:	4b89      	ldr	r3, [pc, #548]	@ (8006b8c <osTimerList_init+0x354>)
 8006966:	4a85      	ldr	r2, [pc, #532]	@ (8006b7c <osTimerList_init+0x344>)
 8006968:	2175      	movs	r1, #117	@ 0x75
 800696a:	4885      	ldr	r0, [pc, #532]	@ (8006b80 <osTimerList_init+0x348>)
 800696c:	f00d fad4 	bl	8013f18 <__assert_func>
	strcpy (osTimerList[OS_TIMER_INDEX_UPTIME_COUNT].timer_description, "OS_TIMER_INDEX_UPTIME_COUNT");
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	3344      	adds	r3, #68	@ 0x44
 8006974:	3310      	adds	r3, #16
 8006976:	4a86      	ldr	r2, [pc, #536]	@ (8006b90 <osTimerList_init+0x358>)
 8006978:	461d      	mov	r5, r3
 800697a:	4614      	mov	r4, r2
 800697c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800697e:	6028      	str	r0, [r5, #0]
 8006980:	6069      	str	r1, [r5, #4]
 8006982:	60aa      	str	r2, [r5, #8]
 8006984:	60eb      	str	r3, [r5, #12]
 8006986:	cc07      	ldmia	r4!, {r0, r1, r2}
 8006988:	6128      	str	r0, [r5, #16]
 800698a:	6169      	str	r1, [r5, #20]
 800698c:	61aa      	str	r2, [r5, #24]

	osTimerList[OS_TIMER_INDEX_DOOR_CHECK].osTimerType = osTimerOnce;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	3388      	adds	r3, #136	@ 0x88
 8006992:	2200      	movs	r2, #0
 8006994:	711a      	strb	r2, [r3, #4]
	osTimerList[OS_TIMER_INDEX_DOOR_CHECK].timeout_tick = DOOR_CHECK_TIMEOUT;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	3388      	adds	r3, #136	@ 0x88
 800699a:	2264      	movs	r2, #100	@ 0x64
 800699c:	609a      	str	r2, [r3, #8]
	osTimerList[OS_TIMER_INDEX_DOOR_CHECK].timeout_cb = door_check_timeout_cb;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	3388      	adds	r3, #136	@ 0x88
 80069a2:	4a7c      	ldr	r2, [pc, #496]	@ (8006b94 <osTimerList_init+0x35c>)
 80069a4:	60da      	str	r2, [r3, #12]
	osTimerList[OS_TIMER_INDEX_DOOR_CHECK].osTimerId = osTimerNew(osTimerList[OS_TIMER_INDEX_DOOR_CHECK].timeout_cb, osTimerList[OS_TIMER_INDEX_DOOR_CHECK].timeout_tick, NULL, NULL);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	3388      	adds	r3, #136	@ 0x88
 80069aa:	68d8      	ldr	r0, [r3, #12]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	3388      	adds	r3, #136	@ 0x88
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	b2d9      	uxtb	r1, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f103 0488 	add.w	r4, r3, #136	@ 0x88
 80069ba:	2300      	movs	r3, #0
 80069bc:	2200      	movs	r2, #0
 80069be:	f009 fabf 	bl	800ff40 <osTimerNew>
 80069c2:	4603      	mov	r3, r0
 80069c4:	6023      	str	r3, [r4, #0]
	assert (osTimerList[OS_TIMER_INDEX_DOOR_CHECK].osTimerId != NULL);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	3388      	adds	r3, #136	@ 0x88
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d105      	bne.n	80069dc <osTimerList_init+0x1a4>
 80069d0:	4b71      	ldr	r3, [pc, #452]	@ (8006b98 <osTimerList_init+0x360>)
 80069d2:	4a6a      	ldr	r2, [pc, #424]	@ (8006b7c <osTimerList_init+0x344>)
 80069d4:	217c      	movs	r1, #124	@ 0x7c
 80069d6:	486a      	ldr	r0, [pc, #424]	@ (8006b80 <osTimerList_init+0x348>)
 80069d8:	f00d fa9e 	bl	8013f18 <__assert_func>
	strcpy (osTimerList[OS_TIMER_INDEX_DOOR_CHECK].timer_description, "OS_TIMER_INDEX_DOOR_CHECK");
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	3388      	adds	r3, #136	@ 0x88
 80069e0:	3310      	adds	r3, #16
 80069e2:	4a6e      	ldr	r2, [pc, #440]	@ (8006b9c <osTimerList_init+0x364>)
 80069e4:	461d      	mov	r5, r3
 80069e6:	4614      	mov	r4, r2
 80069e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069ea:	6028      	str	r0, [r5, #0]
 80069ec:	6069      	str	r1, [r5, #4]
 80069ee:	60aa      	str	r2, [r5, #8]
 80069f0:	60eb      	str	r3, [r5, #12]
 80069f2:	cc03      	ldmia	r4!, {r0, r1}
 80069f4:	6128      	str	r0, [r5, #16]
 80069f6:	6169      	str	r1, [r5, #20]
 80069f8:	8823      	ldrh	r3, [r4, #0]
 80069fa:	832b      	strh	r3, [r5, #24]

	osTimerList[OS_TIMER_INDEX_HT_CHECK].osTimerType = osTimerOnce;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	33cc      	adds	r3, #204	@ 0xcc
 8006a00:	2200      	movs	r2, #0
 8006a02:	711a      	strb	r2, [r3, #4]
	osTimerList[OS_TIMER_INDEX_HT_CHECK].timeout_tick = HT_CHECK_TIMEOUT;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	33cc      	adds	r3, #204	@ 0xcc
 8006a08:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006a0c:	609a      	str	r2, [r3, #8]
	osTimerList[OS_TIMER_INDEX_HT_CHECK].timeout_cb = ht_check_timeout_cb;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	33cc      	adds	r3, #204	@ 0xcc
 8006a12:	4a63      	ldr	r2, [pc, #396]	@ (8006ba0 <osTimerList_init+0x368>)
 8006a14:	60da      	str	r2, [r3, #12]
	osTimerList[OS_TIMER_INDEX_HT_CHECK].osTimerId = osTimerNew(osTimerList[OS_TIMER_INDEX_HT_CHECK].timeout_cb, osTimerList[OS_TIMER_INDEX_HT_CHECK].timeout_tick, NULL, NULL);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	33cc      	adds	r3, #204	@ 0xcc
 8006a1a:	68d8      	ldr	r0, [r3, #12]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	33cc      	adds	r3, #204	@ 0xcc
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	b2d9      	uxtb	r1, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f103 04cc 	add.w	r4, r3, #204	@ 0xcc
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f009 fa87 	bl	800ff40 <osTimerNew>
 8006a32:	4603      	mov	r3, r0
 8006a34:	6023      	str	r3, [r4, #0]
	assert (osTimerList[OS_TIMER_INDEX_HT_CHECK].osTimerId != NULL);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	33cc      	adds	r3, #204	@ 0xcc
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d105      	bne.n	8006a4c <osTimerList_init+0x214>
 8006a40:	4b58      	ldr	r3, [pc, #352]	@ (8006ba4 <osTimerList_init+0x36c>)
 8006a42:	4a4e      	ldr	r2, [pc, #312]	@ (8006b7c <osTimerList_init+0x344>)
 8006a44:	2183      	movs	r1, #131	@ 0x83
 8006a46:	484e      	ldr	r0, [pc, #312]	@ (8006b80 <osTimerList_init+0x348>)
 8006a48:	f00d fa66 	bl	8013f18 <__assert_func>
	strcpy (osTimerList[OS_TIMER_INDEX_HT_CHECK].timer_description, "OS_TIMER_INDEX_HT_CHECK");
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	33cc      	adds	r3, #204	@ 0xcc
 8006a50:	3310      	adds	r3, #16
 8006a52:	4a55      	ldr	r2, [pc, #340]	@ (8006ba8 <osTimerList_init+0x370>)
 8006a54:	461d      	mov	r5, r3
 8006a56:	4614      	mov	r4, r2
 8006a58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a5a:	6028      	str	r0, [r5, #0]
 8006a5c:	6069      	str	r1, [r5, #4]
 8006a5e:	60aa      	str	r2, [r5, #8]
 8006a60:	60eb      	str	r3, [r5, #12]
 8006a62:	cc03      	ldmia	r4!, {r0, r1}
 8006a64:	6128      	str	r0, [r5, #16]
 8006a66:	6169      	str	r1, [r5, #20]

	osTimerList[OS_TIMER_INDEX_ADC_CHECK].osTimerType = osTimerOnce;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8006a6e:	2200      	movs	r2, #0
 8006a70:	711a      	strb	r2, [r3, #4]
	osTimerList[OS_TIMER_INDEX_ADC_CHECK].timeout_tick = ADC_CHECK_TIMEOUT;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8006a78:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006a7c:	609a      	str	r2, [r3, #8]
	osTimerList[OS_TIMER_INDEX_ADC_CHECK].timeout_cb = adc_check_timeout_cb;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8006a84:	4a49      	ldr	r2, [pc, #292]	@ (8006bac <osTimerList_init+0x374>)
 8006a86:	60da      	str	r2, [r3, #12]
	osTimerList[OS_TIMER_INDEX_ADC_CHECK].osTimerId = osTimerNew(osTimerList[OS_TIMER_INDEX_ADC_CHECK].timeout_cb, osTimerList[OS_TIMER_INDEX_ADC_CHECK].timeout_tick, NULL, NULL);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8006a8e:	68d8      	ldr	r0, [r3, #12]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	b2d9      	uxtb	r1, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f503 7488 	add.w	r4, r3, #272	@ 0x110
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f009 fa4c 	bl	800ff40 <osTimerNew>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	6023      	str	r3, [r4, #0]
	assert (osTimerList[OS_TIMER_INDEX_ADC_CHECK].osTimerId != NULL);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d105      	bne.n	8006ac4 <osTimerList_init+0x28c>
 8006ab8:	4b3d      	ldr	r3, [pc, #244]	@ (8006bb0 <osTimerList_init+0x378>)
 8006aba:	4a30      	ldr	r2, [pc, #192]	@ (8006b7c <osTimerList_init+0x344>)
 8006abc:	218a      	movs	r1, #138	@ 0x8a
 8006abe:	4830      	ldr	r0, [pc, #192]	@ (8006b80 <osTimerList_init+0x348>)
 8006ac0:	f00d fa2a 	bl	8013f18 <__assert_func>
	strcpy (osTimerList[OS_TIMER_INDEX_ADC_CHECK].timer_description, "OS_TIMER_INDEX_ADC_CHECK");
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8006aca:	3310      	adds	r3, #16
 8006acc:	4a39      	ldr	r2, [pc, #228]	@ (8006bb4 <osTimerList_init+0x37c>)
 8006ace:	461d      	mov	r5, r3
 8006ad0:	4614      	mov	r4, r2
 8006ad2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ad4:	6028      	str	r0, [r5, #0]
 8006ad6:	6069      	str	r1, [r5, #4]
 8006ad8:	60aa      	str	r2, [r5, #8]
 8006ada:	60eb      	str	r3, [r5, #12]
 8006adc:	cc03      	ldmia	r4!, {r0, r1}
 8006ade:	6128      	str	r0, [r5, #16]
 8006ae0:	6169      	str	r1, [r5, #20]
 8006ae2:	7823      	ldrb	r3, [r4, #0]
 8006ae4:	762b      	strb	r3, [r5, #24]

	osTimerList[OS_TIMER_INDEX_SCW_INFO_DISPLAY].osTimerType = osTimerOnce;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006aec:	2200      	movs	r2, #0
 8006aee:	711a      	strb	r2, [r3, #4]
	osTimerList[OS_TIMER_INDEX_SCW_INFO_DISPLAY].timeout_tick = INFO_DISPLAY_TIMEOUT;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006af6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006afa:	609a      	str	r2, [r3, #8]
	osTimerList[OS_TIMER_INDEX_SCW_INFO_DISPLAY].timeout_cb = info_display_timeout_cb;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006b02:	4a2d      	ldr	r2, [pc, #180]	@ (8006bb8 <osTimerList_init+0x380>)
 8006b04:	60da      	str	r2, [r3, #12]
	osTimerList[OS_TIMER_INDEX_SCW_INFO_DISPLAY].osTimerId = osTimerNew(osTimerList[OS_TIMER_INDEX_SCW_INFO_DISPLAY].timeout_cb, osTimerList[OS_TIMER_INDEX_SCW_INFO_DISPLAY].timeout_tick, NULL, NULL);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006b0c:	68d8      	ldr	r0, [r3, #12]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	b2d9      	uxtb	r1, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f503 74aa 	add.w	r4, r3, #340	@ 0x154
 8006b1e:	2300      	movs	r3, #0
 8006b20:	2200      	movs	r2, #0
 8006b22:	f009 fa0d 	bl	800ff40 <osTimerNew>
 8006b26:	4603      	mov	r3, r0
 8006b28:	6023      	str	r3, [r4, #0]
	assert (osTimerList[OS_TIMER_INDEX_SCW_INFO_DISPLAY].osTimerId != NULL);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d105      	bne.n	8006b42 <osTimerList_init+0x30a>
 8006b36:	4b21      	ldr	r3, [pc, #132]	@ (8006bbc <osTimerList_init+0x384>)
 8006b38:	4a10      	ldr	r2, [pc, #64]	@ (8006b7c <osTimerList_init+0x344>)
 8006b3a:	2191      	movs	r1, #145	@ 0x91
 8006b3c:	4810      	ldr	r0, [pc, #64]	@ (8006b80 <osTimerList_init+0x348>)
 8006b3e:	f00d f9eb 	bl	8013f18 <__assert_func>
	strcpy (osTimerList[OS_TIMER_INDEX_SCW_INFO_DISPLAY].timer_description, "OS_TIMER_INDEX_SCW_INFO_DISPLAY");
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006b48:	3310      	adds	r3, #16
 8006b4a:	4a1d      	ldr	r2, [pc, #116]	@ (8006bc0 <osTimerList_init+0x388>)
 8006b4c:	461c      	mov	r4, r3
 8006b4e:	4615      	mov	r5, r2
 8006b50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b52:	6020      	str	r0, [r4, #0]
 8006b54:	6061      	str	r1, [r4, #4]
 8006b56:	60a2      	str	r2, [r4, #8]
 8006b58:	60e3      	str	r3, [r4, #12]
 8006b5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b5c:	6120      	str	r0, [r4, #16]
 8006b5e:	6161      	str	r1, [r4, #20]
 8006b60:	61a2      	str	r2, [r4, #24]
 8006b62:	61e3      	str	r3, [r4, #28]

	return true;
 8006b64:	2301      	movs	r3, #1
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3710      	adds	r7, #16
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bdb0      	pop	{r4, r5, r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	08018b08 	.word	0x08018b08
 8006b74:	080066cd 	.word	0x080066cd
 8006b78:	08018b18 	.word	0x08018b18
 8006b7c:	08019de8 	.word	0x08019de8
 8006b80:	08018a98 	.word	0x08018a98
 8006b84:	08018b58 	.word	0x08018b58
 8006b88:	080066ed 	.word	0x080066ed
 8006b8c:	08018b78 	.word	0x08018b78
 8006b90:	08018bb4 	.word	0x08018bb4
 8006b94:	08006769 	.word	0x08006769
 8006b98:	08018bd0 	.word	0x08018bd0
 8006b9c:	08018c0c 	.word	0x08018c0c
 8006ba0:	0800679d 	.word	0x0800679d
 8006ba4:	08018c28 	.word	0x08018c28
 8006ba8:	08018c60 	.word	0x08018c60
 8006bac:	080067d1 	.word	0x080067d1
 8006bb0:	08018c78 	.word	0x08018c78
 8006bb4:	08018cb0 	.word	0x08018cb0
 8006bb8:	08006805 	.word	0x08006805
 8006bbc:	08018ccc 	.word	0x08018ccc
 8006bc0:	08018d0c 	.word	0x08018d0c

08006bc4 <SHT2x_Init>:

/**
 * @brief Initializes the SHT2x temperature/humidity sensor.
 * @param hi2c User I2C handle pointer.
 */
bool SHT2x_Init(I2C_HandleTypeDef *hi2c) {
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
	_sht2x_ui2c = hi2c;
 8006bcc:	4a05      	ldr	r2, [pc, #20]	@ (8006be4 <SHT2x_Init+0x20>)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6013      	str	r3, [r2, #0]
	SHT2x_SetResolution(RES_14_12);
 8006bd2:	2000      	movs	r0, #0
 8006bd4:	f000 f8d6 	bl	8006d84 <SHT2x_SetResolution>
	return true;
 8006bd8:	2301      	movs	r3, #1
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3708      	adds	r7, #8
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	20001148 	.word	0x20001148

08006be8 <SHT2x_ReadUserReg>:

/**
 * @brief Gets the value stored in user register.
 * @return 8-bit value stored in user register, 0 to 255.
 */
uint8_t SHT2x_ReadUserReg(void) {
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af02      	add	r7, sp, #8
	uint8_t val;
	uint8_t cmd = SHT2x_READ_REG;
 8006bee:	23e7      	movs	r3, #231	@ 0xe7
 8006bf0:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &cmd, 1, SHT2x_TIMEOUT);
 8006bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8006c24 <SHT2x_ReadUserReg+0x3c>)
 8006bf4:	6818      	ldr	r0, [r3, #0]
 8006bf6:	1dba      	adds	r2, r7, #6
 8006bf8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006bfc:	9300      	str	r3, [sp, #0]
 8006bfe:	2301      	movs	r3, #1
 8006c00:	2180      	movs	r1, #128	@ 0x80
 8006c02:	f003 fc13 	bl	800a42c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &val, 1, SHT2x_TIMEOUT);
 8006c06:	4b07      	ldr	r3, [pc, #28]	@ (8006c24 <SHT2x_ReadUserReg+0x3c>)
 8006c08:	6818      	ldr	r0, [r3, #0]
 8006c0a:	1dfa      	adds	r2, r7, #7
 8006c0c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006c10:	9300      	str	r3, [sp, #0]
 8006c12:	2301      	movs	r3, #1
 8006c14:	2180      	movs	r1, #128	@ 0x80
 8006c16:	f003 fd07 	bl	800a628 <HAL_I2C_Master_Receive>
	return val;
 8006c1a:	79fb      	ldrb	r3, [r7, #7]
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3708      	adds	r7, #8
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	20001148 	.word	0x20001148

08006c28 <SHT2x_GetRaw>:
/**
 * @brief Sends the designated command to sensor and read a 16-bit raw value.
 * @param cmd Command to send to sensor.
 * @return 16-bit raw value, 0 to 65535.
 */
uint16_t SHT2x_GetRaw(uint8_t cmd) {
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b086      	sub	sp, #24
 8006c2c:	af02      	add	r7, sp, #8
 8006c2e:	4603      	mov	r3, r0
 8006c30:	71fb      	strb	r3, [r7, #7]
	uint8_t val[3] = { 0 };
 8006c32:	f107 030c 	add.w	r3, r7, #12
 8006c36:	2100      	movs	r1, #0
 8006c38:	460a      	mov	r2, r1
 8006c3a:	801a      	strh	r2, [r3, #0]
 8006c3c:	460a      	mov	r2, r1
 8006c3e:	709a      	strb	r2, [r3, #2]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &cmd, 1, SHT2x_TIMEOUT);
 8006c40:	4b10      	ldr	r3, [pc, #64]	@ (8006c84 <SHT2x_GetRaw+0x5c>)
 8006c42:	6818      	ldr	r0, [r3, #0]
 8006c44:	1dfa      	adds	r2, r7, #7
 8006c46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006c4a:	9300      	str	r3, [sp, #0]
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	2180      	movs	r1, #128	@ 0x80
 8006c50:	f003 fbec 	bl	800a42c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, val, 3, SHT2x_TIMEOUT);
 8006c54:	4b0b      	ldr	r3, [pc, #44]	@ (8006c84 <SHT2x_GetRaw+0x5c>)
 8006c56:	6818      	ldr	r0, [r3, #0]
 8006c58:	f107 020c 	add.w	r2, r7, #12
 8006c5c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006c60:	9300      	str	r3, [sp, #0]
 8006c62:	2303      	movs	r3, #3
 8006c64:	2180      	movs	r1, #128	@ 0x80
 8006c66:	f003 fcdf 	bl	800a628 <HAL_I2C_Master_Receive>
	return val[0] << 8 | val[1];
 8006c6a:	7b3b      	ldrb	r3, [r7, #12]
 8006c6c:	b21b      	sxth	r3, r3
 8006c6e:	021b      	lsls	r3, r3, #8
 8006c70:	b21a      	sxth	r2, r3
 8006c72:	7b7b      	ldrb	r3, [r7, #13]
 8006c74:	b21b      	sxth	r3, r3
 8006c76:	4313      	orrs	r3, r2
 8006c78:	b21b      	sxth	r3, r3
 8006c7a:	b29b      	uxth	r3, r3
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3710      	adds	r7, #16
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	20001148 	.word	0x20001148

08006c88 <SHT2x_GetTemperature>:
/**
 * @brief Measures and gets the current temperature.
 * @param hold Holding mode, 0 for no hold master, 1 for hold master.
 * @return Floating point temperature value.
 */
float SHT2x_GetTemperature(uint8_t hold) {
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	4603      	mov	r3, r0
 8006c90:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = (hold ? SHT2x_READ_TEMP_HOLD : SHT2x_READ_TEMP_NOHOLD);
 8006c92:	79fb      	ldrb	r3, [r7, #7]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d001      	beq.n	8006c9c <SHT2x_GetTemperature+0x14>
 8006c98:	23e3      	movs	r3, #227	@ 0xe3
 8006c9a:	e000      	b.n	8006c9e <SHT2x_GetTemperature+0x16>
 8006c9c:	23f3      	movs	r3, #243	@ 0xf3
 8006c9e:	73fb      	strb	r3, [r7, #15]
	return -46.85 + 175.72 * (SHT2x_GetRaw(cmd) / 65536.0);
 8006ca0:	7bfb      	ldrb	r3, [r7, #15]
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f7ff ffc0 	bl	8006c28 <SHT2x_GetRaw>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	4618      	mov	r0, r3
 8006cac:	f7f9 fcd8 	bl	8000660 <__aeabi_i2d>
 8006cb0:	f04f 0200 	mov.w	r2, #0
 8006cb4:	4b14      	ldr	r3, [pc, #80]	@ (8006d08 <SHT2x_GetTemperature+0x80>)
 8006cb6:	f7f9 fe67 	bl	8000988 <__aeabi_ddiv>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	4610      	mov	r0, r2
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	a30d      	add	r3, pc, #52	@ (adr r3, 8006cf8 <SHT2x_GetTemperature+0x70>)
 8006cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc8:	f7f9 fd34 	bl	8000734 <__aeabi_dmul>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	460b      	mov	r3, r1
 8006cd0:	4610      	mov	r0, r2
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	a30a      	add	r3, pc, #40	@ (adr r3, 8006d00 <SHT2x_GetTemperature+0x78>)
 8006cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cda:	f7f9 fb73 	bl	80003c4 <__aeabi_dsub>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	4610      	mov	r0, r2
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	f7f9 ff37 	bl	8000b58 <__aeabi_d2f>
 8006cea:	4603      	mov	r3, r0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	f3af 8000 	nop.w
 8006cf8:	3d70a3d7 	.word	0x3d70a3d7
 8006cfc:	4065f70a 	.word	0x4065f70a
 8006d00:	cccccccd 	.word	0xcccccccd
 8006d04:	40476ccc 	.word	0x40476ccc
 8006d08:	40f00000 	.word	0x40f00000

08006d0c <SHT2x_GetRelativeHumidity>:
/**
 * @brief Measures and gets the current relative humidity.
 * @param hold Holding mode, 0 for no hold master, 1 for hold master.
 * @return Floating point relative humidity value.
 */
float SHT2x_GetRelativeHumidity(uint8_t hold) {
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	4603      	mov	r3, r0
 8006d14:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = (hold ? SHT2x_READ_RH_HOLD : SHT2x_READ_RH_NOHOLD);
 8006d16:	79fb      	ldrb	r3, [r7, #7]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d001      	beq.n	8006d20 <SHT2x_GetRelativeHumidity+0x14>
 8006d1c:	23e5      	movs	r3, #229	@ 0xe5
 8006d1e:	e000      	b.n	8006d22 <SHT2x_GetRelativeHumidity+0x16>
 8006d20:	23f5      	movs	r3, #245	@ 0xf5
 8006d22:	73fb      	strb	r3, [r7, #15]
	return -6 + 125.00 * (SHT2x_GetRaw(cmd) / 65536.0);
 8006d24:	7bfb      	ldrb	r3, [r7, #15]
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7ff ff7e 	bl	8006c28 <SHT2x_GetRaw>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7f9 fc96 	bl	8000660 <__aeabi_i2d>
 8006d34:	f04f 0200 	mov.w	r2, #0
 8006d38:	4b0f      	ldr	r3, [pc, #60]	@ (8006d78 <SHT2x_GetRelativeHumidity+0x6c>)
 8006d3a:	f7f9 fe25 	bl	8000988 <__aeabi_ddiv>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	460b      	mov	r3, r1
 8006d42:	4610      	mov	r0, r2
 8006d44:	4619      	mov	r1, r3
 8006d46:	f04f 0200 	mov.w	r2, #0
 8006d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8006d7c <SHT2x_GetRelativeHumidity+0x70>)
 8006d4c:	f7f9 fcf2 	bl	8000734 <__aeabi_dmul>
 8006d50:	4602      	mov	r2, r0
 8006d52:	460b      	mov	r3, r1
 8006d54:	4610      	mov	r0, r2
 8006d56:	4619      	mov	r1, r3
 8006d58:	f04f 0200 	mov.w	r2, #0
 8006d5c:	4b08      	ldr	r3, [pc, #32]	@ (8006d80 <SHT2x_GetRelativeHumidity+0x74>)
 8006d5e:	f7f9 fb31 	bl	80003c4 <__aeabi_dsub>
 8006d62:	4602      	mov	r2, r0
 8006d64:	460b      	mov	r3, r1
 8006d66:	4610      	mov	r0, r2
 8006d68:	4619      	mov	r1, r3
 8006d6a:	f7f9 fef5 	bl	8000b58 <__aeabi_d2f>
 8006d6e:	4603      	mov	r3, r0
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3710      	adds	r7, #16
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	40f00000 	.word	0x40f00000
 8006d7c:	405f4000 	.word	0x405f4000
 8006d80:	40180000 	.word	0x40180000

08006d84 <SHT2x_SetResolution>:
 * @brief Sets the measurement resolution.
 * @param res Enum resolution.
 * @note Available resolutions: RES_14_12, RES_12_8, RES_13_10, RES_11_11.
 * @note RES_14_12 = 14-bit temperature and 12-bit RH resolution, etc.
 */
void SHT2x_SetResolution(SHT2x_Resolution res) {
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b086      	sub	sp, #24
 8006d88:	af02      	add	r7, sp, #8
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	71fb      	strb	r3, [r7, #7]
	uint8_t val = SHT2x_ReadUserReg();
 8006d8e:	f7ff ff2b 	bl	8006be8 <SHT2x_ReadUserReg>
 8006d92:	4603      	mov	r3, r0
 8006d94:	73fb      	strb	r3, [r7, #15]
	val = (val & 0x7e) | res;
 8006d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d9a:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8006d9e:	b25a      	sxtb	r2, r3
 8006da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	b25b      	sxtb	r3, r3
 8006da8:	73fb      	strb	r3, [r7, #15]
	uint8_t temp[2] = { SHT2x_WRITE_REG, val };
 8006daa:	23e6      	movs	r3, #230	@ 0xe6
 8006dac:	733b      	strb	r3, [r7, #12]
 8006dae:	7bfb      	ldrb	r3, [r7, #15]
 8006db0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, temp, 2, SHT2x_TIMEOUT);
 8006db2:	4b07      	ldr	r3, [pc, #28]	@ (8006dd0 <SHT2x_SetResolution+0x4c>)
 8006db4:	6818      	ldr	r0, [r3, #0]
 8006db6:	f107 020c 	add.w	r2, r7, #12
 8006dba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006dbe:	9300      	str	r3, [sp, #0]
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	2180      	movs	r1, #128	@ 0x80
 8006dc4:	f003 fb32 	bl	800a42c <HAL_I2C_Master_Transmit>
}
 8006dc8:	bf00      	nop
 8006dca:	3710      	adds	r7, #16
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	20001148 	.word	0x20001148
 8006dd4:	00000000 	.word	0x00000000

08006dd8 <SHT2x_CelsiusToFahrenheit>:
/**
 * @brief Converts degrees Celsius to degrees Fahrenheit.
 * @param celsius Floating point temperature in degrees Celsius.
 * @return Floating point temperature in degrees Fahrenheit.
 */
float SHT2x_CelsiusToFahrenheit(float celsius) {
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
	return (9.0 / 5.0) * celsius + 32;
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f7f9 fc4f 	bl	8000684 <__aeabi_f2d>
 8006de6:	a30c      	add	r3, pc, #48	@ (adr r3, 8006e18 <SHT2x_CelsiusToFahrenheit+0x40>)
 8006de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dec:	f7f9 fca2 	bl	8000734 <__aeabi_dmul>
 8006df0:	4602      	mov	r2, r0
 8006df2:	460b      	mov	r3, r1
 8006df4:	4610      	mov	r0, r2
 8006df6:	4619      	mov	r1, r3
 8006df8:	f04f 0200 	mov.w	r2, #0
 8006dfc:	4b08      	ldr	r3, [pc, #32]	@ (8006e20 <SHT2x_CelsiusToFahrenheit+0x48>)
 8006dfe:	f7f9 fae3 	bl	80003c8 <__adddf3>
 8006e02:	4602      	mov	r2, r0
 8006e04:	460b      	mov	r3, r1
 8006e06:	4610      	mov	r0, r2
 8006e08:	4619      	mov	r1, r3
 8006e0a:	f7f9 fea5 	bl	8000b58 <__aeabi_d2f>
 8006e0e:	4603      	mov	r3, r0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3708      	adds	r7, #8
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	cccccccd 	.word	0xcccccccd
 8006e1c:	3ffccccc 	.word	0x3ffccccc
 8006e20:	40400000 	.word	0x40400000

08006e24 <SHT2x_CelsiusToKelvin>:
/**
 * @brief Converts degrees Celsius to Kelvin.
 * @param celsius Floating point temperature in degrees Celsius.
 * @return Floating point temperature in Kelvin.
 */
float SHT2x_CelsiusToKelvin(float celsius) {
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
	return celsius + 273;
 8006e2c:	4904      	ldr	r1, [pc, #16]	@ (8006e40 <SHT2x_CelsiusToKelvin+0x1c>)
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f7f9 fee8 	bl	8000c04 <__addsf3>
 8006e34:	4603      	mov	r3, r0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3708      	adds	r7, #8
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	43888000 	.word	0x43888000

08006e44 <SHT2x_GetInteger>:
 * @brief Gets the integer part of a floating point number.
 * @note Avoids the use of sprinf floating point formatting.
 * @param num Floating point number.
 * @return Integer part of floating point number.
 */
int32_t SHT2x_GetInteger(float num) {
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
	return num / 1;
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f7f9 ffe1 	bl	8000e14 <__aeabi_f2iz>
 8006e52:	4603      	mov	r3, r0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3708      	adds	r7, #8
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <SHT2x_GetDecimal>:
 * @brief Gets the decimal part of a floating point number.
 * @note Avoids the use of sprinf floating point formatting.
 * @param num Floating point number.
 * @return Decimal part of floating point number.
 */
uint32_t SHT2x_GetDecimal(float num, int digits) {
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
	float postDec = num - SHT2x_GetInteger(num);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f7ff ffec 	bl	8006e44 <SHT2x_GetInteger>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7f9 ff7c 	bl	8000d6c <__aeabi_i2f>
 8006e74:	4603      	mov	r3, r0
 8006e76:	4619      	mov	r1, r3
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f7f9 fec1 	bl	8000c00 <__aeabi_fsub>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	60fb      	str	r3, [r7, #12]
	return postDec * SHT2x_Ipow(10, digits);
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	4619      	mov	r1, r3
 8006e86:	200a      	movs	r0, #10
 8006e88:	f000 f812 	bl	8006eb0 <SHT2x_Ipow>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7f9 ff68 	bl	8000d64 <__aeabi_ui2f>
 8006e94:	4603      	mov	r3, r0
 8006e96:	68f9      	ldr	r1, [r7, #12]
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f7f9 f9db 	bl	8000254 <__aeabi_fmul>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f7f9 ffdd 	bl	8000e60 <__aeabi_f2uiz>
 8006ea6:	4603      	mov	r3, r0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3710      	adds	r7, #16
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <SHT2x_Ipow>:
 * @brief Integer equivalent of pow() in math.h.
 * @param base Base.
 * @param power Power.
 * @return
 */
uint32_t SHT2x_Ipow(uint32_t base, uint32_t power) {
 8006eb0:	b480      	push	{r7}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
	uint32_t temp = base;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	60fb      	str	r3, [r7, #12]
	for (uint32_t i = 1; i < power; i++)
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	60bb      	str	r3, [r7, #8]
 8006ec2:	e007      	b.n	8006ed4 <SHT2x_Ipow+0x24>
		temp *= base;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	fb02 f303 	mul.w	r3, r2, r3
 8006ecc:	60fb      	str	r3, [r7, #12]
	for (uint32_t i = 1; i < power; i++)
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	60bb      	str	r3, [r7, #8]
 8006ed4:	68ba      	ldr	r2, [r7, #8]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d3f3      	bcc.n	8006ec4 <SHT2x_Ipow+0x14>
	return temp;
 8006edc:	68fb      	ldr	r3, [r7, #12]
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3714      	adds	r7, #20
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bc80      	pop	{r7}
 8006ee6:	4770      	bx	lr

08006ee8 <CircularQueue_Init>:
 * @param  queueSize:  Size of Queue Buffer
 * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
 * @retval   always 0
 */
int CircularQueue_Init(queue_t *q, uint8_t *queueBuffer, uint32_t queueSize,
		uint16_t elementSize, uint8_t optionFlags) {
 8006ee8:	b480      	push	{r7}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
 8006ef4:	807b      	strh	r3, [r7, #2]
	q->qBuff = queueBuffer;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	68ba      	ldr	r2, [r7, #8]
 8006efa:	601a      	str	r2, [r3, #0]
	q->first = 0;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2200      	movs	r2, #0
 8006f00:	60da      	str	r2, [r3, #12]
	q->last = 0; /* queueSize-1; */
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2200      	movs	r2, #0
 8006f06:	611a      	str	r2, [r3, #16]
	q->byteCount = 0;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	615a      	str	r2, [r3, #20]
	q->elementCount = 0;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	619a      	str	r2, [r3, #24]
	q->queueMaxSize = queueSize;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	605a      	str	r2, [r3, #4]
	q->elementSize = elementSize;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	887a      	ldrh	r2, [r7, #2]
 8006f1e:	811a      	strh	r2, [r3, #8]
	q->optionFlags = optionFlags;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	7e3a      	ldrb	r2, [r7, #24]
 8006f24:	771a      	strb	r2, [r3, #28]

	if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 8006f26:	7e3b      	ldrb	r3, [r7, #24]
 8006f28:	f003 0302 	and.w	r3, r3, #2
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d006      	beq.n	8006f3e <CircularQueue_Init+0x56>
			&& q->elementSize) {
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	891b      	ldrh	r3, [r3, #8]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d002      	beq.n	8006f3e <CircularQueue_Init+0x56>
		/* can not deal with splitting at the end of buffer with fixed size element */
		return -1;
 8006f38:	f04f 33ff 	mov.w	r3, #4294967295
 8006f3c:	e000      	b.n	8006f40 <CircularQueue_Init+0x58>
	}
	return 0;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3714      	adds	r7, #20
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bc80      	pop	{r7}
 8006f48:	4770      	bx	lr

08006f4a <CircularQueue_Add>:
 * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
 * @param  nbElements:  number of elements in the in buffer pointed by x
 * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
 */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t *x, uint16_t elementSize,
		uint32_t nbElements) {
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b08e      	sub	sp, #56	@ 0x38
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	60f8      	str	r0, [r7, #12]
 8006f52:	60b9      	str	r1, [r7, #8]
 8006f54:	603b      	str	r3, [r7, #0]
 8006f56:	4613      	mov	r3, r2
 8006f58:	80fb      	strh	r3, [r7, #6]

	uint8_t *ptr = NULL; /* fct return ptr to the element freshly added, if no room fct return NULL */
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	623b      	str	r3, [r7, #32]
	uint16_t curElementSize = 0; /* the size of the element currently  stored at q->last position */
 8006f5e:	2300      	movs	r3, #0
 8006f60:	86fb      	strh	r3, [r7, #54]	@ 0x36
	uint8_t elemSizeStorageRoom = 0; /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 8006f62:	2300      	movs	r3, #0
 8006f64:	77fb      	strb	r3, [r7, #31]
	uint32_t curBuffPosition; /* the current position in the queue buffer */
	uint32_t i; /* loop counter */
	uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0; /* Indicators for copying bytes in queue */
 8006f66:	2300      	movs	r3, #0
 8006f68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t eob_free_size; /* Eof End of Quque Buffer Free Size */
	uint8_t wrap_will_occur = 0; /* indicate if a wrap around will occurs */
 8006f6e:	2300      	movs	r3, #0
 8006f70:	77bb      	strb	r3, [r7, #30]
	uint8_t wrapped_element_eob_size; /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
	uint16_t overhead = 0; /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options,
 8006f72:	2300      	movs	r3, #0
 8006f74:	83bb      	strh	r3, [r7, #28]
	 indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */

	elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	891b      	ldrh	r3, [r3, #8]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d101      	bne.n	8006f82 <CircularQueue_Add+0x38>
 8006f7e:	2302      	movs	r3, #2
 8006f80:	e000      	b.n	8006f84 <CircularQueue_Add+0x3a>
 8006f82:	2300      	movs	r3, #0
 8006f84:	77fb      	strb	r3, [r7, #31]
	/* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
	if (q->byteCount) {
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	695b      	ldr	r3, [r3, #20]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d029      	beq.n	8006fe2 <CircularQueue_Add+0x98>
		curElementSize =
				(q->elementSize == 0) ?
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	891b      	ldrh	r3, [r3, #8]
		curElementSize =
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d122      	bne.n	8006fdc <CircularQueue_Add+0x92>
						q->qBuff[q->last]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	4618      	mov	r0, r3
								+ ((q->qBuff[MOD((q->last + 1), q->queueMaxSize)])
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	691b      	ldr	r3, [r3, #16]
 8006fac:	1c59      	adds	r1, r3, #1
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	4299      	cmp	r1, r3
 8006fb4:	d306      	bcc.n	8006fc4 <CircularQueue_Add+0x7a>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6919      	ldr	r1, [r3, #16]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	1acb      	subs	r3, r1, r3
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	e002      	b.n	8006fca <CircularQueue_Add+0x80>
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	4413      	add	r3, r2
 8006fcc:	781b      	ldrb	r3, [r3, #0]
										<< 8) + 2 :
 8006fce:	021b      	lsls	r3, r3, #8
 8006fd0:	b29b      	uxth	r3, r3
								+ ((q->qBuff[MOD((q->last + 1), q->queueMaxSize)])
 8006fd2:	4403      	add	r3, r0
 8006fd4:	b29b      	uxth	r3, r3
		curElementSize =
 8006fd6:	3302      	adds	r3, #2
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	e001      	b.n	8006fe0 <CircularQueue_Add+0x96>
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	891b      	ldrh	r3, [r3, #8]
 8006fe0:	86fb      	strh	r3, [r7, #54]	@ 0x36
						q->elementSize;
	}
	/* if queue element have fixed size , reset the elementSize arg with fixed element size value */
	if (q->elementSize > 0) {
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	891b      	ldrh	r3, [r3, #8]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d002      	beq.n	8006ff0 <CircularQueue_Add+0xa6>
		elementSize = q->elementSize;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	891b      	ldrh	r3, [r3, #8]
 8006fee:	80fb      	strh	r3, [r7, #6]
	}

	eob_free_size =
			(q->last >= q->first) ?
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	691a      	ldr	r2, [r3, #16]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	68db      	ldr	r3, [r3, #12]
					q->queueMaxSize - (q->last + curElementSize) : 0;
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d307      	bcc.n	800700c <CircularQueue_Add+0xc2>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	685a      	ldr	r2, [r3, #4]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6919      	ldr	r1, [r3, #16]
 8007004:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007006:	440b      	add	r3, r1
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	e000      	b.n	800700e <CircularQueue_Add+0xc4>
 800700c:	2300      	movs	r3, #0
	eob_free_size =
 800700e:	61bb      	str	r3, [r7, #24]

	/* check how many bytes of wrapped element (if anay) are at end of buffer */
	wrapped_element_eob_size =
			(((elementSize + elemSizeStorageRoom) * nbElements) < eob_free_size) ?
 8007010:	88fa      	ldrh	r2, [r7, #6]
 8007012:	7ffb      	ldrb	r3, [r7, #31]
 8007014:	4413      	add	r3, r2
 8007016:	461a      	mov	r2, r3
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	fb02 f303 	mul.w	r3, r2, r3
	wrapped_element_eob_size =
 800701e:	69ba      	ldr	r2, [r7, #24]
 8007020:	429a      	cmp	r2, r3
 8007022:	d80b      	bhi.n	800703c <CircularQueue_Add+0xf2>
					0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 8007024:	88fa      	ldrh	r2, [r7, #6]
 8007026:	7ffb      	ldrb	r3, [r7, #31]
 8007028:	4413      	add	r3, r2
 800702a:	461a      	mov	r2, r3
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007032:	fb01 f202 	mul.w	r2, r1, r2
 8007036:	1a9b      	subs	r3, r3, r2
	wrapped_element_eob_size =
 8007038:	b2db      	uxtb	r3, r3
 800703a:	e000      	b.n	800703e <CircularQueue_Add+0xf4>
 800703c:	2300      	movs	r3, #0
 800703e:	75fb      	strb	r3, [r7, #23]
	wrap_will_occur = wrapped_element_eob_size > elemSizeStorageRoom;
 8007040:	7dfa      	ldrb	r2, [r7, #23]
 8007042:	7ffb      	ldrb	r3, [r7, #31]
 8007044:	429a      	cmp	r2, r3
 8007046:	bf8c      	ite	hi
 8007048:	2301      	movhi	r3, #1
 800704a:	2300      	movls	r3, #0
 800704c:	b2db      	uxtb	r3, r3
 800704e:	77bb      	strb	r3, [r7, #30]

	overhead =
 8007050:	7fbb      	ldrb	r3, [r7, #30]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d008      	beq.n	8007068 <CircularQueue_Add+0x11e>
			(wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ?
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	7f1b      	ldrb	r3, [r3, #28]
 800705a:	f003 0301 	and.w	r3, r3, #1
 800705e:	2b00      	cmp	r3, #0
 8007060:	d002      	beq.n	8007068 <CircularQueue_Add+0x11e>
	overhead =
 8007062:	7dfb      	ldrb	r3, [r7, #23]
 8007064:	b29b      	uxth	r3, r3
 8007066:	e000      	b.n	800706a <CircularQueue_Add+0x120>
 8007068:	8bbb      	ldrh	r3, [r7, #28]
 800706a:	83bb      	strh	r3, [r7, #28]
					wrapped_element_eob_size : overhead;
	overhead =
 800706c:	7fbb      	ldrb	r3, [r7, #30]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d008      	beq.n	8007084 <CircularQueue_Add+0x13a>
			(wrap_will_occur
					&& (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ?
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	7f1b      	ldrb	r3, [r3, #28]
 8007076:	f003 0302 	and.w	r3, r3, #2
 800707a:	2b00      	cmp	r3, #0
 800707c:	d002      	beq.n	8007084 <CircularQueue_Add+0x13a>
	overhead =
 800707e:	7ffb      	ldrb	r3, [r7, #31]
 8007080:	b29b      	uxth	r3, r3
 8007082:	e000      	b.n	8007086 <CircularQueue_Add+0x13c>
 8007084:	8bbb      	ldrh	r3, [r7, #28]
 8007086:	83bb      	strh	r3, [r7, #28]
					elemSizeStorageRoom : overhead;

	/* Store now the elements if ennough room for all elements */
	if (elementSize
 8007088:	88fb      	ldrh	r3, [r7, #6]
 800708a:	2b00      	cmp	r3, #0
 800708c:	f000 817e 	beq.w	800738c <CircularQueue_Add+0x442>
			&& ((q->byteCount
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	695a      	ldr	r2, [r3, #20]
					+ ((elementSize + elemSizeStorageRoom) * nbElements)
 8007094:	88f9      	ldrh	r1, [r7, #6]
 8007096:	7ffb      	ldrb	r3, [r7, #31]
 8007098:	440b      	add	r3, r1
 800709a:	4619      	mov	r1, r3
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	fb01 f303 	mul.w	r3, r1, r3
 80070a2:	441a      	add	r2, r3
					+ overhead) <= q->queueMaxSize)) {
 80070a4:	8bbb      	ldrh	r3, [r7, #28]
 80070a6:	441a      	add	r2, r3
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	685b      	ldr	r3, [r3, #4]
			&& ((q->byteCount
 80070ac:	429a      	cmp	r2, r3
 80070ae:	f200 816d 	bhi.w	800738c <CircularQueue_Add+0x442>
		/* loop to add all elements  */
		for (i = 0; i < nbElements; i++) {
 80070b2:	2300      	movs	r3, #0
 80070b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80070b6:	e14a      	b.n	800734e <CircularQueue_Add+0x404>
			q->last = MOD((q->last + curElementSize), q->queueMaxSize);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	691a      	ldr	r2, [r3, #16]
 80070bc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80070be:	441a      	add	r2, r3
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d307      	bcc.n	80070d8 <CircularQueue_Add+0x18e>
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	691a      	ldr	r2, [r3, #16]
 80070cc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80070ce:	441a      	add	r2, r3
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	e003      	b.n	80070e0 <CircularQueue_Add+0x196>
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	691a      	ldr	r2, [r3, #16]
 80070dc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80070de:	4413      	add	r3, r2
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	6113      	str	r3, [r2, #16]
			curBuffPosition = q->last;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	633b      	str	r3, [r7, #48]	@ 0x30

			/* store the element  */
			/* store fisrt the element size if element size is varaible */
			if (q->elementSize == 0) {
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	891b      	ldrh	r3, [r3, #8]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d130      	bne.n	8007154 <CircularQueue_Add+0x20a>
				q->qBuff[curBuffPosition++] = elementSize & 0xFF;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f8:	1c59      	adds	r1, r3, #1
 80070fa:	6339      	str	r1, [r7, #48]	@ 0x30
 80070fc:	4413      	add	r3, r2
 80070fe:	88fa      	ldrh	r2, [r7, #6]
 8007100:	b2d2      	uxtb	r2, r2
 8007102:	701a      	strb	r2, [r3, #0]
				curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800710a:	429a      	cmp	r2, r3
 800710c:	d304      	bcc.n	8007118 <CircularQueue_Add+0x1ce>
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007114:	1ad3      	subs	r3, r2, r3
 8007116:	e000      	b.n	800711a <CircularQueue_Add+0x1d0>
 8007118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800711a:	633b      	str	r3, [r7, #48]	@ 0x30
				q->qBuff[curBuffPosition++] = (elementSize & 0xFF00) >> 8;
 800711c:	88fb      	ldrh	r3, [r7, #6]
 800711e:	0a1b      	lsrs	r3, r3, #8
 8007120:	b298      	uxth	r0, r3
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007128:	1c59      	adds	r1, r3, #1
 800712a:	6339      	str	r1, [r7, #48]	@ 0x30
 800712c:	4413      	add	r3, r2
 800712e:	b2c2      	uxtb	r2, r0
 8007130:	701a      	strb	r2, [r3, #0]
				curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007138:	429a      	cmp	r2, r3
 800713a:	d304      	bcc.n	8007146 <CircularQueue_Add+0x1fc>
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007142:	1ad3      	subs	r3, r2, r3
 8007144:	e000      	b.n	8007148 <CircularQueue_Add+0x1fe>
 8007146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007148:	633b      	str	r3, [r7, #48]	@ 0x30
				q->byteCount += 2;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	695b      	ldr	r3, [r3, #20]
 800714e:	1c9a      	adds	r2, r3, #2
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	615a      	str	r2, [r3, #20]
			}

			/* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
			NbBytesToCopy = MIN((q->queueMaxSize - curBuffPosition),
 8007154:	88fa      	ldrh	r2, [r7, #6]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6859      	ldr	r1, [r3, #4]
 800715a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800715c:	1acb      	subs	r3, r1, r3
 800715e:	4293      	cmp	r3, r2
 8007160:	bf28      	it	cs
 8007162:	4613      	movcs	r3, r2
 8007164:	62bb      	str	r3, [r7, #40]	@ 0x28
					elementSize);
			/* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option;
			 In thi case part of data will copied at the end of the buffer and the rest a the beggining */
			if ((NbBytesToCopy == elementSize)
 8007166:	88fb      	ldrh	r3, [r7, #6]
 8007168:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800716a:	429a      	cmp	r2, r3
 800716c:	d007      	beq.n	800717e <CircularQueue_Add+0x234>
					|| ((NbBytesToCopy < elementSize)
 800716e:	88fb      	ldrh	r3, [r7, #6]
 8007170:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007172:	429a      	cmp	r2, r3
 8007174:	d225      	bcs.n	80071c2 <CircularQueue_Add+0x278>
							&& (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG))) {
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	7f1b      	ldrb	r3, [r3, #28]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d121      	bne.n	80071c2 <CircularQueue_Add+0x278>
				/* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
				memcpy(&q->qBuff[curBuffPosition], &x[i * elementSize],
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007184:	18d0      	adds	r0, r2, r3
 8007186:	88fb      	ldrh	r3, [r7, #6]
 8007188:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800718a:	fb02 f303 	mul.w	r3, r2, r3
 800718e:	68ba      	ldr	r2, [r7, #8]
 8007190:	4413      	add	r3, r2
 8007192:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007194:	4619      	mov	r1, r3
 8007196:	f00d fc04 	bl	80149a2 <memcpy>
						NbBytesToCopy);
				/* Adjust bytes count */
				q->byteCount += NbBytesToCopy;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	695a      	ldr	r2, [r3, #20]
 800719e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a0:	441a      	add	r2, r3
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	615a      	str	r2, [r3, #20]
				/* Wrap */
				curBuffPosition = 0;
 80071a6:	2300      	movs	r3, #0
 80071a8:	633b      	str	r3, [r7, #48]	@ 0x30
				/* set NbCopiedBytes bytes with  ampount copied */
				NbCopiedBytes = NbBytesToCopy;
 80071aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ac:	627b      	str	r3, [r7, #36]	@ 0x24
				/* set the rest to copy if wrao , if no wrap will be 0 */
				NbBytesToCopy = elementSize - NbBytesToCopy;
 80071ae:	88fa      	ldrh	r2, [r7, #6]
 80071b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071b2:	1ad3      	subs	r3, r2, r3
 80071b4:	62bb      	str	r3, [r7, #40]	@ 0x28
				/* set the current element Size, will be used to calaculate next last position at beggining of loop */
				curElementSize = (elementSize) + elemSizeStorageRoom;
 80071b6:	7ffb      	ldrb	r3, [r7, #31]
 80071b8:	b29a      	uxth	r2, r3
 80071ba:	88fb      	ldrh	r3, [r7, #6]
 80071bc:	4413      	add	r3, r2
 80071be:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80071c0:	e0a4      	b.n	800730c <CircularQueue_Add+0x3c2>
			} else if (NbBytesToCopy) /* We have a wrap  to manage */
 80071c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f000 80a1 	beq.w	800730c <CircularQueue_Add+0x3c2>
			{
				/* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
				if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) {
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	7f1b      	ldrb	r3, [r3, #28]
 80071ce:	f003 0301 	and.w	r3, r3, #1
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d03a      	beq.n	800724c <CircularQueue_Add+0x302>
					/* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
					if (q->elementSize == 0) {
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	891b      	ldrh	r3, [r3, #8]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d10d      	bne.n	80071fa <CircularQueue_Add+0x2b0>
						q->qBuff[curBuffPosition - 2] = 0xFF;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e4:	3b02      	subs	r3, #2
 80071e6:	4413      	add	r3, r2
 80071e8:	22ff      	movs	r2, #255	@ 0xff
 80071ea:	701a      	strb	r2, [r3, #0]
						q->qBuff[curBuffPosition - 1] = 0xFF;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f2:	3b01      	subs	r3, #1
 80071f4:	4413      	add	r3, r2
 80071f6:	22ff      	movs	r2, #255	@ 0xff
 80071f8:	701a      	strb	r2, [r3, #0]
					}
					q->byteCount += NbBytesToCopy; /* invalid data at the end of buffer are take into account in byteCount */
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	695a      	ldr	r2, [r3, #20]
 80071fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007200:	441a      	add	r2, r3
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	615a      	str	r2, [r3, #20]
					/* No bytes coped a the end of buffer */
					NbCopiedBytes = 0;
 8007206:	2300      	movs	r3, #0
 8007208:	627b      	str	r3, [r7, #36]	@ 0x24
					/* all element to be copied at the begnning of buffer */
					NbBytesToCopy = elementSize;
 800720a:	88fb      	ldrh	r3, [r7, #6]
 800720c:	62bb      	str	r3, [r7, #40]	@ 0x28
					/* Wrap */
					curBuffPosition = 0;
 800720e:	2300      	movs	r3, #0
 8007210:	633b      	str	r3, [r7, #48]	@ 0x30
					/* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
					if (q->elementSize == 0) {
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	891b      	ldrh	r3, [r3, #8]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d16f      	bne.n	80072fa <CircularQueue_Add+0x3b0>
						q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007220:	1c59      	adds	r1, r3, #1
 8007222:	6339      	str	r1, [r7, #48]	@ 0x30
 8007224:	4413      	add	r3, r2
 8007226:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007228:	b2d2      	uxtb	r2, r2
 800722a:	701a      	strb	r2, [r3, #0]
						q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00)
								>> 8;
 800722c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800722e:	0a18      	lsrs	r0, r3, #8
						q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007236:	1c59      	adds	r1, r3, #1
 8007238:	6339      	str	r1, [r7, #48]	@ 0x30
 800723a:	4413      	add	r3, r2
 800723c:	b2c2      	uxtb	r2, r0
 800723e:	701a      	strb	r2, [r3, #0]
						q->byteCount += 2;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	695b      	ldr	r3, [r3, #20]
 8007244:	1c9a      	adds	r2, r3, #2
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	615a      	str	r2, [r3, #20]
 800724a:	e056      	b.n	80072fa <CircularQueue_Add+0x3b0>
					}

				}
				/* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
				else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) {
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	7f1b      	ldrb	r3, [r3, #28]
 8007250:	f003 0302 	and.w	r3, r3, #2
 8007254:	2b00      	cmp	r3, #0
 8007256:	d050      	beq.n	80072fa <CircularQueue_Add+0x3b0>
					if (q->elementSize == 0) {
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	891b      	ldrh	r3, [r3, #8]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d14a      	bne.n	80072f6 <CircularQueue_Add+0x3ac>
						/* reset the size of current element to the nb bytes fitting at the end of buffer */
						q->qBuff[curBuffPosition - 2] = NbBytesToCopy & 0xFF;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007266:	3b02      	subs	r3, #2
 8007268:	4413      	add	r3, r2
 800726a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800726c:	b2d2      	uxtb	r2, r2
 800726e:	701a      	strb	r2, [r3, #0]
						q->qBuff[curBuffPosition - 1] = (NbBytesToCopy & 0xFF00)
								>> 8;
 8007270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007272:	0a19      	lsrs	r1, r3, #8
						q->qBuff[curBuffPosition - 1] = (NbBytesToCopy & 0xFF00)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800727a:	3b01      	subs	r3, #1
 800727c:	4413      	add	r3, r2
 800727e:	b2ca      	uxtb	r2, r1
 8007280:	701a      	strb	r2, [r3, #0]
						/* copy the bytes */
						memcpy(&q->qBuff[curBuffPosition], &x[i * elementSize],
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007288:	18d0      	adds	r0, r2, r3
 800728a:	88fb      	ldrh	r3, [r7, #6]
 800728c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800728e:	fb02 f303 	mul.w	r3, r2, r3
 8007292:	68ba      	ldr	r2, [r7, #8]
 8007294:	4413      	add	r3, r2
 8007296:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007298:	4619      	mov	r1, r3
 800729a:	f00d fb82 	bl	80149a2 <memcpy>
								NbBytesToCopy);
						q->byteCount += NbBytesToCopy;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	695a      	ldr	r2, [r3, #20]
 80072a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072a4:	441a      	add	r2, r3
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	615a      	str	r2, [r3, #20]
						/* set the number of copied bytes */
						NbCopiedBytes = NbBytesToCopy;
 80072aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ac:	627b      	str	r3, [r7, #36]	@ 0x24
						/* set rest of data to be copied to begnning of buffer */
						NbBytesToCopy = elementSize - NbBytesToCopy;
 80072ae:	88fa      	ldrh	r2, [r7, #6]
 80072b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	62bb      	str	r3, [r7, #40]	@ 0x28
						/* one element more dur to split in 2 elements */
						q->elementCount++;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	699b      	ldr	r3, [r3, #24]
 80072ba:	1c5a      	adds	r2, r3, #1
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	619a      	str	r2, [r3, #24]
						/* Wrap */
						curBuffPosition = 0;
 80072c0:	2300      	movs	r3, #0
 80072c2:	633b      	str	r3, [r7, #48]	@ 0x30
						/* Set new size for rest of data */
						q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ca:	1c59      	adds	r1, r3, #1
 80072cc:	6339      	str	r1, [r7, #48]	@ 0x30
 80072ce:	4413      	add	r3, r2
 80072d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80072d2:	b2d2      	uxtb	r2, r2
 80072d4:	701a      	strb	r2, [r3, #0]
						q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00)
								>> 8;
 80072d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d8:	0a18      	lsrs	r0, r3, #8
						q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e0:	1c59      	adds	r1, r3, #1
 80072e2:	6339      	str	r1, [r7, #48]	@ 0x30
 80072e4:	4413      	add	r3, r2
 80072e6:	b2c2      	uxtb	r2, r0
 80072e8:	701a      	strb	r2, [r3, #0]
						q->byteCount += 2;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	1c9a      	adds	r2, r3, #2
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	615a      	str	r2, [r3, #20]
 80072f4:	e001      	b.n	80072fa <CircularQueue_Add+0x3b0>
					} else {
						/* Should not occur */
						/* can not manage split Flag on Fixed size element */
						/* Buffer is corrupted */
						return NULL;
 80072f6:	2300      	movs	r3, #0
 80072f8:	e049      	b.n	800738e <CircularQueue_Add+0x444>
					}
				}
				curElementSize = (NbBytesToCopy) + elemSizeStorageRoom;
 80072fa:	7ffb      	ldrb	r3, [r7, #31]
 80072fc:	b29a      	uxth	r2, r3
 80072fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007300:	b29b      	uxth	r3, r3
 8007302:	4413      	add	r3, r2
 8007304:	86fb      	strh	r3, [r7, #54]	@ 0x36
				q->last = 0;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2200      	movs	r2, #0
 800730a:	611a      	str	r2, [r3, #16]
			}

			/* some remaning byte to copy */
			if (NbBytesToCopy) {
 800730c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800730e:	2b00      	cmp	r3, #0
 8007310:	d015      	beq.n	800733e <CircularQueue_Add+0x3f4>
				memcpy(&q->qBuff[curBuffPosition],
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007318:	18d0      	adds	r0, r2, r3
						&x[(i * elementSize) + NbCopiedBytes], NbBytesToCopy);
 800731a:	88fb      	ldrh	r3, [r7, #6]
 800731c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800731e:	fb03 f202 	mul.w	r2, r3, r2
 8007322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007324:	4413      	add	r3, r2
 8007326:	68ba      	ldr	r2, [r7, #8]
 8007328:	4413      	add	r3, r2
				memcpy(&q->qBuff[curBuffPosition],
 800732a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800732c:	4619      	mov	r1, r3
 800732e:	f00d fb38 	bl	80149a2 <memcpy>
				q->byteCount += NbBytesToCopy;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	695a      	ldr	r2, [r3, #20]
 8007336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007338:	441a      	add	r2, r3
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	615a      	str	r2, [r3, #20]
			}

			/* One more element */
			q->elementCount++;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	699b      	ldr	r3, [r3, #24]
 8007342:	1c5a      	adds	r2, r3, #1
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	619a      	str	r2, [r3, #24]
		for (i = 0; i < nbElements; i++) {
 8007348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800734a:	3301      	adds	r3, #1
 800734c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800734e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	429a      	cmp	r2, r3
 8007354:	f4ff aeb0 	bcc.w	80070b8 <CircularQueue_Add+0x16e>
		}

		ptr = q->qBuff
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681a      	ldr	r2, [r3, #0]
				+ (MOD((q->last + elemSizeStorageRoom), q->queueMaxSize));
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6919      	ldr	r1, [r3, #16]
 8007360:	7ffb      	ldrb	r3, [r7, #31]
 8007362:	4419      	add	r1, r3
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	4299      	cmp	r1, r3
 800736a:	d307      	bcc.n	800737c <CircularQueue_Add+0x432>
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6919      	ldr	r1, [r3, #16]
 8007370:	7ffb      	ldrb	r3, [r7, #31]
 8007372:	4419      	add	r1, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	1acb      	subs	r3, r1, r3
 800737a:	e003      	b.n	8007384 <CircularQueue_Add+0x43a>
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6919      	ldr	r1, [r3, #16]
 8007380:	7ffb      	ldrb	r3, [r7, #31]
 8007382:	440b      	add	r3, r1
		ptr = q->qBuff
 8007384:	4413      	add	r3, r2
 8007386:	623b      	str	r3, [r7, #32]
	}
	/* for Breakpoint only...to remove */
	else {
		return NULL;
	}
	return ptr;
 8007388:	6a3b      	ldr	r3, [r7, #32]
 800738a:	e000      	b.n	800738e <CircularQueue_Add+0x444>
		return NULL;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3738      	adds	r7, #56	@ 0x38
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <CircularQueue_Remove>:
 * @note   This function is used to remove and element from  the Circular Queue .
 * @param  q: pointer on queue structure  to be handled
 * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
 * @retval Pointer on removed element. NULL if queue was empty
 */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t *elementSize) {
 8007396:	b480      	push	{r7}
 8007398:	b085      	sub	sp, #20
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
 800739e:	6039      	str	r1, [r7, #0]
	uint8_t elemSizeStorageRoom = 0;
 80073a0:	2300      	movs	r3, #0
 80073a2:	727b      	strb	r3, [r7, #9]
	uint8_t *ptr = NULL;
 80073a4:	2300      	movs	r3, #0
 80073a6:	60fb      	str	r3, [r7, #12]
	elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	891b      	ldrh	r3, [r3, #8]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d101      	bne.n	80073b4 <CircularQueue_Remove+0x1e>
 80073b0:	2302      	movs	r3, #2
 80073b2:	e000      	b.n	80073b6 <CircularQueue_Remove+0x20>
 80073b4:	2300      	movs	r3, #0
 80073b6:	727b      	strb	r3, [r7, #9]
	uint16_t eltSize = 0;
 80073b8:	2300      	movs	r3, #0
 80073ba:	817b      	strh	r3, [r7, #10]
	if (q->byteCount > 0) {
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	695b      	ldr	r3, [r3, #20]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	f000 80ca 	beq.w	800755a <CircularQueue_Remove+0x1c4>
		/* retreive element Size */
		eltSize =
				(q->elementSize == 0) ?
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	891b      	ldrh	r3, [r3, #8]
		eltSize =
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d120      	bne.n	8007410 <CircularQueue_Remove+0x7a>
						q->qBuff[q->first]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	4413      	add	r3, r2
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	4618      	mov	r0, r3
								+ ((q->qBuff[MOD((q->first + 1),
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	1c59      	adds	r1, r3, #1
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	4299      	cmp	r1, r3
 80073ec:	d306      	bcc.n	80073fc <CircularQueue_Remove+0x66>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	68d9      	ldr	r1, [r3, #12]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	1acb      	subs	r3, r1, r3
 80073f8:	3301      	adds	r3, #1
 80073fa:	e002      	b.n	8007402 <CircularQueue_Remove+0x6c>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	3301      	adds	r3, #1
 8007402:	4413      	add	r3, r2
 8007404:	781b      	ldrb	r3, [r3, #0]
										q->queueMaxSize)]) << 8) :
 8007406:	021b      	lsls	r3, r3, #8
 8007408:	b29b      	uxth	r3, r3
		eltSize =
 800740a:	4403      	add	r3, r0
 800740c:	b29b      	uxth	r3, r3
 800740e:	e001      	b.n	8007414 <CircularQueue_Remove+0x7e>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	891b      	ldrh	r3, [r3, #8]
 8007414:	817b      	strh	r3, [r7, #10]
						q->elementSize;

		if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	7f1b      	ldrb	r3, [r3, #28]
 800741a:	f003 0301 	and.w	r3, r3, #1
 800741e:	2b00      	cmp	r3, #0
 8007420:	d056      	beq.n	80074d0 <CircularQueue_Remove+0x13a>
				&& !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) {
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	7f1b      	ldrb	r3, [r3, #28]
 8007426:	f003 0302 	and.w	r3, r3, #2
 800742a:	2b00      	cmp	r3, #0
 800742c:	d150      	bne.n	80074d0 <CircularQueue_Remove+0x13a>
			if (((eltSize == 0xFFFF) && q->elementSize == 0)
 800742e:	897b      	ldrh	r3, [r7, #10]
 8007430:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007434:	4293      	cmp	r3, r2
 8007436:	d103      	bne.n	8007440 <CircularQueue_Remove+0xaa>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	891b      	ldrh	r3, [r3, #8]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d012      	beq.n	8007466 <CircularQueue_Remove+0xd0>
					|| ((q->first > q->last) && q->elementSize
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	68da      	ldr	r2, [r3, #12]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	429a      	cmp	r2, r3
 800744a:	d941      	bls.n	80074d0 <CircularQueue_Remove+0x13a>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	891b      	ldrh	r3, [r3, #8]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d03d      	beq.n	80074d0 <CircularQueue_Remove+0x13a>
							&& ((q->queueMaxSize - q->first) < q->elementSize))) {
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	685a      	ldr	r2, [r3, #4]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	1ad3      	subs	r3, r2, r3
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	8912      	ldrh	r2, [r2, #8]
 8007462:	4293      	cmp	r3, r2
 8007464:	d234      	bcs.n	80074d0 <CircularQueue_Remove+0x13a>
				/* all data from current position up to the end of buffer are invalid */
				q->byteCount -= (q->queueMaxSize - q->first);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	695a      	ldr	r2, [r3, #20]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	68d9      	ldr	r1, [r3, #12]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	1acb      	subs	r3, r1, r3
 8007474:	441a      	add	r2, r3
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	615a      	str	r2, [r3, #20]
				/* Adjust first element pos */
				q->first = 0;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	60da      	str	r2, [r3, #12]
				/* retrieve the rigth size after the wrap [if varaible size element] */
				eltSize =
						(q->elementSize == 0) ?
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	891b      	ldrh	r3, [r3, #8]
				eltSize =
 8007484:	2b00      	cmp	r3, #0
 8007486:	d120      	bne.n	80074ca <CircularQueue_Remove+0x134>
								q->qBuff[q->first]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	4413      	add	r3, r2
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	4618      	mov	r0, r3
										+ ((q->qBuff[MOD((q->first + 1),
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	1c59      	adds	r1, r3, #1
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	4299      	cmp	r1, r3
 80074a6:	d306      	bcc.n	80074b6 <CircularQueue_Remove+0x120>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	68d9      	ldr	r1, [r3, #12]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	1acb      	subs	r3, r1, r3
 80074b2:	3301      	adds	r3, #1
 80074b4:	e002      	b.n	80074bc <CircularQueue_Remove+0x126>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	3301      	adds	r3, #1
 80074bc:	4413      	add	r3, r2
 80074be:	781b      	ldrb	r3, [r3, #0]
												q->queueMaxSize)]) << 8) :
 80074c0:	021b      	lsls	r3, r3, #8
 80074c2:	b29b      	uxth	r3, r3
				eltSize =
 80074c4:	4403      	add	r3, r0
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	e001      	b.n	80074ce <CircularQueue_Remove+0x138>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	891b      	ldrh	r3, [r3, #8]
 80074ce:	817b      	strh	r3, [r7, #10]
								q->elementSize;
			}
		}

		/* retreive element */
		ptr = q->qBuff
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681a      	ldr	r2, [r3, #0]
				+ (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	68d9      	ldr	r1, [r3, #12]
 80074d8:	7a7b      	ldrb	r3, [r7, #9]
 80074da:	4419      	add	r1, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	4299      	cmp	r1, r3
 80074e2:	d307      	bcc.n	80074f4 <CircularQueue_Remove+0x15e>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	68d9      	ldr	r1, [r3, #12]
 80074e8:	7a7b      	ldrb	r3, [r7, #9]
 80074ea:	4419      	add	r1, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	1acb      	subs	r3, r1, r3
 80074f2:	e003      	b.n	80074fc <CircularQueue_Remove+0x166>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	68d9      	ldr	r1, [r3, #12]
 80074f8:	7a7b      	ldrb	r3, [r7, #9]
 80074fa:	440b      	add	r3, r1
		ptr = q->qBuff
 80074fc:	4413      	add	r3, r2
 80074fe:	60fb      	str	r3, [r7, #12]

		/* adjust byte count */
		q->byteCount -= (eltSize + elemSizeStorageRoom);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	695b      	ldr	r3, [r3, #20]
 8007504:	8979      	ldrh	r1, [r7, #10]
 8007506:	7a7a      	ldrb	r2, [r7, #9]
 8007508:	440a      	add	r2, r1
 800750a:	1a9a      	subs	r2, r3, r2
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	615a      	str	r2, [r3, #20]

		/* Adjust q->first */
		if (q->byteCount > 0) {
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	695b      	ldr	r3, [r3, #20]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d01b      	beq.n	8007550 <CircularQueue_Remove+0x1ba>
			q->first = MOD((q->first + eltSize + elemSizeStorageRoom),
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	68da      	ldr	r2, [r3, #12]
 800751c:	897b      	ldrh	r3, [r7, #10]
 800751e:	441a      	add	r2, r3
 8007520:	7a7b      	ldrb	r3, [r7, #9]
 8007522:	441a      	add	r2, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	429a      	cmp	r2, r3
 800752a:	d309      	bcc.n	8007540 <CircularQueue_Remove+0x1aa>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	68da      	ldr	r2, [r3, #12]
 8007530:	897b      	ldrh	r3, [r7, #10]
 8007532:	441a      	add	r2, r3
 8007534:	7a7b      	ldrb	r3, [r7, #9]
 8007536:	441a      	add	r2, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	1ad3      	subs	r3, r2, r3
 800753e:	e005      	b.n	800754c <CircularQueue_Remove+0x1b6>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	68da      	ldr	r2, [r3, #12]
 8007544:	897b      	ldrh	r3, [r7, #10]
 8007546:	441a      	add	r2, r3
 8007548:	7a7b      	ldrb	r3, [r7, #9]
 800754a:	4413      	add	r3, r2
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	60d3      	str	r3, [r2, #12]
					q->queueMaxSize);
		}
		/* adjust element count */
		--q->elementCount;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	699b      	ldr	r3, [r3, #24]
 8007554:	1e5a      	subs	r2, r3, #1
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	619a      	str	r2, [r3, #24]
	}
	if (elementSize != NULL) {
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d002      	beq.n	8007566 <CircularQueue_Remove+0x1d0>
		*elementSize = eltSize;
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	897a      	ldrh	r2, [r7, #10]
 8007564:	801a      	strh	r2, [r3, #0]
	}
	return ptr;
 8007566:	68fb      	ldr	r3, [r7, #12]
}
 8007568:	4618      	mov	r0, r3
 800756a:	3714      	adds	r7, #20
 800756c:	46bd      	mov	sp, r7
 800756e:	bc80      	pop	{r7}
 8007570:	4770      	bx	lr

08007572 <CircularQueue_Sense>:
 * @note   This function is used to return a pointer on the first element of the queue without removing it.
 * @param  q: pointer on queue structure  to be handled
 * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
 * @retval Pointer on sensed element. NULL if queue was empty
 */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t *elementSize) {
 8007572:	b480      	push	{r7}
 8007574:	b087      	sub	sp, #28
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
 800757a:	6039      	str	r1, [r7, #0]
	uint8_t elemSizeStorageRoom = 0;
 800757c:	2300      	movs	r3, #0
 800757e:	72fb      	strb	r3, [r7, #11]
	uint8_t *x = NULL;
 8007580:	2300      	movs	r3, #0
 8007582:	617b      	str	r3, [r7, #20]
	elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	891b      	ldrh	r3, [r3, #8]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d101      	bne.n	8007590 <CircularQueue_Sense+0x1e>
 800758c:	2302      	movs	r3, #2
 800758e:	e000      	b.n	8007592 <CircularQueue_Sense+0x20>
 8007590:	2300      	movs	r3, #0
 8007592:	72fb      	strb	r3, [r7, #11]
	uint16_t eltSize = 0;
 8007594:	2300      	movs	r3, #0
 8007596:	827b      	strh	r3, [r7, #18]
	uint32_t FirstElemetPos = 0;
 8007598:	2300      	movs	r3, #0
 800759a:	60fb      	str	r3, [r7, #12]

	if (q->byteCount > 0) {
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	695b      	ldr	r3, [r3, #20]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	f000 808e 	beq.w	80076c2 <CircularQueue_Sense+0x150>
		FirstElemetPos = q->first;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	60fb      	str	r3, [r7, #12]
		eltSize =
				(q->elementSize == 0) ?
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	891b      	ldrh	r3, [r3, #8]
		eltSize =
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d120      	bne.n	80075f6 <CircularQueue_Sense+0x84>
						q->qBuff[q->first]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	4413      	add	r3, r2
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	4618      	mov	r0, r3
								+ ((q->qBuff[MOD((q->first + 1),
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	1c59      	adds	r1, r3, #1
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	4299      	cmp	r1, r3
 80075d2:	d306      	bcc.n	80075e2 <CircularQueue_Sense+0x70>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	68d9      	ldr	r1, [r3, #12]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	1acb      	subs	r3, r1, r3
 80075de:	3301      	adds	r3, #1
 80075e0:	e002      	b.n	80075e8 <CircularQueue_Sense+0x76>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	3301      	adds	r3, #1
 80075e8:	4413      	add	r3, r2
 80075ea:	781b      	ldrb	r3, [r3, #0]
										q->queueMaxSize)]) << 8) :
 80075ec:	021b      	lsls	r3, r3, #8
 80075ee:	b29b      	uxth	r3, r3
		eltSize =
 80075f0:	4403      	add	r3, r0
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	e001      	b.n	80075fa <CircularQueue_Sense+0x88>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	891b      	ldrh	r3, [r3, #8]
 80075fa:	827b      	strh	r3, [r7, #18]
						q->elementSize;

		if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	7f1b      	ldrb	r3, [r3, #28]
 8007600:	f003 0301 	and.w	r3, r3, #1
 8007604:	2b00      	cmp	r3, #0
 8007606:	d047      	beq.n	8007698 <CircularQueue_Sense+0x126>
				&& !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) {
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	7f1b      	ldrb	r3, [r3, #28]
 800760c:	f003 0302 	and.w	r3, r3, #2
 8007610:	2b00      	cmp	r3, #0
 8007612:	d141      	bne.n	8007698 <CircularQueue_Sense+0x126>
			if (((eltSize == 0xFFFF) && q->elementSize == 0)
 8007614:	8a7b      	ldrh	r3, [r7, #18]
 8007616:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800761a:	4293      	cmp	r3, r2
 800761c:	d103      	bne.n	8007626 <CircularQueue_Sense+0xb4>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	891b      	ldrh	r3, [r3, #8]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d012      	beq.n	800764c <CircularQueue_Sense+0xda>
					|| ((q->first > q->last) && q->elementSize
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	68da      	ldr	r2, [r3, #12]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	429a      	cmp	r2, r3
 8007630:	d932      	bls.n	8007698 <CircularQueue_Sense+0x126>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	891b      	ldrh	r3, [r3, #8]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d02e      	beq.n	8007698 <CircularQueue_Sense+0x126>
							&& ((q->queueMaxSize - q->first) < q->elementSize)))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	685a      	ldr	r2, [r3, #4]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	1ad3      	subs	r3, r2, r3
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	8912      	ldrh	r2, [r2, #8]
 8007648:	4293      	cmp	r3, r2
 800764a:	d225      	bcs.n	8007698 <CircularQueue_Sense+0x126>

					{
				/* all data from current position up to the end of buffer are invalid */
				FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800764c:	2300      	movs	r3, #0
 800764e:	60fb      	str	r3, [r7, #12]

				/* retrieve the rigth size after the wrap [if varaible size element] */
				eltSize =
						(q->elementSize == 0) ?
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	891b      	ldrh	r3, [r3, #8]
				eltSize =
 8007654:	2b00      	cmp	r3, #0
 8007656:	d11c      	bne.n	8007692 <CircularQueue_Sense+0x120>
								q->qBuff[FirstElemetPos]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	4413      	add	r3, r2
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	4618      	mov	r0, r3
										+ ((q->qBuff[MOD((FirstElemetPos + 1),
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	1c59      	adds	r1, r3, #1
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	4299      	cmp	r1, r3
 8007672:	d305      	bcc.n	8007680 <CircularQueue_Sense+0x10e>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	68f9      	ldr	r1, [r7, #12]
 800767a:	1acb      	subs	r3, r1, r3
 800767c:	3301      	adds	r3, #1
 800767e:	e001      	b.n	8007684 <CircularQueue_Sense+0x112>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	3301      	adds	r3, #1
 8007684:	4413      	add	r3, r2
 8007686:	781b      	ldrb	r3, [r3, #0]
												q->queueMaxSize)]) << 8) :
 8007688:	021b      	lsls	r3, r3, #8
 800768a:	b29b      	uxth	r3, r3
				eltSize =
 800768c:	4403      	add	r3, r0
 800768e:	b29b      	uxth	r3, r3
 8007690:	e001      	b.n	8007696 <CircularQueue_Sense+0x124>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	891b      	ldrh	r3, [r3, #8]
 8007696:	827b      	strh	r3, [r7, #18]
								q->elementSize;
			}
		}
		/* retrieve element */
		x =
				q->qBuff
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681a      	ldr	r2, [r3, #0]
						+ (MOD((FirstElemetPos + elemSizeStorageRoom),
 800769c:	7af9      	ldrb	r1, [r7, #11]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	4419      	add	r1, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	4299      	cmp	r1, r3
 80076a8:	d306      	bcc.n	80076b8 <CircularQueue_Sense+0x146>
 80076aa:	7af9      	ldrb	r1, [r7, #11]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	4419      	add	r1, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	1acb      	subs	r3, r1, r3
 80076b6:	e002      	b.n	80076be <CircularQueue_Sense+0x14c>
 80076b8:	7af9      	ldrb	r1, [r7, #11]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	440b      	add	r3, r1
		x =
 80076be:	4413      	add	r3, r2
 80076c0:	617b      	str	r3, [r7, #20]
								q->queueMaxSize));
	}
	if (elementSize != NULL) {
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d002      	beq.n	80076ce <CircularQueue_Sense+0x15c>
		*elementSize = eltSize;
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	8a7a      	ldrh	r2, [r7, #18]
 80076cc:	801a      	strh	r2, [r3, #0]
	}
	return x;
 80076ce:	697b      	ldr	r3, [r7, #20]
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	371c      	adds	r7, #28
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bc80      	pop	{r7}
 80076d8:	4770      	bx	lr
	...

080076dc <RxCpltCallback>:
extern SYS_CMD_DEVICE_LIST	cmdIODevList;

static	uint8_t				ConsoleChar;

void RxCpltCallback(void)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	af00      	add	r7, sp, #0
	RxPushByte (ConsoleChar);
 80076e0:	4b06      	ldr	r3, [pc, #24]	@ (80076fc <RxCpltCallback+0x20>)
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7fd fd5b 	bl	80051a0 <RxPushByte>
	HW_UART_Receive_IT(CFG_DEBUG_TRACE_UART, &ConsoleChar, 1U, RxCpltCallback);
 80076ea:	4b05      	ldr	r3, [pc, #20]	@ (8007700 <RxCpltCallback+0x24>)
 80076ec:	2201      	movs	r2, #1
 80076ee:	4903      	ldr	r1, [pc, #12]	@ (80076fc <RxCpltCallback+0x20>)
 80076f0:	2000      	movs	r0, #0
 80076f2:	f000 fdcb 	bl	800828c <HW_UART_Receive_IT>
}
 80076f6:	bf00      	nop
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	bf00      	nop
 80076fc:	2000114c 	.word	0x2000114c
 8007700:	080076dd 	.word	0x080076dd

08007704 <console_init>:

static bool console_init ()
{
 8007704:	b580      	push	{r7, lr}
 8007706:	af00      	add	r7, sp, #0
	assert (uartObj_Init() == true);
 8007708:	f7fd fcce 	bl	80050a8 <uartObj_Init>
 800770c:	4603      	mov	r3, r0
 800770e:	2b01      	cmp	r3, #1
 8007710:	d005      	beq.n	800771e <console_init+0x1a>
 8007712:	4b19      	ldr	r3, [pc, #100]	@ (8007778 <console_init+0x74>)
 8007714:	4a19      	ldr	r2, [pc, #100]	@ (800777c <console_init+0x78>)
 8007716:	2143      	movs	r1, #67	@ 0x43
 8007718:	4819      	ldr	r0, [pc, #100]	@ (8007780 <console_init+0x7c>)
 800771a:	f00c fbfd 	bl	8013f18 <__assert_func>
	assert (SYS_CMD_Initialize((SYS_MODULE_INIT*)&sysCmdInit) == true);
 800771e:	4819      	ldr	r0, [pc, #100]	@ (8007784 <console_init+0x80>)
 8007720:	f7fc f952 	bl	80039c8 <SYS_CMD_Initialize>
 8007724:	4603      	mov	r3, r0
 8007726:	2b01      	cmp	r3, #1
 8007728:	d005      	beq.n	8007736 <console_init+0x32>
 800772a:	4b17      	ldr	r3, [pc, #92]	@ (8007788 <console_init+0x84>)
 800772c:	4a13      	ldr	r2, [pc, #76]	@ (800777c <console_init+0x78>)
 800772e:	2144      	movs	r1, #68	@ 0x44
 8007730:	4813      	ldr	r0, [pc, #76]	@ (8007780 <console_init+0x7c>)
 8007732:	f00c fbf1 	bl	8013f18 <__assert_func>
	assert (SYS_CONSOLE_Initialize(SYS_CONSOLE_INDEX_0, (SYS_MODULE_INIT *)&sysConsole0Init) != SYS_MODULE_OBJ_INVALID);
 8007736:	4915      	ldr	r1, [pc, #84]	@ (800778c <console_init+0x88>)
 8007738:	2000      	movs	r0, #0
 800773a:	f7fd f9bf 	bl	8004abc <SYS_CONSOLE_Initialize>
 800773e:	4603      	mov	r3, r0
 8007740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007744:	d105      	bne.n	8007752 <console_init+0x4e>
 8007746:	4b12      	ldr	r3, [pc, #72]	@ (8007790 <console_init+0x8c>)
 8007748:	4a0c      	ldr	r2, [pc, #48]	@ (800777c <console_init+0x78>)
 800774a:	2145      	movs	r1, #69	@ 0x45
 800774c:	480c      	ldr	r0, [pc, #48]	@ (8007780 <console_init+0x7c>)
 800774e:	f00c fbe3 	bl	8013f18 <__assert_func>
	assert (SYS_CMDIO_ADD(&sysConsoleApi, &_cmdInitData.consoleCmdIOParam, _cmdInitData.consoleCmdIOParam) != 0);
 8007752:	4b10      	ldr	r3, [pc, #64]	@ (8007794 <console_init+0x90>)
 8007754:	785b      	ldrb	r3, [r3, #1]
 8007756:	461a      	mov	r2, r3
 8007758:	490f      	ldr	r1, [pc, #60]	@ (8007798 <console_init+0x94>)
 800775a:	4810      	ldr	r0, [pc, #64]	@ (800779c <console_init+0x98>)
 800775c:	f7fc fbb0 	bl	8003ec0 <SYS_CMDIO_ADD>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d105      	bne.n	8007772 <console_init+0x6e>
 8007766:	4b0e      	ldr	r3, [pc, #56]	@ (80077a0 <console_init+0x9c>)
 8007768:	4a04      	ldr	r2, [pc, #16]	@ (800777c <console_init+0x78>)
 800776a:	2146      	movs	r1, #70	@ 0x46
 800776c:	4804      	ldr	r0, [pc, #16]	@ (8007780 <console_init+0x7c>)
 800776e:	f00c fbd3 	bl	8013f18 <__assert_func>

	return true;
 8007772:	2301      	movs	r3, #1
}
 8007774:	4618      	mov	r0, r3
 8007776:	bd80      	pop	{r7, pc}
 8007778:	08018d2c 	.word	0x08018d2c
 800777c:	08019dfc 	.word	0x08019dfc
 8007780:	08018d44 	.word	0x08018d44
 8007784:	08019c2c 	.word	0x08019c2c
 8007788:	08018d6c 	.word	0x08018d6c
 800778c:	08019c4c 	.word	0x08019c4c
 8007790:	08018da8 	.word	0x08018da8
 8007794:	20000ee0 	.word	0x20000ee0
 8007798:	20000ee1 	.word	0x20000ee1
 800779c:	08019ca0 	.word	0x08019ca0
 80077a0:	08018e14 	.word	0x08018e14

080077a4 <scw_cmds_add>:

static bool scw_cmds_add ()
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	af00      	add	r7, sp, #0
	assert (cmd_system_add() == true);
 80077a8:	f7fc f8ec 	bl	8003984 <cmd_system_add>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d005      	beq.n	80077be <scw_cmds_add+0x1a>
 80077b2:	4b0a      	ldr	r3, [pc, #40]	@ (80077dc <scw_cmds_add+0x38>)
 80077b4:	4a0a      	ldr	r2, [pc, #40]	@ (80077e0 <scw_cmds_add+0x3c>)
 80077b6:	214d      	movs	r1, #77	@ 0x4d
 80077b8:	480a      	ldr	r0, [pc, #40]	@ (80077e4 <scw_cmds_add+0x40>)
 80077ba:	f00c fbad 	bl	8013f18 <__assert_func>
	assert (cmd_board_add() == true);
 80077be:	f7fb f9f5 	bl	8002bac <cmd_board_add>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d005      	beq.n	80077d4 <scw_cmds_add+0x30>
 80077c8:	4b07      	ldr	r3, [pc, #28]	@ (80077e8 <scw_cmds_add+0x44>)
 80077ca:	4a05      	ldr	r2, [pc, #20]	@ (80077e0 <scw_cmds_add+0x3c>)
 80077cc:	214e      	movs	r1, #78	@ 0x4e
 80077ce:	4805      	ldr	r0, [pc, #20]	@ (80077e4 <scw_cmds_add+0x40>)
 80077d0:	f00c fba2 	bl	8013f18 <__assert_func>
	return true;
 80077d4:	2301      	movs	r3, #1
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	08018e78 	.word	0x08018e78
 80077e0:	08019e0c 	.word	0x08019e0c
 80077e4:	08018d44 	.word	0x08018d44
 80077e8:	08018e94 	.word	0x08018e94

080077ec <console_scan_begin>:

static bool console_scan_begin ()
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	af00      	add	r7, sp, #0
	assert (osTimerList[OS_TIMER_INDEX_CLI_CONSOLE_SCAN].osTimerId != NULL);
 80077f0:	4b0e      	ldr	r3, [pc, #56]	@ (800782c <console_scan_begin+0x40>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d105      	bne.n	8007804 <console_scan_begin+0x18>
 80077f8:	4b0d      	ldr	r3, [pc, #52]	@ (8007830 <console_scan_begin+0x44>)
 80077fa:	4a0e      	ldr	r2, [pc, #56]	@ (8007834 <console_scan_begin+0x48>)
 80077fc:	2154      	movs	r1, #84	@ 0x54
 80077fe:	480e      	ldr	r0, [pc, #56]	@ (8007838 <console_scan_begin+0x4c>)
 8007800:	f00c fb8a 	bl	8013f18 <__assert_func>
	assert (osTimerStart(osTimerList[OS_TIMER_INDEX_CLI_CONSOLE_SCAN].osTimerId, osTimerList[OS_TIMER_INDEX_CLI_CONSOLE_SCAN].timeout_tick) == osOK);
 8007804:	4b09      	ldr	r3, [pc, #36]	@ (800782c <console_scan_begin+0x40>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a08      	ldr	r2, [pc, #32]	@ (800782c <console_scan_begin+0x40>)
 800780a:	6892      	ldr	r2, [r2, #8]
 800780c:	4611      	mov	r1, r2
 800780e:	4618      	mov	r0, r3
 8007810:	f008 fc12 	bl	8010038 <osTimerStart>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d005      	beq.n	8007826 <console_scan_begin+0x3a>
 800781a:	4b08      	ldr	r3, [pc, #32]	@ (800783c <console_scan_begin+0x50>)
 800781c:	4a05      	ldr	r2, [pc, #20]	@ (8007834 <console_scan_begin+0x48>)
 800781e:	2155      	movs	r1, #85	@ 0x55
 8007820:	4805      	ldr	r0, [pc, #20]	@ (8007838 <console_scan_begin+0x4c>)
 8007822:	f00c fb79 	bl	8013f18 <__assert_func>
	return true;
 8007826:	2301      	movs	r3, #1
}
 8007828:	4618      	mov	r0, r3
 800782a:	bd80      	pop	{r7, pc}
 800782c:	20000720 	.word	0x20000720
 8007830:	08018eac 	.word	0x08018eac
 8007834:	08019e1c 	.word	0x08019e1c
 8007838:	08018d44 	.word	0x08018d44
 800783c:	08018eec 	.word	0x08018eec

08007840 <scw_thread_cli>:

void scw_thread_cli (void *arg)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
	uint32_t cli_event_flag = 0;
 8007848:	2300      	movs	r3, #0
 800784a:	60fb      	str	r3, [r7, #12]
	uint32_t cli_wait_flag = 		\
 800784c:	2301      	movs	r3, #1
 800784e:	60bb      	str	r3, [r7, #8]
			EF_CONSOLE_SCAN			\
			;

	assert (console_init () == true);
 8007850:	f7ff ff58 	bl	8007704 <console_init>
 8007854:	4603      	mov	r3, r0
 8007856:	2b01      	cmp	r3, #1
 8007858:	d005      	beq.n	8007866 <scw_thread_cli+0x26>
 800785a:	4b29      	ldr	r3, [pc, #164]	@ (8007900 <scw_thread_cli+0xc0>)
 800785c:	4a29      	ldr	r2, [pc, #164]	@ (8007904 <scw_thread_cli+0xc4>)
 800785e:	2160      	movs	r1, #96	@ 0x60
 8007860:	4829      	ldr	r0, [pc, #164]	@ (8007908 <scw_thread_cli+0xc8>)
 8007862:	f00c fb59 	bl	8013f18 <__assert_func>
	assert (scw_cmds_add () == true);
 8007866:	f7ff ff9d 	bl	80077a4 <scw_cmds_add>
 800786a:	4603      	mov	r3, r0
 800786c:	2b01      	cmp	r3, #1
 800786e:	d005      	beq.n	800787c <scw_thread_cli+0x3c>
 8007870:	4b26      	ldr	r3, [pc, #152]	@ (800790c <scw_thread_cli+0xcc>)
 8007872:	4a24      	ldr	r2, [pc, #144]	@ (8007904 <scw_thread_cli+0xc4>)
 8007874:	2161      	movs	r1, #97	@ 0x61
 8007876:	4824      	ldr	r0, [pc, #144]	@ (8007908 <scw_thread_cli+0xc8>)
 8007878:	f00c fb4e 	bl	8013f18 <__assert_func>
	HW_UART_Receive_IT(CFG_DEBUG_TRACE_UART, &ConsoleChar, 1U, RxCpltCallback);
 800787c:	4b24      	ldr	r3, [pc, #144]	@ (8007910 <scw_thread_cli+0xd0>)
 800787e:	2201      	movs	r2, #1
 8007880:	4924      	ldr	r1, [pc, #144]	@ (8007914 <scw_thread_cli+0xd4>)
 8007882:	2000      	movs	r0, #0
 8007884:	f000 fd02 	bl	800828c <HW_UART_Receive_IT>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007888:	2025      	movs	r0, #37	@ 0x25
 800788a:	f001 fca8 	bl	80091de <HAL_NVIC_EnableIRQ>
	assert (console_scan_begin () == true);
 800788e:	f7ff ffad 	bl	80077ec <console_scan_begin>
 8007892:	4603      	mov	r3, r0
 8007894:	2b01      	cmp	r3, #1
 8007896:	d005      	beq.n	80078a4 <scw_thread_cli+0x64>
 8007898:	4b1f      	ldr	r3, [pc, #124]	@ (8007918 <scw_thread_cli+0xd8>)
 800789a:	4a1a      	ldr	r2, [pc, #104]	@ (8007904 <scw_thread_cli+0xc4>)
 800789c:	2164      	movs	r1, #100	@ 0x64
 800789e:	481a      	ldr	r0, [pc, #104]	@ (8007908 <scw_thread_cli+0xc8>)
 80078a0:	f00c fb3a 	bl	8013f18 <__assert_func>
	Greeting();
 80078a4:	f7fe f846 	bl	8005934 <Greeting>

	while (1) {
		cli_event_flag = osThreadFlagsWait(cli_wait_flag, osFlagsWaitAny, osWaitForever);
 80078a8:	f04f 32ff 	mov.w	r2, #4294967295
 80078ac:	2100      	movs	r1, #0
 80078ae:	68b8      	ldr	r0, [r7, #8]
 80078b0:	f008 fa94 	bl	800fddc <osThreadFlagsWait>
 80078b4:	60f8      	str	r0, [r7, #12]
		assert (!(cli_event_flag & THREAD_FLAG_MASK_ERROR));
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	da05      	bge.n	80078c8 <scw_thread_cli+0x88>
 80078bc:	4b17      	ldr	r3, [pc, #92]	@ (800791c <scw_thread_cli+0xdc>)
 80078be:	4a11      	ldr	r2, [pc, #68]	@ (8007904 <scw_thread_cli+0xc4>)
 80078c0:	2169      	movs	r1, #105	@ 0x69
 80078c2:	4811      	ldr	r0, [pc, #68]	@ (8007908 <scw_thread_cli+0xc8>)
 80078c4:	f00c fb28 	bl	8013f18 <__assert_func>

		if (cli_event_flag & EF_CONSOLE_SCAN) {
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f003 0301 	and.w	r3, r3, #1
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d0ea      	beq.n	80078a8 <scw_thread_cli+0x68>
			RunCmdTask(cmdIODevList.head);
 80078d2:	4b13      	ldr	r3, [pc, #76]	@ (8007920 <scw_thread_cli+0xe0>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7fc f908 	bl	8003aec <RunCmdTask>
			assert (osTimerStart(osTimerList[OS_TIMER_INDEX_CLI_CONSOLE_SCAN].osTimerId, osTimerList[OS_TIMER_INDEX_CLI_CONSOLE_SCAN].timeout_tick) == osOK);
 80078dc:	4b11      	ldr	r3, [pc, #68]	@ (8007924 <scw_thread_cli+0xe4>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a10      	ldr	r2, [pc, #64]	@ (8007924 <scw_thread_cli+0xe4>)
 80078e2:	6892      	ldr	r2, [r2, #8]
 80078e4:	4611      	mov	r1, r2
 80078e6:	4618      	mov	r0, r3
 80078e8:	f008 fba6 	bl	8010038 <osTimerStart>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d0da      	beq.n	80078a8 <scw_thread_cli+0x68>
 80078f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007928 <scw_thread_cli+0xe8>)
 80078f4:	4a03      	ldr	r2, [pc, #12]	@ (8007904 <scw_thread_cli+0xc4>)
 80078f6:	216d      	movs	r1, #109	@ 0x6d
 80078f8:	4803      	ldr	r0, [pc, #12]	@ (8007908 <scw_thread_cli+0xc8>)
 80078fa:	f00c fb0d 	bl	8013f18 <__assert_func>
 80078fe:	bf00      	nop
 8007900:	08018f74 	.word	0x08018f74
 8007904:	08019e30 	.word	0x08019e30
 8007908:	08018d44 	.word	0x08018d44
 800790c:	08018f8c 	.word	0x08018f8c
 8007910:	080076dd 	.word	0x080076dd
 8007914:	2000114c 	.word	0x2000114c
 8007918:	08018fa4 	.word	0x08018fa4
 800791c:	08018fc4 	.word	0x08018fc4
 8007920:	20000ed8 	.word	0x20000ed8
 8007924:	20000720 	.word	0x20000720
 8007928:	08018eec 	.word	0x08018eec

0800792c <LL_CPUID_GetImplementer>:
{
 800792c:	b480      	push	{r7}
 800792e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(SCB->CPUID, SCB_CPUID_IMPLEMENTER_Msk) >> SCB_CPUID_IMPLEMENTER_Pos);
 8007930:	4b03      	ldr	r3, [pc, #12]	@ (8007940 <LL_CPUID_GetImplementer+0x14>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	0e1b      	lsrs	r3, r3, #24
 8007936:	b2db      	uxtb	r3, r3
}
 8007938:	4618      	mov	r0, r3
 800793a:	46bd      	mov	sp, r7
 800793c:	bc80      	pop	{r7}
 800793e:	4770      	bx	lr
 8007940:	e000ed00 	.word	0xe000ed00

08007944 <LL_CPUID_GetVariant>:
{
 8007944:	b480      	push	{r7}
 8007946:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(SCB->CPUID, SCB_CPUID_VARIANT_Msk) >> SCB_CPUID_VARIANT_Pos);
 8007948:	4b04      	ldr	r3, [pc, #16]	@ (800795c <LL_CPUID_GetVariant+0x18>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	0d1b      	lsrs	r3, r3, #20
 800794e:	f003 030f 	and.w	r3, r3, #15
}
 8007952:	4618      	mov	r0, r3
 8007954:	46bd      	mov	sp, r7
 8007956:	bc80      	pop	{r7}
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	e000ed00 	.word	0xe000ed00

08007960 <LL_CPUID_GetConstant>:
{
 8007960:	b480      	push	{r7}
 8007962:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(SCB->CPUID, SCB_CPUID_ARCHITECTURE_Msk) >> SCB_CPUID_ARCHITECTURE_Pos);
 8007964:	4b04      	ldr	r3, [pc, #16]	@ (8007978 <LL_CPUID_GetConstant+0x18>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	0c1b      	lsrs	r3, r3, #16
 800796a:	f003 030f 	and.w	r3, r3, #15
}
 800796e:	4618      	mov	r0, r3
 8007970:	46bd      	mov	sp, r7
 8007972:	bc80      	pop	{r7}
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	e000ed00 	.word	0xe000ed00

0800797c <LL_CPUID_GetParNo>:
{
 800797c:	b480      	push	{r7}
 800797e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(SCB->CPUID, SCB_CPUID_PARTNO_Msk) >> SCB_CPUID_PARTNO_Pos);
 8007980:	4b04      	ldr	r3, [pc, #16]	@ (8007994 <LL_CPUID_GetParNo+0x18>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	091b      	lsrs	r3, r3, #4
 8007986:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 800798a:	4618      	mov	r0, r3
 800798c:	46bd      	mov	sp, r7
 800798e:	bc80      	pop	{r7}
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	e000ed00 	.word	0xe000ed00

08007998 <LL_CPUID_GetRevision>:
{
 8007998:	b480      	push	{r7}
 800799a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(SCB->CPUID, SCB_CPUID_REVISION_Msk) >> SCB_CPUID_REVISION_Pos);
 800799c:	4b03      	ldr	r3, [pc, #12]	@ (80079ac <LL_CPUID_GetRevision+0x14>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f003 030f 	and.w	r3, r3, #15
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bc80      	pop	{r7}
 80079aa:	4770      	bx	lr
 80079ac:	e000ed00 	.word	0xe000ed00

080079b0 <LL_GetUID_Word0>:
{
 80079b0:	b480      	push	{r7}
 80079b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID_BASE_ADDRESS)));
 80079b4:	4b02      	ldr	r3, [pc, #8]	@ (80079c0 <LL_GetUID_Word0+0x10>)
 80079b6:	681b      	ldr	r3, [r3, #0]
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bc80      	pop	{r7}
 80079be:	4770      	bx	lr
 80079c0:	1ffff7e8 	.word	0x1ffff7e8

080079c4 <LL_GetUID_Word1>:
{
 80079c4:	b480      	push	{r7}
 80079c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE_ADDRESS + 4U))));
 80079c8:	4b02      	ldr	r3, [pc, #8]	@ (80079d4 <LL_GetUID_Word1+0x10>)
 80079ca:	681b      	ldr	r3, [r3, #0]
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bc80      	pop	{r7}
 80079d2:	4770      	bx	lr
 80079d4:	1ffff7ec 	.word	0x1ffff7ec

080079d8 <LL_GetUID_Word2>:
{
 80079d8:	b480      	push	{r7}
 80079da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE_ADDRESS + 8U))));
 80079dc:	4b02      	ldr	r3, [pc, #8]	@ (80079e8 <LL_GetUID_Word2+0x10>)
 80079de:	681b      	ldr	r3, [r3, #0]
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bc80      	pop	{r7}
 80079e6:	4770      	bx	lr
 80079e8:	1ffff7f0 	.word	0x1ffff7f0

080079ec <scw_infoObj_init>:
 * function : HW 상태에 따라 초기 Status 정보를 구성
 * arg : SatusObj pinter
 * return : bool
 **************************************************************************************************/
static bool scw_infoObj_init(scw_infoObj_t *psio)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
	strcpy (psio->fw_version, FW_VERSION);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	4945      	ldr	r1, [pc, #276]	@ (8007b0c <scw_infoObj_init+0x120>)
 80079f8:	461a      	mov	r2, r3
 80079fa:	460b      	mov	r3, r1
 80079fc:	cb03      	ldmia	r3!, {r0, r1}
 80079fe:	6010      	str	r0, [r2, #0]
 8007a00:	6051      	str	r1, [r2, #4]
 8007a02:	881b      	ldrh	r3, [r3, #0]
 8007a04:	8113      	strh	r3, [r2, #8]

	psio->CPUID = READ_REG(SCB->CPUID);
 8007a06:	4b42      	ldr	r3, [pc, #264]	@ (8007b10 <scw_infoObj_init+0x124>)
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	645a      	str	r2, [r3, #68]	@ 0x44
	psio->implementer = LL_CPUID_GetImplementer();
 8007a0e:	f7ff ff8d 	bl	800792c <LL_CPUID_GetImplementer>
 8007a12:	4602      	mov	r2, r0
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	649a      	str	r2, [r3, #72]	@ 0x48
	psio->variant = LL_CPUID_GetVariant();
 8007a18:	f7ff ff94 	bl	8007944 <LL_CPUID_GetVariant>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	64da      	str	r2, [r3, #76]	@ 0x4c
	psio->constant = LL_CPUID_GetConstant();
 8007a22:	f7ff ff9d 	bl	8007960 <LL_CPUID_GetConstant>
 8007a26:	4602      	mov	r2, r0
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	651a      	str	r2, [r3, #80]	@ 0x50
	psio->partno = LL_CPUID_GetParNo();
 8007a2c:	f7ff ffa6 	bl	800797c <LL_CPUID_GetParNo>
 8007a30:	4602      	mov	r2, r0
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	655a      	str	r2, [r3, #84]	@ 0x54
	psio->version = LL_CPUID_GetRevision();
 8007a36:	f7ff ffaf 	bl	8007998 <LL_CPUID_GetRevision>
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	659a      	str	r2, [r3, #88]	@ 0x58

	psio->uid0 = LL_GetUID_Word0();
 8007a40:	f7ff ffb6 	bl	80079b0 <LL_GetUID_Word0>
 8007a44:	4602      	mov	r2, r0
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	661a      	str	r2, [r3, #96]	@ 0x60
	psio->uid1 = LL_GetUID_Word1();
 8007a4a:	f7ff ffbb 	bl	80079c4 <LL_GetUID_Word1>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	665a      	str	r2, [r3, #100]	@ 0x64
	psio->uid2 = LL_GetUID_Word2();
 8007a54:	f7ff ffc0 	bl	80079d8 <LL_GetUID_Word2>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	669a      	str	r2, [r3, #104]	@ 0x68
	psio->counter_admin = 0;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	66da      	str	r2, [r3, #108]	@ 0x6c

	assert (HAL_RTC_GetTime(&hrtc, &psio->currentTime, RTC_FORMAT_BIN) == HAL_OK);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	3374      	adds	r3, #116	@ 0x74
 8007a68:	2200      	movs	r2, #0
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	4829      	ldr	r0, [pc, #164]	@ (8007b14 <scw_infoObj_init+0x128>)
 8007a6e:	f005 ffc7 	bl	800da00 <HAL_RTC_GetTime>
 8007a72:	4603      	mov	r3, r0
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d005      	beq.n	8007a84 <scw_infoObj_init+0x98>
 8007a78:	4b27      	ldr	r3, [pc, #156]	@ (8007b18 <scw_infoObj_init+0x12c>)
 8007a7a:	4a28      	ldr	r2, [pc, #160]	@ (8007b1c <scw_infoObj_init+0x130>)
 8007a7c:	213c      	movs	r1, #60	@ 0x3c
 8007a7e:	4828      	ldr	r0, [pc, #160]	@ (8007b20 <scw_infoObj_init+0x134>)
 8007a80:	f00c fa4a 	bl	8013f18 <__assert_func>
	assert (HAL_RTC_GetDate(&hrtc, &psio->currentDate, RTC_FORMAT_BIN) == HAL_OK);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	3370      	adds	r3, #112	@ 0x70
 8007a88:	2200      	movs	r2, #0
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	4821      	ldr	r0, [pc, #132]	@ (8007b14 <scw_infoObj_init+0x128>)
 8007a8e:	f006 f88f 	bl	800dbb0 <HAL_RTC_GetDate>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d005      	beq.n	8007aa4 <scw_infoObj_init+0xb8>
 8007a98:	4b22      	ldr	r3, [pc, #136]	@ (8007b24 <scw_infoObj_init+0x138>)
 8007a9a:	4a20      	ldr	r2, [pc, #128]	@ (8007b1c <scw_infoObj_init+0x130>)
 8007a9c:	213d      	movs	r1, #61	@ 0x3d
 8007a9e:	4820      	ldr	r0, [pc, #128]	@ (8007b20 <scw_infoObj_init+0x134>)
 8007aa0:	f00c fa3a 	bl	8013f18 <__assert_func>
	assert (HAL_RTC_GetTime(&hrtc, &psio->launchTime, RTC_FORMAT_BIN) == HAL_OK);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	337b      	adds	r3, #123	@ 0x7b
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	4619      	mov	r1, r3
 8007aac:	4819      	ldr	r0, [pc, #100]	@ (8007b14 <scw_infoObj_init+0x128>)
 8007aae:	f005 ffa7 	bl	800da00 <HAL_RTC_GetTime>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d005      	beq.n	8007ac4 <scw_infoObj_init+0xd8>
 8007ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8007b28 <scw_infoObj_init+0x13c>)
 8007aba:	4a18      	ldr	r2, [pc, #96]	@ (8007b1c <scw_infoObj_init+0x130>)
 8007abc:	213e      	movs	r1, #62	@ 0x3e
 8007abe:	4818      	ldr	r0, [pc, #96]	@ (8007b20 <scw_infoObj_init+0x134>)
 8007ac0:	f00c fa2a 	bl	8013f18 <__assert_func>
	assert (HAL_RTC_GetDate(&hrtc, &psio->launchDate, RTC_FORMAT_BIN) == HAL_OK);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	3377      	adds	r3, #119	@ 0x77
 8007ac8:	2200      	movs	r2, #0
 8007aca:	4619      	mov	r1, r3
 8007acc:	4811      	ldr	r0, [pc, #68]	@ (8007b14 <scw_infoObj_init+0x128>)
 8007ace:	f006 f86f 	bl	800dbb0 <HAL_RTC_GetDate>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d005      	beq.n	8007ae4 <scw_infoObj_init+0xf8>
 8007ad8:	4b14      	ldr	r3, [pc, #80]	@ (8007b2c <scw_infoObj_init+0x140>)
 8007ada:	4a10      	ldr	r2, [pc, #64]	@ (8007b1c <scw_infoObj_init+0x130>)
 8007adc:	213f      	movs	r1, #63	@ 0x3f
 8007ade:	4810      	ldr	r0, [pc, #64]	@ (8007b20 <scw_infoObj_init+0x134>)
 8007ae0:	f00c fa1a 	bl	8013f18 <__assert_func>

	// door switch  가 움직일 때 rising/falling edge 가 glitch 처럼 많이 발생하기 때문에 아래와 같이 timer 로 처리하기로 함.
	psio->scw_door.door_1_status = get_door_1_status();
 8007ae4:	f7fd ffc4 	bl	8005a70 <get_door_1_status>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	461a      	mov	r2, r3
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
	psio->scw_door.door_2_status = get_door_2_status();
 8007af2:	f7fd ffd3 	bl	8005a9c <get_door_2_status>
 8007af6:	4603      	mov	r3, r0
 8007af8:	461a      	mov	r2, r3
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f

	return true;
 8007b00:	2301      	movs	r3, #1
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3708      	adds	r7, #8
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	08018ff0 	.word	0x08018ff0
 8007b10:	e000ed00 	.word	0xe000ed00
 8007b14:	20000c18 	.word	0x20000c18
 8007b18:	08018ffc 	.word	0x08018ffc
 8007b1c:	08019e40 	.word	0x08019e40
 8007b20:	08019044 	.word	0x08019044
 8007b24:	0801906c 	.word	0x0801906c
 8007b28:	080190b4 	.word	0x080190b4
 8007b2c:	080190f8 	.word	0x080190f8

08007b30 <uptime_counter_begin>:

static bool uptime_counter_begin()
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	af00      	add	r7, sp, #0
	assert (osTimerList[OS_TIMER_INDEX_UPTIME_COUNT].osTimerId != NULL);
 8007b34:	4b0e      	ldr	r3, [pc, #56]	@ (8007b70 <uptime_counter_begin+0x40>)
 8007b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d105      	bne.n	8007b48 <uptime_counter_begin+0x18>
 8007b3c:	4b0d      	ldr	r3, [pc, #52]	@ (8007b74 <uptime_counter_begin+0x44>)
 8007b3e:	4a0e      	ldr	r2, [pc, #56]	@ (8007b78 <uptime_counter_begin+0x48>)
 8007b40:	214a      	movs	r1, #74	@ 0x4a
 8007b42:	480e      	ldr	r0, [pc, #56]	@ (8007b7c <uptime_counter_begin+0x4c>)
 8007b44:	f00c f9e8 	bl	8013f18 <__assert_func>
	assert (osTimerStart(osTimerList[OS_TIMER_INDEX_UPTIME_COUNT].osTimerId, osTimerList[OS_TIMER_INDEX_UPTIME_COUNT].timeout_tick) == osOK);
 8007b48:	4b09      	ldr	r3, [pc, #36]	@ (8007b70 <uptime_counter_begin+0x40>)
 8007b4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b4c:	4a08      	ldr	r2, [pc, #32]	@ (8007b70 <uptime_counter_begin+0x40>)
 8007b4e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007b50:	4611      	mov	r1, r2
 8007b52:	4618      	mov	r0, r3
 8007b54:	f008 fa70 	bl	8010038 <osTimerStart>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d005      	beq.n	8007b6a <uptime_counter_begin+0x3a>
 8007b5e:	4b08      	ldr	r3, [pc, #32]	@ (8007b80 <uptime_counter_begin+0x50>)
 8007b60:	4a05      	ldr	r2, [pc, #20]	@ (8007b78 <uptime_counter_begin+0x48>)
 8007b62:	214b      	movs	r1, #75	@ 0x4b
 8007b64:	4805      	ldr	r0, [pc, #20]	@ (8007b7c <uptime_counter_begin+0x4c>)
 8007b66:	f00c f9d7 	bl	8013f18 <__assert_func>
	return true;
 8007b6a:	2301      	movs	r3, #1
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	20000720 	.word	0x20000720
 8007b74:	0801913c 	.word	0x0801913c
 8007b78:	08019e54 	.word	0x08019e54
 8007b7c:	08019044 	.word	0x08019044
 8007b80:	08019178 	.word	0x08019178

08007b84 <relay_io_init>:

static bool relay_io_init()
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	af00      	add	r7, sp, #0
	ssr1_off;
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007b8e:	480c      	ldr	r0, [pc, #48]	@ (8007bc0 <relay_io_init+0x3c>)
 8007b90:	f002 fadb 	bl	800a14a <HAL_GPIO_WritePin>
	ssr2_off;
 8007b94:	2201      	movs	r2, #1
 8007b96:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007b9a:	4809      	ldr	r0, [pc, #36]	@ (8007bc0 <relay_io_init+0x3c>)
 8007b9c:	f002 fad5 	bl	800a14a <HAL_GPIO_WritePin>
	ssr3_off;
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8007ba6:	4806      	ldr	r0, [pc, #24]	@ (8007bc0 <relay_io_init+0x3c>)
 8007ba8:	f002 facf 	bl	800a14a <HAL_GPIO_WritePin>
	ssr4_off;
 8007bac:	2201      	movs	r2, #1
 8007bae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007bb2:	4803      	ldr	r0, [pc, #12]	@ (8007bc0 <relay_io_init+0x3c>)
 8007bb4:	f002 fac9 	bl	800a14a <HAL_GPIO_WritePin>

	return true;
 8007bb8:	2301      	movs	r3, #1
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	40010c00 	.word	0x40010c00

08007bc4 <scw_thread_init>:

void scw_thread_init (void *arg)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
	DbgTraceInit();
 8007bcc:	f000 faca 	bl	8008164 <DbgTraceInit>

	assert (scw_rtc_init() == true);
 8007bd0:	f7f9 ff2c 	bl	8001a2c <scw_rtc_init>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d005      	beq.n	8007be6 <scw_thread_init+0x22>
 8007bda:	4b2d      	ldr	r3, [pc, #180]	@ (8007c90 <scw_thread_init+0xcc>)
 8007bdc:	4a2d      	ldr	r2, [pc, #180]	@ (8007c94 <scw_thread_init+0xd0>)
 8007bde:	215d      	movs	r1, #93	@ 0x5d
 8007be0:	482d      	ldr	r0, [pc, #180]	@ (8007c98 <scw_thread_init+0xd4>)
 8007be2:	f00c f999 	bl	8013f18 <__assert_func>
	assert (osTimerList_init(&osTimerList[OS_TIMER_INDEX_BEGIN]) == true);
 8007be6:	482d      	ldr	r0, [pc, #180]	@ (8007c9c <scw_thread_init+0xd8>)
 8007be8:	f7fe fe26 	bl	8006838 <osTimerList_init>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d005      	beq.n	8007bfe <scw_thread_init+0x3a>
 8007bf2:	4b2b      	ldr	r3, [pc, #172]	@ (8007ca0 <scw_thread_init+0xdc>)
 8007bf4:	4a27      	ldr	r2, [pc, #156]	@ (8007c94 <scw_thread_init+0xd0>)
 8007bf6:	215e      	movs	r1, #94	@ 0x5e
 8007bf8:	4827      	ldr	r0, [pc, #156]	@ (8007c98 <scw_thread_init+0xd4>)
 8007bfa:	f00c f98d 	bl	8013f18 <__assert_func>
	assert (scw_infoObj_init(&scw_infoObj) == true);
 8007bfe:	4829      	ldr	r0, [pc, #164]	@ (8007ca4 <scw_thread_init+0xe0>)
 8007c00:	f7ff fef4 	bl	80079ec <scw_infoObj_init>
 8007c04:	4603      	mov	r3, r0
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d005      	beq.n	8007c16 <scw_thread_init+0x52>
 8007c0a:	4b27      	ldr	r3, [pc, #156]	@ (8007ca8 <scw_thread_init+0xe4>)
 8007c0c:	4a21      	ldr	r2, [pc, #132]	@ (8007c94 <scw_thread_init+0xd0>)
 8007c0e:	215f      	movs	r1, #95	@ 0x5f
 8007c10:	4821      	ldr	r0, [pc, #132]	@ (8007c98 <scw_thread_init+0xd4>)
 8007c12:	f00c f981 	bl	8013f18 <__assert_func>
	assert (SHT2x_Init(&hi2c1) == true);
 8007c16:	4825      	ldr	r0, [pc, #148]	@ (8007cac <scw_thread_init+0xe8>)
 8007c18:	f7fe ffd4 	bl	8006bc4 <SHT2x_Init>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d005      	beq.n	8007c2e <scw_thread_init+0x6a>
 8007c22:	4b23      	ldr	r3, [pc, #140]	@ (8007cb0 <scw_thread_init+0xec>)
 8007c24:	4a1b      	ldr	r2, [pc, #108]	@ (8007c94 <scw_thread_init+0xd0>)
 8007c26:	2160      	movs	r1, #96	@ 0x60
 8007c28:	481b      	ldr	r0, [pc, #108]	@ (8007c98 <scw_thread_init+0xd4>)
 8007c2a:	f00c f975 	bl	8013f18 <__assert_func>
	assert (relay_io_init() == true);
 8007c2e:	f7ff ffa9 	bl	8007b84 <relay_io_init>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d005      	beq.n	8007c44 <scw_thread_init+0x80>
 8007c38:	4b1e      	ldr	r3, [pc, #120]	@ (8007cb4 <scw_thread_init+0xf0>)
 8007c3a:	4a16      	ldr	r2, [pc, #88]	@ (8007c94 <scw_thread_init+0xd0>)
 8007c3c:	2161      	movs	r1, #97	@ 0x61
 8007c3e:	4816      	ldr	r0, [pc, #88]	@ (8007c98 <scw_thread_init+0xd4>)
 8007c40:	f00c f96a 	bl	8013f18 <__assert_func>
	assert (adc_initial_calibration() == true);
 8007c44:	f7f9 fba0 	bl	8001388 <adc_initial_calibration>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d005      	beq.n	8007c5a <scw_thread_init+0x96>
 8007c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8007cb8 <scw_thread_init+0xf4>)
 8007c50:	4a10      	ldr	r2, [pc, #64]	@ (8007c94 <scw_thread_init+0xd0>)
 8007c52:	2162      	movs	r1, #98	@ 0x62
 8007c54:	4810      	ldr	r0, [pc, #64]	@ (8007c98 <scw_thread_init+0xd4>)
 8007c56:	f00c f95f 	bl	8013f18 <__assert_func>

	do_scw_info_display = false;
 8007c5a:	4b18      	ldr	r3, [pc, #96]	@ (8007cbc <scw_thread_init+0xf8>)
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	701a      	strb	r2, [r3, #0]
	scw_banner = BANNER_ECELL;
 8007c60:	4b17      	ldr	r3, [pc, #92]	@ (8007cc0 <scw_thread_init+0xfc>)
 8007c62:	2201      	movs	r2, #1
 8007c64:	701a      	strb	r2, [r3, #0]
	uptime_counter = 0;
 8007c66:	4917      	ldr	r1, [pc, #92]	@ (8007cc4 <scw_thread_init+0x100>)
 8007c68:	f04f 0200 	mov.w	r2, #0
 8007c6c:	f04f 0300 	mov.w	r3, #0
 8007c70:	e9c1 2300 	strd	r2, r3, [r1]
	assert (uptime_counter_begin() == true);
 8007c74:	f7ff ff5c 	bl	8007b30 <uptime_counter_begin>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d005      	beq.n	8007c8a <scw_thread_init+0xc6>
 8007c7e:	4b12      	ldr	r3, [pc, #72]	@ (8007cc8 <scw_thread_init+0x104>)
 8007c80:	4a04      	ldr	r2, [pc, #16]	@ (8007c94 <scw_thread_init+0xd0>)
 8007c82:	2167      	movs	r1, #103	@ 0x67
 8007c84:	4804      	ldr	r0, [pc, #16]	@ (8007c98 <scw_thread_init+0xd4>)
 8007c86:	f00c f947 	bl	8013f18 <__assert_func>

	osThreadExit();
 8007c8a:	f008 f851 	bl	800fd30 <osThreadExit>
 8007c8e:	bf00      	nop
 8007c90:	080191f8 	.word	0x080191f8
 8007c94:	08019e6c 	.word	0x08019e6c
 8007c98:	08019044 	.word	0x08019044
 8007c9c:	20000720 	.word	0x20000720
 8007ca0:	08019210 	.word	0x08019210
 8007ca4:	20000b28 	.word	0x20000b28
 8007ca8:	08019250 	.word	0x08019250
 8007cac:	20000bc4 	.word	0x20000bc4
 8007cb0:	08019278 	.word	0x08019278
 8007cb4:	08019294 	.word	0x08019294
 8007cb8:	080192ac 	.word	0x080192ac
 8007cbc:	20000bbc 	.word	0x20000bbc
 8007cc0:	20001144 	.word	0x20001144
 8007cc4:	20000b20 	.word	0x20000b20
 8007cc8:	080192d0 	.word	0x080192d0

08007ccc <door_check_timer_begin>:
osMessageQueueId_t		sensorThreadQ;

bool sensor_msg_handler_tbl_init();

static bool door_check_timer_begin ()
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	af00      	add	r7, sp, #0
	assert (osTimerList[OS_TIMER_INDEX_DOOR_CHECK].osTimerId != NULL);
 8007cd0:	4b10      	ldr	r3, [pc, #64]	@ (8007d14 <door_check_timer_begin+0x48>)
 8007cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d105      	bne.n	8007ce6 <door_check_timer_begin+0x1a>
 8007cda:	4b0f      	ldr	r3, [pc, #60]	@ (8007d18 <door_check_timer_begin+0x4c>)
 8007cdc:	4a0f      	ldr	r2, [pc, #60]	@ (8007d1c <door_check_timer_begin+0x50>)
 8007cde:	212d      	movs	r1, #45	@ 0x2d
 8007ce0:	480f      	ldr	r0, [pc, #60]	@ (8007d20 <door_check_timer_begin+0x54>)
 8007ce2:	f00c f919 	bl	8013f18 <__assert_func>
	assert (osTimerStart(osTimerList[OS_TIMER_INDEX_DOOR_CHECK].osTimerId, osTimerList[OS_TIMER_INDEX_DOOR_CHECK].timeout_tick) == osOK);
 8007ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8007d14 <door_check_timer_begin+0x48>)
 8007ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cec:	4a09      	ldr	r2, [pc, #36]	@ (8007d14 <door_check_timer_begin+0x48>)
 8007cee:	f8d2 2090 	ldr.w	r2, [r2, #144]	@ 0x90
 8007cf2:	4611      	mov	r1, r2
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f008 f99f 	bl	8010038 <osTimerStart>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d005      	beq.n	8007d0c <door_check_timer_begin+0x40>
 8007d00:	4b08      	ldr	r3, [pc, #32]	@ (8007d24 <door_check_timer_begin+0x58>)
 8007d02:	4a06      	ldr	r2, [pc, #24]	@ (8007d1c <door_check_timer_begin+0x50>)
 8007d04:	212e      	movs	r1, #46	@ 0x2e
 8007d06:	4806      	ldr	r0, [pc, #24]	@ (8007d20 <door_check_timer_begin+0x54>)
 8007d08:	f00c f906 	bl	8013f18 <__assert_func>
	return true;
 8007d0c:	2301      	movs	r3, #1
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	20000720 	.word	0x20000720
 8007d18:	080192f0 	.word	0x080192f0
 8007d1c:	08019e7c 	.word	0x08019e7c
 8007d20:	0801932c 	.word	0x0801932c
 8007d24:	08019354 	.word	0x08019354

08007d28 <ht_check_timer_begin>:

static bool ht_check_timer_begin ()
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	af00      	add	r7, sp, #0
	assert (osTimerList[OS_TIMER_INDEX_HT_CHECK].osTimerId != NULL);
 8007d2c:	4b10      	ldr	r3, [pc, #64]	@ (8007d70 <ht_check_timer_begin+0x48>)
 8007d2e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d105      	bne.n	8007d42 <ht_check_timer_begin+0x1a>
 8007d36:	4b0f      	ldr	r3, [pc, #60]	@ (8007d74 <ht_check_timer_begin+0x4c>)
 8007d38:	4a0f      	ldr	r2, [pc, #60]	@ (8007d78 <ht_check_timer_begin+0x50>)
 8007d3a:	2134      	movs	r1, #52	@ 0x34
 8007d3c:	480f      	ldr	r0, [pc, #60]	@ (8007d7c <ht_check_timer_begin+0x54>)
 8007d3e:	f00c f8eb 	bl	8013f18 <__assert_func>
	assert (osTimerStart(osTimerList[OS_TIMER_INDEX_HT_CHECK].osTimerId, osTimerList[OS_TIMER_INDEX_HT_CHECK].timeout_tick) == osOK);
 8007d42:	4b0b      	ldr	r3, [pc, #44]	@ (8007d70 <ht_check_timer_begin+0x48>)
 8007d44:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8007d48:	4a09      	ldr	r2, [pc, #36]	@ (8007d70 <ht_check_timer_begin+0x48>)
 8007d4a:	f8d2 20d4 	ldr.w	r2, [r2, #212]	@ 0xd4
 8007d4e:	4611      	mov	r1, r2
 8007d50:	4618      	mov	r0, r3
 8007d52:	f008 f971 	bl	8010038 <osTimerStart>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d005      	beq.n	8007d68 <ht_check_timer_begin+0x40>
 8007d5c:	4b08      	ldr	r3, [pc, #32]	@ (8007d80 <ht_check_timer_begin+0x58>)
 8007d5e:	4a06      	ldr	r2, [pc, #24]	@ (8007d78 <ht_check_timer_begin+0x50>)
 8007d60:	2135      	movs	r1, #53	@ 0x35
 8007d62:	4806      	ldr	r0, [pc, #24]	@ (8007d7c <ht_check_timer_begin+0x54>)
 8007d64:	f00c f8d8 	bl	8013f18 <__assert_func>
	return true;
 8007d68:	2301      	movs	r3, #1
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	20000720 	.word	0x20000720
 8007d74:	080193d0 	.word	0x080193d0
 8007d78:	08019e94 	.word	0x08019e94
 8007d7c:	0801932c 	.word	0x0801932c
 8007d80:	08019408 	.word	0x08019408

08007d84 <adc_check_timer_begin>:

static bool adc_check_timer_begin ()
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	af00      	add	r7, sp, #0
	assert (osTimerList[OS_TIMER_INDEX_ADC_CHECK].osTimerId != NULL);
 8007d88:	4b10      	ldr	r3, [pc, #64]	@ (8007dcc <adc_check_timer_begin+0x48>)
 8007d8a:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d105      	bne.n	8007d9e <adc_check_timer_begin+0x1a>
 8007d92:	4b0f      	ldr	r3, [pc, #60]	@ (8007dd0 <adc_check_timer_begin+0x4c>)
 8007d94:	4a0f      	ldr	r2, [pc, #60]	@ (8007dd4 <adc_check_timer_begin+0x50>)
 8007d96:	213b      	movs	r1, #59	@ 0x3b
 8007d98:	480f      	ldr	r0, [pc, #60]	@ (8007dd8 <adc_check_timer_begin+0x54>)
 8007d9a:	f00c f8bd 	bl	8013f18 <__assert_func>
	assert (osTimerStart(osTimerList[OS_TIMER_INDEX_ADC_CHECK].osTimerId, osTimerList[OS_TIMER_INDEX_ADC_CHECK].timeout_tick) == osOK);
 8007d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8007dcc <adc_check_timer_begin+0x48>)
 8007da0:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8007da4:	4a09      	ldr	r2, [pc, #36]	@ (8007dcc <adc_check_timer_begin+0x48>)
 8007da6:	f8d2 2118 	ldr.w	r2, [r2, #280]	@ 0x118
 8007daa:	4611      	mov	r1, r2
 8007dac:	4618      	mov	r0, r3
 8007dae:	f008 f943 	bl	8010038 <osTimerStart>
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d005      	beq.n	8007dc4 <adc_check_timer_begin+0x40>
 8007db8:	4b08      	ldr	r3, [pc, #32]	@ (8007ddc <adc_check_timer_begin+0x58>)
 8007dba:	4a06      	ldr	r2, [pc, #24]	@ (8007dd4 <adc_check_timer_begin+0x50>)
 8007dbc:	213c      	movs	r1, #60	@ 0x3c
 8007dbe:	4806      	ldr	r0, [pc, #24]	@ (8007dd8 <adc_check_timer_begin+0x54>)
 8007dc0:	f00c f8aa 	bl	8013f18 <__assert_func>
	return true;
 8007dc4:	2301      	movs	r3, #1
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	20000720 	.word	0x20000720
 8007dd0:	08019480 	.word	0x08019480
 8007dd4:	08019eac 	.word	0x08019eac
 8007dd8:	0801932c 	.word	0x0801932c
 8007ddc:	080194b8 	.word	0x080194b8

08007de0 <do_scw_info_display_timer_begin>:

static bool do_scw_info_display_timer_begin ()
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	af00      	add	r7, sp, #0
	assert (osTimerList[OS_TIMER_INDEX_SCW_INFO_DISPLAY].osTimerId != NULL);
 8007de4:	4b10      	ldr	r3, [pc, #64]	@ (8007e28 <do_scw_info_display_timer_begin+0x48>)
 8007de6:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d105      	bne.n	8007dfa <do_scw_info_display_timer_begin+0x1a>
 8007dee:	4b0f      	ldr	r3, [pc, #60]	@ (8007e2c <do_scw_info_display_timer_begin+0x4c>)
 8007df0:	4a0f      	ldr	r2, [pc, #60]	@ (8007e30 <do_scw_info_display_timer_begin+0x50>)
 8007df2:	2142      	movs	r1, #66	@ 0x42
 8007df4:	480f      	ldr	r0, [pc, #60]	@ (8007e34 <do_scw_info_display_timer_begin+0x54>)
 8007df6:	f00c f88f 	bl	8013f18 <__assert_func>
	assert (osTimerStart(osTimerList[OS_TIMER_INDEX_SCW_INFO_DISPLAY].osTimerId, osTimerList[OS_TIMER_INDEX_SCW_INFO_DISPLAY].timeout_tick) == osOK);
 8007dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8007e28 <do_scw_info_display_timer_begin+0x48>)
 8007dfc:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8007e00:	4a09      	ldr	r2, [pc, #36]	@ (8007e28 <do_scw_info_display_timer_begin+0x48>)
 8007e02:	f8d2 215c 	ldr.w	r2, [r2, #348]	@ 0x15c
 8007e06:	4611      	mov	r1, r2
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f008 f915 	bl	8010038 <osTimerStart>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d005      	beq.n	8007e20 <do_scw_info_display_timer_begin+0x40>
 8007e14:	4b08      	ldr	r3, [pc, #32]	@ (8007e38 <do_scw_info_display_timer_begin+0x58>)
 8007e16:	4a06      	ldr	r2, [pc, #24]	@ (8007e30 <do_scw_info_display_timer_begin+0x50>)
 8007e18:	2143      	movs	r1, #67	@ 0x43
 8007e1a:	4806      	ldr	r0, [pc, #24]	@ (8007e34 <do_scw_info_display_timer_begin+0x54>)
 8007e1c:	f00c f87c 	bl	8013f18 <__assert_func>
	return true;
 8007e20:	2301      	movs	r3, #1
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	20000720 	.word	0x20000720
 8007e2c:	08019534 	.word	0x08019534
 8007e30:	08019ec4 	.word	0x08019ec4
 8007e34:	0801932c 	.word	0x0801932c
 8007e38:	08019574 	.word	0x08019574

08007e3c <scw_thread_sensor>:

void scw_thread_sensor (void *arg)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b086      	sub	sp, #24
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
	sensor_msg_t sensor_msg;

	assert (sensor_msg_handler_tbl_init() == true);
 8007e44:	f7fe f890 	bl	8005f68 <sensor_msg_handler_tbl_init>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d005      	beq.n	8007e5a <scw_thread_sensor+0x1e>
 8007e4e:	4b3b      	ldr	r3, [pc, #236]	@ (8007f3c <scw_thread_sensor+0x100>)
 8007e50:	4a3b      	ldr	r2, [pc, #236]	@ (8007f40 <scw_thread_sensor+0x104>)
 8007e52:	214b      	movs	r1, #75	@ 0x4b
 8007e54:	483b      	ldr	r0, [pc, #236]	@ (8007f44 <scw_thread_sensor+0x108>)
 8007e56:	f00c f85f 	bl	8013f18 <__assert_func>
	assert (door_check_timer_begin() == true);
 8007e5a:	f7ff ff37 	bl	8007ccc <door_check_timer_begin>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d005      	beq.n	8007e70 <scw_thread_sensor+0x34>
 8007e64:	4b38      	ldr	r3, [pc, #224]	@ (8007f48 <scw_thread_sensor+0x10c>)
 8007e66:	4a36      	ldr	r2, [pc, #216]	@ (8007f40 <scw_thread_sensor+0x104>)
 8007e68:	214c      	movs	r1, #76	@ 0x4c
 8007e6a:	4836      	ldr	r0, [pc, #216]	@ (8007f44 <scw_thread_sensor+0x108>)
 8007e6c:	f00c f854 	bl	8013f18 <__assert_func>
	assert (ht_check_timer_begin() == true);
 8007e70:	f7ff ff5a 	bl	8007d28 <ht_check_timer_begin>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d005      	beq.n	8007e86 <scw_thread_sensor+0x4a>
 8007e7a:	4b34      	ldr	r3, [pc, #208]	@ (8007f4c <scw_thread_sensor+0x110>)
 8007e7c:	4a30      	ldr	r2, [pc, #192]	@ (8007f40 <scw_thread_sensor+0x104>)
 8007e7e:	214d      	movs	r1, #77	@ 0x4d
 8007e80:	4830      	ldr	r0, [pc, #192]	@ (8007f44 <scw_thread_sensor+0x108>)
 8007e82:	f00c f849 	bl	8013f18 <__assert_func>
	assert (adc_check_timer_begin() == true);
 8007e86:	f7ff ff7d 	bl	8007d84 <adc_check_timer_begin>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d005      	beq.n	8007e9c <scw_thread_sensor+0x60>
 8007e90:	4b2f      	ldr	r3, [pc, #188]	@ (8007f50 <scw_thread_sensor+0x114>)
 8007e92:	4a2b      	ldr	r2, [pc, #172]	@ (8007f40 <scw_thread_sensor+0x104>)
 8007e94:	214e      	movs	r1, #78	@ 0x4e
 8007e96:	482b      	ldr	r0, [pc, #172]	@ (8007f44 <scw_thread_sensor+0x108>)
 8007e98:	f00c f83e 	bl	8013f18 <__assert_func>
	assert (do_scw_info_display_timer_begin() == true);
 8007e9c:	f7ff ffa0 	bl	8007de0 <do_scw_info_display_timer_begin>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d005      	beq.n	8007eb2 <scw_thread_sensor+0x76>
 8007ea6:	4b2b      	ldr	r3, [pc, #172]	@ (8007f54 <scw_thread_sensor+0x118>)
 8007ea8:	4a25      	ldr	r2, [pc, #148]	@ (8007f40 <scw_thread_sensor+0x104>)
 8007eaa:	214f      	movs	r1, #79	@ 0x4f
 8007eac:	4825      	ldr	r0, [pc, #148]	@ (8007f44 <scw_thread_sensor+0x108>)
 8007eae:	f00c f833 	bl	8013f18 <__assert_func>

	sensorThreadQ = osMessageQueueNew(SENSOR_MSG_Q_DEPTH, sizeof(sensor_msg_t), NULL);
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	210e      	movs	r1, #14
 8007eb6:	2008      	movs	r0, #8
 8007eb8:	f008 f9fa 	bl	80102b0 <osMessageQueueNew>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	4a26      	ldr	r2, [pc, #152]	@ (8007f58 <scw_thread_sensor+0x11c>)
 8007ec0:	6013      	str	r3, [r2, #0]
	while (1) {
		memset (&sensor_msg, 0, sizeof(sensor_msg));
 8007ec2:	f107 0308 	add.w	r3, r7, #8
 8007ec6:	220e      	movs	r2, #14
 8007ec8:	2100      	movs	r1, #0
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f00c fbea 	bl	80146a4 <memset>
		assert (osMessageQueueGet(sensorThreadQ, &sensor_msg, NULL, osWaitForever) == osOK);
 8007ed0:	4b21      	ldr	r3, [pc, #132]	@ (8007f58 <scw_thread_sensor+0x11c>)
 8007ed2:	6818      	ldr	r0, [r3, #0]
 8007ed4:	f107 0108 	add.w	r1, r7, #8
 8007ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8007edc:	2200      	movs	r2, #0
 8007ede:	f008 fabb 	bl	8010458 <osMessageQueueGet>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d005      	beq.n	8007ef4 <scw_thread_sensor+0xb8>
 8007ee8:	4b1c      	ldr	r3, [pc, #112]	@ (8007f5c <scw_thread_sensor+0x120>)
 8007eea:	4a15      	ldr	r2, [pc, #84]	@ (8007f40 <scw_thread_sensor+0x104>)
 8007eec:	2154      	movs	r1, #84	@ 0x54
 8007eee:	4815      	ldr	r0, [pc, #84]	@ (8007f44 <scw_thread_sensor+0x108>)
 8007ef0:	f00c f812 	bl	8013f18 <__assert_func>
		assert (sensor_msg.head.type < SENSOR_MSG_END);
 8007ef4:	7a3b      	ldrb	r3, [r7, #8]
 8007ef6:	2b04      	cmp	r3, #4
 8007ef8:	d905      	bls.n	8007f06 <scw_thread_sensor+0xca>
 8007efa:	4b19      	ldr	r3, [pc, #100]	@ (8007f60 <scw_thread_sensor+0x124>)
 8007efc:	4a10      	ldr	r2, [pc, #64]	@ (8007f40 <scw_thread_sensor+0x104>)
 8007efe:	2155      	movs	r1, #85	@ 0x55
 8007f00:	4810      	ldr	r0, [pc, #64]	@ (8007f44 <scw_thread_sensor+0x108>)
 8007f02:	f00c f809 	bl	8013f18 <__assert_func>
		assert (sensor_msg.head.dst == WORKM_SENSOR);
 8007f06:	7a7b      	ldrb	r3, [r7, #9]
 8007f08:	2b03      	cmp	r3, #3
 8007f0a:	d005      	beq.n	8007f18 <scw_thread_sensor+0xdc>
 8007f0c:	4b15      	ldr	r3, [pc, #84]	@ (8007f64 <scw_thread_sensor+0x128>)
 8007f0e:	4a0c      	ldr	r2, [pc, #48]	@ (8007f40 <scw_thread_sensor+0x104>)
 8007f10:	2156      	movs	r1, #86	@ 0x56
 8007f12:	480c      	ldr	r0, [pc, #48]	@ (8007f44 <scw_thread_sensor+0x108>)
 8007f14:	f00c f800 	bl	8013f18 <__assert_func>
		assert (sensor_msg_handler_tbl[sensor_msg.head.type](&sensor_msg) == true);
 8007f18:	7a3b      	ldrb	r3, [r7, #8]
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	4b12      	ldr	r3, [pc, #72]	@ (8007f68 <scw_thread_sensor+0x12c>)
 8007f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f22:	f107 0208 	add.w	r2, r7, #8
 8007f26:	4610      	mov	r0, r2
 8007f28:	4798      	blx	r3
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d0c8      	beq.n	8007ec2 <scw_thread_sensor+0x86>
 8007f30:	4b0e      	ldr	r3, [pc, #56]	@ (8007f6c <scw_thread_sensor+0x130>)
 8007f32:	4a03      	ldr	r2, [pc, #12]	@ (8007f40 <scw_thread_sensor+0x104>)
 8007f34:	2157      	movs	r1, #87	@ 0x57
 8007f36:	4803      	ldr	r0, [pc, #12]	@ (8007f44 <scw_thread_sensor+0x108>)
 8007f38:	f00b ffee 	bl	8013f18 <__assert_func>
 8007f3c:	080195fc 	.word	0x080195fc
 8007f40:	08019ee4 	.word	0x08019ee4
 8007f44:	0801932c 	.word	0x0801932c
 8007f48:	08019624 	.word	0x08019624
 8007f4c:	08019648 	.word	0x08019648
 8007f50:	08019668 	.word	0x08019668
 8007f54:	08019688 	.word	0x08019688
 8007f58:	20001164 	.word	0x20001164
 8007f5c:	080196b4 	.word	0x080196b4
 8007f60:	08019700 	.word	0x08019700
 8007f64:	08019728 	.word	0x08019728
 8007f68:	20001150 	.word	0x20001150
 8007f6c:	0801974c 	.word	0x0801974c

08007f70 <suji_channel_open>:
extern DMA_HandleTypeDef hdma_uart4_rx;
extern DMA_HandleTypeDef hdma_uart4_tx;
bool suji_msg_handler_tbl_init(void);

bool suji_channel_open (UART_HandleTypeDef *huart)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
	// Smart Crosswalk 는 UART4 (COM1) 가 Suji (PC board) 와 연결된다.
	assert (huart->Instance == UART4);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a1a      	ldr	r2, [pc, #104]	@ (8007fe8 <suji_channel_open+0x78>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d005      	beq.n	8007f8e <suji_channel_open+0x1e>
 8007f82:	4b1a      	ldr	r3, [pc, #104]	@ (8007fec <suji_channel_open+0x7c>)
 8007f84:	4a1a      	ldr	r2, [pc, #104]	@ (8007ff0 <suji_channel_open+0x80>)
 8007f86:	2130      	movs	r1, #48	@ 0x30
 8007f88:	481a      	ldr	r0, [pc, #104]	@ (8007ff4 <suji_channel_open+0x84>)
 8007f8a:	f00b ffc5 	bl	8013f18 <__assert_func>

	/* Clean the input path */
	assert (HAL_UART_AbortReceive_IT(huart) == HAL_OK);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f006 fd8c 	bl	800eaac <HAL_UART_AbortReceive_IT>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d005      	beq.n	8007fa6 <suji_channel_open+0x36>
 8007f9a:	4b17      	ldr	r3, [pc, #92]	@ (8007ff8 <suji_channel_open+0x88>)
 8007f9c:	4a14      	ldr	r2, [pc, #80]	@ (8007ff0 <suji_channel_open+0x80>)
 8007f9e:	2133      	movs	r1, #51	@ 0x33
 8007fa0:	4814      	ldr	r0, [pc, #80]	@ (8007ff4 <suji_channel_open+0x84>)
 8007fa2:	f00b ffb9 	bl	8013f18 <__assert_func>
	__HAL_UART_FLUSH_DRREGISTER(huart);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	685b      	ldr	r3, [r3, #4]
	assert (HAL_UARTEx_ReceiveToIdle_DMA(huart, SujiRxBuff, SUJI_RX_BUFF_SIZE) == HAL_OK);
 8007fac:	2210      	movs	r2, #16
 8007fae:	4913      	ldr	r1, [pc, #76]	@ (8007ffc <suji_channel_open+0x8c>)
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f006 fd21 	bl	800e9f8 <HAL_UARTEx_ReceiveToIdle_DMA>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d005      	beq.n	8007fc8 <suji_channel_open+0x58>
 8007fbc:	4b10      	ldr	r3, [pc, #64]	@ (8008000 <suji_channel_open+0x90>)
 8007fbe:	4a0c      	ldr	r2, [pc, #48]	@ (8007ff0 <suji_channel_open+0x80>)
 8007fc0:	2135      	movs	r1, #53	@ 0x35
 8007fc2:	480c      	ldr	r0, [pc, #48]	@ (8007ff4 <suji_channel_open+0x84>)
 8007fc4:	f00b ffa8 	bl	8013f18 <__assert_func>
	__HAL_DMA_DISABLE_IT(&hdma_uart4_rx, DMA_IT_HT);
 8007fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8008004 <suji_channel_open+0x94>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	4b0d      	ldr	r3, [pc, #52]	@ (8008004 <suji_channel_open+0x94>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f022 0204 	bic.w	r2, r2, #4
 8007fd6:	601a      	str	r2, [r3, #0]
	HAL_NVIC_EnableIRQ(UART4_IRQn);
 8007fd8:	2034      	movs	r0, #52	@ 0x34
 8007fda:	f001 f900 	bl	80091de <HAL_NVIC_EnableIRQ>

	return true;
 8007fde:	2301      	movs	r3, #1
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3708      	adds	r7, #8
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}
 8007fe8:	40004c00 	.word	0x40004c00
 8007fec:	08019790 	.word	0x08019790
 8007ff0:	08019ef8 	.word	0x08019ef8
 8007ff4:	080197ac 	.word	0x080197ac
 8007ff8:	080197d4 	.word	0x080197d4
 8007ffc:	2000116c 	.word	0x2000116c
 8008000:	08019800 	.word	0x08019800
 8008004:	20000da8 	.word	0x20000da8

08008008 <scw_thread_suji>:

void scw_thread_suji (void *arg)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b088      	sub	sp, #32
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
	suji_msg_t suji_msg;

	assert (suji_msg_handler_tbl_init() == true);
 8008010:	f7fe fb3c 	bl	800668c <suji_msg_handler_tbl_init>
 8008014:	4603      	mov	r3, r0
 8008016:	2b01      	cmp	r3, #1
 8008018:	d005      	beq.n	8008026 <scw_thread_suji+0x1e>
 800801a:	4b2b      	ldr	r3, [pc, #172]	@ (80080c8 <scw_thread_suji+0xc0>)
 800801c:	4a2b      	ldr	r2, [pc, #172]	@ (80080cc <scw_thread_suji+0xc4>)
 800801e:	2140      	movs	r1, #64	@ 0x40
 8008020:	482b      	ldr	r0, [pc, #172]	@ (80080d0 <scw_thread_suji+0xc8>)
 8008022:	f00b ff79 	bl	8013f18 <__assert_func>
	assert (suji_channel_open(&huart4) == true);
 8008026:	482b      	ldr	r0, [pc, #172]	@ (80080d4 <scw_thread_suji+0xcc>)
 8008028:	f7ff ffa2 	bl	8007f70 <suji_channel_open>
 800802c:	4603      	mov	r3, r0
 800802e:	2b01      	cmp	r3, #1
 8008030:	d005      	beq.n	800803e <scw_thread_suji+0x36>
 8008032:	4b29      	ldr	r3, [pc, #164]	@ (80080d8 <scw_thread_suji+0xd0>)
 8008034:	4a25      	ldr	r2, [pc, #148]	@ (80080cc <scw_thread_suji+0xc4>)
 8008036:	2141      	movs	r1, #65	@ 0x41
 8008038:	4825      	ldr	r0, [pc, #148]	@ (80080d0 <scw_thread_suji+0xc8>)
 800803a:	f00b ff6d 	bl	8013f18 <__assert_func>

	sujiThreadQ = osMessageQueueNew(SUJI_MSG_Q_DEPTH, sizeof(sensor_msg_t), NULL);
 800803e:	2200      	movs	r2, #0
 8008040:	210e      	movs	r1, #14
 8008042:	2008      	movs	r0, #8
 8008044:	f008 f934 	bl	80102b0 <osMessageQueueNew>
 8008048:	4603      	mov	r3, r0
 800804a:	4a24      	ldr	r2, [pc, #144]	@ (80080dc <scw_thread_suji+0xd4>)
 800804c:	6013      	str	r3, [r2, #0]
	while (1) {
		memset (&suji_msg, 0, sizeof(suji_msg));
 800804e:	f107 030c 	add.w	r3, r7, #12
 8008052:	2214      	movs	r2, #20
 8008054:	2100      	movs	r1, #0
 8008056:	4618      	mov	r0, r3
 8008058:	f00c fb24 	bl	80146a4 <memset>
		assert (osMessageQueueGet(sujiThreadQ, &suji_msg, NULL, osWaitForever) == osOK);
 800805c:	4b1f      	ldr	r3, [pc, #124]	@ (80080dc <scw_thread_suji+0xd4>)
 800805e:	6818      	ldr	r0, [r3, #0]
 8008060:	f107 010c 	add.w	r1, r7, #12
 8008064:	f04f 33ff 	mov.w	r3, #4294967295
 8008068:	2200      	movs	r2, #0
 800806a:	f008 f9f5 	bl	8010458 <osMessageQueueGet>
 800806e:	4603      	mov	r3, r0
 8008070:	2b00      	cmp	r3, #0
 8008072:	d005      	beq.n	8008080 <scw_thread_suji+0x78>
 8008074:	4b1a      	ldr	r3, [pc, #104]	@ (80080e0 <scw_thread_suji+0xd8>)
 8008076:	4a15      	ldr	r2, [pc, #84]	@ (80080cc <scw_thread_suji+0xc4>)
 8008078:	2146      	movs	r1, #70	@ 0x46
 800807a:	4815      	ldr	r0, [pc, #84]	@ (80080d0 <scw_thread_suji+0xc8>)
 800807c:	f00b ff4c 	bl	8013f18 <__assert_func>
		assert (suji_msg.head.type < SUJI_MSG_END);
 8008080:	7b3b      	ldrb	r3, [r7, #12]
 8008082:	2b01      	cmp	r3, #1
 8008084:	d905      	bls.n	8008092 <scw_thread_suji+0x8a>
 8008086:	4b17      	ldr	r3, [pc, #92]	@ (80080e4 <scw_thread_suji+0xdc>)
 8008088:	4a10      	ldr	r2, [pc, #64]	@ (80080cc <scw_thread_suji+0xc4>)
 800808a:	2147      	movs	r1, #71	@ 0x47
 800808c:	4810      	ldr	r0, [pc, #64]	@ (80080d0 <scw_thread_suji+0xc8>)
 800808e:	f00b ff43 	bl	8013f18 <__assert_func>
		assert (suji_msg.head.dst == WORKM_SUJI);
 8008092:	7b7b      	ldrb	r3, [r7, #13]
 8008094:	2b04      	cmp	r3, #4
 8008096:	d005      	beq.n	80080a4 <scw_thread_suji+0x9c>
 8008098:	4b13      	ldr	r3, [pc, #76]	@ (80080e8 <scw_thread_suji+0xe0>)
 800809a:	4a0c      	ldr	r2, [pc, #48]	@ (80080cc <scw_thread_suji+0xc4>)
 800809c:	2148      	movs	r1, #72	@ 0x48
 800809e:	480c      	ldr	r0, [pc, #48]	@ (80080d0 <scw_thread_suji+0xc8>)
 80080a0:	f00b ff3a 	bl	8013f18 <__assert_func>
		assert (suji_msg_handler_tbl[suji_msg.head.type](&suji_msg) == true);
 80080a4:	7b3b      	ldrb	r3, [r7, #12]
 80080a6:	461a      	mov	r2, r3
 80080a8:	4b10      	ldr	r3, [pc, #64]	@ (80080ec <scw_thread_suji+0xe4>)
 80080aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080ae:	f107 020c 	add.w	r2, r7, #12
 80080b2:	4610      	mov	r0, r2
 80080b4:	4798      	blx	r3
 80080b6:	4603      	mov	r3, r0
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d0c8      	beq.n	800804e <scw_thread_suji+0x46>
 80080bc:	4b0c      	ldr	r3, [pc, #48]	@ (80080f0 <scw_thread_suji+0xe8>)
 80080be:	4a03      	ldr	r2, [pc, #12]	@ (80080cc <scw_thread_suji+0xc4>)
 80080c0:	2149      	movs	r1, #73	@ 0x49
 80080c2:	4803      	ldr	r0, [pc, #12]	@ (80080d0 <scw_thread_suji+0xc8>)
 80080c4:	f00b ff28 	bl	8013f18 <__assert_func>
 80080c8:	08019850 	.word	0x08019850
 80080cc:	08019f0c 	.word	0x08019f0c
 80080d0:	080197ac 	.word	0x080197ac
 80080d4:	20000cd0 	.word	0x20000cd0
 80080d8:	08019874 	.word	0x08019874
 80080dc:	20001168 	.word	0x20001168
 80080e0:	08019898 	.word	0x08019898
 80080e4:	080198e0 	.word	0x080198e0
 80080e8:	08019904 	.word	0x08019904
 80080ec:	200011bc 	.word	0x200011bc
 80080f0:	08019924 	.word	0x08019924

080080f4 <DbgTrace_TxCpltCallback>:
 * @param  UartHandle: UART handle.
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void) {
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b086      	sub	sp, #24
 80080f8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080fa:	f3ef 8310 	mrs	r3, PRIMASK
 80080fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8008100:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
	uint8_t *buf;
	uint16_t bufSize;

	BACKUP_PRIMASK();
 8008102:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008104:	b672      	cpsid	i
}
 8008106:	bf00      	nop

	DISABLE_IRQ(); /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
	/* Remove element just sent to UART */
	CircularQueue_Remove(&MsgDbgTraceQueue, &bufSize);
 8008108:	1cbb      	adds	r3, r7, #2
 800810a:	4619      	mov	r1, r3
 800810c:	4812      	ldr	r0, [pc, #72]	@ (8008158 <DbgTrace_TxCpltCallback+0x64>)
 800810e:	f7ff f942 	bl	8007396 <CircularQueue_Remove>

	/* Sense if new data to be sent */
	buf = CircularQueue_Sense(&MsgDbgTraceQueue, &bufSize);
 8008112:	1cbb      	adds	r3, r7, #2
 8008114:	4619      	mov	r1, r3
 8008116:	4810      	ldr	r0, [pc, #64]	@ (8008158 <DbgTrace_TxCpltCallback+0x64>)
 8008118:	f7ff fa2b 	bl	8007572 <CircularQueue_Sense>
 800811c:	6138      	str	r0, [r7, #16]

	if (buf != NULL) {
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d00c      	beq.n	800813e <DbgTrace_TxCpltCallback+0x4a>
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	f383 8810 	msr	PRIMASK, r3
}
 800812e:	bf00      	nop
		RESTORE_PRIMASK();
		DbgOutputTraces((uint8_t*) buf, bufSize, DbgTrace_TxCpltCallback);
 8008130:	887b      	ldrh	r3, [r7, #2]
 8008132:	4a0a      	ldr	r2, [pc, #40]	@ (800815c <DbgTrace_TxCpltCallback+0x68>)
 8008134:	4619      	mov	r1, r3
 8008136:	6938      	ldr	r0, [r7, #16]
 8008138:	f000 f896 	bl	8008268 <DbgOutputTraces>

	DbgTracePeripheralReady = SET;

	RESTORE_PRIMASK();
#endif
}
 800813c:	e008      	b.n	8008150 <DbgTrace_TxCpltCallback+0x5c>
		DbgTracePeripheralReady = SET;
 800813e:	4b08      	ldr	r3, [pc, #32]	@ (8008160 <DbgTrace_TxCpltCallback+0x6c>)
 8008140:	2201      	movs	r2, #1
 8008142:	701a      	strb	r2, [r3, #0]
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f383 8810 	msr	PRIMASK, r3
}
 800814e:	bf00      	nop
}
 8008150:	bf00      	nop
 8008152:	3718      	adds	r7, #24
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	200011c4 	.word	0x200011c4
 800815c:	080080f5 	.word	0x080080f5
 8008160:	2000060c 	.word	0x2000060c

08008164 <DbgTraceInit>:
#endif

void DbgTraceInit(void)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
	memset(MsgDbgTraceQueueBuff, 0, sizeof(MsgDbgTraceQueueBuff));
 800816a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800816e:	2100      	movs	r1, #0
 8008170:	4807      	ldr	r0, [pc, #28]	@ (8008190 <DbgTraceInit+0x2c>)
 8008172:	f00c fa97 	bl	80146a4 <memset>
	CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff,	DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 8008176:	2302      	movs	r3, #2
 8008178:	9300      	str	r3, [sp, #0]
 800817a:	2300      	movs	r3, #0
 800817c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008180:	4903      	ldr	r1, [pc, #12]	@ (8008190 <DbgTraceInit+0x2c>)
 8008182:	4804      	ldr	r0, [pc, #16]	@ (8008194 <DbgTraceInit+0x30>)
 8008184:	f7fe feb0 	bl	8006ee8 <CircularQueue_Init>
#endif
#endif
	return;
 8008188:	bf00      	nop
}
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	200011e4 	.word	0x200011e4
 8008194:	200011c4 	.word	0x200011c4

08008198 <_write>:
 * @param	buf buffer to write
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char *buf, size_t bufSize) {
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	607a      	str	r2, [r7, #4]
	return (DbgTraceWrite(handle, buf, bufSize));
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	68b9      	ldr	r1, [r7, #8]
 80081a8:	68f8      	ldr	r0, [r7, #12]
 80081aa:	f000 f805 	bl	80081b8 <DbgTraceWrite>
 80081ae:	4603      	mov	r3, r0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3710      	adds	r7, #16
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <DbgTraceWrite>:
 * @param handle output handle (STDIO, STDERR...)
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char *buf, size_t bufSize) {
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b08a      	sub	sp, #40	@ 0x28
 80081bc:	af00      	add	r7, sp, #0
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	607a      	str	r2, [r7, #4]
	size_t chars_written = 0;
 80081c4:	2300      	movs	r3, #0
 80081c6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081c8:	f3ef 8310 	mrs	r3, PRIMASK
 80081cc:	61bb      	str	r3, [r7, #24]
  return(result);
 80081ce:	69bb      	ldr	r3, [r7, #24]
	uint8_t *buffer;

	BACKUP_PRIMASK();
 80081d0:	623b      	str	r3, [r7, #32]

	/* Ignore flushes */
	if (handle == -1) {
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d8:	d102      	bne.n	80081e0 <DbgTraceWrite+0x28>
		chars_written = (size_t) 0;
 80081da:	2300      	movs	r3, #0
 80081dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80081de:	e037      	b.n	8008250 <DbgTraceWrite+0x98>
	}
	/* Only allow stdout/stderr output */
	else if ((handle != 1) && (handle != 2)) {
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d006      	beq.n	80081f4 <DbgTraceWrite+0x3c>
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	d003      	beq.n	80081f4 <DbgTraceWrite+0x3c>
		chars_written = (size_t) -1;
 80081ec:	f04f 33ff 	mov.w	r3, #4294967295
 80081f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80081f2:	e02d      	b.n	8008250 <DbgTraceWrite+0x98>
	}
	/* Parameters OK, call the low-level character output routine */
	else if (bufSize != 0) {
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d02a      	beq.n	8008250 <DbgTraceWrite+0x98>
		chars_written = bufSize;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80081fe:	b672      	cpsid	i
}
 8008200:	bf00      	nop
		/* If queue emepty and TX free, send directly */
		/* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
		DISABLE_IRQ(); /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
		buffer = CircularQueue_Add(&MsgDbgTraceQueue, (uint8_t*) buf, bufSize, 1);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	b29a      	uxth	r2, r3
 8008206:	2301      	movs	r3, #1
 8008208:	68b9      	ldr	r1, [r7, #8]
 800820a:	4814      	ldr	r0, [pc, #80]	@ (800825c <DbgTraceWrite+0xa4>)
 800820c:	f7fe fe9d 	bl	8006f4a <CircularQueue_Add>
 8008210:	61f8      	str	r0, [r7, #28]
		if (buffer && DbgTracePeripheralReady) {
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d015      	beq.n	8008244 <DbgTraceWrite+0x8c>
 8008218:	4b11      	ldr	r3, [pc, #68]	@ (8008260 <DbgTraceWrite+0xa8>)
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	b2db      	uxtb	r3, r3
 800821e:	2b00      	cmp	r3, #0
 8008220:	d010      	beq.n	8008244 <DbgTraceWrite+0x8c>
			DbgTracePeripheralReady = RESET;
 8008222:	4b0f      	ldr	r3, [pc, #60]	@ (8008260 <DbgTraceWrite+0xa8>)
 8008224:	2200      	movs	r2, #0
 8008226:	701a      	strb	r2, [r3, #0]
 8008228:	6a3b      	ldr	r3, [r7, #32]
 800822a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	f383 8810 	msr	PRIMASK, r3
}
 8008232:	bf00      	nop
			RESTORE_PRIMASK();
			DbgOutputTraces((uint8_t*) buffer, bufSize,	DbgTrace_TxCpltCallback);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	b29b      	uxth	r3, r3
 8008238:	4a0a      	ldr	r2, [pc, #40]	@ (8008264 <DbgTraceWrite+0xac>)
 800823a:	4619      	mov	r1, r3
 800823c:	69f8      	ldr	r0, [r7, #28]
 800823e:	f000 f813 	bl	8008268 <DbgOutputTraces>
 8008242:	e005      	b.n	8008250 <DbgTraceWrite+0x98>
 8008244:	6a3b      	ldr	r3, [r7, #32]
 8008246:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	f383 8810 	msr	PRIMASK, r3
}
 800824e:	bf00      	nop
		DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
		while (!DbgTracePeripheralReady);
#endif
		/* CS END */
	}
	return (chars_written);
 8008250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008252:	4618      	mov	r0, r3
 8008254:	3728      	adds	r7, #40	@ 0x28
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	200011c4 	.word	0x200011c4
 8008260:	2000060c 	.word	0x2000060c
 8008264:	080080f5 	.word	0x080080f5

08008268 <DbgOutputTraces>:

#endif /* #if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 )) */

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	460b      	mov	r3, r1
 8008272:	607a      	str	r2, [r7, #4]
 8008274:	817b      	strh	r3, [r7, #10]
	HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8008276:	897a      	ldrh	r2, [r7, #10]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	68f9      	ldr	r1, [r7, #12]
 800827c:	2000      	movs	r0, #0
 800827e:	f000 f82d 	bl	80082dc <HW_UART_Transmit_DMA>

	return;
 8008282:	bf00      	nop
}
 8008284:	3710      	adds	r7, #16
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
	...

0800828c <HW_UART_Receive_IT>:

void (*HW_huart1RxCb)(void);
void (*HW_huart1TxCb)(void);

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	60b9      	str	r1, [r7, #8]
 8008294:	607b      	str	r3, [r7, #4]
 8008296:	4603      	mov	r3, r0
 8008298:	73fb      	strb	r3, [r7, #15]
 800829a:	4613      	mov	r3, r2
 800829c:	81bb      	strh	r3, [r7, #12]
	switch (hw_uart_id) {
 800829e:	7bfb      	ldrb	r3, [r7, #15]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d10f      	bne.n	80082c4 <HW_UART_Receive_IT+0x38>
	case hw_usart1:
		HW_huart1RxCb = cb;
 80082a4:	4a0a      	ldr	r2, [pc, #40]	@ (80082d0 <HW_UART_Receive_IT+0x44>)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6013      	str	r3, [r2, #0]
		HW_UART_RX_IT(huart1, USART1);
 80082aa:	4a09      	ldr	r2, [pc, #36]	@ (80082d0 <HW_UART_Receive_IT+0x44>)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6013      	str	r3, [r2, #0]
 80082b0:	4b08      	ldr	r3, [pc, #32]	@ (80082d4 <HW_UART_Receive_IT+0x48>)
 80082b2:	4a09      	ldr	r2, [pc, #36]	@ (80082d8 <HW_UART_Receive_IT+0x4c>)
 80082b4:	601a      	str	r2, [r3, #0]
 80082b6:	89bb      	ldrh	r3, [r7, #12]
 80082b8:	461a      	mov	r2, r3
 80082ba:	68b9      	ldr	r1, [r7, #8]
 80082bc:	4805      	ldr	r0, [pc, #20]	@ (80082d4 <HW_UART_Receive_IT+0x48>)
 80082be:	f006 fb05 	bl	800e8cc <HAL_UART_Receive_IT>
		break;
 80082c2:	e000      	b.n	80082c6 <HW_UART_Receive_IT+0x3a>

	default:
		break;
 80082c4:	bf00      	nop
	}

	return;
 80082c6:	bf00      	nop
}
 80082c8:	3710      	adds	r7, #16
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	bf00      	nop
 80082d0:	200015e4 	.word	0x200015e4
 80082d4:	20000d60 	.word	0x20000d60
 80082d8:	40013800 	.word	0x40013800

080082dc <HW_UART_Transmit_DMA>:

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b086      	sub	sp, #24
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	60b9      	str	r1, [r7, #8]
 80082e4:	607b      	str	r3, [r7, #4]
 80082e6:	4603      	mov	r3, r0
 80082e8:	73fb      	strb	r3, [r7, #15]
 80082ea:	4613      	mov	r3, r2
 80082ec:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef hal_status = HAL_OK;
 80082ee:	2300      	movs	r3, #0
 80082f0:	75fb      	strb	r3, [r7, #23]
	hw_status_t hw_status = hw_uart_ok;
 80082f2:	2300      	movs	r3, #0
 80082f4:	75bb      	strb	r3, [r7, #22]

	switch (hw_uart_id) {
 80082f6:	7bfb      	ldrb	r3, [r7, #15]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d10b      	bne.n	8008314 <HW_UART_Transmit_DMA+0x38>
	case hw_usart1:
		HW_huart1TxCb = cb;
 80082fc:	4a16      	ldr	r2, [pc, #88]	@ (8008358 <HW_UART_Transmit_DMA+0x7c>)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6013      	str	r3, [r2, #0]
		hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8008302:	89bb      	ldrh	r3, [r7, #12]
 8008304:	461a      	mov	r2, r3
 8008306:	68b9      	ldr	r1, [r7, #8]
 8008308:	4814      	ldr	r0, [pc, #80]	@ (800835c <HW_UART_Transmit_DMA+0x80>)
 800830a:	f006 fb05 	bl	800e918 <HAL_UART_Transmit_DMA>
 800830e:	4603      	mov	r3, r0
 8008310:	75fb      	strb	r3, [r7, #23]
		break;
 8008312:	e000      	b.n	8008316 <HW_UART_Transmit_DMA+0x3a>

	default:
		break;
 8008314:	bf00      	nop
	}

	switch (hal_status)	{
 8008316:	7dfb      	ldrb	r3, [r7, #23]
 8008318:	2b03      	cmp	r3, #3
 800831a:	d817      	bhi.n	800834c <HW_UART_Transmit_DMA+0x70>
 800831c:	a201      	add	r2, pc, #4	@ (adr r2, 8008324 <HW_UART_Transmit_DMA+0x48>)
 800831e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008322:	bf00      	nop
 8008324:	08008335 	.word	0x08008335
 8008328:	0800833b 	.word	0x0800833b
 800832c:	08008341 	.word	0x08008341
 8008330:	08008347 	.word	0x08008347
	case HAL_OK:
		hw_status = hw_uart_ok;
 8008334:	2300      	movs	r3, #0
 8008336:	75bb      	strb	r3, [r7, #22]
		break;
 8008338:	e009      	b.n	800834e <HW_UART_Transmit_DMA+0x72>

	case HAL_ERROR:
		hw_status = hw_uart_error;
 800833a:	2301      	movs	r3, #1
 800833c:	75bb      	strb	r3, [r7, #22]
		break;
 800833e:	e006      	b.n	800834e <HW_UART_Transmit_DMA+0x72>

	case HAL_BUSY:
		hw_status = hw_uart_busy;
 8008340:	2302      	movs	r3, #2
 8008342:	75bb      	strb	r3, [r7, #22]
		break;
 8008344:	e003      	b.n	800834e <HW_UART_Transmit_DMA+0x72>

	case HAL_TIMEOUT:
		hw_status = hw_uart_to;
 8008346:	2303      	movs	r3, #3
 8008348:	75bb      	strb	r3, [r7, #22]
		break;
 800834a:	e000      	b.n	800834e <HW_UART_Transmit_DMA+0x72>

	default:
		break;
 800834c:	bf00      	nop
	}

	return hw_status;
 800834e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008350:	4618      	mov	r0, r3
 8008352:	3718      	adds	r7, #24
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	200015e8 	.word	0x200015e8
 800835c:	20000d60 	.word	0x20000d60

08008360 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
	switch ((uint32_t)huart->Instance) {
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	461a      	mov	r2, r3
 800836e:	4b0b      	ldr	r3, [pc, #44]	@ (800839c <HAL_UART_RxCpltCallback+0x3c>)
 8008370:	429a      	cmp	r2, r3
 8008372:	d107      	bne.n	8008384 <HAL_UART_RxCpltCallback+0x24>

	case (uint32_t)USART1:
			if(HW_huart1RxCb) {
 8008374:	4b0a      	ldr	r3, [pc, #40]	@ (80083a0 <HAL_UART_RxCpltCallback+0x40>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d009      	beq.n	8008390 <HAL_UART_RxCpltCallback+0x30>
				HW_huart1RxCb();
 800837c:	4b08      	ldr	r3, [pc, #32]	@ (80083a0 <HAL_UART_RxCpltCallback+0x40>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4798      	blx	r3
			}
	break;
 8008382:	e005      	b.n	8008390 <HAL_UART_RxCpltCallback+0x30>

	default:
		assert (0 == 1);
 8008384:	4b07      	ldr	r3, [pc, #28]	@ (80083a4 <HAL_UART_RxCpltCallback+0x44>)
 8008386:	4a08      	ldr	r2, [pc, #32]	@ (80083a8 <HAL_UART_RxCpltCallback+0x48>)
 8008388:	2175      	movs	r1, #117	@ 0x75
 800838a:	4808      	ldr	r0, [pc, #32]	@ (80083ac <HAL_UART_RxCpltCallback+0x4c>)
 800838c:	f00b fdc4 	bl	8013f18 <__assert_func>
	break;
 8008390:	bf00      	nop
		break;
	}

	return;
 8008392:	bf00      	nop
}
 8008394:	3708      	adds	r7, #8
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	40013800 	.word	0x40013800
 80083a0:	200015e4 	.word	0x200015e4
 80083a4:	08019960 	.word	0x08019960
 80083a8:	08019f1c 	.word	0x08019f1c
 80083ac:	08019968 	.word	0x08019968

080083b0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
	switch ((uint32_t)huart->Instance) {
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	461a      	mov	r2, r3
 80083be:	4b09      	ldr	r3, [pc, #36]	@ (80083e4 <HAL_UART_TxCpltCallback+0x34>)
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d107      	bne.n	80083d4 <HAL_UART_TxCpltCallback+0x24>
	case (uint32_t)USART1:
			if(HW_huart1TxCb) {
 80083c4:	4b08      	ldr	r3, [pc, #32]	@ (80083e8 <HAL_UART_TxCpltCallback+0x38>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d005      	beq.n	80083d8 <HAL_UART_TxCpltCallback+0x28>
				HW_huart1TxCb();
 80083cc:	4b06      	ldr	r3, [pc, #24]	@ (80083e8 <HAL_UART_TxCpltCallback+0x38>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4798      	blx	r3
			}
	break;
 80083d2:	e001      	b.n	80083d8 <HAL_UART_TxCpltCallback+0x28>

	default:
		break;
 80083d4:	bf00      	nop
 80083d6:	e000      	b.n	80083da <HAL_UART_TxCpltCallback+0x2a>
	break;
 80083d8:	bf00      	nop
	}

	return;
 80083da:	bf00      	nop
}
 80083dc:	3708      	adds	r7, #8
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop
 80083e4:	40013800 	.word	0x40013800
 80083e8:	200015e8 	.word	0x200015e8

080083ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80083ec:	f7f9 fe0c 	bl	8002008 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80083f0:	480b      	ldr	r0, [pc, #44]	@ (8008420 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80083f2:	490c      	ldr	r1, [pc, #48]	@ (8008424 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80083f4:	4a0c      	ldr	r2, [pc, #48]	@ (8008428 <LoopFillZerobss+0x16>)
  movs r3, #0
 80083f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80083f8:	e002      	b.n	8008400 <LoopCopyDataInit>

080083fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80083fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80083fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80083fe:	3304      	adds	r3, #4

08008400 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008400:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008402:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008404:	d3f9      	bcc.n	80083fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008406:	4a09      	ldr	r2, [pc, #36]	@ (800842c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8008408:	4c09      	ldr	r4, [pc, #36]	@ (8008430 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800840a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800840c:	e001      	b.n	8008412 <LoopFillZerobss>

0800840e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800840e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008410:	3204      	adds	r2, #4

08008412 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008412:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008414:	d3fb      	bcc.n	800840e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008416:	f00c fa95 	bl	8014944 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800841a:	f7f9 fa3f 	bl	800189c <main>
  bx lr
 800841e:	4770      	bx	lr
  ldr r0, =_sdata
 8008420:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008424:	20000678 	.word	0x20000678
  ldr r2, =_sidata
 8008428:	0801a14c 	.word	0x0801a14c
  ldr r2, =_sbss
 800842c:	20000678 	.word	0x20000678
  ldr r4, =_ebss
 8008430:	20008524 	.word	0x20008524

08008434 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008434:	e7fe      	b.n	8008434 <ADC3_IRQHandler>
	...

08008438 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800843c:	4b08      	ldr	r3, [pc, #32]	@ (8008460 <HAL_Init+0x28>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a07      	ldr	r2, [pc, #28]	@ (8008460 <HAL_Init+0x28>)
 8008442:	f043 0310 	orr.w	r3, r3, #16
 8008446:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008448:	2003      	movs	r0, #3
 800844a:	f000 fea1 	bl	8009190 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800844e:	200f      	movs	r0, #15
 8008450:	f7f9 fbc0 	bl	8001bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008454:	f7f9 fb86 	bl	8001b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop
 8008460:	40022000 	.word	0x40022000

08008464 <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8008468:	4b09      	ldr	r3, [pc, #36]	@ (8008490 <HAL_DeInit+0x2c>)
 800846a:	f04f 32ff 	mov.w	r2, #4294967295
 800846e:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 8008470:	4b07      	ldr	r3, [pc, #28]	@ (8008490 <HAL_DeInit+0x2c>)
 8008472:	2200      	movs	r2, #0
 8008474:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 8008476:	4b06      	ldr	r3, [pc, #24]	@ (8008490 <HAL_DeInit+0x2c>)
 8008478:	f04f 32ff 	mov.w	r2, #4294967295
 800847c:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 800847e:	4b04      	ldr	r3, [pc, #16]	@ (8008490 <HAL_DeInit+0x2c>)
 8008480:	2200      	movs	r2, #0
 8008482:	60da      	str	r2, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8008484:	f000 f806 	bl	8008494 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8008488:	2300      	movs	r3, #0
}
 800848a:	4618      	mov	r0, r3
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	40021000 	.word	0x40021000

08008494 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8008494:	b480      	push	{r7}
 8008496:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8008498:	bf00      	nop
 800849a:	46bd      	mov	sp, r7
 800849c:	bc80      	pop	{r7}
 800849e:	4770      	bx	lr

080084a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80084a0:	b480      	push	{r7}
 80084a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80084a4:	4b05      	ldr	r3, [pc, #20]	@ (80084bc <HAL_IncTick+0x1c>)
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	461a      	mov	r2, r3
 80084aa:	4b05      	ldr	r3, [pc, #20]	@ (80084c0 <HAL_IncTick+0x20>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4413      	add	r3, r2
 80084b0:	4a03      	ldr	r2, [pc, #12]	@ (80084c0 <HAL_IncTick+0x20>)
 80084b2:	6013      	str	r3, [r2, #0]
}
 80084b4:	bf00      	nop
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bc80      	pop	{r7}
 80084ba:	4770      	bx	lr
 80084bc:	20000614 	.word	0x20000614
 80084c0:	200015ec 	.word	0x200015ec

080084c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80084c4:	b480      	push	{r7}
 80084c6:	af00      	add	r7, sp, #0
  return uwTick;
 80084c8:	4b02      	ldr	r3, [pc, #8]	@ (80084d4 <HAL_GetTick+0x10>)
 80084ca:	681b      	ldr	r3, [r3, #0]
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bc80      	pop	{r7}
 80084d2:	4770      	bx	lr
 80084d4:	200015ec 	.word	0x200015ec

080084d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80084e0:	f7ff fff0 	bl	80084c4 <HAL_GetTick>
 80084e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084f0:	d005      	beq.n	80084fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80084f2:	4b0a      	ldr	r3, [pc, #40]	@ (800851c <HAL_Delay+0x44>)
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	461a      	mov	r2, r3
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	4413      	add	r3, r2
 80084fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80084fe:	bf00      	nop
 8008500:	f7ff ffe0 	bl	80084c4 <HAL_GetTick>
 8008504:	4602      	mov	r2, r0
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	1ad3      	subs	r3, r2, r3
 800850a:	68fa      	ldr	r2, [r7, #12]
 800850c:	429a      	cmp	r2, r3
 800850e:	d8f7      	bhi.n	8008500 <HAL_Delay+0x28>
  {
  }
}
 8008510:	bf00      	nop
 8008512:	bf00      	nop
 8008514:	3710      	adds	r7, #16
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	20000614 	.word	0x20000614

08008520 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b086      	sub	sp, #24
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008528:	2300      	movs	r3, #0
 800852a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800852c:	2300      	movs	r3, #0
 800852e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8008530:	2300      	movs	r3, #0
 8008532:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8008534:	2300      	movs	r3, #0
 8008536:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d101      	bne.n	8008542 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800853e:	2301      	movs	r3, #1
 8008540:	e0ce      	b.n	80086e0 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800854c:	2b00      	cmp	r3, #0
 800854e:	d109      	bne.n	8008564 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f7f8 fea2 	bl	80012a8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 fbcf 	bl	8008d08 <ADC_ConversionStop_Disable>
 800856a:	4603      	mov	r3, r0
 800856c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008572:	f003 0310 	and.w	r3, r3, #16
 8008576:	2b00      	cmp	r3, #0
 8008578:	f040 80a9 	bne.w	80086ce <HAL_ADC_Init+0x1ae>
 800857c:	7dfb      	ldrb	r3, [r7, #23]
 800857e:	2b00      	cmp	r3, #0
 8008580:	f040 80a5 	bne.w	80086ce <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008588:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800858c:	f023 0302 	bic.w	r3, r3, #2
 8008590:	f043 0202 	orr.w	r2, r3, #2
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4951      	ldr	r1, [pc, #324]	@ (80086e8 <HAL_ADC_Init+0x1c8>)
 80085a2:	428b      	cmp	r3, r1
 80085a4:	d10a      	bne.n	80085bc <HAL_ADC_Init+0x9c>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	69db      	ldr	r3, [r3, #28]
 80085aa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80085ae:	d002      	beq.n	80085b6 <HAL_ADC_Init+0x96>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	69db      	ldr	r3, [r3, #28]
 80085b4:	e004      	b.n	80085c0 <HAL_ADC_Init+0xa0>
 80085b6:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80085ba:	e001      	b.n	80085c0 <HAL_ADC_Init+0xa0>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80085c0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	7b1b      	ldrb	r3, [r3, #12]
 80085c6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80085c8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80085ca:	68ba      	ldr	r2, [r7, #8]
 80085cc:	4313      	orrs	r3, r2
 80085ce:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085d8:	d003      	beq.n	80085e2 <HAL_ADC_Init+0xc2>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d102      	bne.n	80085e8 <HAL_ADC_Init+0xc8>
 80085e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80085e6:	e000      	b.n	80085ea <HAL_ADC_Init+0xca>
 80085e8:	2300      	movs	r3, #0
 80085ea:	693a      	ldr	r2, [r7, #16]
 80085ec:	4313      	orrs	r3, r2
 80085ee:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	7d1b      	ldrb	r3, [r3, #20]
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d119      	bne.n	800862c <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	7b1b      	ldrb	r3, [r3, #12]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d109      	bne.n	8008614 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	699b      	ldr	r3, [r3, #24]
 8008604:	3b01      	subs	r3, #1
 8008606:	035a      	lsls	r2, r3, #13
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	4313      	orrs	r3, r2
 800860c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008610:	613b      	str	r3, [r7, #16]
 8008612:	e00b      	b.n	800862c <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008618:	f043 0220 	orr.w	r2, r3, #32
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008624:	f043 0201 	orr.w	r2, r3, #1
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	693a      	ldr	r2, [r7, #16]
 800863c:	430a      	orrs	r2, r1
 800863e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	689a      	ldr	r2, [r3, #8]
 8008646:	4b29      	ldr	r3, [pc, #164]	@ (80086ec <HAL_ADC_Init+0x1cc>)
 8008648:	4013      	ands	r3, r2
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	6812      	ldr	r2, [r2, #0]
 800864e:	68b9      	ldr	r1, [r7, #8]
 8008650:	430b      	orrs	r3, r1
 8008652:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800865c:	d003      	beq.n	8008666 <HAL_ADC_Init+0x146>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	2b01      	cmp	r3, #1
 8008664:	d104      	bne.n	8008670 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	3b01      	subs	r3, #1
 800866c:	051b      	lsls	r3, r3, #20
 800866e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008676:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	68fa      	ldr	r2, [r7, #12]
 8008680:	430a      	orrs	r2, r1
 8008682:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	689a      	ldr	r2, [r3, #8]
 800868a:	4b19      	ldr	r3, [pc, #100]	@ (80086f0 <HAL_ADC_Init+0x1d0>)
 800868c:	4013      	ands	r3, r2
 800868e:	68ba      	ldr	r2, [r7, #8]
 8008690:	429a      	cmp	r2, r3
 8008692:	d10b      	bne.n	80086ac <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2200      	movs	r2, #0
 8008698:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800869e:	f023 0303 	bic.w	r3, r3, #3
 80086a2:	f043 0201 	orr.w	r2, r3, #1
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80086aa:	e018      	b.n	80086de <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086b0:	f023 0312 	bic.w	r3, r3, #18
 80086b4:	f043 0210 	orr.w	r2, r3, #16
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086c0:	f043 0201 	orr.w	r2, r3, #1
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80086cc:	e007      	b.n	80086de <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086d2:	f043 0210 	orr.w	r2, r3, #16
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80086da:	2301      	movs	r3, #1
 80086dc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80086de:	7dfb      	ldrb	r3, [r7, #23]
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3718      	adds	r7, #24
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	40013c00 	.word	0x40013c00
 80086ec:	ffe1f7fd 	.word	0xffe1f7fd
 80086f0:	ff1f0efe 	.word	0xff1f0efe

080086f4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b086      	sub	sp, #24
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	60f8      	str	r0, [r7, #12]
 80086fc:	60b9      	str	r1, [r7, #8]
 80086fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008700:	2300      	movs	r3, #0
 8008702:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a64      	ldr	r2, [pc, #400]	@ (800889c <HAL_ADC_Start_DMA+0x1a8>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d004      	beq.n	8008718 <HAL_ADC_Start_DMA+0x24>
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a63      	ldr	r2, [pc, #396]	@ (80088a0 <HAL_ADC_Start_DMA+0x1ac>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d106      	bne.n	8008726 <HAL_ADC_Start_DMA+0x32>
 8008718:	4b60      	ldr	r3, [pc, #384]	@ (800889c <HAL_ADC_Start_DMA+0x1a8>)
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8008720:	2b00      	cmp	r3, #0
 8008722:	f040 80b3 	bne.w	800888c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800872c:	2b01      	cmp	r3, #1
 800872e:	d101      	bne.n	8008734 <HAL_ADC_Start_DMA+0x40>
 8008730:	2302      	movs	r3, #2
 8008732:	e0ae      	b.n	8008892 <HAL_ADC_Start_DMA+0x19e>
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800873c:	68f8      	ldr	r0, [r7, #12]
 800873e:	f000 fa89 	bl	8008c54 <ADC_Enable>
 8008742:	4603      	mov	r3, r0
 8008744:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8008746:	7dfb      	ldrb	r3, [r7, #23]
 8008748:	2b00      	cmp	r3, #0
 800874a:	f040 809a 	bne.w	8008882 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008752:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008756:	f023 0301 	bic.w	r3, r3, #1
 800875a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a4e      	ldr	r2, [pc, #312]	@ (80088a0 <HAL_ADC_Start_DMA+0x1ac>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d105      	bne.n	8008778 <HAL_ADC_Start_DMA+0x84>
 800876c:	4b4b      	ldr	r3, [pc, #300]	@ (800889c <HAL_ADC_Start_DMA+0x1a8>)
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8008774:	2b00      	cmp	r3, #0
 8008776:	d115      	bne.n	80087a4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800877c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800878e:	2b00      	cmp	r3, #0
 8008790:	d026      	beq.n	80087e0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008796:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800879a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80087a2:	e01d      	b.n	80087e0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087a8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a39      	ldr	r2, [pc, #228]	@ (800889c <HAL_ADC_Start_DMA+0x1a8>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d004      	beq.n	80087c4 <HAL_ADC_Start_DMA+0xd0>
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a38      	ldr	r2, [pc, #224]	@ (80088a0 <HAL_ADC_Start_DMA+0x1ac>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d10d      	bne.n	80087e0 <HAL_ADC_Start_DMA+0xec>
 80087c4:	4b35      	ldr	r3, [pc, #212]	@ (800889c <HAL_ADC_Start_DMA+0x1a8>)
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d007      	beq.n	80087e0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087d4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80087d8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d006      	beq.n	80087fa <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087f0:	f023 0206 	bic.w	r2, r3, #6
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80087f8:	e002      	b.n	8008800 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2200      	movs	r2, #0
 80087fe:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2200      	movs	r2, #0
 8008804:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6a1b      	ldr	r3, [r3, #32]
 800880c:	4a25      	ldr	r2, [pc, #148]	@ (80088a4 <HAL_ADC_Start_DMA+0x1b0>)
 800880e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6a1b      	ldr	r3, [r3, #32]
 8008814:	4a24      	ldr	r2, [pc, #144]	@ (80088a8 <HAL_ADC_Start_DMA+0x1b4>)
 8008816:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	6a1b      	ldr	r3, [r3, #32]
 800881c:	4a23      	ldr	r2, [pc, #140]	@ (80088ac <HAL_ADC_Start_DMA+0x1b8>)
 800881e:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f06f 0202 	mvn.w	r2, #2
 8008828:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	689a      	ldr	r2, [r3, #8]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008838:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	6a18      	ldr	r0, [r3, #32]
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	334c      	adds	r3, #76	@ 0x4c
 8008844:	4619      	mov	r1, r3
 8008846:	68ba      	ldr	r2, [r7, #8]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f000 fdd7 	bl	80093fc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8008858:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800885c:	d108      	bne.n	8008870 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	689a      	ldr	r2, [r3, #8]
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800886c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800886e:	e00f      	b.n	8008890 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	689a      	ldr	r2, [r3, #8]
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800887e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8008880:	e006      	b.n	8008890 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2200      	movs	r2, #0
 8008886:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 800888a:	e001      	b.n	8008890 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800888c:	2301      	movs	r3, #1
 800888e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8008890:	7dfb      	ldrb	r3, [r7, #23]
}
 8008892:	4618      	mov	r0, r3
 8008894:	3718      	adds	r7, #24
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
 800889a:	bf00      	nop
 800889c:	40012400 	.word	0x40012400
 80088a0:	40012800 	.word	0x40012800
 80088a4:	08008d8b 	.word	0x08008d8b
 80088a8:	08008e07 	.word	0x08008e07
 80088ac:	08008e23 	.word	0x08008e23

080088b0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	f003 0320 	and.w	r3, r3, #32
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d03e      	beq.n	8008950 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f003 0302 	and.w	r3, r3, #2
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d039      	beq.n	8008950 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088e0:	f003 0310 	and.w	r3, r3, #16
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d105      	bne.n	80088f4 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80088fe:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8008902:	d11d      	bne.n	8008940 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8008908:	2b00      	cmp	r3, #0
 800890a:	d119      	bne.n	8008940 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	685a      	ldr	r2, [r3, #4]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f022 0220 	bic.w	r2, r2, #32
 800891a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008920:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800892c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008930:	2b00      	cmp	r3, #0
 8008932:	d105      	bne.n	8008940 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008938:	f043 0201 	orr.w	r2, r3, #1
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f7f8 fd51 	bl	80013e8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f06f 0212 	mvn.w	r2, #18
 800894e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008956:	2b00      	cmp	r3, #0
 8008958:	d04d      	beq.n	80089f6 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f003 0304 	and.w	r3, r3, #4
 8008960:	2b00      	cmp	r3, #0
 8008962:	d048      	beq.n	80089f6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008968:	f003 0310 	and.w	r3, r3, #16
 800896c:	2b00      	cmp	r3, #0
 800896e:	d105      	bne.n	800897c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008974:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008986:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 800898a:	d012      	beq.n	80089b2 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8008996:	2b00      	cmp	r3, #0
 8008998:	d125      	bne.n	80089e6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	689b      	ldr	r3, [r3, #8]
 80089a0:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80089a4:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80089a8:	d11d      	bne.n	80089e6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d119      	bne.n	80089e6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	685a      	ldr	r2, [r3, #4]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80089c0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089c6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d105      	bne.n	80089e6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089de:	f043 0201 	orr.w	r2, r3, #1
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 fae4 	bl	8008fb4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f06f 020c 	mvn.w	r2, #12
 80089f4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d012      	beq.n	8008a26 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f003 0301 	and.w	r3, r3, #1
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d00d      	beq.n	8008a26 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a0e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 f812 	bl	8008a40 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f06f 0201 	mvn.w	r2, #1
 8008a24:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8008a26:	bf00      	nop
 8008a28:	3710      	adds	r7, #16
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008a2e:	b480      	push	{r7}
 8008a30:	b083      	sub	sp, #12
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8008a36:	bf00      	nop
 8008a38:	370c      	adds	r7, #12
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bc80      	pop	{r7}
 8008a3e:	4770      	bx	lr

08008a40 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b083      	sub	sp, #12
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8008a48:	bf00      	nop
 8008a4a:	370c      	adds	r7, #12
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bc80      	pop	{r7}
 8008a50:	4770      	bx	lr

08008a52 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008a52:	b480      	push	{r7}
 8008a54:	b083      	sub	sp, #12
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8008a5a:	bf00      	nop
 8008a5c:	370c      	adds	r7, #12
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bc80      	pop	{r7}
 8008a62:	4770      	bx	lr

08008a64 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8008a64:	b480      	push	{r7}
 8008a66:	b085      	sub	sp, #20
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8008a72:	2300      	movs	r3, #0
 8008a74:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d101      	bne.n	8008a84 <HAL_ADC_ConfigChannel+0x20>
 8008a80:	2302      	movs	r3, #2
 8008a82:	e0dc      	b.n	8008c3e <HAL_ADC_ConfigChannel+0x1da>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2201      	movs	r2, #1
 8008a88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	2b06      	cmp	r3, #6
 8008a92:	d81c      	bhi.n	8008ace <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	685a      	ldr	r2, [r3, #4]
 8008a9e:	4613      	mov	r3, r2
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	4413      	add	r3, r2
 8008aa4:	3b05      	subs	r3, #5
 8008aa6:	221f      	movs	r2, #31
 8008aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8008aac:	43db      	mvns	r3, r3
 8008aae:	4019      	ands	r1, r3
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	6818      	ldr	r0, [r3, #0]
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	685a      	ldr	r2, [r3, #4]
 8008ab8:	4613      	mov	r3, r2
 8008aba:	009b      	lsls	r3, r3, #2
 8008abc:	4413      	add	r3, r2
 8008abe:	3b05      	subs	r3, #5
 8008ac0:	fa00 f203 	lsl.w	r2, r0, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	430a      	orrs	r2, r1
 8008aca:	635a      	str	r2, [r3, #52]	@ 0x34
 8008acc:	e03c      	b.n	8008b48 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	2b0c      	cmp	r3, #12
 8008ad4:	d81c      	bhi.n	8008b10 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	685a      	ldr	r2, [r3, #4]
 8008ae0:	4613      	mov	r3, r2
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	4413      	add	r3, r2
 8008ae6:	3b23      	subs	r3, #35	@ 0x23
 8008ae8:	221f      	movs	r2, #31
 8008aea:	fa02 f303 	lsl.w	r3, r2, r3
 8008aee:	43db      	mvns	r3, r3
 8008af0:	4019      	ands	r1, r3
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	6818      	ldr	r0, [r3, #0]
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	685a      	ldr	r2, [r3, #4]
 8008afa:	4613      	mov	r3, r2
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	4413      	add	r3, r2
 8008b00:	3b23      	subs	r3, #35	@ 0x23
 8008b02:	fa00 f203 	lsl.w	r2, r0, r3
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	430a      	orrs	r2, r1
 8008b0c:	631a      	str	r2, [r3, #48]	@ 0x30
 8008b0e:	e01b      	b.n	8008b48 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	685a      	ldr	r2, [r3, #4]
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	4413      	add	r3, r2
 8008b20:	3b41      	subs	r3, #65	@ 0x41
 8008b22:	221f      	movs	r2, #31
 8008b24:	fa02 f303 	lsl.w	r3, r2, r3
 8008b28:	43db      	mvns	r3, r3
 8008b2a:	4019      	ands	r1, r3
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	6818      	ldr	r0, [r3, #0]
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	685a      	ldr	r2, [r3, #4]
 8008b34:	4613      	mov	r3, r2
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	4413      	add	r3, r2
 8008b3a:	3b41      	subs	r3, #65	@ 0x41
 8008b3c:	fa00 f203 	lsl.w	r2, r0, r3
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	430a      	orrs	r2, r1
 8008b46:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	2b09      	cmp	r3, #9
 8008b4e:	d91c      	bls.n	8008b8a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	68d9      	ldr	r1, [r3, #12]
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	005b      	lsls	r3, r3, #1
 8008b5e:	4413      	add	r3, r2
 8008b60:	3b1e      	subs	r3, #30
 8008b62:	2207      	movs	r2, #7
 8008b64:	fa02 f303 	lsl.w	r3, r2, r3
 8008b68:	43db      	mvns	r3, r3
 8008b6a:	4019      	ands	r1, r3
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	6898      	ldr	r0, [r3, #8]
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	4613      	mov	r3, r2
 8008b76:	005b      	lsls	r3, r3, #1
 8008b78:	4413      	add	r3, r2
 8008b7a:	3b1e      	subs	r3, #30
 8008b7c:	fa00 f203 	lsl.w	r2, r0, r3
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	430a      	orrs	r2, r1
 8008b86:	60da      	str	r2, [r3, #12]
 8008b88:	e019      	b.n	8008bbe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	6919      	ldr	r1, [r3, #16]
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	4613      	mov	r3, r2
 8008b96:	005b      	lsls	r3, r3, #1
 8008b98:	4413      	add	r3, r2
 8008b9a:	2207      	movs	r2, #7
 8008b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8008ba0:	43db      	mvns	r3, r3
 8008ba2:	4019      	ands	r1, r3
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	6898      	ldr	r0, [r3, #8]
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	4613      	mov	r3, r2
 8008bae:	005b      	lsls	r3, r3, #1
 8008bb0:	4413      	add	r3, r2
 8008bb2:	fa00 f203 	lsl.w	r2, r0, r3
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	430a      	orrs	r2, r1
 8008bbc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2b10      	cmp	r3, #16
 8008bc4:	d003      	beq.n	8008bce <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8008bca:	2b11      	cmp	r3, #17
 8008bcc:	d132      	bne.n	8008c34 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a1d      	ldr	r2, [pc, #116]	@ (8008c48 <HAL_ADC_ConfigChannel+0x1e4>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d125      	bne.n	8008c24 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	689b      	ldr	r3, [r3, #8]
 8008bde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d126      	bne.n	8008c34 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	689a      	ldr	r2, [r3, #8]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8008bf4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	2b10      	cmp	r3, #16
 8008bfc:	d11a      	bne.n	8008c34 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008bfe:	4b13      	ldr	r3, [pc, #76]	@ (8008c4c <HAL_ADC_ConfigChannel+0x1e8>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a13      	ldr	r2, [pc, #76]	@ (8008c50 <HAL_ADC_ConfigChannel+0x1ec>)
 8008c04:	fba2 2303 	umull	r2, r3, r2, r3
 8008c08:	0c9a      	lsrs	r2, r3, #18
 8008c0a:	4613      	mov	r3, r2
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	4413      	add	r3, r2
 8008c10:	005b      	lsls	r3, r3, #1
 8008c12:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8008c14:	e002      	b.n	8008c1c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	3b01      	subs	r3, #1
 8008c1a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d1f9      	bne.n	8008c16 <HAL_ADC_ConfigChannel+0x1b2>
 8008c22:	e007      	b.n	8008c34 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c28:	f043 0220 	orr.w	r2, r3, #32
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8008c30:	2301      	movs	r3, #1
 8008c32:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8008c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3714      	adds	r7, #20
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bc80      	pop	{r7}
 8008c46:	4770      	bx	lr
 8008c48:	40012400 	.word	0x40012400
 8008c4c:	20000000 	.word	0x20000000
 8008c50:	431bde83 	.word	0x431bde83

08008c54 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8008c60:	2300      	movs	r3, #0
 8008c62:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	689b      	ldr	r3, [r3, #8]
 8008c6a:	f003 0301 	and.w	r3, r3, #1
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d040      	beq.n	8008cf4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	689a      	ldr	r2, [r3, #8]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f042 0201 	orr.w	r2, r2, #1
 8008c80:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008c82:	4b1f      	ldr	r3, [pc, #124]	@ (8008d00 <ADC_Enable+0xac>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a1f      	ldr	r2, [pc, #124]	@ (8008d04 <ADC_Enable+0xb0>)
 8008c88:	fba2 2303 	umull	r2, r3, r2, r3
 8008c8c:	0c9b      	lsrs	r3, r3, #18
 8008c8e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8008c90:	e002      	b.n	8008c98 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	3b01      	subs	r3, #1
 8008c96:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d1f9      	bne.n	8008c92 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8008c9e:	f7ff fc11 	bl	80084c4 <HAL_GetTick>
 8008ca2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8008ca4:	e01f      	b.n	8008ce6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008ca6:	f7ff fc0d 	bl	80084c4 <HAL_GetTick>
 8008caa:	4602      	mov	r2, r0
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	1ad3      	subs	r3, r2, r3
 8008cb0:	2b02      	cmp	r3, #2
 8008cb2:	d918      	bls.n	8008ce6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	f003 0301 	and.w	r3, r3, #1
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d011      	beq.n	8008ce6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cc6:	f043 0210 	orr.w	r2, r3, #16
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cd2:	f043 0201 	orr.w	r2, r3, #1
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	e007      	b.n	8008cf6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	f003 0301 	and.w	r3, r3, #1
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d1d8      	bne.n	8008ca6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8008cf4:	2300      	movs	r3, #0
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3710      	adds	r7, #16
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	20000000 	.word	0x20000000
 8008d04:	431bde83 	.word	0x431bde83

08008d08 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008d10:	2300      	movs	r3, #0
 8008d12:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	f003 0301 	and.w	r3, r3, #1
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d12e      	bne.n	8008d80 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	689a      	ldr	r2, [r3, #8]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f022 0201 	bic.w	r2, r2, #1
 8008d30:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8008d32:	f7ff fbc7 	bl	80084c4 <HAL_GetTick>
 8008d36:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8008d38:	e01b      	b.n	8008d72 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008d3a:	f7ff fbc3 	bl	80084c4 <HAL_GetTick>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	1ad3      	subs	r3, r2, r3
 8008d44:	2b02      	cmp	r3, #2
 8008d46:	d914      	bls.n	8008d72 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	689b      	ldr	r3, [r3, #8]
 8008d4e:	f003 0301 	and.w	r3, r3, #1
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d10d      	bne.n	8008d72 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d5a:	f043 0210 	orr.w	r2, r3, #16
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d66:	f043 0201 	orr.w	r2, r3, #1
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	e007      	b.n	8008d82 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	f003 0301 	and.w	r3, r3, #1
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d0dc      	beq.n	8008d3a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b084      	sub	sp, #16
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d96:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d9c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d127      	bne.n	8008df4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008da8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8008dba:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8008dbe:	d115      	bne.n	8008dec <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d111      	bne.n	8008dec <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dcc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dd8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d105      	bne.n	8008dec <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008de4:	f043 0201 	orr.w	r2, r3, #1
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008dec:	68f8      	ldr	r0, [r7, #12]
 8008dee:	f7f8 fafb 	bl	80013e8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8008df2:	e004      	b.n	8008dfe <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	6a1b      	ldr	r3, [r3, #32]
 8008df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	4798      	blx	r3
}
 8008dfe:	bf00      	nop
 8008e00:	3710      	adds	r7, #16
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}

08008e06 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008e06:	b580      	push	{r7, lr}
 8008e08:	b084      	sub	sp, #16
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e12:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008e14:	68f8      	ldr	r0, [r7, #12]
 8008e16:	f7ff fe0a 	bl	8008a2e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008e1a:	bf00      	nop
 8008e1c:	3710      	adds	r7, #16
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}

08008e22 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8008e22:	b580      	push	{r7, lr}
 8008e24:	b084      	sub	sp, #16
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e2e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e34:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e40:	f043 0204 	orr.w	r2, r3, #4
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008e48:	68f8      	ldr	r0, [r7, #12]
 8008e4a:	f7ff fe02 	bl	8008a52 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008e4e:	bf00      	nop
 8008e50:	3710      	adds	r7, #16
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
	...

08008e58 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8008e58:	b590      	push	{r4, r7, lr}
 8008e5a:	b087      	sub	sp, #28
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008e60:	2300      	movs	r3, #0
 8008e62:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8008e64:	2300      	movs	r3, #0
 8008e66:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008e6e:	2b01      	cmp	r3, #1
 8008e70:	d101      	bne.n	8008e76 <HAL_ADCEx_Calibration_Start+0x1e>
 8008e72:	2302      	movs	r3, #2
 8008e74:	e097      	b.n	8008fa6 <HAL_ADCEx_Calibration_Start+0x14e>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2201      	movs	r2, #1
 8008e7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f7ff ff42 	bl	8008d08 <ADC_ConversionStop_Disable>
 8008e84:	4603      	mov	r3, r0
 8008e86:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f7ff fee3 	bl	8008c54 <ADC_Enable>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8008e92:	7dfb      	ldrb	r3, [r7, #23]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	f040 8081 	bne.w	8008f9c <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e9e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8008ea2:	f023 0302 	bic.w	r3, r3, #2
 8008ea6:	f043 0202 	orr.w	r2, r3, #2
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8008eae:	4b40      	ldr	r3, [pc, #256]	@ (8008fb0 <HAL_ADCEx_Calibration_Start+0x158>)
 8008eb0:	681c      	ldr	r4, [r3, #0]
 8008eb2:	2002      	movs	r0, #2
 8008eb4:	f004 fc40 	bl	800d738 <HAL_RCCEx_GetPeriphCLKFreq>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8008ebe:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8008ec0:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8008ec2:	e002      	b.n	8008eca <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	3b01      	subs	r3, #1
 8008ec8:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d1f9      	bne.n	8008ec4 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	689a      	ldr	r2, [r3, #8]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f042 0208 	orr.w	r2, r2, #8
 8008ede:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8008ee0:	f7ff faf0 	bl	80084c4 <HAL_GetTick>
 8008ee4:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8008ee6:	e01b      	b.n	8008f20 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8008ee8:	f7ff faec 	bl	80084c4 <HAL_GetTick>
 8008eec:	4602      	mov	r2, r0
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	1ad3      	subs	r3, r2, r3
 8008ef2:	2b0a      	cmp	r3, #10
 8008ef4:	d914      	bls.n	8008f20 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	f003 0308 	and.w	r3, r3, #8
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d00d      	beq.n	8008f20 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f08:	f023 0312 	bic.w	r3, r3, #18
 8008f0c:	f043 0210 	orr.w	r2, r3, #16
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	e042      	b.n	8008fa6 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	f003 0308 	and.w	r3, r3, #8
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d1dc      	bne.n	8008ee8 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	689a      	ldr	r2, [r3, #8]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f042 0204 	orr.w	r2, r2, #4
 8008f3c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8008f3e:	f7ff fac1 	bl	80084c4 <HAL_GetTick>
 8008f42:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8008f44:	e01b      	b.n	8008f7e <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8008f46:	f7ff fabd 	bl	80084c4 <HAL_GetTick>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	1ad3      	subs	r3, r2, r3
 8008f50:	2b0a      	cmp	r3, #10
 8008f52:	d914      	bls.n	8008f7e <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	f003 0304 	and.w	r3, r3, #4
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d00d      	beq.n	8008f7e <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f66:	f023 0312 	bic.w	r3, r3, #18
 8008f6a:	f043 0210 	orr.w	r2, r3, #16
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2200      	movs	r2, #0
 8008f76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	e013      	b.n	8008fa6 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	f003 0304 	and.w	r3, r3, #4
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d1dc      	bne.n	8008f46 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f90:	f023 0303 	bic.w	r3, r3, #3
 8008f94:	f043 0201 	orr.w	r2, r3, #1
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8008fa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	371c      	adds	r7, #28
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd90      	pop	{r4, r7, pc}
 8008fae:	bf00      	nop
 8008fb0:	20000000 	.word	0x20000000

08008fb4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8008fbc:	bf00      	nop
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bc80      	pop	{r7}
 8008fc4:	4770      	bx	lr
	...

08008fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b085      	sub	sp, #20
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f003 0307 	and.w	r3, r3, #7
 8008fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800900c <__NVIC_SetPriorityGrouping+0x44>)
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008fde:	68ba      	ldr	r2, [r7, #8]
 8008fe0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008fe4:	4013      	ands	r3, r2
 8008fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008ff0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008ff4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008ffa:	4a04      	ldr	r2, [pc, #16]	@ (800900c <__NVIC_SetPriorityGrouping+0x44>)
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	60d3      	str	r3, [r2, #12]
}
 8009000:	bf00      	nop
 8009002:	3714      	adds	r7, #20
 8009004:	46bd      	mov	sp, r7
 8009006:	bc80      	pop	{r7}
 8009008:	4770      	bx	lr
 800900a:	bf00      	nop
 800900c:	e000ed00 	.word	0xe000ed00

08009010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009010:	b480      	push	{r7}
 8009012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009014:	4b04      	ldr	r3, [pc, #16]	@ (8009028 <__NVIC_GetPriorityGrouping+0x18>)
 8009016:	68db      	ldr	r3, [r3, #12]
 8009018:	0a1b      	lsrs	r3, r3, #8
 800901a:	f003 0307 	and.w	r3, r3, #7
}
 800901e:	4618      	mov	r0, r3
 8009020:	46bd      	mov	sp, r7
 8009022:	bc80      	pop	{r7}
 8009024:	4770      	bx	lr
 8009026:	bf00      	nop
 8009028:	e000ed00 	.word	0xe000ed00

0800902c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800902c:	b480      	push	{r7}
 800902e:	b083      	sub	sp, #12
 8009030:	af00      	add	r7, sp, #0
 8009032:	4603      	mov	r3, r0
 8009034:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800903a:	2b00      	cmp	r3, #0
 800903c:	db0b      	blt.n	8009056 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800903e:	79fb      	ldrb	r3, [r7, #7]
 8009040:	f003 021f 	and.w	r2, r3, #31
 8009044:	4906      	ldr	r1, [pc, #24]	@ (8009060 <__NVIC_EnableIRQ+0x34>)
 8009046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800904a:	095b      	lsrs	r3, r3, #5
 800904c:	2001      	movs	r0, #1
 800904e:	fa00 f202 	lsl.w	r2, r0, r2
 8009052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009056:	bf00      	nop
 8009058:	370c      	adds	r7, #12
 800905a:	46bd      	mov	sp, r7
 800905c:	bc80      	pop	{r7}
 800905e:	4770      	bx	lr
 8009060:	e000e100 	.word	0xe000e100

08009064 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009064:	b480      	push	{r7}
 8009066:	b083      	sub	sp, #12
 8009068:	af00      	add	r7, sp, #0
 800906a:	4603      	mov	r3, r0
 800906c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800906e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009072:	2b00      	cmp	r3, #0
 8009074:	db12      	blt.n	800909c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009076:	79fb      	ldrb	r3, [r7, #7]
 8009078:	f003 021f 	and.w	r2, r3, #31
 800907c:	490a      	ldr	r1, [pc, #40]	@ (80090a8 <__NVIC_DisableIRQ+0x44>)
 800907e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009082:	095b      	lsrs	r3, r3, #5
 8009084:	2001      	movs	r0, #1
 8009086:	fa00 f202 	lsl.w	r2, r0, r2
 800908a:	3320      	adds	r3, #32
 800908c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009090:	f3bf 8f4f 	dsb	sy
}
 8009094:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009096:	f3bf 8f6f 	isb	sy
}
 800909a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800909c:	bf00      	nop
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bc80      	pop	{r7}
 80090a4:	4770      	bx	lr
 80090a6:	bf00      	nop
 80090a8:	e000e100 	.word	0xe000e100

080090ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	4603      	mov	r3, r0
 80090b4:	6039      	str	r1, [r7, #0]
 80090b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80090b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	db0a      	blt.n	80090d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	b2da      	uxtb	r2, r3
 80090c4:	490c      	ldr	r1, [pc, #48]	@ (80090f8 <__NVIC_SetPriority+0x4c>)
 80090c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090ca:	0112      	lsls	r2, r2, #4
 80090cc:	b2d2      	uxtb	r2, r2
 80090ce:	440b      	add	r3, r1
 80090d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80090d4:	e00a      	b.n	80090ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	b2da      	uxtb	r2, r3
 80090da:	4908      	ldr	r1, [pc, #32]	@ (80090fc <__NVIC_SetPriority+0x50>)
 80090dc:	79fb      	ldrb	r3, [r7, #7]
 80090de:	f003 030f 	and.w	r3, r3, #15
 80090e2:	3b04      	subs	r3, #4
 80090e4:	0112      	lsls	r2, r2, #4
 80090e6:	b2d2      	uxtb	r2, r2
 80090e8:	440b      	add	r3, r1
 80090ea:	761a      	strb	r2, [r3, #24]
}
 80090ec:	bf00      	nop
 80090ee:	370c      	adds	r7, #12
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bc80      	pop	{r7}
 80090f4:	4770      	bx	lr
 80090f6:	bf00      	nop
 80090f8:	e000e100 	.word	0xe000e100
 80090fc:	e000ed00 	.word	0xe000ed00

08009100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009100:	b480      	push	{r7}
 8009102:	b089      	sub	sp, #36	@ 0x24
 8009104:	af00      	add	r7, sp, #0
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f003 0307 	and.w	r3, r3, #7
 8009112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009114:	69fb      	ldr	r3, [r7, #28]
 8009116:	f1c3 0307 	rsb	r3, r3, #7
 800911a:	2b04      	cmp	r3, #4
 800911c:	bf28      	it	cs
 800911e:	2304      	movcs	r3, #4
 8009120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009122:	69fb      	ldr	r3, [r7, #28]
 8009124:	3304      	adds	r3, #4
 8009126:	2b06      	cmp	r3, #6
 8009128:	d902      	bls.n	8009130 <NVIC_EncodePriority+0x30>
 800912a:	69fb      	ldr	r3, [r7, #28]
 800912c:	3b03      	subs	r3, #3
 800912e:	e000      	b.n	8009132 <NVIC_EncodePriority+0x32>
 8009130:	2300      	movs	r3, #0
 8009132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009134:	f04f 32ff 	mov.w	r2, #4294967295
 8009138:	69bb      	ldr	r3, [r7, #24]
 800913a:	fa02 f303 	lsl.w	r3, r2, r3
 800913e:	43da      	mvns	r2, r3
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	401a      	ands	r2, r3
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009148:	f04f 31ff 	mov.w	r1, #4294967295
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	fa01 f303 	lsl.w	r3, r1, r3
 8009152:	43d9      	mvns	r1, r3
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009158:	4313      	orrs	r3, r2
         );
}
 800915a:	4618      	mov	r0, r3
 800915c:	3724      	adds	r7, #36	@ 0x24
 800915e:	46bd      	mov	sp, r7
 8009160:	bc80      	pop	{r7}
 8009162:	4770      	bx	lr

08009164 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8009164:	b480      	push	{r7}
 8009166:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8009168:	f3bf 8f4f 	dsb	sy
}
 800916c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800916e:	4b06      	ldr	r3, [pc, #24]	@ (8009188 <__NVIC_SystemReset+0x24>)
 8009170:	68db      	ldr	r3, [r3, #12]
 8009172:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009176:	4904      	ldr	r1, [pc, #16]	@ (8009188 <__NVIC_SystemReset+0x24>)
 8009178:	4b04      	ldr	r3, [pc, #16]	@ (800918c <__NVIC_SystemReset+0x28>)
 800917a:	4313      	orrs	r3, r2
 800917c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800917e:	f3bf 8f4f 	dsb	sy
}
 8009182:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8009184:	bf00      	nop
 8009186:	e7fd      	b.n	8009184 <__NVIC_SystemReset+0x20>
 8009188:	e000ed00 	.word	0xe000ed00
 800918c:	05fa0004 	.word	0x05fa0004

08009190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b082      	sub	sp, #8
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f7ff ff15 	bl	8008fc8 <__NVIC_SetPriorityGrouping>
}
 800919e:	bf00      	nop
 80091a0:	3708      	adds	r7, #8
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80091a6:	b580      	push	{r7, lr}
 80091a8:	b086      	sub	sp, #24
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	4603      	mov	r3, r0
 80091ae:	60b9      	str	r1, [r7, #8]
 80091b0:	607a      	str	r2, [r7, #4]
 80091b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80091b4:	2300      	movs	r3, #0
 80091b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80091b8:	f7ff ff2a 	bl	8009010 <__NVIC_GetPriorityGrouping>
 80091bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	68b9      	ldr	r1, [r7, #8]
 80091c2:	6978      	ldr	r0, [r7, #20]
 80091c4:	f7ff ff9c 	bl	8009100 <NVIC_EncodePriority>
 80091c8:	4602      	mov	r2, r0
 80091ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091ce:	4611      	mov	r1, r2
 80091d0:	4618      	mov	r0, r3
 80091d2:	f7ff ff6b 	bl	80090ac <__NVIC_SetPriority>
}
 80091d6:	bf00      	nop
 80091d8:	3718      	adds	r7, #24
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}

080091de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80091de:	b580      	push	{r7, lr}
 80091e0:	b082      	sub	sp, #8
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	4603      	mov	r3, r0
 80091e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80091e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091ec:	4618      	mov	r0, r3
 80091ee:	f7ff ff1d 	bl	800902c <__NVIC_EnableIRQ>
}
 80091f2:	bf00      	nop
 80091f4:	3708      	adds	r7, #8
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}

080091fa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80091fa:	b580      	push	{r7, lr}
 80091fc:	b082      	sub	sp, #8
 80091fe:	af00      	add	r7, sp, #0
 8009200:	4603      	mov	r3, r0
 8009202:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8009204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009208:	4618      	mov	r0, r3
 800920a:	f7ff ff2b 	bl	8009064 <__NVIC_DisableIRQ>
}
 800920e:	bf00      	nop
 8009210:	3708      	adds	r7, #8
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}

08009216 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8009216:	b580      	push	{r7, lr}
 8009218:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800921a:	f7ff ffa3 	bl	8009164 <__NVIC_SystemReset>
	...

08009220 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009220:	b480      	push	{r7}
 8009222:	b085      	sub	sp, #20
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009228:	2300      	movs	r3, #0
 800922a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d101      	bne.n	8009236 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8009232:	2301      	movs	r3, #1
 8009234:	e059      	b.n	80092ea <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	461a      	mov	r2, r3
 800923c:	4b2d      	ldr	r3, [pc, #180]	@ (80092f4 <HAL_DMA_Init+0xd4>)
 800923e:	429a      	cmp	r2, r3
 8009240:	d80f      	bhi.n	8009262 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	461a      	mov	r2, r3
 8009248:	4b2b      	ldr	r3, [pc, #172]	@ (80092f8 <HAL_DMA_Init+0xd8>)
 800924a:	4413      	add	r3, r2
 800924c:	4a2b      	ldr	r2, [pc, #172]	@ (80092fc <HAL_DMA_Init+0xdc>)
 800924e:	fba2 2303 	umull	r2, r3, r2, r3
 8009252:	091b      	lsrs	r3, r3, #4
 8009254:	009a      	lsls	r2, r3, #2
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	4a28      	ldr	r2, [pc, #160]	@ (8009300 <HAL_DMA_Init+0xe0>)
 800925e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8009260:	e00e      	b.n	8009280 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	461a      	mov	r2, r3
 8009268:	4b26      	ldr	r3, [pc, #152]	@ (8009304 <HAL_DMA_Init+0xe4>)
 800926a:	4413      	add	r3, r2
 800926c:	4a23      	ldr	r2, [pc, #140]	@ (80092fc <HAL_DMA_Init+0xdc>)
 800926e:	fba2 2303 	umull	r2, r3, r2, r3
 8009272:	091b      	lsrs	r3, r3, #4
 8009274:	009a      	lsls	r2, r3, #2
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	4a22      	ldr	r2, [pc, #136]	@ (8009308 <HAL_DMA_Init+0xe8>)
 800927e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2202      	movs	r2, #2
 8009284:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8009296:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800929a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80092a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	68db      	ldr	r3, [r3, #12]
 80092aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80092b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	695b      	ldr	r3, [r3, #20]
 80092b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80092bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	69db      	ldr	r3, [r3, #28]
 80092c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80092c4:	68fa      	ldr	r2, [r7, #12]
 80092c6:	4313      	orrs	r3, r2
 80092c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	68fa      	ldr	r2, [r7, #12]
 80092d0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2200      	movs	r2, #0
 80092d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2201      	movs	r2, #1
 80092dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2200      	movs	r2, #0
 80092e4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80092e8:	2300      	movs	r3, #0
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3714      	adds	r7, #20
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bc80      	pop	{r7}
 80092f2:	4770      	bx	lr
 80092f4:	40020407 	.word	0x40020407
 80092f8:	bffdfff8 	.word	0xbffdfff8
 80092fc:	cccccccd 	.word	0xcccccccd
 8009300:	40020000 	.word	0x40020000
 8009304:	bffdfbf8 	.word	0xbffdfbf8
 8009308:	40020400 	.word	0x40020400

0800930c <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800930c:	b480      	push	{r7}
 800930e:	b083      	sub	sp, #12
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d101      	bne.n	800931e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800931a:	2301      	movs	r3, #1
 800931c:	e05c      	b.n	80093d8 <HAL_DMA_DeInit+0xcc>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f022 0201 	bic.w	r2, r2, #1
 800932c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	2200      	movs	r2, #0
 8009334:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2200      	movs	r2, #0
 800933c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	2200      	movs	r2, #0
 8009344:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	2200      	movs	r2, #0
 800934c:	60da      	str	r2, [r3, #12]

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	461a      	mov	r2, r3
 8009354:	4b23      	ldr	r3, [pc, #140]	@ (80093e4 <HAL_DMA_DeInit+0xd8>)
 8009356:	429a      	cmp	r2, r3
 8009358:	d80f      	bhi.n	800937a <HAL_DMA_DeInit+0x6e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	461a      	mov	r2, r3
 8009360:	4b21      	ldr	r3, [pc, #132]	@ (80093e8 <HAL_DMA_DeInit+0xdc>)
 8009362:	4413      	add	r3, r2
 8009364:	4a21      	ldr	r2, [pc, #132]	@ (80093ec <HAL_DMA_DeInit+0xe0>)
 8009366:	fba2 2303 	umull	r2, r3, r2, r3
 800936a:	091b      	lsrs	r3, r3, #4
 800936c:	009a      	lsls	r2, r3, #2
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	4a1e      	ldr	r2, [pc, #120]	@ (80093f0 <HAL_DMA_DeInit+0xe4>)
 8009376:	63da      	str	r2, [r3, #60]	@ 0x3c
 8009378:	e00e      	b.n	8009398 <HAL_DMA_DeInit+0x8c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	461a      	mov	r2, r3
 8009380:	4b1c      	ldr	r3, [pc, #112]	@ (80093f4 <HAL_DMA_DeInit+0xe8>)
 8009382:	4413      	add	r3, r2
 8009384:	4a19      	ldr	r2, [pc, #100]	@ (80093ec <HAL_DMA_DeInit+0xe0>)
 8009386:	fba2 2303 	umull	r2, r3, r2, r3
 800938a:	091b      	lsrs	r3, r3, #4
 800938c:	009a      	lsls	r2, r3, #2
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	4a18      	ldr	r2, [pc, #96]	@ (80093f8 <HAL_DMA_DeInit+0xec>)
 8009396:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093a0:	2101      	movs	r1, #1
 80093a2:	fa01 f202 	lsl.w	r2, r1, r2
 80093a6:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma->XferHalfCpltCallback = NULL;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2200      	movs	r2, #0
 80093b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferErrorCallback = NULL;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2200      	movs	r2, #0
 80093b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferAbortCallback = NULL;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2200      	movs	r2, #0
 80093ca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2200      	movs	r2, #0
 80093d2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80093d6:	2300      	movs	r3, #0
}
 80093d8:	4618      	mov	r0, r3
 80093da:	370c      	adds	r7, #12
 80093dc:	46bd      	mov	sp, r7
 80093de:	bc80      	pop	{r7}
 80093e0:	4770      	bx	lr
 80093e2:	bf00      	nop
 80093e4:	40020407 	.word	0x40020407
 80093e8:	bffdfff8 	.word	0xbffdfff8
 80093ec:	cccccccd 	.word	0xcccccccd
 80093f0:	40020000 	.word	0x40020000
 80093f4:	bffdfbf8 	.word	0xbffdfbf8
 80093f8:	40020400 	.word	0x40020400

080093fc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b086      	sub	sp, #24
 8009400:	af00      	add	r7, sp, #0
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	60b9      	str	r1, [r7, #8]
 8009406:	607a      	str	r2, [r7, #4]
 8009408:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800940a:	2300      	movs	r3, #0
 800940c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009414:	2b01      	cmp	r3, #1
 8009416:	d101      	bne.n	800941c <HAL_DMA_Start_IT+0x20>
 8009418:	2302      	movs	r3, #2
 800941a:	e04b      	b.n	80094b4 <HAL_DMA_Start_IT+0xb8>
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2201      	movs	r2, #1
 8009420:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800942a:	b2db      	uxtb	r3, r3
 800942c:	2b01      	cmp	r3, #1
 800942e:	d13a      	bne.n	80094a6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2202      	movs	r2, #2
 8009434:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2200      	movs	r2, #0
 800943c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	681a      	ldr	r2, [r3, #0]
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f022 0201 	bic.w	r2, r2, #1
 800944c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	68b9      	ldr	r1, [r7, #8]
 8009454:	68f8      	ldr	r0, [r7, #12]
 8009456:	f000 fbbe 	bl	8009bd6 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800945e:	2b00      	cmp	r3, #0
 8009460:	d008      	beq.n	8009474 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	681a      	ldr	r2, [r3, #0]
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f042 020e 	orr.w	r2, r2, #14
 8009470:	601a      	str	r2, [r3, #0]
 8009472:	e00f      	b.n	8009494 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f022 0204 	bic.w	r2, r2, #4
 8009482:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f042 020a 	orr.w	r2, r2, #10
 8009492:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f042 0201 	orr.w	r2, r2, #1
 80094a2:	601a      	str	r2, [r3, #0]
 80094a4:	e005      	b.n	80094b2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2200      	movs	r2, #0
 80094aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80094ae:	2302      	movs	r3, #2
 80094b0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80094b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3718      	adds	r7, #24
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80094bc:	b480      	push	{r7}
 80094be:	b085      	sub	sp, #20
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80094c4:	2300      	movs	r3, #0
 80094c6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	2b02      	cmp	r3, #2
 80094d2:	d008      	beq.n	80094e6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2204      	movs	r2, #4
 80094d8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2200      	movs	r2, #0
 80094de:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80094e2:	2301      	movs	r3, #1
 80094e4:	e020      	b.n	8009528 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f022 020e 	bic.w	r2, r2, #14
 80094f4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f022 0201 	bic.w	r2, r2, #1
 8009504:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800950e:	2101      	movs	r1, #1
 8009510:	fa01 f202 	lsl.w	r2, r1, r2
 8009514:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2201      	movs	r2, #1
 800951a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2200      	movs	r2, #0
 8009522:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8009526:	7bfb      	ldrb	r3, [r7, #15]
}
 8009528:	4618      	mov	r0, r3
 800952a:	3714      	adds	r7, #20
 800952c:	46bd      	mov	sp, r7
 800952e:	bc80      	pop	{r7}
 8009530:	4770      	bx	lr
	...

08009534 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800953c:	2300      	movs	r3, #0
 800953e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009546:	b2db      	uxtb	r3, r3
 8009548:	2b02      	cmp	r3, #2
 800954a:	d005      	beq.n	8009558 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2204      	movs	r2, #4
 8009550:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8009552:	2301      	movs	r3, #1
 8009554:	73fb      	strb	r3, [r7, #15]
 8009556:	e0d6      	b.n	8009706 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f022 020e 	bic.w	r2, r2, #14
 8009566:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f022 0201 	bic.w	r2, r2, #1
 8009576:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	461a      	mov	r2, r3
 800957e:	4b64      	ldr	r3, [pc, #400]	@ (8009710 <HAL_DMA_Abort_IT+0x1dc>)
 8009580:	429a      	cmp	r2, r3
 8009582:	d958      	bls.n	8009636 <HAL_DMA_Abort_IT+0x102>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a62      	ldr	r2, [pc, #392]	@ (8009714 <HAL_DMA_Abort_IT+0x1e0>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d04f      	beq.n	800962e <HAL_DMA_Abort_IT+0xfa>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a61      	ldr	r2, [pc, #388]	@ (8009718 <HAL_DMA_Abort_IT+0x1e4>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d048      	beq.n	800962a <HAL_DMA_Abort_IT+0xf6>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a5f      	ldr	r2, [pc, #380]	@ (800971c <HAL_DMA_Abort_IT+0x1e8>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d040      	beq.n	8009624 <HAL_DMA_Abort_IT+0xf0>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4a5e      	ldr	r2, [pc, #376]	@ (8009720 <HAL_DMA_Abort_IT+0x1ec>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d038      	beq.n	800961e <HAL_DMA_Abort_IT+0xea>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a5c      	ldr	r2, [pc, #368]	@ (8009724 <HAL_DMA_Abort_IT+0x1f0>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d030      	beq.n	8009618 <HAL_DMA_Abort_IT+0xe4>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4a5b      	ldr	r2, [pc, #364]	@ (8009728 <HAL_DMA_Abort_IT+0x1f4>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d028      	beq.n	8009612 <HAL_DMA_Abort_IT+0xde>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a52      	ldr	r2, [pc, #328]	@ (8009710 <HAL_DMA_Abort_IT+0x1dc>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d020      	beq.n	800960c <HAL_DMA_Abort_IT+0xd8>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4a57      	ldr	r2, [pc, #348]	@ (800972c <HAL_DMA_Abort_IT+0x1f8>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d019      	beq.n	8009608 <HAL_DMA_Abort_IT+0xd4>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a55      	ldr	r2, [pc, #340]	@ (8009730 <HAL_DMA_Abort_IT+0x1fc>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d012      	beq.n	8009604 <HAL_DMA_Abort_IT+0xd0>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4a54      	ldr	r2, [pc, #336]	@ (8009734 <HAL_DMA_Abort_IT+0x200>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d00a      	beq.n	80095fe <HAL_DMA_Abort_IT+0xca>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a52      	ldr	r2, [pc, #328]	@ (8009738 <HAL_DMA_Abort_IT+0x204>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d102      	bne.n	80095f8 <HAL_DMA_Abort_IT+0xc4>
 80095f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80095f6:	e01b      	b.n	8009630 <HAL_DMA_Abort_IT+0xfc>
 80095f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80095fc:	e018      	b.n	8009630 <HAL_DMA_Abort_IT+0xfc>
 80095fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009602:	e015      	b.n	8009630 <HAL_DMA_Abort_IT+0xfc>
 8009604:	2310      	movs	r3, #16
 8009606:	e013      	b.n	8009630 <HAL_DMA_Abort_IT+0xfc>
 8009608:	2301      	movs	r3, #1
 800960a:	e011      	b.n	8009630 <HAL_DMA_Abort_IT+0xfc>
 800960c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009610:	e00e      	b.n	8009630 <HAL_DMA_Abort_IT+0xfc>
 8009612:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009616:	e00b      	b.n	8009630 <HAL_DMA_Abort_IT+0xfc>
 8009618:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800961c:	e008      	b.n	8009630 <HAL_DMA_Abort_IT+0xfc>
 800961e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009622:	e005      	b.n	8009630 <HAL_DMA_Abort_IT+0xfc>
 8009624:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009628:	e002      	b.n	8009630 <HAL_DMA_Abort_IT+0xfc>
 800962a:	2310      	movs	r3, #16
 800962c:	e000      	b.n	8009630 <HAL_DMA_Abort_IT+0xfc>
 800962e:	2301      	movs	r3, #1
 8009630:	4a42      	ldr	r2, [pc, #264]	@ (800973c <HAL_DMA_Abort_IT+0x208>)
 8009632:	6053      	str	r3, [r2, #4]
 8009634:	e057      	b.n	80096e6 <HAL_DMA_Abort_IT+0x1b2>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a36      	ldr	r2, [pc, #216]	@ (8009714 <HAL_DMA_Abort_IT+0x1e0>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d04f      	beq.n	80096e0 <HAL_DMA_Abort_IT+0x1ac>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a34      	ldr	r2, [pc, #208]	@ (8009718 <HAL_DMA_Abort_IT+0x1e4>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d048      	beq.n	80096dc <HAL_DMA_Abort_IT+0x1a8>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4a33      	ldr	r2, [pc, #204]	@ (800971c <HAL_DMA_Abort_IT+0x1e8>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d040      	beq.n	80096d6 <HAL_DMA_Abort_IT+0x1a2>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a31      	ldr	r2, [pc, #196]	@ (8009720 <HAL_DMA_Abort_IT+0x1ec>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d038      	beq.n	80096d0 <HAL_DMA_Abort_IT+0x19c>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a30      	ldr	r2, [pc, #192]	@ (8009724 <HAL_DMA_Abort_IT+0x1f0>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d030      	beq.n	80096ca <HAL_DMA_Abort_IT+0x196>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a2e      	ldr	r2, [pc, #184]	@ (8009728 <HAL_DMA_Abort_IT+0x1f4>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d028      	beq.n	80096c4 <HAL_DMA_Abort_IT+0x190>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a26      	ldr	r2, [pc, #152]	@ (8009710 <HAL_DMA_Abort_IT+0x1dc>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d020      	beq.n	80096be <HAL_DMA_Abort_IT+0x18a>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a2a      	ldr	r2, [pc, #168]	@ (800972c <HAL_DMA_Abort_IT+0x1f8>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d019      	beq.n	80096ba <HAL_DMA_Abort_IT+0x186>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a29      	ldr	r2, [pc, #164]	@ (8009730 <HAL_DMA_Abort_IT+0x1fc>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d012      	beq.n	80096b6 <HAL_DMA_Abort_IT+0x182>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a27      	ldr	r2, [pc, #156]	@ (8009734 <HAL_DMA_Abort_IT+0x200>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d00a      	beq.n	80096b0 <HAL_DMA_Abort_IT+0x17c>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a26      	ldr	r2, [pc, #152]	@ (8009738 <HAL_DMA_Abort_IT+0x204>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d102      	bne.n	80096aa <HAL_DMA_Abort_IT+0x176>
 80096a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80096a8:	e01b      	b.n	80096e2 <HAL_DMA_Abort_IT+0x1ae>
 80096aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80096ae:	e018      	b.n	80096e2 <HAL_DMA_Abort_IT+0x1ae>
 80096b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80096b4:	e015      	b.n	80096e2 <HAL_DMA_Abort_IT+0x1ae>
 80096b6:	2310      	movs	r3, #16
 80096b8:	e013      	b.n	80096e2 <HAL_DMA_Abort_IT+0x1ae>
 80096ba:	2301      	movs	r3, #1
 80096bc:	e011      	b.n	80096e2 <HAL_DMA_Abort_IT+0x1ae>
 80096be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80096c2:	e00e      	b.n	80096e2 <HAL_DMA_Abort_IT+0x1ae>
 80096c4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80096c8:	e00b      	b.n	80096e2 <HAL_DMA_Abort_IT+0x1ae>
 80096ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80096ce:	e008      	b.n	80096e2 <HAL_DMA_Abort_IT+0x1ae>
 80096d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80096d4:	e005      	b.n	80096e2 <HAL_DMA_Abort_IT+0x1ae>
 80096d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80096da:	e002      	b.n	80096e2 <HAL_DMA_Abort_IT+0x1ae>
 80096dc:	2310      	movs	r3, #16
 80096de:	e000      	b.n	80096e2 <HAL_DMA_Abort_IT+0x1ae>
 80096e0:	2301      	movs	r3, #1
 80096e2:	4a17      	ldr	r2, [pc, #92]	@ (8009740 <HAL_DMA_Abort_IT+0x20c>)
 80096e4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2201      	movs	r2, #1
 80096ea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2200      	movs	r2, #0
 80096f2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d003      	beq.n	8009706 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	4798      	blx	r3
    } 
  }
  return status;
 8009706:	7bfb      	ldrb	r3, [r7, #15]
}
 8009708:	4618      	mov	r0, r3
 800970a:	3710      	adds	r7, #16
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}
 8009710:	40020080 	.word	0x40020080
 8009714:	40020008 	.word	0x40020008
 8009718:	4002001c 	.word	0x4002001c
 800971c:	40020030 	.word	0x40020030
 8009720:	40020044 	.word	0x40020044
 8009724:	40020058 	.word	0x40020058
 8009728:	4002006c 	.word	0x4002006c
 800972c:	40020408 	.word	0x40020408
 8009730:	4002041c 	.word	0x4002041c
 8009734:	40020430 	.word	0x40020430
 8009738:	40020444 	.word	0x40020444
 800973c:	40020400 	.word	0x40020400
 8009740:	40020000 	.word	0x40020000

08009744 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009760:	2204      	movs	r2, #4
 8009762:	409a      	lsls	r2, r3
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	4013      	ands	r3, r2
 8009768:	2b00      	cmp	r3, #0
 800976a:	f000 80f1 	beq.w	8009950 <HAL_DMA_IRQHandler+0x20c>
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	f003 0304 	and.w	r3, r3, #4
 8009774:	2b00      	cmp	r3, #0
 8009776:	f000 80eb 	beq.w	8009950 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f003 0320 	and.w	r3, r3, #32
 8009784:	2b00      	cmp	r3, #0
 8009786:	d107      	bne.n	8009798 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	681a      	ldr	r2, [r3, #0]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f022 0204 	bic.w	r2, r2, #4
 8009796:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	461a      	mov	r2, r3
 800979e:	4b5f      	ldr	r3, [pc, #380]	@ (800991c <HAL_DMA_IRQHandler+0x1d8>)
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d958      	bls.n	8009856 <HAL_DMA_IRQHandler+0x112>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4a5d      	ldr	r2, [pc, #372]	@ (8009920 <HAL_DMA_IRQHandler+0x1dc>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d04f      	beq.n	800984e <HAL_DMA_IRQHandler+0x10a>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4a5c      	ldr	r2, [pc, #368]	@ (8009924 <HAL_DMA_IRQHandler+0x1e0>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d048      	beq.n	800984a <HAL_DMA_IRQHandler+0x106>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a5a      	ldr	r2, [pc, #360]	@ (8009928 <HAL_DMA_IRQHandler+0x1e4>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d040      	beq.n	8009844 <HAL_DMA_IRQHandler+0x100>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4a59      	ldr	r2, [pc, #356]	@ (800992c <HAL_DMA_IRQHandler+0x1e8>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d038      	beq.n	800983e <HAL_DMA_IRQHandler+0xfa>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a57      	ldr	r2, [pc, #348]	@ (8009930 <HAL_DMA_IRQHandler+0x1ec>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d030      	beq.n	8009838 <HAL_DMA_IRQHandler+0xf4>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a56      	ldr	r2, [pc, #344]	@ (8009934 <HAL_DMA_IRQHandler+0x1f0>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d028      	beq.n	8009832 <HAL_DMA_IRQHandler+0xee>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a4d      	ldr	r2, [pc, #308]	@ (800991c <HAL_DMA_IRQHandler+0x1d8>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d020      	beq.n	800982c <HAL_DMA_IRQHandler+0xe8>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a52      	ldr	r2, [pc, #328]	@ (8009938 <HAL_DMA_IRQHandler+0x1f4>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d019      	beq.n	8009828 <HAL_DMA_IRQHandler+0xe4>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a50      	ldr	r2, [pc, #320]	@ (800993c <HAL_DMA_IRQHandler+0x1f8>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d012      	beq.n	8009824 <HAL_DMA_IRQHandler+0xe0>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a4f      	ldr	r2, [pc, #316]	@ (8009940 <HAL_DMA_IRQHandler+0x1fc>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d00a      	beq.n	800981e <HAL_DMA_IRQHandler+0xda>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a4d      	ldr	r2, [pc, #308]	@ (8009944 <HAL_DMA_IRQHandler+0x200>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d102      	bne.n	8009818 <HAL_DMA_IRQHandler+0xd4>
 8009812:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009816:	e01b      	b.n	8009850 <HAL_DMA_IRQHandler+0x10c>
 8009818:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800981c:	e018      	b.n	8009850 <HAL_DMA_IRQHandler+0x10c>
 800981e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009822:	e015      	b.n	8009850 <HAL_DMA_IRQHandler+0x10c>
 8009824:	2340      	movs	r3, #64	@ 0x40
 8009826:	e013      	b.n	8009850 <HAL_DMA_IRQHandler+0x10c>
 8009828:	2304      	movs	r3, #4
 800982a:	e011      	b.n	8009850 <HAL_DMA_IRQHandler+0x10c>
 800982c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8009830:	e00e      	b.n	8009850 <HAL_DMA_IRQHandler+0x10c>
 8009832:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009836:	e00b      	b.n	8009850 <HAL_DMA_IRQHandler+0x10c>
 8009838:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800983c:	e008      	b.n	8009850 <HAL_DMA_IRQHandler+0x10c>
 800983e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009842:	e005      	b.n	8009850 <HAL_DMA_IRQHandler+0x10c>
 8009844:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009848:	e002      	b.n	8009850 <HAL_DMA_IRQHandler+0x10c>
 800984a:	2340      	movs	r3, #64	@ 0x40
 800984c:	e000      	b.n	8009850 <HAL_DMA_IRQHandler+0x10c>
 800984e:	2304      	movs	r3, #4
 8009850:	4a3d      	ldr	r2, [pc, #244]	@ (8009948 <HAL_DMA_IRQHandler+0x204>)
 8009852:	6053      	str	r3, [r2, #4]
 8009854:	e057      	b.n	8009906 <HAL_DMA_IRQHandler+0x1c2>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a31      	ldr	r2, [pc, #196]	@ (8009920 <HAL_DMA_IRQHandler+0x1dc>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d04f      	beq.n	8009900 <HAL_DMA_IRQHandler+0x1bc>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a2f      	ldr	r2, [pc, #188]	@ (8009924 <HAL_DMA_IRQHandler+0x1e0>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d048      	beq.n	80098fc <HAL_DMA_IRQHandler+0x1b8>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4a2e      	ldr	r2, [pc, #184]	@ (8009928 <HAL_DMA_IRQHandler+0x1e4>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d040      	beq.n	80098f6 <HAL_DMA_IRQHandler+0x1b2>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a2c      	ldr	r2, [pc, #176]	@ (800992c <HAL_DMA_IRQHandler+0x1e8>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d038      	beq.n	80098f0 <HAL_DMA_IRQHandler+0x1ac>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4a2b      	ldr	r2, [pc, #172]	@ (8009930 <HAL_DMA_IRQHandler+0x1ec>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d030      	beq.n	80098ea <HAL_DMA_IRQHandler+0x1a6>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a29      	ldr	r2, [pc, #164]	@ (8009934 <HAL_DMA_IRQHandler+0x1f0>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d028      	beq.n	80098e4 <HAL_DMA_IRQHandler+0x1a0>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4a21      	ldr	r2, [pc, #132]	@ (800991c <HAL_DMA_IRQHandler+0x1d8>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d020      	beq.n	80098de <HAL_DMA_IRQHandler+0x19a>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a25      	ldr	r2, [pc, #148]	@ (8009938 <HAL_DMA_IRQHandler+0x1f4>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d019      	beq.n	80098da <HAL_DMA_IRQHandler+0x196>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4a24      	ldr	r2, [pc, #144]	@ (800993c <HAL_DMA_IRQHandler+0x1f8>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d012      	beq.n	80098d6 <HAL_DMA_IRQHandler+0x192>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a22      	ldr	r2, [pc, #136]	@ (8009940 <HAL_DMA_IRQHandler+0x1fc>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d00a      	beq.n	80098d0 <HAL_DMA_IRQHandler+0x18c>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4a21      	ldr	r2, [pc, #132]	@ (8009944 <HAL_DMA_IRQHandler+0x200>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d102      	bne.n	80098ca <HAL_DMA_IRQHandler+0x186>
 80098c4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80098c8:	e01b      	b.n	8009902 <HAL_DMA_IRQHandler+0x1be>
 80098ca:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80098ce:	e018      	b.n	8009902 <HAL_DMA_IRQHandler+0x1be>
 80098d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80098d4:	e015      	b.n	8009902 <HAL_DMA_IRQHandler+0x1be>
 80098d6:	2340      	movs	r3, #64	@ 0x40
 80098d8:	e013      	b.n	8009902 <HAL_DMA_IRQHandler+0x1be>
 80098da:	2304      	movs	r3, #4
 80098dc:	e011      	b.n	8009902 <HAL_DMA_IRQHandler+0x1be>
 80098de:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80098e2:	e00e      	b.n	8009902 <HAL_DMA_IRQHandler+0x1be>
 80098e4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80098e8:	e00b      	b.n	8009902 <HAL_DMA_IRQHandler+0x1be>
 80098ea:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80098ee:	e008      	b.n	8009902 <HAL_DMA_IRQHandler+0x1be>
 80098f0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80098f4:	e005      	b.n	8009902 <HAL_DMA_IRQHandler+0x1be>
 80098f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80098fa:	e002      	b.n	8009902 <HAL_DMA_IRQHandler+0x1be>
 80098fc:	2340      	movs	r3, #64	@ 0x40
 80098fe:	e000      	b.n	8009902 <HAL_DMA_IRQHandler+0x1be>
 8009900:	2304      	movs	r3, #4
 8009902:	4a12      	ldr	r2, [pc, #72]	@ (800994c <HAL_DMA_IRQHandler+0x208>)
 8009904:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800990a:	2b00      	cmp	r3, #0
 800990c:	f000 8136 	beq.w	8009b7c <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8009918:	e130      	b.n	8009b7c <HAL_DMA_IRQHandler+0x438>
 800991a:	bf00      	nop
 800991c:	40020080 	.word	0x40020080
 8009920:	40020008 	.word	0x40020008
 8009924:	4002001c 	.word	0x4002001c
 8009928:	40020030 	.word	0x40020030
 800992c:	40020044 	.word	0x40020044
 8009930:	40020058 	.word	0x40020058
 8009934:	4002006c 	.word	0x4002006c
 8009938:	40020408 	.word	0x40020408
 800993c:	4002041c 	.word	0x4002041c
 8009940:	40020430 	.word	0x40020430
 8009944:	40020444 	.word	0x40020444
 8009948:	40020400 	.word	0x40020400
 800994c:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009954:	2202      	movs	r2, #2
 8009956:	409a      	lsls	r2, r3
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	4013      	ands	r3, r2
 800995c:	2b00      	cmp	r3, #0
 800995e:	f000 80dd 	beq.w	8009b1c <HAL_DMA_IRQHandler+0x3d8>
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	f003 0302 	and.w	r3, r3, #2
 8009968:	2b00      	cmp	r3, #0
 800996a:	f000 80d7 	beq.w	8009b1c <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f003 0320 	and.w	r3, r3, #32
 8009978:	2b00      	cmp	r3, #0
 800997a:	d10b      	bne.n	8009994 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	681a      	ldr	r2, [r3, #0]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f022 020a 	bic.w	r2, r2, #10
 800998a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2201      	movs	r2, #1
 8009990:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	461a      	mov	r2, r3
 800999a:	4b7b      	ldr	r3, [pc, #492]	@ (8009b88 <HAL_DMA_IRQHandler+0x444>)
 800999c:	429a      	cmp	r2, r3
 800999e:	d958      	bls.n	8009a52 <HAL_DMA_IRQHandler+0x30e>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a79      	ldr	r2, [pc, #484]	@ (8009b8c <HAL_DMA_IRQHandler+0x448>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d04f      	beq.n	8009a4a <HAL_DMA_IRQHandler+0x306>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4a78      	ldr	r2, [pc, #480]	@ (8009b90 <HAL_DMA_IRQHandler+0x44c>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d048      	beq.n	8009a46 <HAL_DMA_IRQHandler+0x302>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a76      	ldr	r2, [pc, #472]	@ (8009b94 <HAL_DMA_IRQHandler+0x450>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d040      	beq.n	8009a40 <HAL_DMA_IRQHandler+0x2fc>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	4a75      	ldr	r2, [pc, #468]	@ (8009b98 <HAL_DMA_IRQHandler+0x454>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d038      	beq.n	8009a3a <HAL_DMA_IRQHandler+0x2f6>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a73      	ldr	r2, [pc, #460]	@ (8009b9c <HAL_DMA_IRQHandler+0x458>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d030      	beq.n	8009a34 <HAL_DMA_IRQHandler+0x2f0>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a72      	ldr	r2, [pc, #456]	@ (8009ba0 <HAL_DMA_IRQHandler+0x45c>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d028      	beq.n	8009a2e <HAL_DMA_IRQHandler+0x2ea>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a69      	ldr	r2, [pc, #420]	@ (8009b88 <HAL_DMA_IRQHandler+0x444>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d020      	beq.n	8009a28 <HAL_DMA_IRQHandler+0x2e4>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a6e      	ldr	r2, [pc, #440]	@ (8009ba4 <HAL_DMA_IRQHandler+0x460>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d019      	beq.n	8009a24 <HAL_DMA_IRQHandler+0x2e0>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4a6c      	ldr	r2, [pc, #432]	@ (8009ba8 <HAL_DMA_IRQHandler+0x464>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d012      	beq.n	8009a20 <HAL_DMA_IRQHandler+0x2dc>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a6b      	ldr	r2, [pc, #428]	@ (8009bac <HAL_DMA_IRQHandler+0x468>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d00a      	beq.n	8009a1a <HAL_DMA_IRQHandler+0x2d6>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a69      	ldr	r2, [pc, #420]	@ (8009bb0 <HAL_DMA_IRQHandler+0x46c>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d102      	bne.n	8009a14 <HAL_DMA_IRQHandler+0x2d0>
 8009a0e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009a12:	e01b      	b.n	8009a4c <HAL_DMA_IRQHandler+0x308>
 8009a14:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009a18:	e018      	b.n	8009a4c <HAL_DMA_IRQHandler+0x308>
 8009a1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009a1e:	e015      	b.n	8009a4c <HAL_DMA_IRQHandler+0x308>
 8009a20:	2320      	movs	r3, #32
 8009a22:	e013      	b.n	8009a4c <HAL_DMA_IRQHandler+0x308>
 8009a24:	2302      	movs	r3, #2
 8009a26:	e011      	b.n	8009a4c <HAL_DMA_IRQHandler+0x308>
 8009a28:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009a2c:	e00e      	b.n	8009a4c <HAL_DMA_IRQHandler+0x308>
 8009a2e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009a32:	e00b      	b.n	8009a4c <HAL_DMA_IRQHandler+0x308>
 8009a34:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009a38:	e008      	b.n	8009a4c <HAL_DMA_IRQHandler+0x308>
 8009a3a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009a3e:	e005      	b.n	8009a4c <HAL_DMA_IRQHandler+0x308>
 8009a40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009a44:	e002      	b.n	8009a4c <HAL_DMA_IRQHandler+0x308>
 8009a46:	2320      	movs	r3, #32
 8009a48:	e000      	b.n	8009a4c <HAL_DMA_IRQHandler+0x308>
 8009a4a:	2302      	movs	r3, #2
 8009a4c:	4a59      	ldr	r2, [pc, #356]	@ (8009bb4 <HAL_DMA_IRQHandler+0x470>)
 8009a4e:	6053      	str	r3, [r2, #4]
 8009a50:	e057      	b.n	8009b02 <HAL_DMA_IRQHandler+0x3be>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a4d      	ldr	r2, [pc, #308]	@ (8009b8c <HAL_DMA_IRQHandler+0x448>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d04f      	beq.n	8009afc <HAL_DMA_IRQHandler+0x3b8>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a4b      	ldr	r2, [pc, #300]	@ (8009b90 <HAL_DMA_IRQHandler+0x44c>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d048      	beq.n	8009af8 <HAL_DMA_IRQHandler+0x3b4>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a4a      	ldr	r2, [pc, #296]	@ (8009b94 <HAL_DMA_IRQHandler+0x450>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d040      	beq.n	8009af2 <HAL_DMA_IRQHandler+0x3ae>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4a48      	ldr	r2, [pc, #288]	@ (8009b98 <HAL_DMA_IRQHandler+0x454>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d038      	beq.n	8009aec <HAL_DMA_IRQHandler+0x3a8>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4a47      	ldr	r2, [pc, #284]	@ (8009b9c <HAL_DMA_IRQHandler+0x458>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d030      	beq.n	8009ae6 <HAL_DMA_IRQHandler+0x3a2>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a45      	ldr	r2, [pc, #276]	@ (8009ba0 <HAL_DMA_IRQHandler+0x45c>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d028      	beq.n	8009ae0 <HAL_DMA_IRQHandler+0x39c>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4a3d      	ldr	r2, [pc, #244]	@ (8009b88 <HAL_DMA_IRQHandler+0x444>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d020      	beq.n	8009ada <HAL_DMA_IRQHandler+0x396>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a41      	ldr	r2, [pc, #260]	@ (8009ba4 <HAL_DMA_IRQHandler+0x460>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d019      	beq.n	8009ad6 <HAL_DMA_IRQHandler+0x392>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4a40      	ldr	r2, [pc, #256]	@ (8009ba8 <HAL_DMA_IRQHandler+0x464>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d012      	beq.n	8009ad2 <HAL_DMA_IRQHandler+0x38e>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a3e      	ldr	r2, [pc, #248]	@ (8009bac <HAL_DMA_IRQHandler+0x468>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d00a      	beq.n	8009acc <HAL_DMA_IRQHandler+0x388>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4a3d      	ldr	r2, [pc, #244]	@ (8009bb0 <HAL_DMA_IRQHandler+0x46c>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d102      	bne.n	8009ac6 <HAL_DMA_IRQHandler+0x382>
 8009ac0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009ac4:	e01b      	b.n	8009afe <HAL_DMA_IRQHandler+0x3ba>
 8009ac6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009aca:	e018      	b.n	8009afe <HAL_DMA_IRQHandler+0x3ba>
 8009acc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009ad0:	e015      	b.n	8009afe <HAL_DMA_IRQHandler+0x3ba>
 8009ad2:	2320      	movs	r3, #32
 8009ad4:	e013      	b.n	8009afe <HAL_DMA_IRQHandler+0x3ba>
 8009ad6:	2302      	movs	r3, #2
 8009ad8:	e011      	b.n	8009afe <HAL_DMA_IRQHandler+0x3ba>
 8009ada:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009ade:	e00e      	b.n	8009afe <HAL_DMA_IRQHandler+0x3ba>
 8009ae0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009ae4:	e00b      	b.n	8009afe <HAL_DMA_IRQHandler+0x3ba>
 8009ae6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009aea:	e008      	b.n	8009afe <HAL_DMA_IRQHandler+0x3ba>
 8009aec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009af0:	e005      	b.n	8009afe <HAL_DMA_IRQHandler+0x3ba>
 8009af2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009af6:	e002      	b.n	8009afe <HAL_DMA_IRQHandler+0x3ba>
 8009af8:	2320      	movs	r3, #32
 8009afa:	e000      	b.n	8009afe <HAL_DMA_IRQHandler+0x3ba>
 8009afc:	2302      	movs	r3, #2
 8009afe:	4a2e      	ldr	r2, [pc, #184]	@ (8009bb8 <HAL_DMA_IRQHandler+0x474>)
 8009b00:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2200      	movs	r2, #0
 8009b06:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d034      	beq.n	8009b7c <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8009b1a:	e02f      	b.n	8009b7c <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b20:	2208      	movs	r2, #8
 8009b22:	409a      	lsls	r2, r3
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	4013      	ands	r3, r2
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d028      	beq.n	8009b7e <HAL_DMA_IRQHandler+0x43a>
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	f003 0308 	and.w	r3, r3, #8
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d023      	beq.n	8009b7e <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	681a      	ldr	r2, [r3, #0]
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f022 020e 	bic.w	r2, r2, #14
 8009b44:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b4e:	2101      	movs	r1, #1
 8009b50:	fa01 f202 	lsl.w	r2, r1, r2
 8009b54:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2201      	movs	r2, #1
 8009b5a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2201      	movs	r2, #1
 8009b60:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2200      	movs	r2, #0
 8009b68:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d004      	beq.n	8009b7e <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	4798      	blx	r3
    }
  }
  return;
 8009b7c:	bf00      	nop
 8009b7e:	bf00      	nop
}
 8009b80:	3710      	adds	r7, #16
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
 8009b86:	bf00      	nop
 8009b88:	40020080 	.word	0x40020080
 8009b8c:	40020008 	.word	0x40020008
 8009b90:	4002001c 	.word	0x4002001c
 8009b94:	40020030 	.word	0x40020030
 8009b98:	40020044 	.word	0x40020044
 8009b9c:	40020058 	.word	0x40020058
 8009ba0:	4002006c 	.word	0x4002006c
 8009ba4:	40020408 	.word	0x40020408
 8009ba8:	4002041c 	.word	0x4002041c
 8009bac:	40020430 	.word	0x40020430
 8009bb0:	40020444 	.word	0x40020444
 8009bb4:	40020400 	.word	0x40020400
 8009bb8:	40020000 	.word	0x40020000

08009bbc <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b083      	sub	sp, #12
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009bca:	b2db      	uxtb	r3, r3
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	370c      	adds	r7, #12
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bc80      	pop	{r7}
 8009bd4:	4770      	bx	lr

08009bd6 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009bd6:	b480      	push	{r7}
 8009bd8:	b085      	sub	sp, #20
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	60f8      	str	r0, [r7, #12]
 8009bde:	60b9      	str	r1, [r7, #8]
 8009be0:	607a      	str	r2, [r7, #4]
 8009be2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bec:	2101      	movs	r1, #1
 8009bee:	fa01 f202 	lsl.w	r2, r1, r2
 8009bf2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	683a      	ldr	r2, [r7, #0]
 8009bfa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	2b10      	cmp	r3, #16
 8009c02:	d108      	bne.n	8009c16 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	68ba      	ldr	r2, [r7, #8]
 8009c12:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009c14:	e007      	b.n	8009c26 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	68ba      	ldr	r2, [r7, #8]
 8009c1c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	60da      	str	r2, [r3, #12]
}
 8009c26:	bf00      	nop
 8009c28:	3714      	adds	r7, #20
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bc80      	pop	{r7}
 8009c2e:	4770      	bx	lr

08009c30 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b085      	sub	sp, #20
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f003 031f 	and.w	r3, r3, #31
 8009c40:	2201      	movs	r2, #1
 8009c42:	fa02 f303 	lsl.w	r3, r2, r3
 8009c46:	60fb      	str	r3, [r7, #12]

  /* Generate Software interrupt */
  EXTI->SWIER = maskline;
 8009c48:	4a03      	ldr	r2, [pc, #12]	@ (8009c58 <HAL_EXTI_GenerateSWI+0x28>)
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	6113      	str	r3, [r2, #16]
}
 8009c4e:	bf00      	nop
 8009c50:	3714      	adds	r7, #20
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bc80      	pop	{r7}
 8009c56:	4770      	bx	lr
 8009c58:	40010400 	.word	0x40010400

08009c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b08b      	sub	sp, #44	@ 0x2c
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009c66:	2300      	movs	r3, #0
 8009c68:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009c6e:	e179      	b.n	8009f64 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8009c70:	2201      	movs	r2, #1
 8009c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c74:	fa02 f303 	lsl.w	r3, r2, r3
 8009c78:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	69fa      	ldr	r2, [r7, #28]
 8009c80:	4013      	ands	r3, r2
 8009c82:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8009c84:	69ba      	ldr	r2, [r7, #24]
 8009c86:	69fb      	ldr	r3, [r7, #28]
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	f040 8168 	bne.w	8009f5e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	4a96      	ldr	r2, [pc, #600]	@ (8009eec <HAL_GPIO_Init+0x290>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d05e      	beq.n	8009d56 <HAL_GPIO_Init+0xfa>
 8009c98:	4a94      	ldr	r2, [pc, #592]	@ (8009eec <HAL_GPIO_Init+0x290>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d875      	bhi.n	8009d8a <HAL_GPIO_Init+0x12e>
 8009c9e:	4a94      	ldr	r2, [pc, #592]	@ (8009ef0 <HAL_GPIO_Init+0x294>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d058      	beq.n	8009d56 <HAL_GPIO_Init+0xfa>
 8009ca4:	4a92      	ldr	r2, [pc, #584]	@ (8009ef0 <HAL_GPIO_Init+0x294>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d86f      	bhi.n	8009d8a <HAL_GPIO_Init+0x12e>
 8009caa:	4a92      	ldr	r2, [pc, #584]	@ (8009ef4 <HAL_GPIO_Init+0x298>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d052      	beq.n	8009d56 <HAL_GPIO_Init+0xfa>
 8009cb0:	4a90      	ldr	r2, [pc, #576]	@ (8009ef4 <HAL_GPIO_Init+0x298>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d869      	bhi.n	8009d8a <HAL_GPIO_Init+0x12e>
 8009cb6:	4a90      	ldr	r2, [pc, #576]	@ (8009ef8 <HAL_GPIO_Init+0x29c>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d04c      	beq.n	8009d56 <HAL_GPIO_Init+0xfa>
 8009cbc:	4a8e      	ldr	r2, [pc, #568]	@ (8009ef8 <HAL_GPIO_Init+0x29c>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d863      	bhi.n	8009d8a <HAL_GPIO_Init+0x12e>
 8009cc2:	4a8e      	ldr	r2, [pc, #568]	@ (8009efc <HAL_GPIO_Init+0x2a0>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d046      	beq.n	8009d56 <HAL_GPIO_Init+0xfa>
 8009cc8:	4a8c      	ldr	r2, [pc, #560]	@ (8009efc <HAL_GPIO_Init+0x2a0>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d85d      	bhi.n	8009d8a <HAL_GPIO_Init+0x12e>
 8009cce:	2b12      	cmp	r3, #18
 8009cd0:	d82a      	bhi.n	8009d28 <HAL_GPIO_Init+0xcc>
 8009cd2:	2b12      	cmp	r3, #18
 8009cd4:	d859      	bhi.n	8009d8a <HAL_GPIO_Init+0x12e>
 8009cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8009cdc <HAL_GPIO_Init+0x80>)
 8009cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cdc:	08009d57 	.word	0x08009d57
 8009ce0:	08009d31 	.word	0x08009d31
 8009ce4:	08009d43 	.word	0x08009d43
 8009ce8:	08009d85 	.word	0x08009d85
 8009cec:	08009d8b 	.word	0x08009d8b
 8009cf0:	08009d8b 	.word	0x08009d8b
 8009cf4:	08009d8b 	.word	0x08009d8b
 8009cf8:	08009d8b 	.word	0x08009d8b
 8009cfc:	08009d8b 	.word	0x08009d8b
 8009d00:	08009d8b 	.word	0x08009d8b
 8009d04:	08009d8b 	.word	0x08009d8b
 8009d08:	08009d8b 	.word	0x08009d8b
 8009d0c:	08009d8b 	.word	0x08009d8b
 8009d10:	08009d8b 	.word	0x08009d8b
 8009d14:	08009d8b 	.word	0x08009d8b
 8009d18:	08009d8b 	.word	0x08009d8b
 8009d1c:	08009d8b 	.word	0x08009d8b
 8009d20:	08009d39 	.word	0x08009d39
 8009d24:	08009d4d 	.word	0x08009d4d
 8009d28:	4a75      	ldr	r2, [pc, #468]	@ (8009f00 <HAL_GPIO_Init+0x2a4>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d013      	beq.n	8009d56 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8009d2e:	e02c      	b.n	8009d8a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	68db      	ldr	r3, [r3, #12]
 8009d34:	623b      	str	r3, [r7, #32]
          break;
 8009d36:	e029      	b.n	8009d8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	68db      	ldr	r3, [r3, #12]
 8009d3c:	3304      	adds	r3, #4
 8009d3e:	623b      	str	r3, [r7, #32]
          break;
 8009d40:	e024      	b.n	8009d8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	68db      	ldr	r3, [r3, #12]
 8009d46:	3308      	adds	r3, #8
 8009d48:	623b      	str	r3, [r7, #32]
          break;
 8009d4a:	e01f      	b.n	8009d8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	68db      	ldr	r3, [r3, #12]
 8009d50:	330c      	adds	r3, #12
 8009d52:	623b      	str	r3, [r7, #32]
          break;
 8009d54:	e01a      	b.n	8009d8c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	689b      	ldr	r3, [r3, #8]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d102      	bne.n	8009d64 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009d5e:	2304      	movs	r3, #4
 8009d60:	623b      	str	r3, [r7, #32]
          break;
 8009d62:	e013      	b.n	8009d8c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	689b      	ldr	r3, [r3, #8]
 8009d68:	2b01      	cmp	r3, #1
 8009d6a:	d105      	bne.n	8009d78 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009d6c:	2308      	movs	r3, #8
 8009d6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	69fa      	ldr	r2, [r7, #28]
 8009d74:	611a      	str	r2, [r3, #16]
          break;
 8009d76:	e009      	b.n	8009d8c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009d78:	2308      	movs	r3, #8
 8009d7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	69fa      	ldr	r2, [r7, #28]
 8009d80:	615a      	str	r2, [r3, #20]
          break;
 8009d82:	e003      	b.n	8009d8c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009d84:	2300      	movs	r3, #0
 8009d86:	623b      	str	r3, [r7, #32]
          break;
 8009d88:	e000      	b.n	8009d8c <HAL_GPIO_Init+0x130>
          break;
 8009d8a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009d8c:	69bb      	ldr	r3, [r7, #24]
 8009d8e:	2bff      	cmp	r3, #255	@ 0xff
 8009d90:	d801      	bhi.n	8009d96 <HAL_GPIO_Init+0x13a>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	e001      	b.n	8009d9a <HAL_GPIO_Init+0x13e>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	3304      	adds	r3, #4
 8009d9a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009d9c:	69bb      	ldr	r3, [r7, #24]
 8009d9e:	2bff      	cmp	r3, #255	@ 0xff
 8009da0:	d802      	bhi.n	8009da8 <HAL_GPIO_Init+0x14c>
 8009da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009da4:	009b      	lsls	r3, r3, #2
 8009da6:	e002      	b.n	8009dae <HAL_GPIO_Init+0x152>
 8009da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009daa:	3b08      	subs	r3, #8
 8009dac:	009b      	lsls	r3, r3, #2
 8009dae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	681a      	ldr	r2, [r3, #0]
 8009db4:	210f      	movs	r1, #15
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	fa01 f303 	lsl.w	r3, r1, r3
 8009dbc:	43db      	mvns	r3, r3
 8009dbe:	401a      	ands	r2, r3
 8009dc0:	6a39      	ldr	r1, [r7, #32]
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8009dc8:	431a      	orrs	r2, r3
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	f000 80c1 	beq.w	8009f5e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009ddc:	4b49      	ldr	r3, [pc, #292]	@ (8009f04 <HAL_GPIO_Init+0x2a8>)
 8009dde:	699b      	ldr	r3, [r3, #24]
 8009de0:	4a48      	ldr	r2, [pc, #288]	@ (8009f04 <HAL_GPIO_Init+0x2a8>)
 8009de2:	f043 0301 	orr.w	r3, r3, #1
 8009de6:	6193      	str	r3, [r2, #24]
 8009de8:	4b46      	ldr	r3, [pc, #280]	@ (8009f04 <HAL_GPIO_Init+0x2a8>)
 8009dea:	699b      	ldr	r3, [r3, #24]
 8009dec:	f003 0301 	and.w	r3, r3, #1
 8009df0:	60bb      	str	r3, [r7, #8]
 8009df2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009df4:	4a44      	ldr	r2, [pc, #272]	@ (8009f08 <HAL_GPIO_Init+0x2ac>)
 8009df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009df8:	089b      	lsrs	r3, r3, #2
 8009dfa:	3302      	adds	r3, #2
 8009dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e04:	f003 0303 	and.w	r3, r3, #3
 8009e08:	009b      	lsls	r3, r3, #2
 8009e0a:	220f      	movs	r2, #15
 8009e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8009e10:	43db      	mvns	r3, r3
 8009e12:	68fa      	ldr	r2, [r7, #12]
 8009e14:	4013      	ands	r3, r2
 8009e16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	4a3c      	ldr	r2, [pc, #240]	@ (8009f0c <HAL_GPIO_Init+0x2b0>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d01f      	beq.n	8009e60 <HAL_GPIO_Init+0x204>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	4a3b      	ldr	r2, [pc, #236]	@ (8009f10 <HAL_GPIO_Init+0x2b4>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d019      	beq.n	8009e5c <HAL_GPIO_Init+0x200>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	4a3a      	ldr	r2, [pc, #232]	@ (8009f14 <HAL_GPIO_Init+0x2b8>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d013      	beq.n	8009e58 <HAL_GPIO_Init+0x1fc>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	4a39      	ldr	r2, [pc, #228]	@ (8009f18 <HAL_GPIO_Init+0x2bc>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d00d      	beq.n	8009e54 <HAL_GPIO_Init+0x1f8>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	4a38      	ldr	r2, [pc, #224]	@ (8009f1c <HAL_GPIO_Init+0x2c0>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d007      	beq.n	8009e50 <HAL_GPIO_Init+0x1f4>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	4a37      	ldr	r2, [pc, #220]	@ (8009f20 <HAL_GPIO_Init+0x2c4>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d101      	bne.n	8009e4c <HAL_GPIO_Init+0x1f0>
 8009e48:	2305      	movs	r3, #5
 8009e4a:	e00a      	b.n	8009e62 <HAL_GPIO_Init+0x206>
 8009e4c:	2306      	movs	r3, #6
 8009e4e:	e008      	b.n	8009e62 <HAL_GPIO_Init+0x206>
 8009e50:	2304      	movs	r3, #4
 8009e52:	e006      	b.n	8009e62 <HAL_GPIO_Init+0x206>
 8009e54:	2303      	movs	r3, #3
 8009e56:	e004      	b.n	8009e62 <HAL_GPIO_Init+0x206>
 8009e58:	2302      	movs	r3, #2
 8009e5a:	e002      	b.n	8009e62 <HAL_GPIO_Init+0x206>
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	e000      	b.n	8009e62 <HAL_GPIO_Init+0x206>
 8009e60:	2300      	movs	r3, #0
 8009e62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e64:	f002 0203 	and.w	r2, r2, #3
 8009e68:	0092      	lsls	r2, r2, #2
 8009e6a:	4093      	lsls	r3, r2
 8009e6c:	68fa      	ldr	r2, [r7, #12]
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8009e72:	4925      	ldr	r1, [pc, #148]	@ (8009f08 <HAL_GPIO_Init+0x2ac>)
 8009e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e76:	089b      	lsrs	r3, r3, #2
 8009e78:	3302      	adds	r3, #2
 8009e7a:	68fa      	ldr	r2, [r7, #12]
 8009e7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d006      	beq.n	8009e9a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009e8c:	4b25      	ldr	r3, [pc, #148]	@ (8009f24 <HAL_GPIO_Init+0x2c8>)
 8009e8e:	689a      	ldr	r2, [r3, #8]
 8009e90:	4924      	ldr	r1, [pc, #144]	@ (8009f24 <HAL_GPIO_Init+0x2c8>)
 8009e92:	69bb      	ldr	r3, [r7, #24]
 8009e94:	4313      	orrs	r3, r2
 8009e96:	608b      	str	r3, [r1, #8]
 8009e98:	e006      	b.n	8009ea8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8009e9a:	4b22      	ldr	r3, [pc, #136]	@ (8009f24 <HAL_GPIO_Init+0x2c8>)
 8009e9c:	689a      	ldr	r2, [r3, #8]
 8009e9e:	69bb      	ldr	r3, [r7, #24]
 8009ea0:	43db      	mvns	r3, r3
 8009ea2:	4920      	ldr	r1, [pc, #128]	@ (8009f24 <HAL_GPIO_Init+0x2c8>)
 8009ea4:	4013      	ands	r3, r2
 8009ea6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d006      	beq.n	8009ec2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8009f24 <HAL_GPIO_Init+0x2c8>)
 8009eb6:	68da      	ldr	r2, [r3, #12]
 8009eb8:	491a      	ldr	r1, [pc, #104]	@ (8009f24 <HAL_GPIO_Init+0x2c8>)
 8009eba:	69bb      	ldr	r3, [r7, #24]
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	60cb      	str	r3, [r1, #12]
 8009ec0:	e006      	b.n	8009ed0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009ec2:	4b18      	ldr	r3, [pc, #96]	@ (8009f24 <HAL_GPIO_Init+0x2c8>)
 8009ec4:	68da      	ldr	r2, [r3, #12]
 8009ec6:	69bb      	ldr	r3, [r7, #24]
 8009ec8:	43db      	mvns	r3, r3
 8009eca:	4916      	ldr	r1, [pc, #88]	@ (8009f24 <HAL_GPIO_Init+0x2c8>)
 8009ecc:	4013      	ands	r3, r2
 8009ece:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d025      	beq.n	8009f28 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009edc:	4b11      	ldr	r3, [pc, #68]	@ (8009f24 <HAL_GPIO_Init+0x2c8>)
 8009ede:	685a      	ldr	r2, [r3, #4]
 8009ee0:	4910      	ldr	r1, [pc, #64]	@ (8009f24 <HAL_GPIO_Init+0x2c8>)
 8009ee2:	69bb      	ldr	r3, [r7, #24]
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	604b      	str	r3, [r1, #4]
 8009ee8:	e025      	b.n	8009f36 <HAL_GPIO_Init+0x2da>
 8009eea:	bf00      	nop
 8009eec:	10320000 	.word	0x10320000
 8009ef0:	10310000 	.word	0x10310000
 8009ef4:	10220000 	.word	0x10220000
 8009ef8:	10210000 	.word	0x10210000
 8009efc:	10120000 	.word	0x10120000
 8009f00:	10110000 	.word	0x10110000
 8009f04:	40021000 	.word	0x40021000
 8009f08:	40010000 	.word	0x40010000
 8009f0c:	40010800 	.word	0x40010800
 8009f10:	40010c00 	.word	0x40010c00
 8009f14:	40011000 	.word	0x40011000
 8009f18:	40011400 	.word	0x40011400
 8009f1c:	40011800 	.word	0x40011800
 8009f20:	40011c00 	.word	0x40011c00
 8009f24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009f28:	4b15      	ldr	r3, [pc, #84]	@ (8009f80 <HAL_GPIO_Init+0x324>)
 8009f2a:	685a      	ldr	r2, [r3, #4]
 8009f2c:	69bb      	ldr	r3, [r7, #24]
 8009f2e:	43db      	mvns	r3, r3
 8009f30:	4913      	ldr	r1, [pc, #76]	@ (8009f80 <HAL_GPIO_Init+0x324>)
 8009f32:	4013      	ands	r3, r2
 8009f34:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	685b      	ldr	r3, [r3, #4]
 8009f3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d006      	beq.n	8009f50 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009f42:	4b0f      	ldr	r3, [pc, #60]	@ (8009f80 <HAL_GPIO_Init+0x324>)
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	490e      	ldr	r1, [pc, #56]	@ (8009f80 <HAL_GPIO_Init+0x324>)
 8009f48:	69bb      	ldr	r3, [r7, #24]
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	600b      	str	r3, [r1, #0]
 8009f4e:	e006      	b.n	8009f5e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009f50:	4b0b      	ldr	r3, [pc, #44]	@ (8009f80 <HAL_GPIO_Init+0x324>)
 8009f52:	681a      	ldr	r2, [r3, #0]
 8009f54:	69bb      	ldr	r3, [r7, #24]
 8009f56:	43db      	mvns	r3, r3
 8009f58:	4909      	ldr	r1, [pc, #36]	@ (8009f80 <HAL_GPIO_Init+0x324>)
 8009f5a:	4013      	ands	r3, r2
 8009f5c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f60:	3301      	adds	r3, #1
 8009f62:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	681a      	ldr	r2, [r3, #0]
 8009f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	f47f ae7e 	bne.w	8009c70 <HAL_GPIO_Init+0x14>
  }
}
 8009f74:	bf00      	nop
 8009f76:	bf00      	nop
 8009f78:	372c      	adds	r7, #44	@ 0x2c
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bc80      	pop	{r7}
 8009f7e:	4770      	bx	lr
 8009f80:	40010400 	.word	0x40010400

08009f84 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b089      	sub	sp, #36	@ 0x24
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8009f92:	e0a6      	b.n	800a0e2 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009f94:	2201      	movs	r2, #1
 8009f96:	69fb      	ldr	r3, [r7, #28]
 8009f98:	fa02 f303 	lsl.w	r3, r2, r3
 8009f9c:	683a      	ldr	r2, [r7, #0]
 8009f9e:	4013      	ands	r3, r2
 8009fa0:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8009fa2:	69bb      	ldr	r3, [r7, #24]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	f000 8099 	beq.w	800a0dc <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8009faa:	4a54      	ldr	r2, [pc, #336]	@ (800a0fc <HAL_GPIO_DeInit+0x178>)
 8009fac:	69fb      	ldr	r3, [r7, #28]
 8009fae:	089b      	lsrs	r3, r3, #2
 8009fb0:	3302      	adds	r3, #2
 8009fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009fb6:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8009fb8:	69fb      	ldr	r3, [r7, #28]
 8009fba:	f003 0303 	and.w	r3, r3, #3
 8009fbe:	009b      	lsls	r3, r3, #2
 8009fc0:	220f      	movs	r2, #15
 8009fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8009fc6:	697a      	ldr	r2, [r7, #20]
 8009fc8:	4013      	ands	r3, r2
 8009fca:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	4a4c      	ldr	r2, [pc, #304]	@ (800a100 <HAL_GPIO_DeInit+0x17c>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d01f      	beq.n	800a014 <HAL_GPIO_DeInit+0x90>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	4a4b      	ldr	r2, [pc, #300]	@ (800a104 <HAL_GPIO_DeInit+0x180>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d019      	beq.n	800a010 <HAL_GPIO_DeInit+0x8c>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	4a4a      	ldr	r2, [pc, #296]	@ (800a108 <HAL_GPIO_DeInit+0x184>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d013      	beq.n	800a00c <HAL_GPIO_DeInit+0x88>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	4a49      	ldr	r2, [pc, #292]	@ (800a10c <HAL_GPIO_DeInit+0x188>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d00d      	beq.n	800a008 <HAL_GPIO_DeInit+0x84>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	4a48      	ldr	r2, [pc, #288]	@ (800a110 <HAL_GPIO_DeInit+0x18c>)
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d007      	beq.n	800a004 <HAL_GPIO_DeInit+0x80>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	4a47      	ldr	r2, [pc, #284]	@ (800a114 <HAL_GPIO_DeInit+0x190>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d101      	bne.n	800a000 <HAL_GPIO_DeInit+0x7c>
 8009ffc:	2305      	movs	r3, #5
 8009ffe:	e00a      	b.n	800a016 <HAL_GPIO_DeInit+0x92>
 800a000:	2306      	movs	r3, #6
 800a002:	e008      	b.n	800a016 <HAL_GPIO_DeInit+0x92>
 800a004:	2304      	movs	r3, #4
 800a006:	e006      	b.n	800a016 <HAL_GPIO_DeInit+0x92>
 800a008:	2303      	movs	r3, #3
 800a00a:	e004      	b.n	800a016 <HAL_GPIO_DeInit+0x92>
 800a00c:	2302      	movs	r3, #2
 800a00e:	e002      	b.n	800a016 <HAL_GPIO_DeInit+0x92>
 800a010:	2301      	movs	r3, #1
 800a012:	e000      	b.n	800a016 <HAL_GPIO_DeInit+0x92>
 800a014:	2300      	movs	r3, #0
 800a016:	69fa      	ldr	r2, [r7, #28]
 800a018:	f002 0203 	and.w	r2, r2, #3
 800a01c:	0092      	lsls	r2, r2, #2
 800a01e:	4093      	lsls	r3, r2
 800a020:	697a      	ldr	r2, [r7, #20]
 800a022:	429a      	cmp	r2, r3
 800a024:	d132      	bne.n	800a08c <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800a026:	4b3c      	ldr	r3, [pc, #240]	@ (800a118 <HAL_GPIO_DeInit+0x194>)
 800a028:	681a      	ldr	r2, [r3, #0]
 800a02a:	69bb      	ldr	r3, [r7, #24]
 800a02c:	43db      	mvns	r3, r3
 800a02e:	493a      	ldr	r1, [pc, #232]	@ (800a118 <HAL_GPIO_DeInit+0x194>)
 800a030:	4013      	ands	r3, r2
 800a032:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800a034:	4b38      	ldr	r3, [pc, #224]	@ (800a118 <HAL_GPIO_DeInit+0x194>)
 800a036:	685a      	ldr	r2, [r3, #4]
 800a038:	69bb      	ldr	r3, [r7, #24]
 800a03a:	43db      	mvns	r3, r3
 800a03c:	4936      	ldr	r1, [pc, #216]	@ (800a118 <HAL_GPIO_DeInit+0x194>)
 800a03e:	4013      	ands	r3, r2
 800a040:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800a042:	4b35      	ldr	r3, [pc, #212]	@ (800a118 <HAL_GPIO_DeInit+0x194>)
 800a044:	68da      	ldr	r2, [r3, #12]
 800a046:	69bb      	ldr	r3, [r7, #24]
 800a048:	43db      	mvns	r3, r3
 800a04a:	4933      	ldr	r1, [pc, #204]	@ (800a118 <HAL_GPIO_DeInit+0x194>)
 800a04c:	4013      	ands	r3, r2
 800a04e:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800a050:	4b31      	ldr	r3, [pc, #196]	@ (800a118 <HAL_GPIO_DeInit+0x194>)
 800a052:	689a      	ldr	r2, [r3, #8]
 800a054:	69bb      	ldr	r3, [r7, #24]
 800a056:	43db      	mvns	r3, r3
 800a058:	492f      	ldr	r1, [pc, #188]	@ (800a118 <HAL_GPIO_DeInit+0x194>)
 800a05a:	4013      	ands	r3, r2
 800a05c:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800a05e:	69fb      	ldr	r3, [r7, #28]
 800a060:	f003 0303 	and.w	r3, r3, #3
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	220f      	movs	r2, #15
 800a068:	fa02 f303 	lsl.w	r3, r2, r3
 800a06c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800a06e:	4a23      	ldr	r2, [pc, #140]	@ (800a0fc <HAL_GPIO_DeInit+0x178>)
 800a070:	69fb      	ldr	r3, [r7, #28]
 800a072:	089b      	lsrs	r3, r3, #2
 800a074:	3302      	adds	r3, #2
 800a076:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	43da      	mvns	r2, r3
 800a07e:	481f      	ldr	r0, [pc, #124]	@ (800a0fc <HAL_GPIO_DeInit+0x178>)
 800a080:	69fb      	ldr	r3, [r7, #28]
 800a082:	089b      	lsrs	r3, r3, #2
 800a084:	400a      	ands	r2, r1
 800a086:	3302      	adds	r3, #2
 800a088:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a08c:	69bb      	ldr	r3, [r7, #24]
 800a08e:	2bff      	cmp	r3, #255	@ 0xff
 800a090:	d801      	bhi.n	800a096 <HAL_GPIO_DeInit+0x112>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	e001      	b.n	800a09a <HAL_GPIO_DeInit+0x116>
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	3304      	adds	r3, #4
 800a09a:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800a09c:	69bb      	ldr	r3, [r7, #24]
 800a09e:	2bff      	cmp	r3, #255	@ 0xff
 800a0a0:	d802      	bhi.n	800a0a8 <HAL_GPIO_DeInit+0x124>
 800a0a2:	69fb      	ldr	r3, [r7, #28]
 800a0a4:	009b      	lsls	r3, r3, #2
 800a0a6:	e002      	b.n	800a0ae <HAL_GPIO_DeInit+0x12a>
 800a0a8:	69fb      	ldr	r3, [r7, #28]
 800a0aa:	3b08      	subs	r3, #8
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	210f      	movs	r1, #15
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	fa01 f303 	lsl.w	r3, r1, r3
 800a0bc:	43db      	mvns	r3, r3
 800a0be:	401a      	ands	r2, r3
 800a0c0:	2104      	movs	r1, #4
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	fa01 f303 	lsl.w	r3, r1, r3
 800a0c8:	431a      	orrs	r2, r3
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	68da      	ldr	r2, [r3, #12]
 800a0d2:	69bb      	ldr	r3, [r7, #24]
 800a0d4:	43db      	mvns	r3, r3
 800a0d6:	401a      	ands	r2, r3
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	60da      	str	r2, [r3, #12]
    }

    position++;
 800a0dc:	69fb      	ldr	r3, [r7, #28]
 800a0de:	3301      	adds	r3, #1
 800a0e0:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800a0e2:	683a      	ldr	r2, [r7, #0]
 800a0e4:	69fb      	ldr	r3, [r7, #28]
 800a0e6:	fa22 f303 	lsr.w	r3, r2, r3
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	f47f af52 	bne.w	8009f94 <HAL_GPIO_DeInit+0x10>
  }
}
 800a0f0:	bf00      	nop
 800a0f2:	bf00      	nop
 800a0f4:	3724      	adds	r7, #36	@ 0x24
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bc80      	pop	{r7}
 800a0fa:	4770      	bx	lr
 800a0fc:	40010000 	.word	0x40010000
 800a100:	40010800 	.word	0x40010800
 800a104:	40010c00 	.word	0x40010c00
 800a108:	40011000 	.word	0x40011000
 800a10c:	40011400 	.word	0x40011400
 800a110:	40011800 	.word	0x40011800
 800a114:	40011c00 	.word	0x40011c00
 800a118:	40010400 	.word	0x40010400

0800a11c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b085      	sub	sp, #20
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	460b      	mov	r3, r1
 800a126:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	689a      	ldr	r2, [r3, #8]
 800a12c:	887b      	ldrh	r3, [r7, #2]
 800a12e:	4013      	ands	r3, r2
 800a130:	2b00      	cmp	r3, #0
 800a132:	d002      	beq.n	800a13a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a134:	2301      	movs	r3, #1
 800a136:	73fb      	strb	r3, [r7, #15]
 800a138:	e001      	b.n	800a13e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a13a:	2300      	movs	r3, #0
 800a13c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a13e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a140:	4618      	mov	r0, r3
 800a142:	3714      	adds	r7, #20
 800a144:	46bd      	mov	sp, r7
 800a146:	bc80      	pop	{r7}
 800a148:	4770      	bx	lr

0800a14a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a14a:	b480      	push	{r7}
 800a14c:	b083      	sub	sp, #12
 800a14e:	af00      	add	r7, sp, #0
 800a150:	6078      	str	r0, [r7, #4]
 800a152:	460b      	mov	r3, r1
 800a154:	807b      	strh	r3, [r7, #2]
 800a156:	4613      	mov	r3, r2
 800a158:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a15a:	787b      	ldrb	r3, [r7, #1]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d003      	beq.n	800a168 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a160:	887a      	ldrh	r2, [r7, #2]
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800a166:	e003      	b.n	800a170 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800a168:	887b      	ldrh	r3, [r7, #2]
 800a16a:	041a      	lsls	r2, r3, #16
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	611a      	str	r2, [r3, #16]
}
 800a170:	bf00      	nop
 800a172:	370c      	adds	r7, #12
 800a174:	46bd      	mov	sp, r7
 800a176:	bc80      	pop	{r7}
 800a178:	4770      	bx	lr
	...

0800a17c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b084      	sub	sp, #16
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d101      	bne.n	800a18e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a18a:	2301      	movs	r3, #1
 800a18c:	e12b      	b.n	800a3e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a194:	b2db      	uxtb	r3, r3
 800a196:	2b00      	cmp	r3, #0
 800a198:	d106      	bne.n	800a1a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2200      	movs	r2, #0
 800a19e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f7f7 fb2c 	bl	8001800 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2224      	movs	r2, #36	@ 0x24
 800a1ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	681a      	ldr	r2, [r3, #0]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f022 0201 	bic.w	r2, r2, #1
 800a1be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	681a      	ldr	r2, [r3, #0]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a1ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	681a      	ldr	r2, [r3, #0]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a1de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a1e0:	f003 f97e 	bl	800d4e0 <HAL_RCC_GetPCLK1Freq>
 800a1e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	4a81      	ldr	r2, [pc, #516]	@ (800a3f0 <HAL_I2C_Init+0x274>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d807      	bhi.n	800a200 <HAL_I2C_Init+0x84>
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	4a80      	ldr	r2, [pc, #512]	@ (800a3f4 <HAL_I2C_Init+0x278>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	bf94      	ite	ls
 800a1f8:	2301      	movls	r3, #1
 800a1fa:	2300      	movhi	r3, #0
 800a1fc:	b2db      	uxtb	r3, r3
 800a1fe:	e006      	b.n	800a20e <HAL_I2C_Init+0x92>
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	4a7d      	ldr	r2, [pc, #500]	@ (800a3f8 <HAL_I2C_Init+0x27c>)
 800a204:	4293      	cmp	r3, r2
 800a206:	bf94      	ite	ls
 800a208:	2301      	movls	r3, #1
 800a20a:	2300      	movhi	r3, #0
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d001      	beq.n	800a216 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a212:	2301      	movs	r3, #1
 800a214:	e0e7      	b.n	800a3e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	4a78      	ldr	r2, [pc, #480]	@ (800a3fc <HAL_I2C_Init+0x280>)
 800a21a:	fba2 2303 	umull	r2, r3, r2, r3
 800a21e:	0c9b      	lsrs	r3, r3, #18
 800a220:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	68ba      	ldr	r2, [r7, #8]
 800a232:	430a      	orrs	r2, r1
 800a234:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	6a1b      	ldr	r3, [r3, #32]
 800a23c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	685b      	ldr	r3, [r3, #4]
 800a244:	4a6a      	ldr	r2, [pc, #424]	@ (800a3f0 <HAL_I2C_Init+0x274>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d802      	bhi.n	800a250 <HAL_I2C_Init+0xd4>
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	3301      	adds	r3, #1
 800a24e:	e009      	b.n	800a264 <HAL_I2C_Init+0xe8>
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800a256:	fb02 f303 	mul.w	r3, r2, r3
 800a25a:	4a69      	ldr	r2, [pc, #420]	@ (800a400 <HAL_I2C_Init+0x284>)
 800a25c:	fba2 2303 	umull	r2, r3, r2, r3
 800a260:	099b      	lsrs	r3, r3, #6
 800a262:	3301      	adds	r3, #1
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	6812      	ldr	r2, [r2, #0]
 800a268:	430b      	orrs	r3, r1
 800a26a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	69db      	ldr	r3, [r3, #28]
 800a272:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800a276:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	685b      	ldr	r3, [r3, #4]
 800a27e:	495c      	ldr	r1, [pc, #368]	@ (800a3f0 <HAL_I2C_Init+0x274>)
 800a280:	428b      	cmp	r3, r1
 800a282:	d819      	bhi.n	800a2b8 <HAL_I2C_Init+0x13c>
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	1e59      	subs	r1, r3, #1
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	685b      	ldr	r3, [r3, #4]
 800a28c:	005b      	lsls	r3, r3, #1
 800a28e:	fbb1 f3f3 	udiv	r3, r1, r3
 800a292:	1c59      	adds	r1, r3, #1
 800a294:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a298:	400b      	ands	r3, r1
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d00a      	beq.n	800a2b4 <HAL_I2C_Init+0x138>
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	1e59      	subs	r1, r3, #1
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	005b      	lsls	r3, r3, #1
 800a2a8:	fbb1 f3f3 	udiv	r3, r1, r3
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a2b2:	e051      	b.n	800a358 <HAL_I2C_Init+0x1dc>
 800a2b4:	2304      	movs	r3, #4
 800a2b6:	e04f      	b.n	800a358 <HAL_I2C_Init+0x1dc>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	689b      	ldr	r3, [r3, #8]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d111      	bne.n	800a2e4 <HAL_I2C_Init+0x168>
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	1e58      	subs	r0, r3, #1
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6859      	ldr	r1, [r3, #4]
 800a2c8:	460b      	mov	r3, r1
 800a2ca:	005b      	lsls	r3, r3, #1
 800a2cc:	440b      	add	r3, r1
 800a2ce:	fbb0 f3f3 	udiv	r3, r0, r3
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	bf0c      	ite	eq
 800a2dc:	2301      	moveq	r3, #1
 800a2de:	2300      	movne	r3, #0
 800a2e0:	b2db      	uxtb	r3, r3
 800a2e2:	e012      	b.n	800a30a <HAL_I2C_Init+0x18e>
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	1e58      	subs	r0, r3, #1
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6859      	ldr	r1, [r3, #4]
 800a2ec:	460b      	mov	r3, r1
 800a2ee:	009b      	lsls	r3, r3, #2
 800a2f0:	440b      	add	r3, r1
 800a2f2:	0099      	lsls	r1, r3, #2
 800a2f4:	440b      	add	r3, r1
 800a2f6:	fbb0 f3f3 	udiv	r3, r0, r3
 800a2fa:	3301      	adds	r3, #1
 800a2fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a300:	2b00      	cmp	r3, #0
 800a302:	bf0c      	ite	eq
 800a304:	2301      	moveq	r3, #1
 800a306:	2300      	movne	r3, #0
 800a308:	b2db      	uxtb	r3, r3
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d001      	beq.n	800a312 <HAL_I2C_Init+0x196>
 800a30e:	2301      	movs	r3, #1
 800a310:	e022      	b.n	800a358 <HAL_I2C_Init+0x1dc>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	689b      	ldr	r3, [r3, #8]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d10e      	bne.n	800a338 <HAL_I2C_Init+0x1bc>
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	1e58      	subs	r0, r3, #1
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6859      	ldr	r1, [r3, #4]
 800a322:	460b      	mov	r3, r1
 800a324:	005b      	lsls	r3, r3, #1
 800a326:	440b      	add	r3, r1
 800a328:	fbb0 f3f3 	udiv	r3, r0, r3
 800a32c:	3301      	adds	r3, #1
 800a32e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a332:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a336:	e00f      	b.n	800a358 <HAL_I2C_Init+0x1dc>
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	1e58      	subs	r0, r3, #1
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6859      	ldr	r1, [r3, #4]
 800a340:	460b      	mov	r3, r1
 800a342:	009b      	lsls	r3, r3, #2
 800a344:	440b      	add	r3, r1
 800a346:	0099      	lsls	r1, r3, #2
 800a348:	440b      	add	r3, r1
 800a34a:	fbb0 f3f3 	udiv	r3, r0, r3
 800a34e:	3301      	adds	r3, #1
 800a350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a354:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a358:	6879      	ldr	r1, [r7, #4]
 800a35a:	6809      	ldr	r1, [r1, #0]
 800a35c:	4313      	orrs	r3, r2
 800a35e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	69da      	ldr	r2, [r3, #28]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6a1b      	ldr	r3, [r3, #32]
 800a372:	431a      	orrs	r2, r3
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	430a      	orrs	r2, r1
 800a37a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	689b      	ldr	r3, [r3, #8]
 800a382:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800a386:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a38a:	687a      	ldr	r2, [r7, #4]
 800a38c:	6911      	ldr	r1, [r2, #16]
 800a38e:	687a      	ldr	r2, [r7, #4]
 800a390:	68d2      	ldr	r2, [r2, #12]
 800a392:	4311      	orrs	r1, r2
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	6812      	ldr	r2, [r2, #0]
 800a398:	430b      	orrs	r3, r1
 800a39a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	68db      	ldr	r3, [r3, #12]
 800a3a2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	695a      	ldr	r2, [r3, #20]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	699b      	ldr	r3, [r3, #24]
 800a3ae:	431a      	orrs	r2, r3
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	430a      	orrs	r2, r1
 800a3b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	681a      	ldr	r2, [r3, #0]
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f042 0201 	orr.w	r2, r2, #1
 800a3c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2220      	movs	r2, #32
 800a3d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800a3e4:	2300      	movs	r3, #0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3710      	adds	r7, #16
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	000186a0 	.word	0x000186a0
 800a3f4:	001e847f 	.word	0x001e847f
 800a3f8:	003d08ff 	.word	0x003d08ff
 800a3fc:	431bde83 	.word	0x431bde83
 800a400:	10624dd3 	.word	0x10624dd3

0800a404 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800a404:	b480      	push	{r7}
 800a406:	b083      	sub	sp, #12
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	695b      	ldr	r3, [r3, #20]
 800a412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a416:	2b80      	cmp	r3, #128	@ 0x80
 800a418:	d103      	bne.n	800a422 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	2200      	movs	r2, #0
 800a420:	611a      	str	r2, [r3, #16]
  }
}
 800a422:	bf00      	nop
 800a424:	370c      	adds	r7, #12
 800a426:	46bd      	mov	sp, r7
 800a428:	bc80      	pop	{r7}
 800a42a:	4770      	bx	lr

0800a42c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b088      	sub	sp, #32
 800a430:	af02      	add	r7, sp, #8
 800a432:	60f8      	str	r0, [r7, #12]
 800a434:	607a      	str	r2, [r7, #4]
 800a436:	461a      	mov	r2, r3
 800a438:	460b      	mov	r3, r1
 800a43a:	817b      	strh	r3, [r7, #10]
 800a43c:	4613      	mov	r3, r2
 800a43e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a440:	f7fe f840 	bl	80084c4 <HAL_GetTick>
 800a444:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a44c:	b2db      	uxtb	r3, r3
 800a44e:	2b20      	cmp	r3, #32
 800a450:	f040 80e0 	bne.w	800a614 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	9300      	str	r3, [sp, #0]
 800a458:	2319      	movs	r3, #25
 800a45a:	2201      	movs	r2, #1
 800a45c:	4970      	ldr	r1, [pc, #448]	@ (800a620 <HAL_I2C_Master_Transmit+0x1f4>)
 800a45e:	68f8      	ldr	r0, [r7, #12]
 800a460:	f002 f94c 	bl	800c6fc <I2C_WaitOnFlagUntilTimeout>
 800a464:	4603      	mov	r3, r0
 800a466:	2b00      	cmp	r3, #0
 800a468:	d001      	beq.n	800a46e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a46a:	2302      	movs	r3, #2
 800a46c:	e0d3      	b.n	800a616 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a474:	2b01      	cmp	r3, #1
 800a476:	d101      	bne.n	800a47c <HAL_I2C_Master_Transmit+0x50>
 800a478:	2302      	movs	r3, #2
 800a47a:	e0cc      	b.n	800a616 <HAL_I2C_Master_Transmit+0x1ea>
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2201      	movs	r2, #1
 800a480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f003 0301 	and.w	r3, r3, #1
 800a48e:	2b01      	cmp	r3, #1
 800a490:	d007      	beq.n	800a4a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	681a      	ldr	r2, [r3, #0]
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f042 0201 	orr.w	r2, r2, #1
 800a4a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	681a      	ldr	r2, [r3, #0]
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a4b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2221      	movs	r2, #33	@ 0x21
 800a4b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2210      	movs	r2, #16
 800a4be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	687a      	ldr	r2, [r7, #4]
 800a4cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	893a      	ldrh	r2, [r7, #8]
 800a4d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a4d8:	b29a      	uxth	r2, r3
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	4a50      	ldr	r2, [pc, #320]	@ (800a624 <HAL_I2C_Master_Transmit+0x1f8>)
 800a4e2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a4e4:	8979      	ldrh	r1, [r7, #10]
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	6a3a      	ldr	r2, [r7, #32]
 800a4ea:	68f8      	ldr	r0, [r7, #12]
 800a4ec:	f001 ff0e 	bl	800c30c <I2C_MasterRequestWrite>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d001      	beq.n	800a4fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	e08d      	b.n	800a616 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	613b      	str	r3, [r7, #16]
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	695b      	ldr	r3, [r3, #20]
 800a504:	613b      	str	r3, [r7, #16]
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	699b      	ldr	r3, [r3, #24]
 800a50c:	613b      	str	r3, [r7, #16]
 800a50e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a510:	e066      	b.n	800a5e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a512:	697a      	ldr	r2, [r7, #20]
 800a514:	6a39      	ldr	r1, [r7, #32]
 800a516:	68f8      	ldr	r0, [r7, #12]
 800a518:	f002 fa0a 	bl	800c930 <I2C_WaitOnTXEFlagUntilTimeout>
 800a51c:	4603      	mov	r3, r0
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d00d      	beq.n	800a53e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a526:	2b04      	cmp	r3, #4
 800a528:	d107      	bne.n	800a53a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	681a      	ldr	r2, [r3, #0]
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a538:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a53a:	2301      	movs	r3, #1
 800a53c:	e06b      	b.n	800a616 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a542:	781a      	ldrb	r2, [r3, #0]
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a54e:	1c5a      	adds	r2, r3, #1
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a558:	b29b      	uxth	r3, r3
 800a55a:	3b01      	subs	r3, #1
 800a55c:	b29a      	uxth	r2, r3
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a566:	3b01      	subs	r3, #1
 800a568:	b29a      	uxth	r2, r3
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	695b      	ldr	r3, [r3, #20]
 800a574:	f003 0304 	and.w	r3, r3, #4
 800a578:	2b04      	cmp	r3, #4
 800a57a:	d11b      	bne.n	800a5b4 <HAL_I2C_Master_Transmit+0x188>
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a580:	2b00      	cmp	r3, #0
 800a582:	d017      	beq.n	800a5b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a588:	781a      	ldrb	r2, [r3, #0]
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a594:	1c5a      	adds	r2, r3, #1
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a59e:	b29b      	uxth	r3, r3
 800a5a0:	3b01      	subs	r3, #1
 800a5a2:	b29a      	uxth	r2, r3
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a5ac:	3b01      	subs	r3, #1
 800a5ae:	b29a      	uxth	r2, r3
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a5b4:	697a      	ldr	r2, [r7, #20]
 800a5b6:	6a39      	ldr	r1, [r7, #32]
 800a5b8:	68f8      	ldr	r0, [r7, #12]
 800a5ba:	f002 fa01 	bl	800c9c0 <I2C_WaitOnBTFFlagUntilTimeout>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d00d      	beq.n	800a5e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5c8:	2b04      	cmp	r3, #4
 800a5ca:	d107      	bne.n	800a5dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	681a      	ldr	r2, [r3, #0]
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a5da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a5dc:	2301      	movs	r3, #1
 800a5de:	e01a      	b.n	800a616 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d194      	bne.n	800a512 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a5f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2220      	movs	r2, #32
 800a5fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2200      	movs	r2, #0
 800a604:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	2200      	movs	r2, #0
 800a60c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a610:	2300      	movs	r3, #0
 800a612:	e000      	b.n	800a616 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a614:	2302      	movs	r3, #2
  }
}
 800a616:	4618      	mov	r0, r3
 800a618:	3718      	adds	r7, #24
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}
 800a61e:	bf00      	nop
 800a620:	00100002 	.word	0x00100002
 800a624:	ffff0000 	.word	0xffff0000

0800a628 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b08c      	sub	sp, #48	@ 0x30
 800a62c:	af02      	add	r7, sp, #8
 800a62e:	60f8      	str	r0, [r7, #12]
 800a630:	607a      	str	r2, [r7, #4]
 800a632:	461a      	mov	r2, r3
 800a634:	460b      	mov	r3, r1
 800a636:	817b      	strh	r3, [r7, #10]
 800a638:	4613      	mov	r3, r2
 800a63a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800a63c:	2300      	movs	r3, #0
 800a63e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a640:	f7fd ff40 	bl	80084c4 <HAL_GetTick>
 800a644:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a64c:	b2db      	uxtb	r3, r3
 800a64e:	2b20      	cmp	r3, #32
 800a650:	f040 824b 	bne.w	800aaea <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a656:	9300      	str	r3, [sp, #0]
 800a658:	2319      	movs	r3, #25
 800a65a:	2201      	movs	r2, #1
 800a65c:	497f      	ldr	r1, [pc, #508]	@ (800a85c <HAL_I2C_Master_Receive+0x234>)
 800a65e:	68f8      	ldr	r0, [r7, #12]
 800a660:	f002 f84c 	bl	800c6fc <I2C_WaitOnFlagUntilTimeout>
 800a664:	4603      	mov	r3, r0
 800a666:	2b00      	cmp	r3, #0
 800a668:	d001      	beq.n	800a66e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800a66a:	2302      	movs	r3, #2
 800a66c:	e23e      	b.n	800aaec <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a674:	2b01      	cmp	r3, #1
 800a676:	d101      	bne.n	800a67c <HAL_I2C_Master_Receive+0x54>
 800a678:	2302      	movs	r3, #2
 800a67a:	e237      	b.n	800aaec <HAL_I2C_Master_Receive+0x4c4>
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2201      	movs	r2, #1
 800a680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f003 0301 	and.w	r3, r3, #1
 800a68e:	2b01      	cmp	r3, #1
 800a690:	d007      	beq.n	800a6a2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	681a      	ldr	r2, [r3, #0]
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f042 0201 	orr.w	r2, r2, #1
 800a6a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	681a      	ldr	r2, [r3, #0]
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a6b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2222      	movs	r2, #34	@ 0x22
 800a6b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2210      	movs	r2, #16
 800a6be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	687a      	ldr	r2, [r7, #4]
 800a6cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	893a      	ldrh	r2, [r7, #8]
 800a6d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a6d8:	b29a      	uxth	r2, r3
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	4a5f      	ldr	r2, [pc, #380]	@ (800a860 <HAL_I2C_Master_Receive+0x238>)
 800a6e2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a6e4:	8979      	ldrh	r1, [r7, #10]
 800a6e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6ea:	68f8      	ldr	r0, [r7, #12]
 800a6ec:	f001 fe90 	bl	800c410 <I2C_MasterRequestRead>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d001      	beq.n	800a6fa <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	e1f8      	b.n	800aaec <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d113      	bne.n	800a72a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a702:	2300      	movs	r3, #0
 800a704:	61fb      	str	r3, [r7, #28]
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	695b      	ldr	r3, [r3, #20]
 800a70c:	61fb      	str	r3, [r7, #28]
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	699b      	ldr	r3, [r3, #24]
 800a714:	61fb      	str	r3, [r7, #28]
 800a716:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	681a      	ldr	r2, [r3, #0]
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a726:	601a      	str	r2, [r3, #0]
 800a728:	e1cc      	b.n	800aac4 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a72e:	2b01      	cmp	r3, #1
 800a730:	d11e      	bne.n	800a770 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	681a      	ldr	r2, [r3, #0]
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a740:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a742:	b672      	cpsid	i
}
 800a744:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a746:	2300      	movs	r3, #0
 800a748:	61bb      	str	r3, [r7, #24]
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	695b      	ldr	r3, [r3, #20]
 800a750:	61bb      	str	r3, [r7, #24]
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	699b      	ldr	r3, [r3, #24]
 800a758:	61bb      	str	r3, [r7, #24]
 800a75a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	681a      	ldr	r2, [r3, #0]
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a76a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a76c:	b662      	cpsie	i
}
 800a76e:	e035      	b.n	800a7dc <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a774:	2b02      	cmp	r3, #2
 800a776:	d11e      	bne.n	800a7b6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	681a      	ldr	r2, [r3, #0]
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a786:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a788:	b672      	cpsid	i
}
 800a78a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a78c:	2300      	movs	r3, #0
 800a78e:	617b      	str	r3, [r7, #20]
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	695b      	ldr	r3, [r3, #20]
 800a796:	617b      	str	r3, [r7, #20]
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	699b      	ldr	r3, [r3, #24]
 800a79e:	617b      	str	r3, [r7, #20]
 800a7a0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	681a      	ldr	r2, [r3, #0]
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a7b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a7b2:	b662      	cpsie	i
}
 800a7b4:	e012      	b.n	800a7dc <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	681a      	ldr	r2, [r3, #0]
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a7c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	613b      	str	r3, [r7, #16]
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	695b      	ldr	r3, [r3, #20]
 800a7d0:	613b      	str	r3, [r7, #16]
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	699b      	ldr	r3, [r3, #24]
 800a7d8:	613b      	str	r3, [r7, #16]
 800a7da:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800a7dc:	e172      	b.n	800aac4 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a7e2:	2b03      	cmp	r3, #3
 800a7e4:	f200 811f 	bhi.w	800aa26 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d123      	bne.n	800a838 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a7f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7f2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a7f4:	68f8      	ldr	r0, [r7, #12]
 800a7f6:	f002 f95d 	bl	800cab4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d001      	beq.n	800a804 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800a800:	2301      	movs	r3, #1
 800a802:	e173      	b.n	800aaec <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	691a      	ldr	r2, [r3, #16]
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a80e:	b2d2      	uxtb	r2, r2
 800a810:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a816:	1c5a      	adds	r2, r3, #1
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a820:	3b01      	subs	r3, #1
 800a822:	b29a      	uxth	r2, r3
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a82c:	b29b      	uxth	r3, r3
 800a82e:	3b01      	subs	r3, #1
 800a830:	b29a      	uxth	r2, r3
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a836:	e145      	b.n	800aac4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a83c:	2b02      	cmp	r3, #2
 800a83e:	d152      	bne.n	800a8e6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a842:	9300      	str	r3, [sp, #0]
 800a844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a846:	2200      	movs	r2, #0
 800a848:	4906      	ldr	r1, [pc, #24]	@ (800a864 <HAL_I2C_Master_Receive+0x23c>)
 800a84a:	68f8      	ldr	r0, [r7, #12]
 800a84c:	f001 ff56 	bl	800c6fc <I2C_WaitOnFlagUntilTimeout>
 800a850:	4603      	mov	r3, r0
 800a852:	2b00      	cmp	r3, #0
 800a854:	d008      	beq.n	800a868 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800a856:	2301      	movs	r3, #1
 800a858:	e148      	b.n	800aaec <HAL_I2C_Master_Receive+0x4c4>
 800a85a:	bf00      	nop
 800a85c:	00100002 	.word	0x00100002
 800a860:	ffff0000 	.word	0xffff0000
 800a864:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800a868:	b672      	cpsid	i
}
 800a86a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	681a      	ldr	r2, [r3, #0]
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a87a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	691a      	ldr	r2, [r3, #16]
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a886:	b2d2      	uxtb	r2, r2
 800a888:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a88e:	1c5a      	adds	r2, r3, #1
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a898:	3b01      	subs	r3, #1
 800a89a:	b29a      	uxth	r2, r3
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8a4:	b29b      	uxth	r3, r3
 800a8a6:	3b01      	subs	r3, #1
 800a8a8:	b29a      	uxth	r2, r3
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a8ae:	b662      	cpsie	i
}
 800a8b0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	691a      	ldr	r2, [r3, #16]
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8bc:	b2d2      	uxtb	r2, r2
 800a8be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8c4:	1c5a      	adds	r2, r3, #1
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8ce:	3b01      	subs	r3, #1
 800a8d0:	b29a      	uxth	r2, r3
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8da:	b29b      	uxth	r3, r3
 800a8dc:	3b01      	subs	r3, #1
 800a8de:	b29a      	uxth	r2, r3
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a8e4:	e0ee      	b.n	800aac4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a8e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8e8:	9300      	str	r3, [sp, #0]
 800a8ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	4981      	ldr	r1, [pc, #516]	@ (800aaf4 <HAL_I2C_Master_Receive+0x4cc>)
 800a8f0:	68f8      	ldr	r0, [r7, #12]
 800a8f2:	f001 ff03 	bl	800c6fc <I2C_WaitOnFlagUntilTimeout>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d001      	beq.n	800a900 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	e0f5      	b.n	800aaec <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	681a      	ldr	r2, [r3, #0]
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a90e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a910:	b672      	cpsid	i
}
 800a912:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	691a      	ldr	r2, [r3, #16]
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a91e:	b2d2      	uxtb	r2, r2
 800a920:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a926:	1c5a      	adds	r2, r3, #1
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a930:	3b01      	subs	r3, #1
 800a932:	b29a      	uxth	r2, r3
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a93c:	b29b      	uxth	r3, r3
 800a93e:	3b01      	subs	r3, #1
 800a940:	b29a      	uxth	r2, r3
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a946:	4b6c      	ldr	r3, [pc, #432]	@ (800aaf8 <HAL_I2C_Master_Receive+0x4d0>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	08db      	lsrs	r3, r3, #3
 800a94c:	4a6b      	ldr	r2, [pc, #428]	@ (800aafc <HAL_I2C_Master_Receive+0x4d4>)
 800a94e:	fba2 2303 	umull	r2, r3, r2, r3
 800a952:	0a1a      	lsrs	r2, r3, #8
 800a954:	4613      	mov	r3, r2
 800a956:	009b      	lsls	r3, r3, #2
 800a958:	4413      	add	r3, r2
 800a95a:	00da      	lsls	r2, r3, #3
 800a95c:	1ad3      	subs	r3, r2, r3
 800a95e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800a960:	6a3b      	ldr	r3, [r7, #32]
 800a962:	3b01      	subs	r3, #1
 800a964:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800a966:	6a3b      	ldr	r3, [r7, #32]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d118      	bne.n	800a99e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	2200      	movs	r2, #0
 800a970:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2220      	movs	r2, #32
 800a976:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2200      	movs	r2, #0
 800a97e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a986:	f043 0220 	orr.w	r2, r3, #32
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800a98e:	b662      	cpsie	i
}
 800a990:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2200      	movs	r2, #0
 800a996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800a99a:	2301      	movs	r3, #1
 800a99c:	e0a6      	b.n	800aaec <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	695b      	ldr	r3, [r3, #20]
 800a9a4:	f003 0304 	and.w	r3, r3, #4
 800a9a8:	2b04      	cmp	r3, #4
 800a9aa:	d1d9      	bne.n	800a960 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	681a      	ldr	r2, [r3, #0]
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a9ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	691a      	ldr	r2, [r3, #16]
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9c6:	b2d2      	uxtb	r2, r2
 800a9c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9ce:	1c5a      	adds	r2, r3, #1
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a9d8:	3b01      	subs	r3, #1
 800a9da:	b29a      	uxth	r2, r3
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9e4:	b29b      	uxth	r3, r3
 800a9e6:	3b01      	subs	r3, #1
 800a9e8:	b29a      	uxth	r2, r3
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a9ee:	b662      	cpsie	i
}
 800a9f0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	691a      	ldr	r2, [r3, #16]
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9fc:	b2d2      	uxtb	r2, r2
 800a9fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa04:	1c5a      	adds	r2, r3, #1
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa0e:	3b01      	subs	r3, #1
 800aa10:	b29a      	uxth	r2, r3
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa1a:	b29b      	uxth	r3, r3
 800aa1c:	3b01      	subs	r3, #1
 800aa1e:	b29a      	uxth	r2, r3
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800aa24:	e04e      	b.n	800aac4 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aa26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa28:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800aa2a:	68f8      	ldr	r0, [r7, #12]
 800aa2c:	f002 f842 	bl	800cab4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800aa30:	4603      	mov	r3, r0
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d001      	beq.n	800aa3a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800aa36:	2301      	movs	r3, #1
 800aa38:	e058      	b.n	800aaec <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	691a      	ldr	r2, [r3, #16]
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa44:	b2d2      	uxtb	r2, r2
 800aa46:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa4c:	1c5a      	adds	r2, r3, #1
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa56:	3b01      	subs	r3, #1
 800aa58:	b29a      	uxth	r2, r3
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	3b01      	subs	r3, #1
 800aa66:	b29a      	uxth	r2, r3
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	695b      	ldr	r3, [r3, #20]
 800aa72:	f003 0304 	and.w	r3, r3, #4
 800aa76:	2b04      	cmp	r3, #4
 800aa78:	d124      	bne.n	800aac4 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa7e:	2b03      	cmp	r3, #3
 800aa80:	d107      	bne.n	800aa92 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	681a      	ldr	r2, [r3, #0]
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aa90:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	691a      	ldr	r2, [r3, #16]
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa9c:	b2d2      	uxtb	r2, r2
 800aa9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaa4:	1c5a      	adds	r2, r3, #1
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aaae:	3b01      	subs	r3, #1
 800aab0:	b29a      	uxth	r2, r3
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aaba:	b29b      	uxth	r3, r3
 800aabc:	3b01      	subs	r3, #1
 800aabe:	b29a      	uxth	r2, r3
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	f47f ae88 	bne.w	800a7de <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	2220      	movs	r2, #32
 800aad2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2200      	movs	r2, #0
 800aada:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2200      	movs	r2, #0
 800aae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800aae6:	2300      	movs	r3, #0
 800aae8:	e000      	b.n	800aaec <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800aaea:	2302      	movs	r3, #2
  }
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3728      	adds	r7, #40	@ 0x28
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}
 800aaf4:	00010004 	.word	0x00010004
 800aaf8:	20000000 	.word	0x20000000
 800aafc:	14f8b589 	.word	0x14f8b589

0800ab00 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b088      	sub	sp, #32
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	685b      	ldr	r3, [r3, #4]
 800ab12:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab18:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ab20:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab28:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800ab2a:	7bfb      	ldrb	r3, [r7, #15]
 800ab2c:	2b10      	cmp	r3, #16
 800ab2e:	d003      	beq.n	800ab38 <HAL_I2C_EV_IRQHandler+0x38>
 800ab30:	7bfb      	ldrb	r3, [r7, #15]
 800ab32:	2b40      	cmp	r3, #64	@ 0x40
 800ab34:	f040 80c1 	bne.w	800acba <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	699b      	ldr	r3, [r3, #24]
 800ab3e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	695b      	ldr	r3, [r3, #20]
 800ab46:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800ab48:	69fb      	ldr	r3, [r7, #28]
 800ab4a:	f003 0301 	and.w	r3, r3, #1
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d10d      	bne.n	800ab6e <HAL_I2C_EV_IRQHandler+0x6e>
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800ab58:	d003      	beq.n	800ab62 <HAL_I2C_EV_IRQHandler+0x62>
 800ab5a:	693b      	ldr	r3, [r7, #16]
 800ab5c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800ab60:	d101      	bne.n	800ab66 <HAL_I2C_EV_IRQHandler+0x66>
 800ab62:	2301      	movs	r3, #1
 800ab64:	e000      	b.n	800ab68 <HAL_I2C_EV_IRQHandler+0x68>
 800ab66:	2300      	movs	r3, #0
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	f000 8132 	beq.w	800add2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ab6e:	69fb      	ldr	r3, [r7, #28]
 800ab70:	f003 0301 	and.w	r3, r3, #1
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d00c      	beq.n	800ab92 <HAL_I2C_EV_IRQHandler+0x92>
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	0a5b      	lsrs	r3, r3, #9
 800ab7c:	f003 0301 	and.w	r3, r3, #1
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d006      	beq.n	800ab92 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f002 f820 	bl	800cbca <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f000 fd99 	bl	800b6c2 <I2C_Master_SB>
 800ab90:	e092      	b.n	800acb8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ab92:	69fb      	ldr	r3, [r7, #28]
 800ab94:	08db      	lsrs	r3, r3, #3
 800ab96:	f003 0301 	and.w	r3, r3, #1
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d009      	beq.n	800abb2 <HAL_I2C_EV_IRQHandler+0xb2>
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	0a5b      	lsrs	r3, r3, #9
 800aba2:	f003 0301 	and.w	r3, r3, #1
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d003      	beq.n	800abb2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f000 fe0e 	bl	800b7cc <I2C_Master_ADD10>
 800abb0:	e082      	b.n	800acb8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800abb2:	69fb      	ldr	r3, [r7, #28]
 800abb4:	085b      	lsrs	r3, r3, #1
 800abb6:	f003 0301 	and.w	r3, r3, #1
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d009      	beq.n	800abd2 <HAL_I2C_EV_IRQHandler+0xd2>
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	0a5b      	lsrs	r3, r3, #9
 800abc2:	f003 0301 	and.w	r3, r3, #1
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d003      	beq.n	800abd2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f000 fe27 	bl	800b81e <I2C_Master_ADDR>
 800abd0:	e072      	b.n	800acb8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800abd2:	69bb      	ldr	r3, [r7, #24]
 800abd4:	089b      	lsrs	r3, r3, #2
 800abd6:	f003 0301 	and.w	r3, r3, #1
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d03b      	beq.n	800ac56 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800abe8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800abec:	f000 80f3 	beq.w	800add6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800abf0:	69fb      	ldr	r3, [r7, #28]
 800abf2:	09db      	lsrs	r3, r3, #7
 800abf4:	f003 0301 	and.w	r3, r3, #1
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d00f      	beq.n	800ac1c <HAL_I2C_EV_IRQHandler+0x11c>
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	0a9b      	lsrs	r3, r3, #10
 800ac00:	f003 0301 	and.w	r3, r3, #1
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d009      	beq.n	800ac1c <HAL_I2C_EV_IRQHandler+0x11c>
 800ac08:	69fb      	ldr	r3, [r7, #28]
 800ac0a:	089b      	lsrs	r3, r3, #2
 800ac0c:	f003 0301 	and.w	r3, r3, #1
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d103      	bne.n	800ac1c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f000 f9f1 	bl	800affc <I2C_MasterTransmit_TXE>
 800ac1a:	e04d      	b.n	800acb8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ac1c:	69fb      	ldr	r3, [r7, #28]
 800ac1e:	089b      	lsrs	r3, r3, #2
 800ac20:	f003 0301 	and.w	r3, r3, #1
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	f000 80d6 	beq.w	800add6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	0a5b      	lsrs	r3, r3, #9
 800ac2e:	f003 0301 	and.w	r3, r3, #1
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	f000 80cf 	beq.w	800add6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800ac38:	7bbb      	ldrb	r3, [r7, #14]
 800ac3a:	2b21      	cmp	r3, #33	@ 0x21
 800ac3c:	d103      	bne.n	800ac46 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f000 fa78 	bl	800b134 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ac44:	e0c7      	b.n	800add6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800ac46:	7bfb      	ldrb	r3, [r7, #15]
 800ac48:	2b40      	cmp	r3, #64	@ 0x40
 800ac4a:	f040 80c4 	bne.w	800add6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f000 fae6 	bl	800b220 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ac54:	e0bf      	b.n	800add6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	685b      	ldr	r3, [r3, #4]
 800ac5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ac60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ac64:	f000 80b7 	beq.w	800add6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ac68:	69fb      	ldr	r3, [r7, #28]
 800ac6a:	099b      	lsrs	r3, r3, #6
 800ac6c:	f003 0301 	and.w	r3, r3, #1
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d00f      	beq.n	800ac94 <HAL_I2C_EV_IRQHandler+0x194>
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	0a9b      	lsrs	r3, r3, #10
 800ac78:	f003 0301 	and.w	r3, r3, #1
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d009      	beq.n	800ac94 <HAL_I2C_EV_IRQHandler+0x194>
 800ac80:	69fb      	ldr	r3, [r7, #28]
 800ac82:	089b      	lsrs	r3, r3, #2
 800ac84:	f003 0301 	and.w	r3, r3, #1
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d103      	bne.n	800ac94 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f000 fb5f 	bl	800b350 <I2C_MasterReceive_RXNE>
 800ac92:	e011      	b.n	800acb8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ac94:	69fb      	ldr	r3, [r7, #28]
 800ac96:	089b      	lsrs	r3, r3, #2
 800ac98:	f003 0301 	and.w	r3, r3, #1
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	f000 809a 	beq.w	800add6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	0a5b      	lsrs	r3, r3, #9
 800aca6:	f003 0301 	and.w	r3, r3, #1
 800acaa:	2b00      	cmp	r3, #0
 800acac:	f000 8093 	beq.w	800add6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f000 fc15 	bl	800b4e0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800acb6:	e08e      	b.n	800add6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800acb8:	e08d      	b.n	800add6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d004      	beq.n	800accc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	695b      	ldr	r3, [r3, #20]
 800acc8:	61fb      	str	r3, [r7, #28]
 800acca:	e007      	b.n	800acdc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	699b      	ldr	r3, [r3, #24]
 800acd2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	695b      	ldr	r3, [r3, #20]
 800acda:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800acdc:	69fb      	ldr	r3, [r7, #28]
 800acde:	085b      	lsrs	r3, r3, #1
 800ace0:	f003 0301 	and.w	r3, r3, #1
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d012      	beq.n	800ad0e <HAL_I2C_EV_IRQHandler+0x20e>
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	0a5b      	lsrs	r3, r3, #9
 800acec:	f003 0301 	and.w	r3, r3, #1
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d00c      	beq.n	800ad0e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d003      	beq.n	800ad04 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	699b      	ldr	r3, [r3, #24]
 800ad02:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800ad04:	69b9      	ldr	r1, [r7, #24]
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f000 ffe0 	bl	800bccc <I2C_Slave_ADDR>
 800ad0c:	e066      	b.n	800addc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ad0e:	69fb      	ldr	r3, [r7, #28]
 800ad10:	091b      	lsrs	r3, r3, #4
 800ad12:	f003 0301 	and.w	r3, r3, #1
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d009      	beq.n	800ad2e <HAL_I2C_EV_IRQHandler+0x22e>
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	0a5b      	lsrs	r3, r3, #9
 800ad1e:	f003 0301 	and.w	r3, r3, #1
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d003      	beq.n	800ad2e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f001 f81a 	bl	800bd60 <I2C_Slave_STOPF>
 800ad2c:	e056      	b.n	800addc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800ad2e:	7bbb      	ldrb	r3, [r7, #14]
 800ad30:	2b21      	cmp	r3, #33	@ 0x21
 800ad32:	d002      	beq.n	800ad3a <HAL_I2C_EV_IRQHandler+0x23a>
 800ad34:	7bbb      	ldrb	r3, [r7, #14]
 800ad36:	2b29      	cmp	r3, #41	@ 0x29
 800ad38:	d125      	bne.n	800ad86 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ad3a:	69fb      	ldr	r3, [r7, #28]
 800ad3c:	09db      	lsrs	r3, r3, #7
 800ad3e:	f003 0301 	and.w	r3, r3, #1
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d00f      	beq.n	800ad66 <HAL_I2C_EV_IRQHandler+0x266>
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	0a9b      	lsrs	r3, r3, #10
 800ad4a:	f003 0301 	and.w	r3, r3, #1
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d009      	beq.n	800ad66 <HAL_I2C_EV_IRQHandler+0x266>
 800ad52:	69fb      	ldr	r3, [r7, #28]
 800ad54:	089b      	lsrs	r3, r3, #2
 800ad56:	f003 0301 	and.w	r3, r3, #1
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d103      	bne.n	800ad66 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 fef8 	bl	800bb54 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ad64:	e039      	b.n	800adda <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ad66:	69fb      	ldr	r3, [r7, #28]
 800ad68:	089b      	lsrs	r3, r3, #2
 800ad6a:	f003 0301 	and.w	r3, r3, #1
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d033      	beq.n	800adda <HAL_I2C_EV_IRQHandler+0x2da>
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	0a5b      	lsrs	r3, r3, #9
 800ad76:	f003 0301 	and.w	r3, r3, #1
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d02d      	beq.n	800adda <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f000 ff25 	bl	800bbce <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ad84:	e029      	b.n	800adda <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ad86:	69fb      	ldr	r3, [r7, #28]
 800ad88:	099b      	lsrs	r3, r3, #6
 800ad8a:	f003 0301 	and.w	r3, r3, #1
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d00f      	beq.n	800adb2 <HAL_I2C_EV_IRQHandler+0x2b2>
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	0a9b      	lsrs	r3, r3, #10
 800ad96:	f003 0301 	and.w	r3, r3, #1
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d009      	beq.n	800adb2 <HAL_I2C_EV_IRQHandler+0x2b2>
 800ad9e:	69fb      	ldr	r3, [r7, #28]
 800ada0:	089b      	lsrs	r3, r3, #2
 800ada2:	f003 0301 	and.w	r3, r3, #1
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d103      	bne.n	800adb2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f000 ff2f 	bl	800bc0e <I2C_SlaveReceive_RXNE>
 800adb0:	e014      	b.n	800addc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800adb2:	69fb      	ldr	r3, [r7, #28]
 800adb4:	089b      	lsrs	r3, r3, #2
 800adb6:	f003 0301 	and.w	r3, r3, #1
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d00e      	beq.n	800addc <HAL_I2C_EV_IRQHandler+0x2dc>
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	0a5b      	lsrs	r3, r3, #9
 800adc2:	f003 0301 	and.w	r3, r3, #1
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d008      	beq.n	800addc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f000 ff5d 	bl	800bc8a <I2C_SlaveReceive_BTF>
 800add0:	e004      	b.n	800addc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800add2:	bf00      	nop
 800add4:	e002      	b.n	800addc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800add6:	bf00      	nop
 800add8:	e000      	b.n	800addc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800adda:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800addc:	3720      	adds	r7, #32
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}

0800ade2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800ade2:	b580      	push	{r7, lr}
 800ade4:	b08a      	sub	sp, #40	@ 0x28
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	695b      	ldr	r3, [r3, #20]
 800adf0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800adfa:	2300      	movs	r3, #0
 800adfc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ae04:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800ae06:	6a3b      	ldr	r3, [r7, #32]
 800ae08:	0a1b      	lsrs	r3, r3, #8
 800ae0a:	f003 0301 	and.w	r3, r3, #1
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d016      	beq.n	800ae40 <HAL_I2C_ER_IRQHandler+0x5e>
 800ae12:	69fb      	ldr	r3, [r7, #28]
 800ae14:	0a1b      	lsrs	r3, r3, #8
 800ae16:	f003 0301 	and.w	r3, r3, #1
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d010      	beq.n	800ae40 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800ae1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae20:	f043 0301 	orr.w	r3, r3, #1
 800ae24:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ae2e:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	681a      	ldr	r2, [r3, #0]
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ae3e:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800ae40:	6a3b      	ldr	r3, [r7, #32]
 800ae42:	0a5b      	lsrs	r3, r3, #9
 800ae44:	f003 0301 	and.w	r3, r3, #1
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d00e      	beq.n	800ae6a <HAL_I2C_ER_IRQHandler+0x88>
 800ae4c:	69fb      	ldr	r3, [r7, #28]
 800ae4e:	0a1b      	lsrs	r3, r3, #8
 800ae50:	f003 0301 	and.w	r3, r3, #1
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d008      	beq.n	800ae6a <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800ae58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae5a:	f043 0302 	orr.w	r3, r3, #2
 800ae5e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800ae68:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800ae6a:	6a3b      	ldr	r3, [r7, #32]
 800ae6c:	0a9b      	lsrs	r3, r3, #10
 800ae6e:	f003 0301 	and.w	r3, r3, #1
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d03f      	beq.n	800aef6 <HAL_I2C_ER_IRQHandler+0x114>
 800ae76:	69fb      	ldr	r3, [r7, #28]
 800ae78:	0a1b      	lsrs	r3, r3, #8
 800ae7a:	f003 0301 	and.w	r3, r3, #1
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d039      	beq.n	800aef6 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 800ae82:	7efb      	ldrb	r3, [r7, #27]
 800ae84:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae8a:	b29b      	uxth	r3, r3
 800ae8c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ae94:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae9a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800ae9c:	7ebb      	ldrb	r3, [r7, #26]
 800ae9e:	2b20      	cmp	r3, #32
 800aea0:	d112      	bne.n	800aec8 <HAL_I2C_ER_IRQHandler+0xe6>
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d10f      	bne.n	800aec8 <HAL_I2C_ER_IRQHandler+0xe6>
 800aea8:	7cfb      	ldrb	r3, [r7, #19]
 800aeaa:	2b21      	cmp	r3, #33	@ 0x21
 800aeac:	d008      	beq.n	800aec0 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800aeae:	7cfb      	ldrb	r3, [r7, #19]
 800aeb0:	2b29      	cmp	r3, #41	@ 0x29
 800aeb2:	d005      	beq.n	800aec0 <HAL_I2C_ER_IRQHandler+0xde>
 800aeb4:	7cfb      	ldrb	r3, [r7, #19]
 800aeb6:	2b28      	cmp	r3, #40	@ 0x28
 800aeb8:	d106      	bne.n	800aec8 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	2b21      	cmp	r3, #33	@ 0x21
 800aebe:	d103      	bne.n	800aec8 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f001 f87d 	bl	800bfc0 <I2C_Slave_AF>
 800aec6:	e016      	b.n	800aef6 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800aed0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800aed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aed4:	f043 0304 	orr.w	r3, r3, #4
 800aed8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800aeda:	7efb      	ldrb	r3, [r7, #27]
 800aedc:	2b10      	cmp	r3, #16
 800aede:	d002      	beq.n	800aee6 <HAL_I2C_ER_IRQHandler+0x104>
 800aee0:	7efb      	ldrb	r3, [r7, #27]
 800aee2:	2b40      	cmp	r3, #64	@ 0x40
 800aee4:	d107      	bne.n	800aef6 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	681a      	ldr	r2, [r3, #0]
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aef4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800aef6:	6a3b      	ldr	r3, [r7, #32]
 800aef8:	0adb      	lsrs	r3, r3, #11
 800aefa:	f003 0301 	and.w	r3, r3, #1
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d00e      	beq.n	800af20 <HAL_I2C_ER_IRQHandler+0x13e>
 800af02:	69fb      	ldr	r3, [r7, #28]
 800af04:	0a1b      	lsrs	r3, r3, #8
 800af06:	f003 0301 	and.w	r3, r3, #1
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d008      	beq.n	800af20 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800af0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af10:	f043 0308 	orr.w	r3, r3, #8
 800af14:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800af1e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800af20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af22:	2b00      	cmp	r3, #0
 800af24:	d008      	beq.n	800af38 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800af2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af2c:	431a      	orrs	r2, r3
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f001 f8b8 	bl	800c0a8 <I2C_ITError>
  }
}
 800af38:	bf00      	nop
 800af3a:	3728      	adds	r7, #40	@ 0x28
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}

0800af40 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800af40:	b480      	push	{r7}
 800af42:	b083      	sub	sp, #12
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800af48:	bf00      	nop
 800af4a:	370c      	adds	r7, #12
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bc80      	pop	{r7}
 800af50:	4770      	bx	lr

0800af52 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800af52:	b480      	push	{r7}
 800af54:	b083      	sub	sp, #12
 800af56:	af00      	add	r7, sp, #0
 800af58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800af5a:	bf00      	nop
 800af5c:	370c      	adds	r7, #12
 800af5e:	46bd      	mov	sp, r7
 800af60:	bc80      	pop	{r7}
 800af62:	4770      	bx	lr

0800af64 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800af64:	b480      	push	{r7}
 800af66:	b083      	sub	sp, #12
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800af6c:	bf00      	nop
 800af6e:	370c      	adds	r7, #12
 800af70:	46bd      	mov	sp, r7
 800af72:	bc80      	pop	{r7}
 800af74:	4770      	bx	lr

0800af76 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800af76:	b480      	push	{r7}
 800af78:	b083      	sub	sp, #12
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800af7e:	bf00      	nop
 800af80:	370c      	adds	r7, #12
 800af82:	46bd      	mov	sp, r7
 800af84:	bc80      	pop	{r7}
 800af86:	4770      	bx	lr

0800af88 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800af88:	b480      	push	{r7}
 800af8a:	b083      	sub	sp, #12
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	460b      	mov	r3, r1
 800af92:	70fb      	strb	r3, [r7, #3]
 800af94:	4613      	mov	r3, r2
 800af96:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800af98:	bf00      	nop
 800af9a:	370c      	adds	r7, #12
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bc80      	pop	{r7}
 800afa0:	4770      	bx	lr

0800afa2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800afa2:	b480      	push	{r7}
 800afa4:	b083      	sub	sp, #12
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800afaa:	bf00      	nop
 800afac:	370c      	adds	r7, #12
 800afae:	46bd      	mov	sp, r7
 800afb0:	bc80      	pop	{r7}
 800afb2:	4770      	bx	lr

0800afb4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800afb4:	b480      	push	{r7}
 800afb6:	b083      	sub	sp, #12
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800afbc:	bf00      	nop
 800afbe:	370c      	adds	r7, #12
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bc80      	pop	{r7}
 800afc4:	4770      	bx	lr

0800afc6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800afc6:	b480      	push	{r7}
 800afc8:	b083      	sub	sp, #12
 800afca:	af00      	add	r7, sp, #0
 800afcc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800afce:	bf00      	nop
 800afd0:	370c      	adds	r7, #12
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bc80      	pop	{r7}
 800afd6:	4770      	bx	lr

0800afd8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800afd8:	b480      	push	{r7}
 800afda:	b083      	sub	sp, #12
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800afe0:	bf00      	nop
 800afe2:	370c      	adds	r7, #12
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bc80      	pop	{r7}
 800afe8:	4770      	bx	lr

0800afea <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800afea:	b480      	push	{r7}
 800afec:	b083      	sub	sp, #12
 800afee:	af00      	add	r7, sp, #0
 800aff0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800aff2:	bf00      	nop
 800aff4:	370c      	adds	r7, #12
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bc80      	pop	{r7}
 800affa:	4770      	bx	lr

0800affc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b084      	sub	sp, #16
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b00a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b012:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b018:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d150      	bne.n	800b0c4 <I2C_MasterTransmit_TXE+0xc8>
 800b022:	7bfb      	ldrb	r3, [r7, #15]
 800b024:	2b21      	cmp	r3, #33	@ 0x21
 800b026:	d14d      	bne.n	800b0c4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	2b08      	cmp	r3, #8
 800b02c:	d01d      	beq.n	800b06a <I2C_MasterTransmit_TXE+0x6e>
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	2b20      	cmp	r3, #32
 800b032:	d01a      	beq.n	800b06a <I2C_MasterTransmit_TXE+0x6e>
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b03a:	d016      	beq.n	800b06a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	685a      	ldr	r2, [r3, #4]
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b04a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2211      	movs	r2, #17
 800b050:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2200      	movs	r2, #0
 800b056:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2220      	movs	r2, #32
 800b05e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f7ff ff6c 	bl	800af40 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800b068:	e060      	b.n	800b12c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	685a      	ldr	r2, [r3, #4]
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b078:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	681a      	ldr	r2, [r3, #0]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b088:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2200      	movs	r2, #0
 800b08e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2220      	movs	r2, #32
 800b094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b09e:	b2db      	uxtb	r3, r3
 800b0a0:	2b40      	cmp	r3, #64	@ 0x40
 800b0a2:	d107      	bne.n	800b0b4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f7ff ff81 	bl	800afb4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800b0b2:	e03b      	b.n	800b12c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f7ff ff3f 	bl	800af40 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800b0c2:	e033      	b.n	800b12c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800b0c4:	7bfb      	ldrb	r3, [r7, #15]
 800b0c6:	2b21      	cmp	r3, #33	@ 0x21
 800b0c8:	d005      	beq.n	800b0d6 <I2C_MasterTransmit_TXE+0xda>
 800b0ca:	7bbb      	ldrb	r3, [r7, #14]
 800b0cc:	2b40      	cmp	r3, #64	@ 0x40
 800b0ce:	d12d      	bne.n	800b12c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800b0d0:	7bfb      	ldrb	r3, [r7, #15]
 800b0d2:	2b22      	cmp	r3, #34	@ 0x22
 800b0d4:	d12a      	bne.n	800b12c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b0da:	b29b      	uxth	r3, r3
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d108      	bne.n	800b0f2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	685a      	ldr	r2, [r3, #4]
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b0ee:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800b0f0:	e01c      	b.n	800b12c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b0f8:	b2db      	uxtb	r3, r3
 800b0fa:	2b40      	cmp	r3, #64	@ 0x40
 800b0fc:	d103      	bne.n	800b106 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f000 f88e 	bl	800b220 <I2C_MemoryTransmit_TXE_BTF>
}
 800b104:	e012      	b.n	800b12c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b10a:	781a      	ldrb	r2, [r3, #0]
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b116:	1c5a      	adds	r2, r3, #1
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b120:	b29b      	uxth	r3, r3
 800b122:	3b01      	subs	r3, #1
 800b124:	b29a      	uxth	r2, r3
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800b12a:	e7ff      	b.n	800b12c <I2C_MasterTransmit_TXE+0x130>
 800b12c:	bf00      	nop
 800b12e:	3710      	adds	r7, #16
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b084      	sub	sp, #16
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b140:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b148:	b2db      	uxtb	r3, r3
 800b14a:	2b21      	cmp	r3, #33	@ 0x21
 800b14c:	d164      	bne.n	800b218 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b152:	b29b      	uxth	r3, r3
 800b154:	2b00      	cmp	r3, #0
 800b156:	d012      	beq.n	800b17e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b15c:	781a      	ldrb	r2, [r3, #0]
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b168:	1c5a      	adds	r2, r3, #1
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b172:	b29b      	uxth	r3, r3
 800b174:	3b01      	subs	r3, #1
 800b176:	b29a      	uxth	r2, r3
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800b17c:	e04c      	b.n	800b218 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	2b08      	cmp	r3, #8
 800b182:	d01d      	beq.n	800b1c0 <I2C_MasterTransmit_BTF+0x8c>
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	2b20      	cmp	r3, #32
 800b188:	d01a      	beq.n	800b1c0 <I2C_MasterTransmit_BTF+0x8c>
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b190:	d016      	beq.n	800b1c0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	685a      	ldr	r2, [r3, #4]
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b1a0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2211      	movs	r2, #17
 800b1a6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2220      	movs	r2, #32
 800b1b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	f7ff fec1 	bl	800af40 <HAL_I2C_MasterTxCpltCallback>
}
 800b1be:	e02b      	b.n	800b218 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	685a      	ldr	r2, [r3, #4]
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b1ce:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	681a      	ldr	r2, [r3, #0]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b1de:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2220      	movs	r2, #32
 800b1ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b1f4:	b2db      	uxtb	r3, r3
 800b1f6:	2b40      	cmp	r3, #64	@ 0x40
 800b1f8:	d107      	bne.n	800b20a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f7ff fed6 	bl	800afb4 <HAL_I2C_MemTxCpltCallback>
}
 800b208:	e006      	b.n	800b218 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2200      	movs	r2, #0
 800b20e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f7ff fe94 	bl	800af40 <HAL_I2C_MasterTxCpltCallback>
}
 800b218:	bf00      	nop
 800b21a:	3710      	adds	r7, #16
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}

0800b220 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b084      	sub	sp, #16
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b22e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b234:	2b00      	cmp	r3, #0
 800b236:	d11d      	bne.n	800b274 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b23c:	2b01      	cmp	r3, #1
 800b23e:	d10b      	bne.n	800b258 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b244:	b2da      	uxtb	r2, r3
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b250:	1c9a      	adds	r2, r3, #2
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800b256:	e077      	b.n	800b348 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b25c:	b29b      	uxth	r3, r3
 800b25e:	121b      	asrs	r3, r3, #8
 800b260:	b2da      	uxtb	r2, r3
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b26c:	1c5a      	adds	r2, r3, #1
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800b272:	e069      	b.n	800b348 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b278:	2b01      	cmp	r3, #1
 800b27a:	d10b      	bne.n	800b294 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b280:	b2da      	uxtb	r2, r3
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b28c:	1c5a      	adds	r2, r3, #1
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800b292:	e059      	b.n	800b348 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b298:	2b02      	cmp	r3, #2
 800b29a:	d152      	bne.n	800b342 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800b29c:	7bfb      	ldrb	r3, [r7, #15]
 800b29e:	2b22      	cmp	r3, #34	@ 0x22
 800b2a0:	d10d      	bne.n	800b2be <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	681a      	ldr	r2, [r3, #0]
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b2b0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2b6:	1c5a      	adds	r2, r3, #1
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800b2bc:	e044      	b.n	800b348 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b2c2:	b29b      	uxth	r3, r3
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d015      	beq.n	800b2f4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800b2c8:	7bfb      	ldrb	r3, [r7, #15]
 800b2ca:	2b21      	cmp	r3, #33	@ 0x21
 800b2cc:	d112      	bne.n	800b2f4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2d2:	781a      	ldrb	r2, [r3, #0]
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2de:	1c5a      	adds	r2, r3, #1
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b2e8:	b29b      	uxth	r3, r3
 800b2ea:	3b01      	subs	r3, #1
 800b2ec:	b29a      	uxth	r2, r3
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800b2f2:	e029      	b.n	800b348 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b2f8:	b29b      	uxth	r3, r3
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d124      	bne.n	800b348 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800b2fe:	7bfb      	ldrb	r3, [r7, #15]
 800b300:	2b21      	cmp	r3, #33	@ 0x21
 800b302:	d121      	bne.n	800b348 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	685a      	ldr	r2, [r3, #4]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b312:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	681a      	ldr	r2, [r3, #0]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b322:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2200      	movs	r2, #0
 800b328:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2220      	movs	r2, #32
 800b32e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2200      	movs	r2, #0
 800b336:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f7ff fe3a 	bl	800afb4 <HAL_I2C_MemTxCpltCallback>
}
 800b340:	e002      	b.n	800b348 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f7ff f85e 	bl	800a404 <I2C_Flush_DR>
}
 800b348:	bf00      	nop
 800b34a:	3710      	adds	r7, #16
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b084      	sub	sp, #16
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b35e:	b2db      	uxtb	r3, r3
 800b360:	2b22      	cmp	r3, #34	@ 0x22
 800b362:	f040 80b9 	bne.w	800b4d8 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b36a:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b370:	b29b      	uxth	r3, r3
 800b372:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	2b03      	cmp	r3, #3
 800b378:	d921      	bls.n	800b3be <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	691a      	ldr	r2, [r3, #16]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b384:	b2d2      	uxtb	r2, r2
 800b386:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b38c:	1c5a      	adds	r2, r3, #1
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b396:	b29b      	uxth	r3, r3
 800b398:	3b01      	subs	r3, #1
 800b39a:	b29a      	uxth	r2, r3
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b3a4:	b29b      	uxth	r3, r3
 800b3a6:	2b03      	cmp	r3, #3
 800b3a8:	f040 8096 	bne.w	800b4d8 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	685a      	ldr	r2, [r3, #4]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b3ba:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800b3bc:	e08c      	b.n	800b4d8 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3c2:	2b02      	cmp	r3, #2
 800b3c4:	d07f      	beq.n	800b4c6 <I2C_MasterReceive_RXNE+0x176>
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	2b01      	cmp	r3, #1
 800b3ca:	d002      	beq.n	800b3d2 <I2C_MasterReceive_RXNE+0x82>
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d179      	bne.n	800b4c6 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f001 fb3c 	bl	800ca50 <I2C_WaitOnSTOPRequestThroughIT>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d14c      	bne.n	800b478 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	681a      	ldr	r2, [r3, #0]
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b3ec:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	685a      	ldr	r2, [r3, #4]
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b3fc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	691a      	ldr	r2, [r3, #16]
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b408:	b2d2      	uxtb	r2, r2
 800b40a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b410:	1c5a      	adds	r2, r3, #1
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b41a:	b29b      	uxth	r3, r3
 800b41c:	3b01      	subs	r3, #1
 800b41e:	b29a      	uxth	r2, r3
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2220      	movs	r2, #32
 800b428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b432:	b2db      	uxtb	r3, r3
 800b434:	2b40      	cmp	r3, #64	@ 0x40
 800b436:	d10a      	bne.n	800b44e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2200      	movs	r2, #0
 800b43c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2200      	movs	r2, #0
 800b444:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f7ff fdbd 	bl	800afc6 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800b44c:	e044      	b.n	800b4d8 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2200      	movs	r2, #0
 800b452:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	2b08      	cmp	r3, #8
 800b45a:	d002      	beq.n	800b462 <I2C_MasterReceive_RXNE+0x112>
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	2b20      	cmp	r3, #32
 800b460:	d103      	bne.n	800b46a <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2200      	movs	r2, #0
 800b466:	631a      	str	r2, [r3, #48]	@ 0x30
 800b468:	e002      	b.n	800b470 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2212      	movs	r2, #18
 800b46e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f7ff fd6e 	bl	800af52 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800b476:	e02f      	b.n	800b4d8 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	685a      	ldr	r2, [r3, #4]
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b486:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	691a      	ldr	r2, [r3, #16]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b492:	b2d2      	uxtb	r2, r2
 800b494:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b49a:	1c5a      	adds	r2, r3, #1
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b4a4:	b29b      	uxth	r3, r3
 800b4a6:	3b01      	subs	r3, #1
 800b4a8:	b29a      	uxth	r2, r3
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2220      	movs	r2, #32
 800b4b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f7ff fd8a 	bl	800afd8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800b4c4:	e008      	b.n	800b4d8 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	685a      	ldr	r2, [r3, #4]
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b4d4:	605a      	str	r2, [r3, #4]
}
 800b4d6:	e7ff      	b.n	800b4d8 <I2C_MasterReceive_RXNE+0x188>
 800b4d8:	bf00      	nop
 800b4da:	3710      	adds	r7, #16
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}

0800b4e0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b084      	sub	sp, #16
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4ec:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b4f2:	b29b      	uxth	r3, r3
 800b4f4:	2b04      	cmp	r3, #4
 800b4f6:	d11b      	bne.n	800b530 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	685a      	ldr	r2, [r3, #4]
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b506:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	691a      	ldr	r2, [r3, #16]
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b512:	b2d2      	uxtb	r2, r2
 800b514:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b51a:	1c5a      	adds	r2, r3, #1
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b524:	b29b      	uxth	r3, r3
 800b526:	3b01      	subs	r3, #1
 800b528:	b29a      	uxth	r2, r3
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800b52e:	e0c4      	b.n	800b6ba <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b534:	b29b      	uxth	r3, r3
 800b536:	2b03      	cmp	r3, #3
 800b538:	d129      	bne.n	800b58e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	685a      	ldr	r2, [r3, #4]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b548:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	2b04      	cmp	r3, #4
 800b54e:	d00a      	beq.n	800b566 <I2C_MasterReceive_BTF+0x86>
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	2b02      	cmp	r3, #2
 800b554:	d007      	beq.n	800b566 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	681a      	ldr	r2, [r3, #0]
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b564:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	691a      	ldr	r2, [r3, #16]
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b570:	b2d2      	uxtb	r2, r2
 800b572:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b578:	1c5a      	adds	r2, r3, #1
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b582:	b29b      	uxth	r3, r3
 800b584:	3b01      	subs	r3, #1
 800b586:	b29a      	uxth	r2, r3
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800b58c:	e095      	b.n	800b6ba <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b592:	b29b      	uxth	r3, r3
 800b594:	2b02      	cmp	r3, #2
 800b596:	d17d      	bne.n	800b694 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	2b01      	cmp	r3, #1
 800b59c:	d002      	beq.n	800b5a4 <I2C_MasterReceive_BTF+0xc4>
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	2b10      	cmp	r3, #16
 800b5a2:	d108      	bne.n	800b5b6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	681a      	ldr	r2, [r3, #0]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b5b2:	601a      	str	r2, [r3, #0]
 800b5b4:	e016      	b.n	800b5e4 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	2b04      	cmp	r3, #4
 800b5ba:	d002      	beq.n	800b5c2 <I2C_MasterReceive_BTF+0xe2>
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	2b02      	cmp	r3, #2
 800b5c0:	d108      	bne.n	800b5d4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	681a      	ldr	r2, [r3, #0]
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b5d0:	601a      	str	r2, [r3, #0]
 800b5d2:	e007      	b.n	800b5e4 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	681a      	ldr	r2, [r3, #0]
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b5e2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	691a      	ldr	r2, [r3, #16]
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5ee:	b2d2      	uxtb	r2, r2
 800b5f0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5f6:	1c5a      	adds	r2, r3, #1
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b600:	b29b      	uxth	r3, r3
 800b602:	3b01      	subs	r3, #1
 800b604:	b29a      	uxth	r2, r3
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	691a      	ldr	r2, [r3, #16]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b614:	b2d2      	uxtb	r2, r2
 800b616:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b61c:	1c5a      	adds	r2, r3, #1
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b626:	b29b      	uxth	r3, r3
 800b628:	3b01      	subs	r3, #1
 800b62a:	b29a      	uxth	r2, r3
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	685a      	ldr	r2, [r3, #4]
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800b63e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2220      	movs	r2, #32
 800b644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b64e:	b2db      	uxtb	r3, r3
 800b650:	2b40      	cmp	r3, #64	@ 0x40
 800b652:	d10a      	bne.n	800b66a <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2200      	movs	r2, #0
 800b658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2200      	movs	r2, #0
 800b660:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f7ff fcaf 	bl	800afc6 <HAL_I2C_MemRxCpltCallback>
}
 800b668:	e027      	b.n	800b6ba <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2200      	movs	r2, #0
 800b66e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	2b08      	cmp	r3, #8
 800b676:	d002      	beq.n	800b67e <I2C_MasterReceive_BTF+0x19e>
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	2b20      	cmp	r3, #32
 800b67c:	d103      	bne.n	800b686 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2200      	movs	r2, #0
 800b682:	631a      	str	r2, [r3, #48]	@ 0x30
 800b684:	e002      	b.n	800b68c <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2212      	movs	r2, #18
 800b68a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f7ff fc60 	bl	800af52 <HAL_I2C_MasterRxCpltCallback>
}
 800b692:	e012      	b.n	800b6ba <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	691a      	ldr	r2, [r3, #16]
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b69e:	b2d2      	uxtb	r2, r2
 800b6a0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6a6:	1c5a      	adds	r2, r3, #1
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b6b0:	b29b      	uxth	r3, r3
 800b6b2:	3b01      	subs	r3, #1
 800b6b4:	b29a      	uxth	r2, r3
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800b6ba:	bf00      	nop
 800b6bc:	3710      	adds	r7, #16
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}

0800b6c2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800b6c2:	b480      	push	{r7}
 800b6c4:	b083      	sub	sp, #12
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b6d0:	b2db      	uxtb	r3, r3
 800b6d2:	2b40      	cmp	r3, #64	@ 0x40
 800b6d4:	d117      	bne.n	800b706 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d109      	bne.n	800b6f2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b6e2:	b2db      	uxtb	r3, r3
 800b6e4:	461a      	mov	r2, r3
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b6ee:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800b6f0:	e067      	b.n	800b7c2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b6f6:	b2db      	uxtb	r3, r3
 800b6f8:	f043 0301 	orr.w	r3, r3, #1
 800b6fc:	b2da      	uxtb	r2, r3
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	611a      	str	r2, [r3, #16]
}
 800b704:	e05d      	b.n	800b7c2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	691b      	ldr	r3, [r3, #16]
 800b70a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b70e:	d133      	bne.n	800b778 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b716:	b2db      	uxtb	r3, r3
 800b718:	2b21      	cmp	r3, #33	@ 0x21
 800b71a:	d109      	bne.n	800b730 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b720:	b2db      	uxtb	r3, r3
 800b722:	461a      	mov	r2, r3
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b72c:	611a      	str	r2, [r3, #16]
 800b72e:	e008      	b.n	800b742 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b734:	b2db      	uxtb	r3, r3
 800b736:	f043 0301 	orr.w	r3, r3, #1
 800b73a:	b2da      	uxtb	r2, r3
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b746:	2b00      	cmp	r3, #0
 800b748:	d004      	beq.n	800b754 <I2C_Master_SB+0x92>
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b74e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b750:	2b00      	cmp	r3, #0
 800b752:	d108      	bne.n	800b766 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d032      	beq.n	800b7c2 <I2C_Master_SB+0x100>
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b762:	2b00      	cmp	r3, #0
 800b764:	d02d      	beq.n	800b7c2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	685a      	ldr	r2, [r3, #4]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b774:	605a      	str	r2, [r3, #4]
}
 800b776:	e024      	b.n	800b7c2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d10e      	bne.n	800b79e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b784:	b29b      	uxth	r3, r3
 800b786:	11db      	asrs	r3, r3, #7
 800b788:	b2db      	uxtb	r3, r3
 800b78a:	f003 0306 	and.w	r3, r3, #6
 800b78e:	b2db      	uxtb	r3, r3
 800b790:	f063 030f 	orn	r3, r3, #15
 800b794:	b2da      	uxtb	r2, r3
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	611a      	str	r2, [r3, #16]
}
 800b79c:	e011      	b.n	800b7c2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7a2:	2b01      	cmp	r3, #1
 800b7a4:	d10d      	bne.n	800b7c2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b7aa:	b29b      	uxth	r3, r3
 800b7ac:	11db      	asrs	r3, r3, #7
 800b7ae:	b2db      	uxtb	r3, r3
 800b7b0:	f003 0306 	and.w	r3, r3, #6
 800b7b4:	b2db      	uxtb	r3, r3
 800b7b6:	f063 030e 	orn	r3, r3, #14
 800b7ba:	b2da      	uxtb	r2, r3
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	611a      	str	r2, [r3, #16]
}
 800b7c2:	bf00      	nop
 800b7c4:	370c      	adds	r7, #12
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bc80      	pop	{r7}
 800b7ca:	4770      	bx	lr

0800b7cc <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b083      	sub	sp, #12
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b7d8:	b2da      	uxtb	r2, r3
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d004      	beq.n	800b7f2 <I2C_Master_ADD10+0x26>
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d108      	bne.n	800b804 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d00c      	beq.n	800b814 <I2C_Master_ADD10+0x48>
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b800:	2b00      	cmp	r3, #0
 800b802:	d007      	beq.n	800b814 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	685a      	ldr	r2, [r3, #4]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b812:	605a      	str	r2, [r3, #4]
  }
}
 800b814:	bf00      	nop
 800b816:	370c      	adds	r7, #12
 800b818:	46bd      	mov	sp, r7
 800b81a:	bc80      	pop	{r7}
 800b81c:	4770      	bx	lr

0800b81e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800b81e:	b480      	push	{r7}
 800b820:	b091      	sub	sp, #68	@ 0x44
 800b822:	af00      	add	r7, sp, #0
 800b824:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b82c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b834:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b83a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b842:	b2db      	uxtb	r3, r3
 800b844:	2b22      	cmp	r3, #34	@ 0x22
 800b846:	f040 8174 	bne.w	800bb32 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d10f      	bne.n	800b872 <I2C_Master_ADDR+0x54>
 800b852:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b856:	2b40      	cmp	r3, #64	@ 0x40
 800b858:	d10b      	bne.n	800b872 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b85a:	2300      	movs	r3, #0
 800b85c:	633b      	str	r3, [r7, #48]	@ 0x30
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	695b      	ldr	r3, [r3, #20]
 800b864:	633b      	str	r3, [r7, #48]	@ 0x30
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	699b      	ldr	r3, [r3, #24]
 800b86c:	633b      	str	r3, [r7, #48]	@ 0x30
 800b86e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b870:	e16b      	b.n	800bb4a <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b876:	2b00      	cmp	r3, #0
 800b878:	d11d      	bne.n	800b8b6 <I2C_Master_ADDR+0x98>
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	691b      	ldr	r3, [r3, #16]
 800b87e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b882:	d118      	bne.n	800b8b6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b884:	2300      	movs	r3, #0
 800b886:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	695b      	ldr	r3, [r3, #20]
 800b88e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	699b      	ldr	r3, [r3, #24]
 800b896:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	681a      	ldr	r2, [r3, #0]
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b8a8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8ae:	1c5a      	adds	r2, r3, #1
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	651a      	str	r2, [r3, #80]	@ 0x50
 800b8b4:	e149      	b.n	800bb4a <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b8ba:	b29b      	uxth	r3, r3
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d113      	bne.n	800b8e8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	695b      	ldr	r3, [r3, #20]
 800b8ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	699b      	ldr	r3, [r3, #24]
 800b8d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b8d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	681a      	ldr	r2, [r3, #0]
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b8e4:	601a      	str	r2, [r3, #0]
 800b8e6:	e120      	b.n	800bb2a <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b8ec:	b29b      	uxth	r3, r3
 800b8ee:	2b01      	cmp	r3, #1
 800b8f0:	f040 808a 	bne.w	800ba08 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800b8f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8f6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b8fa:	d137      	bne.n	800b96c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	681a      	ldr	r2, [r3, #0]
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b90a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b916:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b91a:	d113      	bne.n	800b944 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	681a      	ldr	r2, [r3, #0]
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b92a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b92c:	2300      	movs	r3, #0
 800b92e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	695b      	ldr	r3, [r3, #20]
 800b936:	627b      	str	r3, [r7, #36]	@ 0x24
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	699b      	ldr	r3, [r3, #24]
 800b93e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b942:	e0f2      	b.n	800bb2a <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b944:	2300      	movs	r3, #0
 800b946:	623b      	str	r3, [r7, #32]
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	695b      	ldr	r3, [r3, #20]
 800b94e:	623b      	str	r3, [r7, #32]
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	699b      	ldr	r3, [r3, #24]
 800b956:	623b      	str	r3, [r7, #32]
 800b958:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	681a      	ldr	r2, [r3, #0]
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b968:	601a      	str	r2, [r3, #0]
 800b96a:	e0de      	b.n	800bb2a <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800b96c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b96e:	2b08      	cmp	r3, #8
 800b970:	d02e      	beq.n	800b9d0 <I2C_Master_ADDR+0x1b2>
 800b972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b974:	2b20      	cmp	r3, #32
 800b976:	d02b      	beq.n	800b9d0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800b978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b97a:	2b12      	cmp	r3, #18
 800b97c:	d102      	bne.n	800b984 <I2C_Master_ADDR+0x166>
 800b97e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b980:	2b01      	cmp	r3, #1
 800b982:	d125      	bne.n	800b9d0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800b984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b986:	2b04      	cmp	r3, #4
 800b988:	d00e      	beq.n	800b9a8 <I2C_Master_ADDR+0x18a>
 800b98a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b98c:	2b02      	cmp	r3, #2
 800b98e:	d00b      	beq.n	800b9a8 <I2C_Master_ADDR+0x18a>
 800b990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b992:	2b10      	cmp	r3, #16
 800b994:	d008      	beq.n	800b9a8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	681a      	ldr	r2, [r3, #0]
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b9a4:	601a      	str	r2, [r3, #0]
 800b9a6:	e007      	b.n	800b9b8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	681a      	ldr	r2, [r3, #0]
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b9b6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	61fb      	str	r3, [r7, #28]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	695b      	ldr	r3, [r3, #20]
 800b9c2:	61fb      	str	r3, [r7, #28]
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	699b      	ldr	r3, [r3, #24]
 800b9ca:	61fb      	str	r3, [r7, #28]
 800b9cc:	69fb      	ldr	r3, [r7, #28]
 800b9ce:	e0ac      	b.n	800bb2a <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	681a      	ldr	r2, [r3, #0]
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b9de:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	61bb      	str	r3, [r7, #24]
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	695b      	ldr	r3, [r3, #20]
 800b9ea:	61bb      	str	r3, [r7, #24]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	699b      	ldr	r3, [r3, #24]
 800b9f2:	61bb      	str	r3, [r7, #24]
 800b9f4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	681a      	ldr	r2, [r3, #0]
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ba04:	601a      	str	r2, [r3, #0]
 800ba06:	e090      	b.n	800bb2a <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ba0c:	b29b      	uxth	r3, r3
 800ba0e:	2b02      	cmp	r3, #2
 800ba10:	d158      	bne.n	800bac4 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800ba12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba14:	2b04      	cmp	r3, #4
 800ba16:	d021      	beq.n	800ba5c <I2C_Master_ADDR+0x23e>
 800ba18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba1a:	2b02      	cmp	r3, #2
 800ba1c:	d01e      	beq.n	800ba5c <I2C_Master_ADDR+0x23e>
 800ba1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba20:	2b10      	cmp	r3, #16
 800ba22:	d01b      	beq.n	800ba5c <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	681a      	ldr	r2, [r3, #0]
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ba32:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ba34:	2300      	movs	r3, #0
 800ba36:	617b      	str	r3, [r7, #20]
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	695b      	ldr	r3, [r3, #20]
 800ba3e:	617b      	str	r3, [r7, #20]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	699b      	ldr	r3, [r3, #24]
 800ba46:	617b      	str	r3, [r7, #20]
 800ba48:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	681a      	ldr	r2, [r3, #0]
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ba58:	601a      	str	r2, [r3, #0]
 800ba5a:	e012      	b.n	800ba82 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	681a      	ldr	r2, [r3, #0]
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ba6a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	613b      	str	r3, [r7, #16]
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	695b      	ldr	r3, [r3, #20]
 800ba76:	613b      	str	r3, [r7, #16]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	699b      	ldr	r3, [r3, #24]
 800ba7e:	613b      	str	r3, [r7, #16]
 800ba80:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	685b      	ldr	r3, [r3, #4]
 800ba88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ba8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ba90:	d14b      	bne.n	800bb2a <I2C_Master_ADDR+0x30c>
 800ba92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba94:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800ba98:	d00b      	beq.n	800bab2 <I2C_Master_ADDR+0x294>
 800ba9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba9c:	2b01      	cmp	r3, #1
 800ba9e:	d008      	beq.n	800bab2 <I2C_Master_ADDR+0x294>
 800baa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baa2:	2b08      	cmp	r3, #8
 800baa4:	d005      	beq.n	800bab2 <I2C_Master_ADDR+0x294>
 800baa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baa8:	2b10      	cmp	r3, #16
 800baaa:	d002      	beq.n	800bab2 <I2C_Master_ADDR+0x294>
 800baac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baae:	2b20      	cmp	r3, #32
 800bab0:	d13b      	bne.n	800bb2a <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	685a      	ldr	r2, [r3, #4]
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800bac0:	605a      	str	r2, [r3, #4]
 800bac2:	e032      	b.n	800bb2a <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	681a      	ldr	r2, [r3, #0]
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bad2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	685b      	ldr	r3, [r3, #4]
 800bada:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bade:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bae2:	d117      	bne.n	800bb14 <I2C_Master_ADDR+0x2f6>
 800bae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bae6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800baea:	d00b      	beq.n	800bb04 <I2C_Master_ADDR+0x2e6>
 800baec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baee:	2b01      	cmp	r3, #1
 800baf0:	d008      	beq.n	800bb04 <I2C_Master_ADDR+0x2e6>
 800baf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baf4:	2b08      	cmp	r3, #8
 800baf6:	d005      	beq.n	800bb04 <I2C_Master_ADDR+0x2e6>
 800baf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bafa:	2b10      	cmp	r3, #16
 800bafc:	d002      	beq.n	800bb04 <I2C_Master_ADDR+0x2e6>
 800bafe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb00:	2b20      	cmp	r3, #32
 800bb02:	d107      	bne.n	800bb14 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	685a      	ldr	r2, [r3, #4]
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800bb12:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bb14:	2300      	movs	r3, #0
 800bb16:	60fb      	str	r3, [r7, #12]
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	695b      	ldr	r3, [r3, #20]
 800bb1e:	60fb      	str	r3, [r7, #12]
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	699b      	ldr	r3, [r3, #24]
 800bb26:	60fb      	str	r3, [r7, #12]
 800bb28:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800bb30:	e00b      	b.n	800bb4a <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bb32:	2300      	movs	r3, #0
 800bb34:	60bb      	str	r3, [r7, #8]
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	695b      	ldr	r3, [r3, #20]
 800bb3c:	60bb      	str	r3, [r7, #8]
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	699b      	ldr	r3, [r3, #24]
 800bb44:	60bb      	str	r3, [r7, #8]
 800bb46:	68bb      	ldr	r3, [r7, #8]
}
 800bb48:	e7ff      	b.n	800bb4a <I2C_Master_ADDR+0x32c>
 800bb4a:	bf00      	nop
 800bb4c:	3744      	adds	r7, #68	@ 0x44
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bc80      	pop	{r7}
 800bb52:	4770      	bx	lr

0800bb54 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b084      	sub	sp, #16
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bb62:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bb68:	b29b      	uxth	r3, r3
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d02b      	beq.n	800bbc6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb72:	781a      	ldrb	r2, [r3, #0]
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb7e:	1c5a      	adds	r2, r3, #1
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bb88:	b29b      	uxth	r3, r3
 800bb8a:	3b01      	subs	r3, #1
 800bb8c:	b29a      	uxth	r2, r3
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bb96:	b29b      	uxth	r3, r3
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d114      	bne.n	800bbc6 <I2C_SlaveTransmit_TXE+0x72>
 800bb9c:	7bfb      	ldrb	r3, [r7, #15]
 800bb9e:	2b29      	cmp	r3, #41	@ 0x29
 800bba0:	d111      	bne.n	800bbc6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	685a      	ldr	r2, [r3, #4]
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bbb0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2221      	movs	r2, #33	@ 0x21
 800bbb6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2228      	movs	r2, #40	@ 0x28
 800bbbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f7ff f9cf 	bl	800af64 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800bbc6:	bf00      	nop
 800bbc8:	3710      	adds	r7, #16
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}

0800bbce <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800bbce:	b480      	push	{r7}
 800bbd0:	b083      	sub	sp, #12
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bbda:	b29b      	uxth	r3, r3
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d011      	beq.n	800bc04 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbe4:	781a      	ldrb	r2, [r3, #0]
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbf0:	1c5a      	adds	r2, r3, #1
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bbfa:	b29b      	uxth	r3, r3
 800bbfc:	3b01      	subs	r3, #1
 800bbfe:	b29a      	uxth	r2, r3
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800bc04:	bf00      	nop
 800bc06:	370c      	adds	r7, #12
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bc80      	pop	{r7}
 800bc0c:	4770      	bx	lr

0800bc0e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800bc0e:	b580      	push	{r7, lr}
 800bc10:	b084      	sub	sp, #16
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bc1c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bc22:	b29b      	uxth	r3, r3
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d02c      	beq.n	800bc82 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	691a      	ldr	r2, [r3, #16]
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc32:	b2d2      	uxtb	r2, r2
 800bc34:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc3a:	1c5a      	adds	r2, r3, #1
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bc44:	b29b      	uxth	r3, r3
 800bc46:	3b01      	subs	r3, #1
 800bc48:	b29a      	uxth	r2, r3
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bc52:	b29b      	uxth	r3, r3
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d114      	bne.n	800bc82 <I2C_SlaveReceive_RXNE+0x74>
 800bc58:	7bfb      	ldrb	r3, [r7, #15]
 800bc5a:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc5c:	d111      	bne.n	800bc82 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	685a      	ldr	r2, [r3, #4]
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bc6c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2222      	movs	r2, #34	@ 0x22
 800bc72:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2228      	movs	r2, #40	@ 0x28
 800bc78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f7ff f97a 	bl	800af76 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800bc82:	bf00      	nop
 800bc84:	3710      	adds	r7, #16
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}

0800bc8a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800bc8a:	b480      	push	{r7}
 800bc8c:	b083      	sub	sp, #12
 800bc8e:	af00      	add	r7, sp, #0
 800bc90:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bc96:	b29b      	uxth	r3, r3
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d012      	beq.n	800bcc2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	691a      	ldr	r2, [r3, #16]
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bca6:	b2d2      	uxtb	r2, r2
 800bca8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcae:	1c5a      	adds	r2, r3, #1
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bcb8:	b29b      	uxth	r3, r3
 800bcba:	3b01      	subs	r3, #1
 800bcbc:	b29a      	uxth	r2, r3
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800bcc2:	bf00      	nop
 800bcc4:	370c      	adds	r7, #12
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bc80      	pop	{r7}
 800bcca:	4770      	bx	lr

0800bccc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b084      	sub	sp, #16
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
 800bcd4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bce0:	b2db      	uxtb	r3, r3
 800bce2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800bce6:	2b28      	cmp	r3, #40	@ 0x28
 800bce8:	d127      	bne.n	800bd3a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	685a      	ldr	r2, [r3, #4]
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bcf8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	089b      	lsrs	r3, r3, #2
 800bcfe:	f003 0301 	and.w	r3, r3, #1
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d101      	bne.n	800bd0a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800bd06:	2301      	movs	r3, #1
 800bd08:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	09db      	lsrs	r3, r3, #7
 800bd0e:	f003 0301 	and.w	r3, r3, #1
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d103      	bne.n	800bd1e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	68db      	ldr	r3, [r3, #12]
 800bd1a:	81bb      	strh	r3, [r7, #12]
 800bd1c:	e002      	b.n	800bd24 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	699b      	ldr	r3, [r3, #24]
 800bd22:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2200      	movs	r2, #0
 800bd28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800bd2c:	89ba      	ldrh	r2, [r7, #12]
 800bd2e:	7bfb      	ldrb	r3, [r7, #15]
 800bd30:	4619      	mov	r1, r3
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	f7ff f928 	bl	800af88 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800bd38:	e00e      	b.n	800bd58 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	60bb      	str	r3, [r7, #8]
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	695b      	ldr	r3, [r3, #20]
 800bd44:	60bb      	str	r3, [r7, #8]
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	699b      	ldr	r3, [r3, #24]
 800bd4c:	60bb      	str	r3, [r7, #8]
 800bd4e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2200      	movs	r2, #0
 800bd54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800bd58:	bf00      	nop
 800bd5a:	3710      	adds	r7, #16
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}

0800bd60 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b084      	sub	sp, #16
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bd6e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	685a      	ldr	r2, [r3, #4]
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800bd7e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800bd80:	2300      	movs	r3, #0
 800bd82:	60bb      	str	r3, [r7, #8]
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	695b      	ldr	r3, [r3, #20]
 800bd8a:	60bb      	str	r3, [r7, #8]
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	681a      	ldr	r2, [r3, #0]
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f042 0201 	orr.w	r2, r2, #1
 800bd9a:	601a      	str	r2, [r3, #0]
 800bd9c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	681a      	ldr	r2, [r3, #0]
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bdac:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	685b      	ldr	r3, [r3, #4]
 800bdb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bdb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bdbc:	d172      	bne.n	800bea4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800bdbe:	7bfb      	ldrb	r3, [r7, #15]
 800bdc0:	2b22      	cmp	r3, #34	@ 0x22
 800bdc2:	d002      	beq.n	800bdca <I2C_Slave_STOPF+0x6a>
 800bdc4:	7bfb      	ldrb	r3, [r7, #15]
 800bdc6:	2b2a      	cmp	r3, #42	@ 0x2a
 800bdc8:	d135      	bne.n	800be36 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	685b      	ldr	r3, [r3, #4]
 800bdd2:	b29a      	uxth	r2, r3
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bddc:	b29b      	uxth	r3, r3
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d005      	beq.n	800bdee <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bde6:	f043 0204 	orr.w	r2, r3, #4
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	685a      	ldr	r2, [r3, #4]
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800bdfc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be02:	4618      	mov	r0, r3
 800be04:	f7fd feda 	bl	8009bbc <HAL_DMA_GetState>
 800be08:	4603      	mov	r3, r0
 800be0a:	2b01      	cmp	r3, #1
 800be0c:	d049      	beq.n	800bea2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be12:	4a69      	ldr	r2, [pc, #420]	@ (800bfb8 <I2C_Slave_STOPF+0x258>)
 800be14:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be1a:	4618      	mov	r0, r3
 800be1c:	f7fd fb8a 	bl	8009534 <HAL_DMA_Abort_IT>
 800be20:	4603      	mov	r3, r0
 800be22:	2b00      	cmp	r3, #0
 800be24:	d03d      	beq.n	800bea2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be2c:	687a      	ldr	r2, [r7, #4]
 800be2e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800be30:	4610      	mov	r0, r2
 800be32:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800be34:	e035      	b.n	800bea2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	685b      	ldr	r3, [r3, #4]
 800be3e:	b29a      	uxth	r2, r3
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800be48:	b29b      	uxth	r3, r3
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d005      	beq.n	800be5a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be52:	f043 0204 	orr.w	r2, r3, #4
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	685a      	ldr	r2, [r3, #4]
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800be68:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be6e:	4618      	mov	r0, r3
 800be70:	f7fd fea4 	bl	8009bbc <HAL_DMA_GetState>
 800be74:	4603      	mov	r3, r0
 800be76:	2b01      	cmp	r3, #1
 800be78:	d014      	beq.n	800bea4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be7e:	4a4e      	ldr	r2, [pc, #312]	@ (800bfb8 <I2C_Slave_STOPF+0x258>)
 800be80:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be86:	4618      	mov	r0, r3
 800be88:	f7fd fb54 	bl	8009534 <HAL_DMA_Abort_IT>
 800be8c:	4603      	mov	r3, r0
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d008      	beq.n	800bea4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be98:	687a      	ldr	r2, [r7, #4]
 800be9a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800be9c:	4610      	mov	r0, r2
 800be9e:	4798      	blx	r3
 800bea0:	e000      	b.n	800bea4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800bea2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bea8:	b29b      	uxth	r3, r3
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d03e      	beq.n	800bf2c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	695b      	ldr	r3, [r3, #20]
 800beb4:	f003 0304 	and.w	r3, r3, #4
 800beb8:	2b04      	cmp	r3, #4
 800beba:	d112      	bne.n	800bee2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	691a      	ldr	r2, [r3, #16]
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bec6:	b2d2      	uxtb	r2, r2
 800bec8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bece:	1c5a      	adds	r2, r3, #1
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bed8:	b29b      	uxth	r3, r3
 800beda:	3b01      	subs	r3, #1
 800bedc:	b29a      	uxth	r2, r3
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	695b      	ldr	r3, [r3, #20]
 800bee8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800beec:	2b40      	cmp	r3, #64	@ 0x40
 800beee:	d112      	bne.n	800bf16 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	691a      	ldr	r2, [r3, #16]
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800befa:	b2d2      	uxtb	r2, r2
 800befc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf02:	1c5a      	adds	r2, r3, #1
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bf0c:	b29b      	uxth	r3, r3
 800bf0e:	3b01      	subs	r3, #1
 800bf10:	b29a      	uxth	r2, r3
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bf1a:	b29b      	uxth	r3, r3
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d005      	beq.n	800bf2c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf24:	f043 0204 	orr.w	r2, r3, #4
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d003      	beq.n	800bf3c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f000 f8b7 	bl	800c0a8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800bf3a:	e039      	b.n	800bfb0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800bf3c:	7bfb      	ldrb	r3, [r7, #15]
 800bf3e:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf40:	d109      	bne.n	800bf56 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2200      	movs	r2, #0
 800bf46:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2228      	movs	r2, #40	@ 0x28
 800bf4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	f7ff f810 	bl	800af76 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bf5c:	b2db      	uxtb	r3, r3
 800bf5e:	2b28      	cmp	r3, #40	@ 0x28
 800bf60:	d111      	bne.n	800bf86 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	4a15      	ldr	r2, [pc, #84]	@ (800bfbc <I2C_Slave_STOPF+0x25c>)
 800bf66:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2220      	movs	r2, #32
 800bf72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	2200      	movs	r2, #0
 800bf7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f7ff f80f 	bl	800afa2 <HAL_I2C_ListenCpltCallback>
}
 800bf84:	e014      	b.n	800bfb0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf8a:	2b22      	cmp	r3, #34	@ 0x22
 800bf8c:	d002      	beq.n	800bf94 <I2C_Slave_STOPF+0x234>
 800bf8e:	7bfb      	ldrb	r3, [r7, #15]
 800bf90:	2b22      	cmp	r3, #34	@ 0x22
 800bf92:	d10d      	bne.n	800bfb0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2200      	movs	r2, #0
 800bf98:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2220      	movs	r2, #32
 800bf9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f7fe ffe3 	bl	800af76 <HAL_I2C_SlaveRxCpltCallback>
}
 800bfb0:	bf00      	nop
 800bfb2:	3710      	adds	r7, #16
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}
 800bfb8:	0800c5ad 	.word	0x0800c5ad
 800bfbc:	ffff0000 	.word	0xffff0000

0800bfc0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b084      	sub	sp, #16
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bfce:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfd4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	2b08      	cmp	r3, #8
 800bfda:	d002      	beq.n	800bfe2 <I2C_Slave_AF+0x22>
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	2b20      	cmp	r3, #32
 800bfe0:	d129      	bne.n	800c036 <I2C_Slave_AF+0x76>
 800bfe2:	7bfb      	ldrb	r3, [r7, #15]
 800bfe4:	2b28      	cmp	r3, #40	@ 0x28
 800bfe6:	d126      	bne.n	800c036 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	4a2e      	ldr	r2, [pc, #184]	@ (800c0a4 <I2C_Slave_AF+0xe4>)
 800bfec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	685a      	ldr	r2, [r3, #4]
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800bffc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c006:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	681a      	ldr	r2, [r3, #0]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c016:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2200      	movs	r2, #0
 800c01c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2220      	movs	r2, #32
 800c022:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2200      	movs	r2, #0
 800c02a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f7fe ffb7 	bl	800afa2 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800c034:	e031      	b.n	800c09a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800c036:	7bfb      	ldrb	r3, [r7, #15]
 800c038:	2b21      	cmp	r3, #33	@ 0x21
 800c03a:	d129      	bne.n	800c090 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	4a19      	ldr	r2, [pc, #100]	@ (800c0a4 <I2C_Slave_AF+0xe4>)
 800c040:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2221      	movs	r2, #33	@ 0x21
 800c046:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2220      	movs	r2, #32
 800c04c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2200      	movs	r2, #0
 800c054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	685a      	ldr	r2, [r3, #4]
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800c066:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c070:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	681a      	ldr	r2, [r3, #0]
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c080:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	f7fe f9be 	bl	800a404 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f7fe ff6b 	bl	800af64 <HAL_I2C_SlaveTxCpltCallback>
}
 800c08e:	e004      	b.n	800c09a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c098:	615a      	str	r2, [r3, #20]
}
 800c09a:	bf00      	nop
 800c09c:	3710      	adds	r7, #16
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}
 800c0a2:	bf00      	nop
 800c0a4:	ffff0000 	.word	0xffff0000

0800c0a8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b084      	sub	sp, #16
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c0b6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c0be:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800c0c0:	7bbb      	ldrb	r3, [r7, #14]
 800c0c2:	2b10      	cmp	r3, #16
 800c0c4:	d002      	beq.n	800c0cc <I2C_ITError+0x24>
 800c0c6:	7bbb      	ldrb	r3, [r7, #14]
 800c0c8:	2b40      	cmp	r3, #64	@ 0x40
 800c0ca:	d10a      	bne.n	800c0e2 <I2C_ITError+0x3a>
 800c0cc:	7bfb      	ldrb	r3, [r7, #15]
 800c0ce:	2b22      	cmp	r3, #34	@ 0x22
 800c0d0:	d107      	bne.n	800c0e2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	681a      	ldr	r2, [r3, #0]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c0e0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c0e2:	7bfb      	ldrb	r3, [r7, #15]
 800c0e4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800c0e8:	2b28      	cmp	r3, #40	@ 0x28
 800c0ea:	d107      	bne.n	800c0fc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2228      	movs	r2, #40	@ 0x28
 800c0f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800c0fa:	e015      	b.n	800c128 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	685b      	ldr	r3, [r3, #4]
 800c102:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c106:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c10a:	d00a      	beq.n	800c122 <I2C_ITError+0x7a>
 800c10c:	7bfb      	ldrb	r3, [r7, #15]
 800c10e:	2b60      	cmp	r3, #96	@ 0x60
 800c110:	d007      	beq.n	800c122 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2220      	movs	r2, #32
 800c116:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2200      	movs	r2, #0
 800c11e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2200      	movs	r2, #0
 800c126:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	685b      	ldr	r3, [r3, #4]
 800c12e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c132:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c136:	d162      	bne.n	800c1fe <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	685a      	ldr	r2, [r3, #4]
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c146:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c14c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800c150:	b2db      	uxtb	r3, r3
 800c152:	2b01      	cmp	r3, #1
 800c154:	d020      	beq.n	800c198 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c15a:	4a6a      	ldr	r2, [pc, #424]	@ (800c304 <I2C_ITError+0x25c>)
 800c15c:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c162:	4618      	mov	r0, r3
 800c164:	f7fd f9e6 	bl	8009534 <HAL_DMA_Abort_IT>
 800c168:	4603      	mov	r3, r0
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	f000 8089 	beq.w	800c282 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	681a      	ldr	r2, [r3, #0]
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	f022 0201 	bic.w	r2, r2, #1
 800c17e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2220      	movs	r2, #32
 800c184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c18c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c18e:	687a      	ldr	r2, [r7, #4]
 800c190:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800c192:	4610      	mov	r0, r2
 800c194:	4798      	blx	r3
 800c196:	e074      	b.n	800c282 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c19c:	4a59      	ldr	r2, [pc, #356]	@ (800c304 <I2C_ITError+0x25c>)
 800c19e:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	f7fd f9c5 	bl	8009534 <HAL_DMA_Abort_IT>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d068      	beq.n	800c282 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	695b      	ldr	r3, [r3, #20]
 800c1b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1ba:	2b40      	cmp	r3, #64	@ 0x40
 800c1bc:	d10b      	bne.n	800c1d6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	691a      	ldr	r2, [r3, #16]
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1c8:	b2d2      	uxtb	r2, r2
 800c1ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1d0:	1c5a      	adds	r2, r3, #1
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	681a      	ldr	r2, [r3, #0]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	f022 0201 	bic.w	r2, r2, #1
 800c1e4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2220      	movs	r2, #32
 800c1ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1f4:	687a      	ldr	r2, [r7, #4]
 800c1f6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800c1f8:	4610      	mov	r0, r2
 800c1fa:	4798      	blx	r3
 800c1fc:	e041      	b.n	800c282 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c204:	b2db      	uxtb	r3, r3
 800c206:	2b60      	cmp	r3, #96	@ 0x60
 800c208:	d125      	bne.n	800c256 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2220      	movs	r2, #32
 800c20e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2200      	movs	r2, #0
 800c216:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	695b      	ldr	r3, [r3, #20]
 800c21e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c222:	2b40      	cmp	r3, #64	@ 0x40
 800c224:	d10b      	bne.n	800c23e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	691a      	ldr	r2, [r3, #16]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c230:	b2d2      	uxtb	r2, r2
 800c232:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c238:	1c5a      	adds	r2, r3, #1
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	681a      	ldr	r2, [r3, #0]
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f022 0201 	bic.w	r2, r2, #1
 800c24c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f7fe fecb 	bl	800afea <HAL_I2C_AbortCpltCallback>
 800c254:	e015      	b.n	800c282 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	695b      	ldr	r3, [r3, #20]
 800c25c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c260:	2b40      	cmp	r3, #64	@ 0x40
 800c262:	d10b      	bne.n	800c27c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	691a      	ldr	r2, [r3, #16]
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c26e:	b2d2      	uxtb	r2, r2
 800c270:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c276:	1c5a      	adds	r2, r3, #1
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f7fe feab 	bl	800afd8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c286:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	f003 0301 	and.w	r3, r3, #1
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d10e      	bne.n	800c2b0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d109      	bne.n	800c2b0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d104      	bne.n	800c2b0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d007      	beq.n	800c2c0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	685a      	ldr	r2, [r3, #4]
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800c2be:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c2c6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2cc:	f003 0304 	and.w	r3, r3, #4
 800c2d0:	2b04      	cmp	r3, #4
 800c2d2:	d113      	bne.n	800c2fc <I2C_ITError+0x254>
 800c2d4:	7bfb      	ldrb	r3, [r7, #15]
 800c2d6:	2b28      	cmp	r3, #40	@ 0x28
 800c2d8:	d110      	bne.n	800c2fc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	4a0a      	ldr	r2, [pc, #40]	@ (800c308 <I2C_ITError+0x260>)
 800c2de:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2220      	movs	r2, #32
 800c2ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f7fe fe53 	bl	800afa2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c2fc:	bf00      	nop
 800c2fe:	3710      	adds	r7, #16
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}
 800c304:	0800c5ad 	.word	0x0800c5ad
 800c308:	ffff0000 	.word	0xffff0000

0800c30c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b088      	sub	sp, #32
 800c310:	af02      	add	r7, sp, #8
 800c312:	60f8      	str	r0, [r7, #12]
 800c314:	607a      	str	r2, [r7, #4]
 800c316:	603b      	str	r3, [r7, #0]
 800c318:	460b      	mov	r3, r1
 800c31a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c320:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	2b08      	cmp	r3, #8
 800c326:	d006      	beq.n	800c336 <I2C_MasterRequestWrite+0x2a>
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	2b01      	cmp	r3, #1
 800c32c:	d003      	beq.n	800c336 <I2C_MasterRequestWrite+0x2a>
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800c334:	d108      	bne.n	800c348 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	681a      	ldr	r2, [r3, #0]
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c344:	601a      	str	r2, [r3, #0]
 800c346:	e00b      	b.n	800c360 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c34c:	2b12      	cmp	r3, #18
 800c34e:	d107      	bne.n	800c360 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	681a      	ldr	r2, [r3, #0]
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c35e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	9300      	str	r3, [sp, #0]
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2200      	movs	r2, #0
 800c368:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800c36c:	68f8      	ldr	r0, [r7, #12]
 800c36e:	f000 f9c5 	bl	800c6fc <I2C_WaitOnFlagUntilTimeout>
 800c372:	4603      	mov	r3, r0
 800c374:	2b00      	cmp	r3, #0
 800c376:	d00d      	beq.n	800c394 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c382:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c386:	d103      	bne.n	800c390 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c38e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800c390:	2303      	movs	r3, #3
 800c392:	e035      	b.n	800c400 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	691b      	ldr	r3, [r3, #16]
 800c398:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c39c:	d108      	bne.n	800c3b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800c39e:	897b      	ldrh	r3, [r7, #10]
 800c3a0:	b2db      	uxtb	r3, r3
 800c3a2:	461a      	mov	r2, r3
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800c3ac:	611a      	str	r2, [r3, #16]
 800c3ae:	e01b      	b.n	800c3e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800c3b0:	897b      	ldrh	r3, [r7, #10]
 800c3b2:	11db      	asrs	r3, r3, #7
 800c3b4:	b2db      	uxtb	r3, r3
 800c3b6:	f003 0306 	and.w	r3, r3, #6
 800c3ba:	b2db      	uxtb	r3, r3
 800c3bc:	f063 030f 	orn	r3, r3, #15
 800c3c0:	b2da      	uxtb	r2, r3
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	687a      	ldr	r2, [r7, #4]
 800c3cc:	490e      	ldr	r1, [pc, #56]	@ (800c408 <I2C_MasterRequestWrite+0xfc>)
 800c3ce:	68f8      	ldr	r0, [r7, #12]
 800c3d0:	f000 fa0e 	bl	800c7f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d001      	beq.n	800c3de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800c3da:	2301      	movs	r3, #1
 800c3dc:	e010      	b.n	800c400 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800c3de:	897b      	ldrh	r3, [r7, #10]
 800c3e0:	b2da      	uxtb	r2, r3
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	687a      	ldr	r2, [r7, #4]
 800c3ec:	4907      	ldr	r1, [pc, #28]	@ (800c40c <I2C_MasterRequestWrite+0x100>)
 800c3ee:	68f8      	ldr	r0, [r7, #12]
 800c3f0:	f000 f9fe 	bl	800c7f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d001      	beq.n	800c3fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	e000      	b.n	800c400 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800c3fe:	2300      	movs	r3, #0
}
 800c400:	4618      	mov	r0, r3
 800c402:	3718      	adds	r7, #24
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}
 800c408:	00010008 	.word	0x00010008
 800c40c:	00010002 	.word	0x00010002

0800c410 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b088      	sub	sp, #32
 800c414:	af02      	add	r7, sp, #8
 800c416:	60f8      	str	r0, [r7, #12]
 800c418:	607a      	str	r2, [r7, #4]
 800c41a:	603b      	str	r3, [r7, #0]
 800c41c:	460b      	mov	r3, r1
 800c41e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c424:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	681a      	ldr	r2, [r3, #0]
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c434:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800c436:	697b      	ldr	r3, [r7, #20]
 800c438:	2b08      	cmp	r3, #8
 800c43a:	d006      	beq.n	800c44a <I2C_MasterRequestRead+0x3a>
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	2b01      	cmp	r3, #1
 800c440:	d003      	beq.n	800c44a <I2C_MasterRequestRead+0x3a>
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800c448:	d108      	bne.n	800c45c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	681a      	ldr	r2, [r3, #0]
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c458:	601a      	str	r2, [r3, #0]
 800c45a:	e00b      	b.n	800c474 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c460:	2b11      	cmp	r3, #17
 800c462:	d107      	bne.n	800c474 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	681a      	ldr	r2, [r3, #0]
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c472:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	9300      	str	r3, [sp, #0]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2200      	movs	r2, #0
 800c47c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800c480:	68f8      	ldr	r0, [r7, #12]
 800c482:	f000 f93b 	bl	800c6fc <I2C_WaitOnFlagUntilTimeout>
 800c486:	4603      	mov	r3, r0
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d00d      	beq.n	800c4a8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c496:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c49a:	d103      	bne.n	800c4a4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c4a2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800c4a4:	2303      	movs	r3, #3
 800c4a6:	e079      	b.n	800c59c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	691b      	ldr	r3, [r3, #16]
 800c4ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c4b0:	d108      	bne.n	800c4c4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800c4b2:	897b      	ldrh	r3, [r7, #10]
 800c4b4:	b2db      	uxtb	r3, r3
 800c4b6:	f043 0301 	orr.w	r3, r3, #1
 800c4ba:	b2da      	uxtb	r2, r3
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	611a      	str	r2, [r3, #16]
 800c4c2:	e05f      	b.n	800c584 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800c4c4:	897b      	ldrh	r3, [r7, #10]
 800c4c6:	11db      	asrs	r3, r3, #7
 800c4c8:	b2db      	uxtb	r3, r3
 800c4ca:	f003 0306 	and.w	r3, r3, #6
 800c4ce:	b2db      	uxtb	r3, r3
 800c4d0:	f063 030f 	orn	r3, r3, #15
 800c4d4:	b2da      	uxtb	r2, r3
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	687a      	ldr	r2, [r7, #4]
 800c4e0:	4930      	ldr	r1, [pc, #192]	@ (800c5a4 <I2C_MasterRequestRead+0x194>)
 800c4e2:	68f8      	ldr	r0, [r7, #12]
 800c4e4:	f000 f984 	bl	800c7f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d001      	beq.n	800c4f2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	e054      	b.n	800c59c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800c4f2:	897b      	ldrh	r3, [r7, #10]
 800c4f4:	b2da      	uxtb	r2, r3
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	687a      	ldr	r2, [r7, #4]
 800c500:	4929      	ldr	r1, [pc, #164]	@ (800c5a8 <I2C_MasterRequestRead+0x198>)
 800c502:	68f8      	ldr	r0, [r7, #12]
 800c504:	f000 f974 	bl	800c7f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c508:	4603      	mov	r3, r0
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d001      	beq.n	800c512 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800c50e:	2301      	movs	r3, #1
 800c510:	e044      	b.n	800c59c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c512:	2300      	movs	r3, #0
 800c514:	613b      	str	r3, [r7, #16]
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	695b      	ldr	r3, [r3, #20]
 800c51c:	613b      	str	r3, [r7, #16]
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	699b      	ldr	r3, [r3, #24]
 800c524:	613b      	str	r3, [r7, #16]
 800c526:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	681a      	ldr	r2, [r3, #0]
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c536:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	9300      	str	r3, [sp, #0]
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2200      	movs	r2, #0
 800c540:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800c544:	68f8      	ldr	r0, [r7, #12]
 800c546:	f000 f8d9 	bl	800c6fc <I2C_WaitOnFlagUntilTimeout>
 800c54a:	4603      	mov	r3, r0
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d00d      	beq.n	800c56c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c55a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c55e:	d103      	bne.n	800c568 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c566:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800c568:	2303      	movs	r3, #3
 800c56a:	e017      	b.n	800c59c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800c56c:	897b      	ldrh	r3, [r7, #10]
 800c56e:	11db      	asrs	r3, r3, #7
 800c570:	b2db      	uxtb	r3, r3
 800c572:	f003 0306 	and.w	r3, r3, #6
 800c576:	b2db      	uxtb	r3, r3
 800c578:	f063 030e 	orn	r3, r3, #14
 800c57c:	b2da      	uxtb	r2, r3
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	687a      	ldr	r2, [r7, #4]
 800c588:	4907      	ldr	r1, [pc, #28]	@ (800c5a8 <I2C_MasterRequestRead+0x198>)
 800c58a:	68f8      	ldr	r0, [r7, #12]
 800c58c:	f000 f930 	bl	800c7f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c590:	4603      	mov	r3, r0
 800c592:	2b00      	cmp	r3, #0
 800c594:	d001      	beq.n	800c59a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800c596:	2301      	movs	r3, #1
 800c598:	e000      	b.n	800c59c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800c59a:	2300      	movs	r3, #0
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	3718      	adds	r7, #24
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}
 800c5a4:	00010008 	.word	0x00010008
 800c5a8:	00010002 	.word	0x00010002

0800c5ac <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b086      	sub	sp, #24
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5bc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c5be:	697b      	ldr	r3, [r7, #20]
 800c5c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c5c4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800c5c6:	4b4b      	ldr	r3, [pc, #300]	@ (800c6f4 <I2C_DMAAbort+0x148>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	08db      	lsrs	r3, r3, #3
 800c5cc:	4a4a      	ldr	r2, [pc, #296]	@ (800c6f8 <I2C_DMAAbort+0x14c>)
 800c5ce:	fba2 2303 	umull	r2, r3, r2, r3
 800c5d2:	0a1a      	lsrs	r2, r3, #8
 800c5d4:	4613      	mov	r3, r2
 800c5d6:	009b      	lsls	r3, r3, #2
 800c5d8:	4413      	add	r3, r2
 800c5da:	00da      	lsls	r2, r3, #3
 800c5dc:	1ad3      	subs	r3, r2, r3
 800c5de:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d106      	bne.n	800c5f4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c5e6:	697b      	ldr	r3, [r7, #20]
 800c5e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5ea:	f043 0220 	orr.w	r2, r3, #32
 800c5ee:	697b      	ldr	r3, [r7, #20]
 800c5f0:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800c5f2:	e00a      	b.n	800c60a <I2C_DMAAbort+0x5e>
    }
    count--;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	3b01      	subs	r3, #1
 800c5f8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800c5fa:	697b      	ldr	r3, [r7, #20]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c604:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c608:	d0ea      	beq.n	800c5e0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800c60a:	697b      	ldr	r3, [r7, #20]
 800c60c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d003      	beq.n	800c61a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c616:	2200      	movs	r2, #0
 800c618:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d003      	beq.n	800c62a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800c622:	697b      	ldr	r3, [r7, #20]
 800c624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c626:	2200      	movs	r2, #0
 800c628:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c62a:	697b      	ldr	r3, [r7, #20]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	681a      	ldr	r2, [r3, #0]
 800c630:	697b      	ldr	r3, [r7, #20]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c638:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	2200      	movs	r2, #0
 800c63e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c644:	2b00      	cmp	r3, #0
 800c646:	d003      	beq.n	800c650 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800c648:	697b      	ldr	r3, [r7, #20]
 800c64a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c64c:	2200      	movs	r2, #0
 800c64e:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 800c650:	697b      	ldr	r3, [r7, #20]
 800c652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c654:	2b00      	cmp	r3, #0
 800c656:	d003      	beq.n	800c660 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800c658:	697b      	ldr	r3, [r7, #20]
 800c65a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c65c:	2200      	movs	r2, #0
 800c65e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800c660:	697b      	ldr	r3, [r7, #20]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	681a      	ldr	r2, [r3, #0]
 800c666:	697b      	ldr	r3, [r7, #20]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	f022 0201 	bic.w	r2, r2, #1
 800c66e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c676:	b2db      	uxtb	r3, r3
 800c678:	2b60      	cmp	r3, #96	@ 0x60
 800c67a:	d10e      	bne.n	800c69a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	2220      	movs	r2, #32
 800c680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c684:	697b      	ldr	r3, [r7, #20]
 800c686:	2200      	movs	r2, #0
 800c688:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800c68c:	697b      	ldr	r3, [r7, #20]
 800c68e:	2200      	movs	r2, #0
 800c690:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800c692:	6978      	ldr	r0, [r7, #20]
 800c694:	f7fe fca9 	bl	800afea <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c698:	e027      	b.n	800c6ea <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c69a:	7cfb      	ldrb	r3, [r7, #19]
 800c69c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800c6a0:	2b28      	cmp	r3, #40	@ 0x28
 800c6a2:	d117      	bne.n	800c6d4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800c6a4:	697b      	ldr	r3, [r7, #20]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	681a      	ldr	r2, [r3, #0]
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	f042 0201 	orr.w	r2, r2, #1
 800c6b2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	681a      	ldr	r2, [r3, #0]
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c6c2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	2228      	movs	r2, #40	@ 0x28
 800c6ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800c6d2:	e007      	b.n	800c6e4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800c6d4:	697b      	ldr	r3, [r7, #20]
 800c6d6:	2220      	movs	r2, #32
 800c6d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c6dc:	697b      	ldr	r3, [r7, #20]
 800c6de:	2200      	movs	r2, #0
 800c6e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800c6e4:	6978      	ldr	r0, [r7, #20]
 800c6e6:	f7fe fc77 	bl	800afd8 <HAL_I2C_ErrorCallback>
}
 800c6ea:	bf00      	nop
 800c6ec:	3718      	adds	r7, #24
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}
 800c6f2:	bf00      	nop
 800c6f4:	20000000 	.word	0x20000000
 800c6f8:	14f8b589 	.word	0x14f8b589

0800c6fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b084      	sub	sp, #16
 800c700:	af00      	add	r7, sp, #0
 800c702:	60f8      	str	r0, [r7, #12]
 800c704:	60b9      	str	r1, [r7, #8]
 800c706:	603b      	str	r3, [r7, #0]
 800c708:	4613      	mov	r3, r2
 800c70a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c70c:	e048      	b.n	800c7a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c714:	d044      	beq.n	800c7a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c716:	f7fb fed5 	bl	80084c4 <HAL_GetTick>
 800c71a:	4602      	mov	r2, r0
 800c71c:	69bb      	ldr	r3, [r7, #24]
 800c71e:	1ad3      	subs	r3, r2, r3
 800c720:	683a      	ldr	r2, [r7, #0]
 800c722:	429a      	cmp	r2, r3
 800c724:	d302      	bcc.n	800c72c <I2C_WaitOnFlagUntilTimeout+0x30>
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d139      	bne.n	800c7a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	0c1b      	lsrs	r3, r3, #16
 800c730:	b2db      	uxtb	r3, r3
 800c732:	2b01      	cmp	r3, #1
 800c734:	d10d      	bne.n	800c752 <I2C_WaitOnFlagUntilTimeout+0x56>
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	695b      	ldr	r3, [r3, #20]
 800c73c:	43da      	mvns	r2, r3
 800c73e:	68bb      	ldr	r3, [r7, #8]
 800c740:	4013      	ands	r3, r2
 800c742:	b29b      	uxth	r3, r3
 800c744:	2b00      	cmp	r3, #0
 800c746:	bf0c      	ite	eq
 800c748:	2301      	moveq	r3, #1
 800c74a:	2300      	movne	r3, #0
 800c74c:	b2db      	uxtb	r3, r3
 800c74e:	461a      	mov	r2, r3
 800c750:	e00c      	b.n	800c76c <I2C_WaitOnFlagUntilTimeout+0x70>
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	699b      	ldr	r3, [r3, #24]
 800c758:	43da      	mvns	r2, r3
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	4013      	ands	r3, r2
 800c75e:	b29b      	uxth	r3, r3
 800c760:	2b00      	cmp	r3, #0
 800c762:	bf0c      	ite	eq
 800c764:	2301      	moveq	r3, #1
 800c766:	2300      	movne	r3, #0
 800c768:	b2db      	uxtb	r3, r3
 800c76a:	461a      	mov	r2, r3
 800c76c:	79fb      	ldrb	r3, [r7, #7]
 800c76e:	429a      	cmp	r2, r3
 800c770:	d116      	bne.n	800c7a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	2200      	movs	r2, #0
 800c776:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	2220      	movs	r2, #32
 800c77c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	2200      	movs	r2, #0
 800c784:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c78c:	f043 0220 	orr.w	r2, r3, #32
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	2200      	movs	r2, #0
 800c798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c79c:	2301      	movs	r3, #1
 800c79e:	e023      	b.n	800c7e8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	0c1b      	lsrs	r3, r3, #16
 800c7a4:	b2db      	uxtb	r3, r3
 800c7a6:	2b01      	cmp	r3, #1
 800c7a8:	d10d      	bne.n	800c7c6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	695b      	ldr	r3, [r3, #20]
 800c7b0:	43da      	mvns	r2, r3
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	4013      	ands	r3, r2
 800c7b6:	b29b      	uxth	r3, r3
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	bf0c      	ite	eq
 800c7bc:	2301      	moveq	r3, #1
 800c7be:	2300      	movne	r3, #0
 800c7c0:	b2db      	uxtb	r3, r3
 800c7c2:	461a      	mov	r2, r3
 800c7c4:	e00c      	b.n	800c7e0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	699b      	ldr	r3, [r3, #24]
 800c7cc:	43da      	mvns	r2, r3
 800c7ce:	68bb      	ldr	r3, [r7, #8]
 800c7d0:	4013      	ands	r3, r2
 800c7d2:	b29b      	uxth	r3, r3
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	bf0c      	ite	eq
 800c7d8:	2301      	moveq	r3, #1
 800c7da:	2300      	movne	r3, #0
 800c7dc:	b2db      	uxtb	r3, r3
 800c7de:	461a      	mov	r2, r3
 800c7e0:	79fb      	ldrb	r3, [r7, #7]
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	d093      	beq.n	800c70e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c7e6:	2300      	movs	r3, #0
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	3710      	adds	r7, #16
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}

0800c7f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b084      	sub	sp, #16
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	60f8      	str	r0, [r7, #12]
 800c7f8:	60b9      	str	r1, [r7, #8]
 800c7fa:	607a      	str	r2, [r7, #4]
 800c7fc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c7fe:	e071      	b.n	800c8e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	695b      	ldr	r3, [r3, #20]
 800c806:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c80a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c80e:	d123      	bne.n	800c858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	681a      	ldr	r2, [r3, #0]
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c81e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c828:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	2200      	movs	r2, #0
 800c82e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	2220      	movs	r2, #32
 800c834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	2200      	movs	r2, #0
 800c83c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c844:	f043 0204 	orr.w	r2, r3, #4
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	2200      	movs	r2, #0
 800c850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800c854:	2301      	movs	r3, #1
 800c856:	e067      	b.n	800c928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c85e:	d041      	beq.n	800c8e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c860:	f7fb fe30 	bl	80084c4 <HAL_GetTick>
 800c864:	4602      	mov	r2, r0
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	1ad3      	subs	r3, r2, r3
 800c86a:	687a      	ldr	r2, [r7, #4]
 800c86c:	429a      	cmp	r2, r3
 800c86e:	d302      	bcc.n	800c876 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d136      	bne.n	800c8e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	0c1b      	lsrs	r3, r3, #16
 800c87a:	b2db      	uxtb	r3, r3
 800c87c:	2b01      	cmp	r3, #1
 800c87e:	d10c      	bne.n	800c89a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	695b      	ldr	r3, [r3, #20]
 800c886:	43da      	mvns	r2, r3
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	4013      	ands	r3, r2
 800c88c:	b29b      	uxth	r3, r3
 800c88e:	2b00      	cmp	r3, #0
 800c890:	bf14      	ite	ne
 800c892:	2301      	movne	r3, #1
 800c894:	2300      	moveq	r3, #0
 800c896:	b2db      	uxtb	r3, r3
 800c898:	e00b      	b.n	800c8b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	699b      	ldr	r3, [r3, #24]
 800c8a0:	43da      	mvns	r2, r3
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	4013      	ands	r3, r2
 800c8a6:	b29b      	uxth	r3, r3
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	bf14      	ite	ne
 800c8ac:	2301      	movne	r3, #1
 800c8ae:	2300      	moveq	r3, #0
 800c8b0:	b2db      	uxtb	r3, r3
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d016      	beq.n	800c8e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	2220      	movs	r2, #32
 800c8c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8d0:	f043 0220 	orr.w	r2, r3, #32
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	2200      	movs	r2, #0
 800c8dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	e021      	b.n	800c928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	0c1b      	lsrs	r3, r3, #16
 800c8e8:	b2db      	uxtb	r3, r3
 800c8ea:	2b01      	cmp	r3, #1
 800c8ec:	d10c      	bne.n	800c908 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	695b      	ldr	r3, [r3, #20]
 800c8f4:	43da      	mvns	r2, r3
 800c8f6:	68bb      	ldr	r3, [r7, #8]
 800c8f8:	4013      	ands	r3, r2
 800c8fa:	b29b      	uxth	r3, r3
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	bf14      	ite	ne
 800c900:	2301      	movne	r3, #1
 800c902:	2300      	moveq	r3, #0
 800c904:	b2db      	uxtb	r3, r3
 800c906:	e00b      	b.n	800c920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	699b      	ldr	r3, [r3, #24]
 800c90e:	43da      	mvns	r2, r3
 800c910:	68bb      	ldr	r3, [r7, #8]
 800c912:	4013      	ands	r3, r2
 800c914:	b29b      	uxth	r3, r3
 800c916:	2b00      	cmp	r3, #0
 800c918:	bf14      	ite	ne
 800c91a:	2301      	movne	r3, #1
 800c91c:	2300      	moveq	r3, #0
 800c91e:	b2db      	uxtb	r3, r3
 800c920:	2b00      	cmp	r3, #0
 800c922:	f47f af6d 	bne.w	800c800 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800c926:	2300      	movs	r3, #0
}
 800c928:	4618      	mov	r0, r3
 800c92a:	3710      	adds	r7, #16
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}

0800c930 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b084      	sub	sp, #16
 800c934:	af00      	add	r7, sp, #0
 800c936:	60f8      	str	r0, [r7, #12]
 800c938:	60b9      	str	r1, [r7, #8]
 800c93a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c93c:	e034      	b.n	800c9a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c93e:	68f8      	ldr	r0, [r7, #12]
 800c940:	f000 f915 	bl	800cb6e <I2C_IsAcknowledgeFailed>
 800c944:	4603      	mov	r3, r0
 800c946:	2b00      	cmp	r3, #0
 800c948:	d001      	beq.n	800c94e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c94a:	2301      	movs	r3, #1
 800c94c:	e034      	b.n	800c9b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c954:	d028      	beq.n	800c9a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c956:	f7fb fdb5 	bl	80084c4 <HAL_GetTick>
 800c95a:	4602      	mov	r2, r0
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	1ad3      	subs	r3, r2, r3
 800c960:	68ba      	ldr	r2, [r7, #8]
 800c962:	429a      	cmp	r2, r3
 800c964:	d302      	bcc.n	800c96c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800c966:	68bb      	ldr	r3, [r7, #8]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d11d      	bne.n	800c9a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	695b      	ldr	r3, [r3, #20]
 800c972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c976:	2b80      	cmp	r3, #128	@ 0x80
 800c978:	d016      	beq.n	800c9a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	2200      	movs	r2, #0
 800c97e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	2220      	movs	r2, #32
 800c984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	2200      	movs	r2, #0
 800c98c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c994:	f043 0220 	orr.w	r2, r3, #32
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	2200      	movs	r2, #0
 800c9a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	e007      	b.n	800c9b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	695b      	ldr	r3, [r3, #20]
 800c9ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c9b2:	2b80      	cmp	r3, #128	@ 0x80
 800c9b4:	d1c3      	bne.n	800c93e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800c9b6:	2300      	movs	r3, #0
}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	3710      	adds	r7, #16
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}

0800c9c0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b084      	sub	sp, #16
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	60f8      	str	r0, [r7, #12]
 800c9c8:	60b9      	str	r1, [r7, #8]
 800c9ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c9cc:	e034      	b.n	800ca38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c9ce:	68f8      	ldr	r0, [r7, #12]
 800c9d0:	f000 f8cd 	bl	800cb6e <I2C_IsAcknowledgeFailed>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d001      	beq.n	800c9de <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c9da:	2301      	movs	r3, #1
 800c9dc:	e034      	b.n	800ca48 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c9de:	68bb      	ldr	r3, [r7, #8]
 800c9e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9e4:	d028      	beq.n	800ca38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c9e6:	f7fb fd6d 	bl	80084c4 <HAL_GetTick>
 800c9ea:	4602      	mov	r2, r0
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	1ad3      	subs	r3, r2, r3
 800c9f0:	68ba      	ldr	r2, [r7, #8]
 800c9f2:	429a      	cmp	r2, r3
 800c9f4:	d302      	bcc.n	800c9fc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800c9f6:	68bb      	ldr	r3, [r7, #8]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d11d      	bne.n	800ca38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	695b      	ldr	r3, [r3, #20]
 800ca02:	f003 0304 	and.w	r3, r3, #4
 800ca06:	2b04      	cmp	r3, #4
 800ca08:	d016      	beq.n	800ca38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	2220      	movs	r2, #32
 800ca14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca24:	f043 0220 	orr.w	r2, r3, #32
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	2200      	movs	r2, #0
 800ca30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800ca34:	2301      	movs	r3, #1
 800ca36:	e007      	b.n	800ca48 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	695b      	ldr	r3, [r3, #20]
 800ca3e:	f003 0304 	and.w	r3, r3, #4
 800ca42:	2b04      	cmp	r3, #4
 800ca44:	d1c3      	bne.n	800c9ce <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800ca46:	2300      	movs	r3, #0
}
 800ca48:	4618      	mov	r0, r3
 800ca4a:	3710      	adds	r7, #16
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}

0800ca50 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800ca50:	b480      	push	{r7}
 800ca52:	b085      	sub	sp, #20
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ca58:	2300      	movs	r3, #0
 800ca5a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800ca5c:	4b13      	ldr	r3, [pc, #76]	@ (800caac <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	08db      	lsrs	r3, r3, #3
 800ca62:	4a13      	ldr	r2, [pc, #76]	@ (800cab0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800ca64:	fba2 2303 	umull	r2, r3, r2, r3
 800ca68:	0a1a      	lsrs	r2, r3, #8
 800ca6a:	4613      	mov	r3, r2
 800ca6c:	009b      	lsls	r3, r3, #2
 800ca6e:	4413      	add	r3, r2
 800ca70:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	3b01      	subs	r3, #1
 800ca76:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d107      	bne.n	800ca8e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca82:	f043 0220 	orr.w	r2, r3, #32
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	e008      	b.n	800caa0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ca98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ca9c:	d0e9      	beq.n	800ca72 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800ca9e:	2300      	movs	r3, #0
}
 800caa0:	4618      	mov	r0, r3
 800caa2:	3714      	adds	r7, #20
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bc80      	pop	{r7}
 800caa8:	4770      	bx	lr
 800caaa:	bf00      	nop
 800caac:	20000000 	.word	0x20000000
 800cab0:	14f8b589 	.word	0x14f8b589

0800cab4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b084      	sub	sp, #16
 800cab8:	af00      	add	r7, sp, #0
 800caba:	60f8      	str	r0, [r7, #12]
 800cabc:	60b9      	str	r1, [r7, #8]
 800cabe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800cac0:	e049      	b.n	800cb56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	695b      	ldr	r3, [r3, #20]
 800cac8:	f003 0310 	and.w	r3, r3, #16
 800cacc:	2b10      	cmp	r3, #16
 800cace:	d119      	bne.n	800cb04 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	f06f 0210 	mvn.w	r2, #16
 800cad8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	2200      	movs	r2, #0
 800cade:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	2220      	movs	r2, #32
 800cae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	2200      	movs	r2, #0
 800caec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	2200      	movs	r2, #0
 800cafc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800cb00:	2301      	movs	r3, #1
 800cb02:	e030      	b.n	800cb66 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cb04:	f7fb fcde 	bl	80084c4 <HAL_GetTick>
 800cb08:	4602      	mov	r2, r0
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	1ad3      	subs	r3, r2, r3
 800cb0e:	68ba      	ldr	r2, [r7, #8]
 800cb10:	429a      	cmp	r2, r3
 800cb12:	d302      	bcc.n	800cb1a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d11d      	bne.n	800cb56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	695b      	ldr	r3, [r3, #20]
 800cb20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb24:	2b40      	cmp	r3, #64	@ 0x40
 800cb26:	d016      	beq.n	800cb56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	2220      	movs	r2, #32
 800cb32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	2200      	movs	r2, #0
 800cb3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb42:	f043 0220 	orr.w	r2, r3, #32
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800cb52:	2301      	movs	r3, #1
 800cb54:	e007      	b.n	800cb66 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	695b      	ldr	r3, [r3, #20]
 800cb5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb60:	2b40      	cmp	r3, #64	@ 0x40
 800cb62:	d1ae      	bne.n	800cac2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800cb64:	2300      	movs	r3, #0
}
 800cb66:	4618      	mov	r0, r3
 800cb68:	3710      	adds	r7, #16
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}

0800cb6e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800cb6e:	b480      	push	{r7}
 800cb70:	b083      	sub	sp, #12
 800cb72:	af00      	add	r7, sp, #0
 800cb74:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	695b      	ldr	r3, [r3, #20]
 800cb7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cb80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cb84:	d11b      	bne.n	800cbbe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800cb8e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2200      	movs	r2, #0
 800cb94:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	2220      	movs	r2, #32
 800cb9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	2200      	movs	r2, #0
 800cba2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cbaa:	f043 0204 	orr.w	r2, r3, #4
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800cbba:	2301      	movs	r3, #1
 800cbbc:	e000      	b.n	800cbc0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800cbbe:	2300      	movs	r3, #0
}
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	370c      	adds	r7, #12
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bc80      	pop	{r7}
 800cbc8:	4770      	bx	lr

0800cbca <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800cbca:	b480      	push	{r7}
 800cbcc:	b083      	sub	sp, #12
 800cbce:	af00      	add	r7, sp, #0
 800cbd0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbd6:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800cbda:	d103      	bne.n	800cbe4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2201      	movs	r2, #1
 800cbe0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800cbe2:	e007      	b.n	800cbf4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbe8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800cbec:	d102      	bne.n	800cbf4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2208      	movs	r2, #8
 800cbf2:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800cbf4:	bf00      	nop
 800cbf6:	370c      	adds	r7, #12
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bc80      	pop	{r7}
 800cbfc:	4770      	bx	lr
	...

0800cc00 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800cc00:	b480      	push	{r7}
 800cc02:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800cc04:	4b03      	ldr	r3, [pc, #12]	@ (800cc14 <HAL_PWR_EnableBkUpAccess+0x14>)
 800cc06:	2201      	movs	r2, #1
 800cc08:	601a      	str	r2, [r3, #0]
}
 800cc0a:	bf00      	nop
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bc80      	pop	{r7}
 800cc10:	4770      	bx	lr
 800cc12:	bf00      	nop
 800cc14:	420e0020 	.word	0x420e0020

0800cc18 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b082      	sub	sp, #8
 800cc1c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800cc1e:	f7fb fc51 	bl	80084c4 <HAL_GetTick>
 800cc22:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800cc24:	4b45      	ldr	r3, [pc, #276]	@ (800cd3c <HAL_RCC_DeInit+0x124>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	4a44      	ldr	r2, [pc, #272]	@ (800cd3c <HAL_RCC_DeInit+0x124>)
 800cc2a:	f043 0301 	orr.w	r3, r3, #1
 800cc2e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800cc30:	e008      	b.n	800cc44 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cc32:	f7fb fc47 	bl	80084c4 <HAL_GetTick>
 800cc36:	4602      	mov	r2, r0
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	1ad3      	subs	r3, r2, r3
 800cc3c:	2b02      	cmp	r3, #2
 800cc3e:	d901      	bls.n	800cc44 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 800cc40:	2303      	movs	r3, #3
 800cc42:	e077      	b.n	800cd34 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800cc44:	4b3d      	ldr	r3, [pc, #244]	@ (800cd3c <HAL_RCC_DeInit+0x124>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	f003 0302 	and.w	r3, r3, #2
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d0f0      	beq.n	800cc32 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 800cc50:	4b3a      	ldr	r3, [pc, #232]	@ (800cd3c <HAL_RCC_DeInit+0x124>)
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800cc58:	4a38      	ldr	r2, [pc, #224]	@ (800cd3c <HAL_RCC_DeInit+0x124>)
 800cc5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc5e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800cc60:	f7fb fc30 	bl	80084c4 <HAL_GetTick>
 800cc64:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800cc66:	4b35      	ldr	r3, [pc, #212]	@ (800cd3c <HAL_RCC_DeInit+0x124>)
 800cc68:	2200      	movs	r2, #0
 800cc6a:	605a      	str	r2, [r3, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800cc6c:	e00a      	b.n	800cc84 <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cc6e:	f7fb fc29 	bl	80084c4 <HAL_GetTick>
 800cc72:	4602      	mov	r2, r0
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	1ad3      	subs	r3, r2, r3
 800cc78:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cc7c:	4293      	cmp	r3, r2
 800cc7e:	d901      	bls.n	800cc84 <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 800cc80:	2303      	movs	r3, #3
 800cc82:	e057      	b.n	800cd34 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800cc84:	4b2d      	ldr	r3, [pc, #180]	@ (800cd3c <HAL_RCC_DeInit+0x124>)
 800cc86:	685b      	ldr	r3, [r3, #4]
 800cc88:	f003 030c 	and.w	r3, r3, #12
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d1ee      	bne.n	800cc6e <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 800cc90:	4b2b      	ldr	r3, [pc, #172]	@ (800cd40 <HAL_RCC_DeInit+0x128>)
 800cc92:	4a2c      	ldr	r2, [pc, #176]	@ (800cd44 <HAL_RCC_DeInit+0x12c>)
 800cc94:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800cc96:	4b2c      	ldr	r3, [pc, #176]	@ (800cd48 <HAL_RCC_DeInit+0x130>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f7f4 ff9a 	bl	8001bd4 <HAL_InitTick>
 800cca0:	4603      	mov	r3, r0
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d001      	beq.n	800ccaa <HAL_RCC_DeInit+0x92>
  {
    return HAL_ERROR;
 800cca6:	2301      	movs	r3, #1
 800cca8:	e044      	b.n	800cd34 <HAL_RCC_DeInit+0x11c>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800ccaa:	f7fb fc0b 	bl	80084c4 <HAL_GetTick>
 800ccae:	6078      	str	r0, [r7, #4]

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800ccb0:	4b22      	ldr	r3, [pc, #136]	@ (800cd3c <HAL_RCC_DeInit+0x124>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	4a21      	ldr	r2, [pc, #132]	@ (800cd3c <HAL_RCC_DeInit+0x124>)
 800ccb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ccba:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800ccbc:	e008      	b.n	800ccd0 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ccbe:	f7fb fc01 	bl	80084c4 <HAL_GetTick>
 800ccc2:	4602      	mov	r2, r0
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	1ad3      	subs	r3, r2, r3
 800ccc8:	2b02      	cmp	r3, #2
 800ccca:	d901      	bls.n	800ccd0 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 800cccc:	2303      	movs	r3, #3
 800ccce:	e031      	b.n	800cd34 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800ccd0:	4b1a      	ldr	r3, [pc, #104]	@ (800cd3c <HAL_RCC_DeInit+0x124>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d1f0      	bne.n	800ccbe <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 800ccdc:	4b17      	ldr	r3, [pc, #92]	@ (800cd3c <HAL_RCC_DeInit+0x124>)
 800ccde:	2200      	movs	r2, #0
 800cce0:	605a      	str	r2, [r3, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800cce2:	f7fb fbef 	bl	80084c4 <HAL_GetTick>
 800cce6:	6078      	str	r0, [r7, #4]

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 800cce8:	4b14      	ldr	r3, [pc, #80]	@ (800cd3c <HAL_RCC_DeInit+0x124>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	4a13      	ldr	r2, [pc, #76]	@ (800cd3c <HAL_RCC_DeInit+0x124>)
 800ccee:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800ccf2:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800ccf4:	e008      	b.n	800cd08 <HAL_RCC_DeInit+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ccf6:	f7fb fbe5 	bl	80084c4 <HAL_GetTick>
 800ccfa:	4602      	mov	r2, r0
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	1ad3      	subs	r3, r2, r3
 800cd00:	2b64      	cmp	r3, #100	@ 0x64
 800cd02:	d901      	bls.n	800cd08 <HAL_RCC_DeInit+0xf0>
    {
      return HAL_TIMEOUT;
 800cd04:	2303      	movs	r3, #3
 800cd06:	e015      	b.n	800cd34 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800cd08:	4b0c      	ldr	r3, [pc, #48]	@ (800cd3c <HAL_RCC_DeInit+0x124>)
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d1f0      	bne.n	800ccf6 <HAL_RCC_DeInit+0xde>
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800cd14:	4b09      	ldr	r3, [pc, #36]	@ (800cd3c <HAL_RCC_DeInit+0x124>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	4a08      	ldr	r2, [pc, #32]	@ (800cd3c <HAL_RCC_DeInit+0x124>)
 800cd1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cd1e:	6013      	str	r3, [r2, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800cd20:	4b06      	ldr	r3, [pc, #24]	@ (800cd3c <HAL_RCC_DeInit+0x124>)
 800cd22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd24:	4a05      	ldr	r2, [pc, #20]	@ (800cd3c <HAL_RCC_DeInit+0x124>)
 800cd26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cd2a:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 800cd2c:	4b03      	ldr	r3, [pc, #12]	@ (800cd3c <HAL_RCC_DeInit+0x124>)
 800cd2e:	2200      	movs	r2, #0
 800cd30:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800cd32:	2300      	movs	r3, #0
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	3708      	adds	r7, #8
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}
 800cd3c:	40021000 	.word	0x40021000
 800cd40:	20000000 	.word	0x20000000
 800cd44:	007a1200 	.word	0x007a1200
 800cd48:	20000610 	.word	0x20000610

0800cd4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b086      	sub	sp, #24
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d101      	bne.n	800cd5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800cd5a:	2301      	movs	r3, #1
 800cd5c:	e272      	b.n	800d244 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	f003 0301 	and.w	r3, r3, #1
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	f000 8087 	beq.w	800ce7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800cd6c:	4b92      	ldr	r3, [pc, #584]	@ (800cfb8 <HAL_RCC_OscConfig+0x26c>)
 800cd6e:	685b      	ldr	r3, [r3, #4]
 800cd70:	f003 030c 	and.w	r3, r3, #12
 800cd74:	2b04      	cmp	r3, #4
 800cd76:	d00c      	beq.n	800cd92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800cd78:	4b8f      	ldr	r3, [pc, #572]	@ (800cfb8 <HAL_RCC_OscConfig+0x26c>)
 800cd7a:	685b      	ldr	r3, [r3, #4]
 800cd7c:	f003 030c 	and.w	r3, r3, #12
 800cd80:	2b08      	cmp	r3, #8
 800cd82:	d112      	bne.n	800cdaa <HAL_RCC_OscConfig+0x5e>
 800cd84:	4b8c      	ldr	r3, [pc, #560]	@ (800cfb8 <HAL_RCC_OscConfig+0x26c>)
 800cd86:	685b      	ldr	r3, [r3, #4]
 800cd88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cd8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cd90:	d10b      	bne.n	800cdaa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cd92:	4b89      	ldr	r3, [pc, #548]	@ (800cfb8 <HAL_RCC_OscConfig+0x26c>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d06c      	beq.n	800ce78 <HAL_RCC_OscConfig+0x12c>
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	685b      	ldr	r3, [r3, #4]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d168      	bne.n	800ce78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800cda6:	2301      	movs	r3, #1
 800cda8:	e24c      	b.n	800d244 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	685b      	ldr	r3, [r3, #4]
 800cdae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cdb2:	d106      	bne.n	800cdc2 <HAL_RCC_OscConfig+0x76>
 800cdb4:	4b80      	ldr	r3, [pc, #512]	@ (800cfb8 <HAL_RCC_OscConfig+0x26c>)
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	4a7f      	ldr	r2, [pc, #508]	@ (800cfb8 <HAL_RCC_OscConfig+0x26c>)
 800cdba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cdbe:	6013      	str	r3, [r2, #0]
 800cdc0:	e02e      	b.n	800ce20 <HAL_RCC_OscConfig+0xd4>
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	685b      	ldr	r3, [r3, #4]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d10c      	bne.n	800cde4 <HAL_RCC_OscConfig+0x98>
 800cdca:	4b7b      	ldr	r3, [pc, #492]	@ (800cfb8 <HAL_RCC_OscConfig+0x26c>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	4a7a      	ldr	r2, [pc, #488]	@ (800cfb8 <HAL_RCC_OscConfig+0x26c>)
 800cdd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cdd4:	6013      	str	r3, [r2, #0]
 800cdd6:	4b78      	ldr	r3, [pc, #480]	@ (800cfb8 <HAL_RCC_OscConfig+0x26c>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	4a77      	ldr	r2, [pc, #476]	@ (800cfb8 <HAL_RCC_OscConfig+0x26c>)
 800cddc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cde0:	6013      	str	r3, [r2, #0]
 800cde2:	e01d      	b.n	800ce20 <HAL_RCC_OscConfig+0xd4>
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	685b      	ldr	r3, [r3, #4]
 800cde8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800cdec:	d10c      	bne.n	800ce08 <HAL_RCC_OscConfig+0xbc>
 800cdee:	4b72      	ldr	r3, [pc, #456]	@ (800cfb8 <HAL_RCC_OscConfig+0x26c>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	4a71      	ldr	r2, [pc, #452]	@ (800cfb8 <HAL_RCC_OscConfig+0x26c>)
 800cdf4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800cdf8:	6013      	str	r3, [r2, #0]
 800cdfa:	4b6f      	ldr	r3, [pc, #444]	@ (800cfb8 <HAL_RCC_OscConfig+0x26c>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	4a6e      	ldr	r2, [pc, #440]	@ (800cfb8 <HAL_RCC_OscConfig+0x26c>)
 800ce00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ce04:	6013      	str	r3, [r2, #0]
 800ce06:	e00b      	b.n	800ce20 <HAL_RCC_OscConfig+0xd4>
 800ce08:	4b6b      	ldr	r3, [pc, #428]	@ (800cfb8 <HAL_RCC_OscConfig+0x26c>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	4a6a      	ldr	r2, [pc, #424]	@ (800cfb8 <HAL_RCC_OscConfig+0x26c>)
 800ce0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ce12:	6013      	str	r3, [r2, #0]
 800ce14:	4b68      	ldr	r3, [pc, #416]	@ (800cfb8 <HAL_RCC_OscConfig+0x26c>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	4a67      	ldr	r2, [pc, #412]	@ (800cfb8 <HAL_RCC_OscConfig+0x26c>)
 800ce1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ce1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	685b      	ldr	r3, [r3, #4]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d013      	beq.n	800ce50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ce28:	f7fb fb4c 	bl	80084c4 <HAL_GetTick>
 800ce2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ce2e:	e008      	b.n	800ce42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ce30:	f7fb fb48 	bl	80084c4 <HAL_GetTick>
 800ce34:	4602      	mov	r2, r0
 800ce36:	693b      	ldr	r3, [r7, #16]
 800ce38:	1ad3      	subs	r3, r2, r3
 800ce3a:	2b64      	cmp	r3, #100	@ 0x64
 800ce3c:	d901      	bls.n	800ce42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800ce3e:	2303      	movs	r3, #3
 800ce40:	e200      	b.n	800d244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ce42:	4b5d      	ldr	r3, [pc, #372]	@ (800cfb8 <HAL_RCC_OscConfig+0x26c>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d0f0      	beq.n	800ce30 <HAL_RCC_OscConfig+0xe4>
 800ce4e:	e014      	b.n	800ce7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ce50:	f7fb fb38 	bl	80084c4 <HAL_GetTick>
 800ce54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ce56:	e008      	b.n	800ce6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ce58:	f7fb fb34 	bl	80084c4 <HAL_GetTick>
 800ce5c:	4602      	mov	r2, r0
 800ce5e:	693b      	ldr	r3, [r7, #16]
 800ce60:	1ad3      	subs	r3, r2, r3
 800ce62:	2b64      	cmp	r3, #100	@ 0x64
 800ce64:	d901      	bls.n	800ce6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800ce66:	2303      	movs	r3, #3
 800ce68:	e1ec      	b.n	800d244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ce6a:	4b53      	ldr	r3, [pc, #332]	@ (800cfb8 <HAL_RCC_OscConfig+0x26c>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d1f0      	bne.n	800ce58 <HAL_RCC_OscConfig+0x10c>
 800ce76:	e000      	b.n	800ce7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ce78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	f003 0302 	and.w	r3, r3, #2
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d063      	beq.n	800cf4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ce86:	4b4c      	ldr	r3, [pc, #304]	@ (800cfb8 <HAL_RCC_OscConfig+0x26c>)
 800ce88:	685b      	ldr	r3, [r3, #4]
 800ce8a:	f003 030c 	and.w	r3, r3, #12
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d00b      	beq.n	800ceaa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800ce92:	4b49      	ldr	r3, [pc, #292]	@ (800cfb8 <HAL_RCC_OscConfig+0x26c>)
 800ce94:	685b      	ldr	r3, [r3, #4]
 800ce96:	f003 030c 	and.w	r3, r3, #12
 800ce9a:	2b08      	cmp	r3, #8
 800ce9c:	d11c      	bne.n	800ced8 <HAL_RCC_OscConfig+0x18c>
 800ce9e:	4b46      	ldr	r3, [pc, #280]	@ (800cfb8 <HAL_RCC_OscConfig+0x26c>)
 800cea0:	685b      	ldr	r3, [r3, #4]
 800cea2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d116      	bne.n	800ced8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ceaa:	4b43      	ldr	r3, [pc, #268]	@ (800cfb8 <HAL_RCC_OscConfig+0x26c>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	f003 0302 	and.w	r3, r3, #2
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d005      	beq.n	800cec2 <HAL_RCC_OscConfig+0x176>
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	691b      	ldr	r3, [r3, #16]
 800ceba:	2b01      	cmp	r3, #1
 800cebc:	d001      	beq.n	800cec2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800cebe:	2301      	movs	r3, #1
 800cec0:	e1c0      	b.n	800d244 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cec2:	4b3d      	ldr	r3, [pc, #244]	@ (800cfb8 <HAL_RCC_OscConfig+0x26c>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	695b      	ldr	r3, [r3, #20]
 800cece:	00db      	lsls	r3, r3, #3
 800ced0:	4939      	ldr	r1, [pc, #228]	@ (800cfb8 <HAL_RCC_OscConfig+0x26c>)
 800ced2:	4313      	orrs	r3, r2
 800ced4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ced6:	e03a      	b.n	800cf4e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	691b      	ldr	r3, [r3, #16]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d020      	beq.n	800cf22 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cee0:	4b36      	ldr	r3, [pc, #216]	@ (800cfbc <HAL_RCC_OscConfig+0x270>)
 800cee2:	2201      	movs	r2, #1
 800cee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cee6:	f7fb faed 	bl	80084c4 <HAL_GetTick>
 800ceea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ceec:	e008      	b.n	800cf00 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ceee:	f7fb fae9 	bl	80084c4 <HAL_GetTick>
 800cef2:	4602      	mov	r2, r0
 800cef4:	693b      	ldr	r3, [r7, #16]
 800cef6:	1ad3      	subs	r3, r2, r3
 800cef8:	2b02      	cmp	r3, #2
 800cefa:	d901      	bls.n	800cf00 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800cefc:	2303      	movs	r3, #3
 800cefe:	e1a1      	b.n	800d244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cf00:	4b2d      	ldr	r3, [pc, #180]	@ (800cfb8 <HAL_RCC_OscConfig+0x26c>)
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	f003 0302 	and.w	r3, r3, #2
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d0f0      	beq.n	800ceee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cf0c:	4b2a      	ldr	r3, [pc, #168]	@ (800cfb8 <HAL_RCC_OscConfig+0x26c>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	695b      	ldr	r3, [r3, #20]
 800cf18:	00db      	lsls	r3, r3, #3
 800cf1a:	4927      	ldr	r1, [pc, #156]	@ (800cfb8 <HAL_RCC_OscConfig+0x26c>)
 800cf1c:	4313      	orrs	r3, r2
 800cf1e:	600b      	str	r3, [r1, #0]
 800cf20:	e015      	b.n	800cf4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cf22:	4b26      	ldr	r3, [pc, #152]	@ (800cfbc <HAL_RCC_OscConfig+0x270>)
 800cf24:	2200      	movs	r2, #0
 800cf26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cf28:	f7fb facc 	bl	80084c4 <HAL_GetTick>
 800cf2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cf2e:	e008      	b.n	800cf42 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cf30:	f7fb fac8 	bl	80084c4 <HAL_GetTick>
 800cf34:	4602      	mov	r2, r0
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	1ad3      	subs	r3, r2, r3
 800cf3a:	2b02      	cmp	r3, #2
 800cf3c:	d901      	bls.n	800cf42 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800cf3e:	2303      	movs	r3, #3
 800cf40:	e180      	b.n	800d244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cf42:	4b1d      	ldr	r3, [pc, #116]	@ (800cfb8 <HAL_RCC_OscConfig+0x26c>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	f003 0302 	and.w	r3, r3, #2
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d1f0      	bne.n	800cf30 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	f003 0308 	and.w	r3, r3, #8
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d03a      	beq.n	800cfd0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	699b      	ldr	r3, [r3, #24]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d019      	beq.n	800cf96 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cf62:	4b17      	ldr	r3, [pc, #92]	@ (800cfc0 <HAL_RCC_OscConfig+0x274>)
 800cf64:	2201      	movs	r2, #1
 800cf66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cf68:	f7fb faac 	bl	80084c4 <HAL_GetTick>
 800cf6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cf6e:	e008      	b.n	800cf82 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cf70:	f7fb faa8 	bl	80084c4 <HAL_GetTick>
 800cf74:	4602      	mov	r2, r0
 800cf76:	693b      	ldr	r3, [r7, #16]
 800cf78:	1ad3      	subs	r3, r2, r3
 800cf7a:	2b02      	cmp	r3, #2
 800cf7c:	d901      	bls.n	800cf82 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800cf7e:	2303      	movs	r3, #3
 800cf80:	e160      	b.n	800d244 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cf82:	4b0d      	ldr	r3, [pc, #52]	@ (800cfb8 <HAL_RCC_OscConfig+0x26c>)
 800cf84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf86:	f003 0302 	and.w	r3, r3, #2
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d0f0      	beq.n	800cf70 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800cf8e:	2001      	movs	r0, #1
 800cf90:	f000 fafe 	bl	800d590 <RCC_Delay>
 800cf94:	e01c      	b.n	800cfd0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cf96:	4b0a      	ldr	r3, [pc, #40]	@ (800cfc0 <HAL_RCC_OscConfig+0x274>)
 800cf98:	2200      	movs	r2, #0
 800cf9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cf9c:	f7fb fa92 	bl	80084c4 <HAL_GetTick>
 800cfa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cfa2:	e00f      	b.n	800cfc4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cfa4:	f7fb fa8e 	bl	80084c4 <HAL_GetTick>
 800cfa8:	4602      	mov	r2, r0
 800cfaa:	693b      	ldr	r3, [r7, #16]
 800cfac:	1ad3      	subs	r3, r2, r3
 800cfae:	2b02      	cmp	r3, #2
 800cfb0:	d908      	bls.n	800cfc4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800cfb2:	2303      	movs	r3, #3
 800cfb4:	e146      	b.n	800d244 <HAL_RCC_OscConfig+0x4f8>
 800cfb6:	bf00      	nop
 800cfb8:	40021000 	.word	0x40021000
 800cfbc:	42420000 	.word	0x42420000
 800cfc0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cfc4:	4b92      	ldr	r3, [pc, #584]	@ (800d210 <HAL_RCC_OscConfig+0x4c4>)
 800cfc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfc8:	f003 0302 	and.w	r3, r3, #2
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d1e9      	bne.n	800cfa4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	f003 0304 	and.w	r3, r3, #4
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	f000 80a6 	beq.w	800d12a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cfe2:	4b8b      	ldr	r3, [pc, #556]	@ (800d210 <HAL_RCC_OscConfig+0x4c4>)
 800cfe4:	69db      	ldr	r3, [r3, #28]
 800cfe6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d10d      	bne.n	800d00a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cfee:	4b88      	ldr	r3, [pc, #544]	@ (800d210 <HAL_RCC_OscConfig+0x4c4>)
 800cff0:	69db      	ldr	r3, [r3, #28]
 800cff2:	4a87      	ldr	r2, [pc, #540]	@ (800d210 <HAL_RCC_OscConfig+0x4c4>)
 800cff4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cff8:	61d3      	str	r3, [r2, #28]
 800cffa:	4b85      	ldr	r3, [pc, #532]	@ (800d210 <HAL_RCC_OscConfig+0x4c4>)
 800cffc:	69db      	ldr	r3, [r3, #28]
 800cffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d002:	60bb      	str	r3, [r7, #8]
 800d004:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d006:	2301      	movs	r3, #1
 800d008:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d00a:	4b82      	ldr	r3, [pc, #520]	@ (800d214 <HAL_RCC_OscConfig+0x4c8>)
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d012:	2b00      	cmp	r3, #0
 800d014:	d118      	bne.n	800d048 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d016:	4b7f      	ldr	r3, [pc, #508]	@ (800d214 <HAL_RCC_OscConfig+0x4c8>)
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	4a7e      	ldr	r2, [pc, #504]	@ (800d214 <HAL_RCC_OscConfig+0x4c8>)
 800d01c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d020:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d022:	f7fb fa4f 	bl	80084c4 <HAL_GetTick>
 800d026:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d028:	e008      	b.n	800d03c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d02a:	f7fb fa4b 	bl	80084c4 <HAL_GetTick>
 800d02e:	4602      	mov	r2, r0
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	1ad3      	subs	r3, r2, r3
 800d034:	2b64      	cmp	r3, #100	@ 0x64
 800d036:	d901      	bls.n	800d03c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800d038:	2303      	movs	r3, #3
 800d03a:	e103      	b.n	800d244 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d03c:	4b75      	ldr	r3, [pc, #468]	@ (800d214 <HAL_RCC_OscConfig+0x4c8>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d044:	2b00      	cmp	r3, #0
 800d046:	d0f0      	beq.n	800d02a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	68db      	ldr	r3, [r3, #12]
 800d04c:	2b01      	cmp	r3, #1
 800d04e:	d106      	bne.n	800d05e <HAL_RCC_OscConfig+0x312>
 800d050:	4b6f      	ldr	r3, [pc, #444]	@ (800d210 <HAL_RCC_OscConfig+0x4c4>)
 800d052:	6a1b      	ldr	r3, [r3, #32]
 800d054:	4a6e      	ldr	r2, [pc, #440]	@ (800d210 <HAL_RCC_OscConfig+0x4c4>)
 800d056:	f043 0301 	orr.w	r3, r3, #1
 800d05a:	6213      	str	r3, [r2, #32]
 800d05c:	e02d      	b.n	800d0ba <HAL_RCC_OscConfig+0x36e>
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	68db      	ldr	r3, [r3, #12]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d10c      	bne.n	800d080 <HAL_RCC_OscConfig+0x334>
 800d066:	4b6a      	ldr	r3, [pc, #424]	@ (800d210 <HAL_RCC_OscConfig+0x4c4>)
 800d068:	6a1b      	ldr	r3, [r3, #32]
 800d06a:	4a69      	ldr	r2, [pc, #420]	@ (800d210 <HAL_RCC_OscConfig+0x4c4>)
 800d06c:	f023 0301 	bic.w	r3, r3, #1
 800d070:	6213      	str	r3, [r2, #32]
 800d072:	4b67      	ldr	r3, [pc, #412]	@ (800d210 <HAL_RCC_OscConfig+0x4c4>)
 800d074:	6a1b      	ldr	r3, [r3, #32]
 800d076:	4a66      	ldr	r2, [pc, #408]	@ (800d210 <HAL_RCC_OscConfig+0x4c4>)
 800d078:	f023 0304 	bic.w	r3, r3, #4
 800d07c:	6213      	str	r3, [r2, #32]
 800d07e:	e01c      	b.n	800d0ba <HAL_RCC_OscConfig+0x36e>
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	68db      	ldr	r3, [r3, #12]
 800d084:	2b05      	cmp	r3, #5
 800d086:	d10c      	bne.n	800d0a2 <HAL_RCC_OscConfig+0x356>
 800d088:	4b61      	ldr	r3, [pc, #388]	@ (800d210 <HAL_RCC_OscConfig+0x4c4>)
 800d08a:	6a1b      	ldr	r3, [r3, #32]
 800d08c:	4a60      	ldr	r2, [pc, #384]	@ (800d210 <HAL_RCC_OscConfig+0x4c4>)
 800d08e:	f043 0304 	orr.w	r3, r3, #4
 800d092:	6213      	str	r3, [r2, #32]
 800d094:	4b5e      	ldr	r3, [pc, #376]	@ (800d210 <HAL_RCC_OscConfig+0x4c4>)
 800d096:	6a1b      	ldr	r3, [r3, #32]
 800d098:	4a5d      	ldr	r2, [pc, #372]	@ (800d210 <HAL_RCC_OscConfig+0x4c4>)
 800d09a:	f043 0301 	orr.w	r3, r3, #1
 800d09e:	6213      	str	r3, [r2, #32]
 800d0a0:	e00b      	b.n	800d0ba <HAL_RCC_OscConfig+0x36e>
 800d0a2:	4b5b      	ldr	r3, [pc, #364]	@ (800d210 <HAL_RCC_OscConfig+0x4c4>)
 800d0a4:	6a1b      	ldr	r3, [r3, #32]
 800d0a6:	4a5a      	ldr	r2, [pc, #360]	@ (800d210 <HAL_RCC_OscConfig+0x4c4>)
 800d0a8:	f023 0301 	bic.w	r3, r3, #1
 800d0ac:	6213      	str	r3, [r2, #32]
 800d0ae:	4b58      	ldr	r3, [pc, #352]	@ (800d210 <HAL_RCC_OscConfig+0x4c4>)
 800d0b0:	6a1b      	ldr	r3, [r3, #32]
 800d0b2:	4a57      	ldr	r2, [pc, #348]	@ (800d210 <HAL_RCC_OscConfig+0x4c4>)
 800d0b4:	f023 0304 	bic.w	r3, r3, #4
 800d0b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	68db      	ldr	r3, [r3, #12]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d015      	beq.n	800d0ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d0c2:	f7fb f9ff 	bl	80084c4 <HAL_GetTick>
 800d0c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d0c8:	e00a      	b.n	800d0e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d0ca:	f7fb f9fb 	bl	80084c4 <HAL_GetTick>
 800d0ce:	4602      	mov	r2, r0
 800d0d0:	693b      	ldr	r3, [r7, #16]
 800d0d2:	1ad3      	subs	r3, r2, r3
 800d0d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d0d8:	4293      	cmp	r3, r2
 800d0da:	d901      	bls.n	800d0e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800d0dc:	2303      	movs	r3, #3
 800d0de:	e0b1      	b.n	800d244 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d0e0:	4b4b      	ldr	r3, [pc, #300]	@ (800d210 <HAL_RCC_OscConfig+0x4c4>)
 800d0e2:	6a1b      	ldr	r3, [r3, #32]
 800d0e4:	f003 0302 	and.w	r3, r3, #2
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d0ee      	beq.n	800d0ca <HAL_RCC_OscConfig+0x37e>
 800d0ec:	e014      	b.n	800d118 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d0ee:	f7fb f9e9 	bl	80084c4 <HAL_GetTick>
 800d0f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d0f4:	e00a      	b.n	800d10c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d0f6:	f7fb f9e5 	bl	80084c4 <HAL_GetTick>
 800d0fa:	4602      	mov	r2, r0
 800d0fc:	693b      	ldr	r3, [r7, #16]
 800d0fe:	1ad3      	subs	r3, r2, r3
 800d100:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d104:	4293      	cmp	r3, r2
 800d106:	d901      	bls.n	800d10c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800d108:	2303      	movs	r3, #3
 800d10a:	e09b      	b.n	800d244 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d10c:	4b40      	ldr	r3, [pc, #256]	@ (800d210 <HAL_RCC_OscConfig+0x4c4>)
 800d10e:	6a1b      	ldr	r3, [r3, #32]
 800d110:	f003 0302 	and.w	r3, r3, #2
 800d114:	2b00      	cmp	r3, #0
 800d116:	d1ee      	bne.n	800d0f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800d118:	7dfb      	ldrb	r3, [r7, #23]
 800d11a:	2b01      	cmp	r3, #1
 800d11c:	d105      	bne.n	800d12a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d11e:	4b3c      	ldr	r3, [pc, #240]	@ (800d210 <HAL_RCC_OscConfig+0x4c4>)
 800d120:	69db      	ldr	r3, [r3, #28]
 800d122:	4a3b      	ldr	r2, [pc, #236]	@ (800d210 <HAL_RCC_OscConfig+0x4c4>)
 800d124:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d128:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	69db      	ldr	r3, [r3, #28]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	f000 8087 	beq.w	800d242 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d134:	4b36      	ldr	r3, [pc, #216]	@ (800d210 <HAL_RCC_OscConfig+0x4c4>)
 800d136:	685b      	ldr	r3, [r3, #4]
 800d138:	f003 030c 	and.w	r3, r3, #12
 800d13c:	2b08      	cmp	r3, #8
 800d13e:	d061      	beq.n	800d204 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	69db      	ldr	r3, [r3, #28]
 800d144:	2b02      	cmp	r3, #2
 800d146:	d146      	bne.n	800d1d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d148:	4b33      	ldr	r3, [pc, #204]	@ (800d218 <HAL_RCC_OscConfig+0x4cc>)
 800d14a:	2200      	movs	r2, #0
 800d14c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d14e:	f7fb f9b9 	bl	80084c4 <HAL_GetTick>
 800d152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800d154:	e008      	b.n	800d168 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d156:	f7fb f9b5 	bl	80084c4 <HAL_GetTick>
 800d15a:	4602      	mov	r2, r0
 800d15c:	693b      	ldr	r3, [r7, #16]
 800d15e:	1ad3      	subs	r3, r2, r3
 800d160:	2b02      	cmp	r3, #2
 800d162:	d901      	bls.n	800d168 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800d164:	2303      	movs	r3, #3
 800d166:	e06d      	b.n	800d244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800d168:	4b29      	ldr	r3, [pc, #164]	@ (800d210 <HAL_RCC_OscConfig+0x4c4>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d170:	2b00      	cmp	r3, #0
 800d172:	d1f0      	bne.n	800d156 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	6a1b      	ldr	r3, [r3, #32]
 800d178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d17c:	d108      	bne.n	800d190 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800d17e:	4b24      	ldr	r3, [pc, #144]	@ (800d210 <HAL_RCC_OscConfig+0x4c4>)
 800d180:	685b      	ldr	r3, [r3, #4]
 800d182:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	689b      	ldr	r3, [r3, #8]
 800d18a:	4921      	ldr	r1, [pc, #132]	@ (800d210 <HAL_RCC_OscConfig+0x4c4>)
 800d18c:	4313      	orrs	r3, r2
 800d18e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d190:	4b1f      	ldr	r3, [pc, #124]	@ (800d210 <HAL_RCC_OscConfig+0x4c4>)
 800d192:	685b      	ldr	r3, [r3, #4]
 800d194:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	6a19      	ldr	r1, [r3, #32]
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1a0:	430b      	orrs	r3, r1
 800d1a2:	491b      	ldr	r1, [pc, #108]	@ (800d210 <HAL_RCC_OscConfig+0x4c4>)
 800d1a4:	4313      	orrs	r3, r2
 800d1a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d1a8:	4b1b      	ldr	r3, [pc, #108]	@ (800d218 <HAL_RCC_OscConfig+0x4cc>)
 800d1aa:	2201      	movs	r2, #1
 800d1ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d1ae:	f7fb f989 	bl	80084c4 <HAL_GetTick>
 800d1b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800d1b4:	e008      	b.n	800d1c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d1b6:	f7fb f985 	bl	80084c4 <HAL_GetTick>
 800d1ba:	4602      	mov	r2, r0
 800d1bc:	693b      	ldr	r3, [r7, #16]
 800d1be:	1ad3      	subs	r3, r2, r3
 800d1c0:	2b02      	cmp	r3, #2
 800d1c2:	d901      	bls.n	800d1c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800d1c4:	2303      	movs	r3, #3
 800d1c6:	e03d      	b.n	800d244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800d1c8:	4b11      	ldr	r3, [pc, #68]	@ (800d210 <HAL_RCC_OscConfig+0x4c4>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d0f0      	beq.n	800d1b6 <HAL_RCC_OscConfig+0x46a>
 800d1d4:	e035      	b.n	800d242 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d1d6:	4b10      	ldr	r3, [pc, #64]	@ (800d218 <HAL_RCC_OscConfig+0x4cc>)
 800d1d8:	2200      	movs	r2, #0
 800d1da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d1dc:	f7fb f972 	bl	80084c4 <HAL_GetTick>
 800d1e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800d1e2:	e008      	b.n	800d1f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d1e4:	f7fb f96e 	bl	80084c4 <HAL_GetTick>
 800d1e8:	4602      	mov	r2, r0
 800d1ea:	693b      	ldr	r3, [r7, #16]
 800d1ec:	1ad3      	subs	r3, r2, r3
 800d1ee:	2b02      	cmp	r3, #2
 800d1f0:	d901      	bls.n	800d1f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800d1f2:	2303      	movs	r3, #3
 800d1f4:	e026      	b.n	800d244 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800d1f6:	4b06      	ldr	r3, [pc, #24]	@ (800d210 <HAL_RCC_OscConfig+0x4c4>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d1f0      	bne.n	800d1e4 <HAL_RCC_OscConfig+0x498>
 800d202:	e01e      	b.n	800d242 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	69db      	ldr	r3, [r3, #28]
 800d208:	2b01      	cmp	r3, #1
 800d20a:	d107      	bne.n	800d21c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800d20c:	2301      	movs	r3, #1
 800d20e:	e019      	b.n	800d244 <HAL_RCC_OscConfig+0x4f8>
 800d210:	40021000 	.word	0x40021000
 800d214:	40007000 	.word	0x40007000
 800d218:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800d21c:	4b0b      	ldr	r3, [pc, #44]	@ (800d24c <HAL_RCC_OscConfig+0x500>)
 800d21e:	685b      	ldr	r3, [r3, #4]
 800d220:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	6a1b      	ldr	r3, [r3, #32]
 800d22c:	429a      	cmp	r2, r3
 800d22e:	d106      	bne.n	800d23e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d23a:	429a      	cmp	r2, r3
 800d23c:	d001      	beq.n	800d242 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800d23e:	2301      	movs	r3, #1
 800d240:	e000      	b.n	800d244 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800d242:	2300      	movs	r3, #0
}
 800d244:	4618      	mov	r0, r3
 800d246:	3718      	adds	r7, #24
 800d248:	46bd      	mov	sp, r7
 800d24a:	bd80      	pop	{r7, pc}
 800d24c:	40021000 	.word	0x40021000

0800d250 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b084      	sub	sp, #16
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
 800d258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d101      	bne.n	800d264 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d260:	2301      	movs	r3, #1
 800d262:	e0d0      	b.n	800d406 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d264:	4b6a      	ldr	r3, [pc, #424]	@ (800d410 <HAL_RCC_ClockConfig+0x1c0>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	f003 0307 	and.w	r3, r3, #7
 800d26c:	683a      	ldr	r2, [r7, #0]
 800d26e:	429a      	cmp	r2, r3
 800d270:	d910      	bls.n	800d294 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d272:	4b67      	ldr	r3, [pc, #412]	@ (800d410 <HAL_RCC_ClockConfig+0x1c0>)
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	f023 0207 	bic.w	r2, r3, #7
 800d27a:	4965      	ldr	r1, [pc, #404]	@ (800d410 <HAL_RCC_ClockConfig+0x1c0>)
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	4313      	orrs	r3, r2
 800d280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d282:	4b63      	ldr	r3, [pc, #396]	@ (800d410 <HAL_RCC_ClockConfig+0x1c0>)
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	f003 0307 	and.w	r3, r3, #7
 800d28a:	683a      	ldr	r2, [r7, #0]
 800d28c:	429a      	cmp	r2, r3
 800d28e:	d001      	beq.n	800d294 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800d290:	2301      	movs	r3, #1
 800d292:	e0b8      	b.n	800d406 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	f003 0302 	and.w	r3, r3, #2
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d020      	beq.n	800d2e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	f003 0304 	and.w	r3, r3, #4
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d005      	beq.n	800d2b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d2ac:	4b59      	ldr	r3, [pc, #356]	@ (800d414 <HAL_RCC_ClockConfig+0x1c4>)
 800d2ae:	685b      	ldr	r3, [r3, #4]
 800d2b0:	4a58      	ldr	r2, [pc, #352]	@ (800d414 <HAL_RCC_ClockConfig+0x1c4>)
 800d2b2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800d2b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	f003 0308 	and.w	r3, r3, #8
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d005      	beq.n	800d2d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d2c4:	4b53      	ldr	r3, [pc, #332]	@ (800d414 <HAL_RCC_ClockConfig+0x1c4>)
 800d2c6:	685b      	ldr	r3, [r3, #4]
 800d2c8:	4a52      	ldr	r2, [pc, #328]	@ (800d414 <HAL_RCC_ClockConfig+0x1c4>)
 800d2ca:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800d2ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d2d0:	4b50      	ldr	r3, [pc, #320]	@ (800d414 <HAL_RCC_ClockConfig+0x1c4>)
 800d2d2:	685b      	ldr	r3, [r3, #4]
 800d2d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	689b      	ldr	r3, [r3, #8]
 800d2dc:	494d      	ldr	r1, [pc, #308]	@ (800d414 <HAL_RCC_ClockConfig+0x1c4>)
 800d2de:	4313      	orrs	r3, r2
 800d2e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	f003 0301 	and.w	r3, r3, #1
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d040      	beq.n	800d370 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	685b      	ldr	r3, [r3, #4]
 800d2f2:	2b01      	cmp	r3, #1
 800d2f4:	d107      	bne.n	800d306 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d2f6:	4b47      	ldr	r3, [pc, #284]	@ (800d414 <HAL_RCC_ClockConfig+0x1c4>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d115      	bne.n	800d32e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d302:	2301      	movs	r3, #1
 800d304:	e07f      	b.n	800d406 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	685b      	ldr	r3, [r3, #4]
 800d30a:	2b02      	cmp	r3, #2
 800d30c:	d107      	bne.n	800d31e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d30e:	4b41      	ldr	r3, [pc, #260]	@ (800d414 <HAL_RCC_ClockConfig+0x1c4>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d316:	2b00      	cmp	r3, #0
 800d318:	d109      	bne.n	800d32e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d31a:	2301      	movs	r3, #1
 800d31c:	e073      	b.n	800d406 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d31e:	4b3d      	ldr	r3, [pc, #244]	@ (800d414 <HAL_RCC_ClockConfig+0x1c4>)
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	f003 0302 	and.w	r3, r3, #2
 800d326:	2b00      	cmp	r3, #0
 800d328:	d101      	bne.n	800d32e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d32a:	2301      	movs	r3, #1
 800d32c:	e06b      	b.n	800d406 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d32e:	4b39      	ldr	r3, [pc, #228]	@ (800d414 <HAL_RCC_ClockConfig+0x1c4>)
 800d330:	685b      	ldr	r3, [r3, #4]
 800d332:	f023 0203 	bic.w	r2, r3, #3
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	685b      	ldr	r3, [r3, #4]
 800d33a:	4936      	ldr	r1, [pc, #216]	@ (800d414 <HAL_RCC_ClockConfig+0x1c4>)
 800d33c:	4313      	orrs	r3, r2
 800d33e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800d340:	f7fb f8c0 	bl	80084c4 <HAL_GetTick>
 800d344:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d346:	e00a      	b.n	800d35e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d348:	f7fb f8bc 	bl	80084c4 <HAL_GetTick>
 800d34c:	4602      	mov	r2, r0
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	1ad3      	subs	r3, r2, r3
 800d352:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d356:	4293      	cmp	r3, r2
 800d358:	d901      	bls.n	800d35e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800d35a:	2303      	movs	r3, #3
 800d35c:	e053      	b.n	800d406 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d35e:	4b2d      	ldr	r3, [pc, #180]	@ (800d414 <HAL_RCC_ClockConfig+0x1c4>)
 800d360:	685b      	ldr	r3, [r3, #4]
 800d362:	f003 020c 	and.w	r2, r3, #12
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	685b      	ldr	r3, [r3, #4]
 800d36a:	009b      	lsls	r3, r3, #2
 800d36c:	429a      	cmp	r2, r3
 800d36e:	d1eb      	bne.n	800d348 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d370:	4b27      	ldr	r3, [pc, #156]	@ (800d410 <HAL_RCC_ClockConfig+0x1c0>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	f003 0307 	and.w	r3, r3, #7
 800d378:	683a      	ldr	r2, [r7, #0]
 800d37a:	429a      	cmp	r2, r3
 800d37c:	d210      	bcs.n	800d3a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d37e:	4b24      	ldr	r3, [pc, #144]	@ (800d410 <HAL_RCC_ClockConfig+0x1c0>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	f023 0207 	bic.w	r2, r3, #7
 800d386:	4922      	ldr	r1, [pc, #136]	@ (800d410 <HAL_RCC_ClockConfig+0x1c0>)
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	4313      	orrs	r3, r2
 800d38c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d38e:	4b20      	ldr	r3, [pc, #128]	@ (800d410 <HAL_RCC_ClockConfig+0x1c0>)
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	f003 0307 	and.w	r3, r3, #7
 800d396:	683a      	ldr	r2, [r7, #0]
 800d398:	429a      	cmp	r2, r3
 800d39a:	d001      	beq.n	800d3a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800d39c:	2301      	movs	r3, #1
 800d39e:	e032      	b.n	800d406 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	f003 0304 	and.w	r3, r3, #4
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d008      	beq.n	800d3be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d3ac:	4b19      	ldr	r3, [pc, #100]	@ (800d414 <HAL_RCC_ClockConfig+0x1c4>)
 800d3ae:	685b      	ldr	r3, [r3, #4]
 800d3b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	68db      	ldr	r3, [r3, #12]
 800d3b8:	4916      	ldr	r1, [pc, #88]	@ (800d414 <HAL_RCC_ClockConfig+0x1c4>)
 800d3ba:	4313      	orrs	r3, r2
 800d3bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	f003 0308 	and.w	r3, r3, #8
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d009      	beq.n	800d3de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800d3ca:	4b12      	ldr	r3, [pc, #72]	@ (800d414 <HAL_RCC_ClockConfig+0x1c4>)
 800d3cc:	685b      	ldr	r3, [r3, #4]
 800d3ce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	691b      	ldr	r3, [r3, #16]
 800d3d6:	00db      	lsls	r3, r3, #3
 800d3d8:	490e      	ldr	r1, [pc, #56]	@ (800d414 <HAL_RCC_ClockConfig+0x1c4>)
 800d3da:	4313      	orrs	r3, r2
 800d3dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800d3de:	f000 f821 	bl	800d424 <HAL_RCC_GetSysClockFreq>
 800d3e2:	4602      	mov	r2, r0
 800d3e4:	4b0b      	ldr	r3, [pc, #44]	@ (800d414 <HAL_RCC_ClockConfig+0x1c4>)
 800d3e6:	685b      	ldr	r3, [r3, #4]
 800d3e8:	091b      	lsrs	r3, r3, #4
 800d3ea:	f003 030f 	and.w	r3, r3, #15
 800d3ee:	490a      	ldr	r1, [pc, #40]	@ (800d418 <HAL_RCC_ClockConfig+0x1c8>)
 800d3f0:	5ccb      	ldrb	r3, [r1, r3]
 800d3f2:	fa22 f303 	lsr.w	r3, r2, r3
 800d3f6:	4a09      	ldr	r2, [pc, #36]	@ (800d41c <HAL_RCC_ClockConfig+0x1cc>)
 800d3f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800d3fa:	4b09      	ldr	r3, [pc, #36]	@ (800d420 <HAL_RCC_ClockConfig+0x1d0>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	4618      	mov	r0, r3
 800d400:	f7f4 fbe8 	bl	8001bd4 <HAL_InitTick>

  return HAL_OK;
 800d404:	2300      	movs	r3, #0
}
 800d406:	4618      	mov	r0, r3
 800d408:	3710      	adds	r7, #16
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}
 800d40e:	bf00      	nop
 800d410:	40022000 	.word	0x40022000
 800d414:	40021000 	.word	0x40021000
 800d418:	08019a94 	.word	0x08019a94
 800d41c:	20000000 	.word	0x20000000
 800d420:	20000610 	.word	0x20000610

0800d424 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d424:	b480      	push	{r7}
 800d426:	b087      	sub	sp, #28
 800d428:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800d42a:	2300      	movs	r3, #0
 800d42c:	60fb      	str	r3, [r7, #12]
 800d42e:	2300      	movs	r3, #0
 800d430:	60bb      	str	r3, [r7, #8]
 800d432:	2300      	movs	r3, #0
 800d434:	617b      	str	r3, [r7, #20]
 800d436:	2300      	movs	r3, #0
 800d438:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800d43a:	2300      	movs	r3, #0
 800d43c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800d43e:	4b1e      	ldr	r3, [pc, #120]	@ (800d4b8 <HAL_RCC_GetSysClockFreq+0x94>)
 800d440:	685b      	ldr	r3, [r3, #4]
 800d442:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	f003 030c 	and.w	r3, r3, #12
 800d44a:	2b04      	cmp	r3, #4
 800d44c:	d002      	beq.n	800d454 <HAL_RCC_GetSysClockFreq+0x30>
 800d44e:	2b08      	cmp	r3, #8
 800d450:	d003      	beq.n	800d45a <HAL_RCC_GetSysClockFreq+0x36>
 800d452:	e027      	b.n	800d4a4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800d454:	4b19      	ldr	r3, [pc, #100]	@ (800d4bc <HAL_RCC_GetSysClockFreq+0x98>)
 800d456:	613b      	str	r3, [r7, #16]
      break;
 800d458:	e027      	b.n	800d4aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	0c9b      	lsrs	r3, r3, #18
 800d45e:	f003 030f 	and.w	r3, r3, #15
 800d462:	4a17      	ldr	r2, [pc, #92]	@ (800d4c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800d464:	5cd3      	ldrb	r3, [r2, r3]
 800d466:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d010      	beq.n	800d494 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800d472:	4b11      	ldr	r3, [pc, #68]	@ (800d4b8 <HAL_RCC_GetSysClockFreq+0x94>)
 800d474:	685b      	ldr	r3, [r3, #4]
 800d476:	0c5b      	lsrs	r3, r3, #17
 800d478:	f003 0301 	and.w	r3, r3, #1
 800d47c:	4a11      	ldr	r2, [pc, #68]	@ (800d4c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800d47e:	5cd3      	ldrb	r3, [r2, r3]
 800d480:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	4a0d      	ldr	r2, [pc, #52]	@ (800d4bc <HAL_RCC_GetSysClockFreq+0x98>)
 800d486:	fb03 f202 	mul.w	r2, r3, r2
 800d48a:	68bb      	ldr	r3, [r7, #8]
 800d48c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d490:	617b      	str	r3, [r7, #20]
 800d492:	e004      	b.n	800d49e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	4a0c      	ldr	r2, [pc, #48]	@ (800d4c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800d498:	fb02 f303 	mul.w	r3, r2, r3
 800d49c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800d49e:	697b      	ldr	r3, [r7, #20]
 800d4a0:	613b      	str	r3, [r7, #16]
      break;
 800d4a2:	e002      	b.n	800d4aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800d4a4:	4b05      	ldr	r3, [pc, #20]	@ (800d4bc <HAL_RCC_GetSysClockFreq+0x98>)
 800d4a6:	613b      	str	r3, [r7, #16]
      break;
 800d4a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d4aa:	693b      	ldr	r3, [r7, #16]
}
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	371c      	adds	r7, #28
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	bc80      	pop	{r7}
 800d4b4:	4770      	bx	lr
 800d4b6:	bf00      	nop
 800d4b8:	40021000 	.word	0x40021000
 800d4bc:	007a1200 	.word	0x007a1200
 800d4c0:	08019f34 	.word	0x08019f34
 800d4c4:	08019f44 	.word	0x08019f44
 800d4c8:	003d0900 	.word	0x003d0900

0800d4cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d4d0:	4b02      	ldr	r3, [pc, #8]	@ (800d4dc <HAL_RCC_GetHCLKFreq+0x10>)
 800d4d2:	681b      	ldr	r3, [r3, #0]
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	bc80      	pop	{r7}
 800d4da:	4770      	bx	lr
 800d4dc:	20000000 	.word	0x20000000

0800d4e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800d4e4:	f7ff fff2 	bl	800d4cc <HAL_RCC_GetHCLKFreq>
 800d4e8:	4602      	mov	r2, r0
 800d4ea:	4b05      	ldr	r3, [pc, #20]	@ (800d500 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d4ec:	685b      	ldr	r3, [r3, #4]
 800d4ee:	0a1b      	lsrs	r3, r3, #8
 800d4f0:	f003 0307 	and.w	r3, r3, #7
 800d4f4:	4903      	ldr	r1, [pc, #12]	@ (800d504 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d4f6:	5ccb      	ldrb	r3, [r1, r3]
 800d4f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	bd80      	pop	{r7, pc}
 800d500:	40021000 	.word	0x40021000
 800d504:	08019aa4 	.word	0x08019aa4

0800d508 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800d50c:	f7ff ffde 	bl	800d4cc <HAL_RCC_GetHCLKFreq>
 800d510:	4602      	mov	r2, r0
 800d512:	4b05      	ldr	r3, [pc, #20]	@ (800d528 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d514:	685b      	ldr	r3, [r3, #4]
 800d516:	0adb      	lsrs	r3, r3, #11
 800d518:	f003 0307 	and.w	r3, r3, #7
 800d51c:	4903      	ldr	r1, [pc, #12]	@ (800d52c <HAL_RCC_GetPCLK2Freq+0x24>)
 800d51e:	5ccb      	ldrb	r3, [r1, r3]
 800d520:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d524:	4618      	mov	r0, r3
 800d526:	bd80      	pop	{r7, pc}
 800d528:	40021000 	.word	0x40021000
 800d52c:	08019aa4 	.word	0x08019aa4

0800d530 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800d530:	b480      	push	{r7}
 800d532:	b083      	sub	sp, #12
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
 800d538:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	220f      	movs	r2, #15
 800d53e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800d540:	4b11      	ldr	r3, [pc, #68]	@ (800d588 <HAL_RCC_GetClockConfig+0x58>)
 800d542:	685b      	ldr	r3, [r3, #4]
 800d544:	f003 0203 	and.w	r2, r3, #3
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800d54c:	4b0e      	ldr	r3, [pc, #56]	@ (800d588 <HAL_RCC_GetClockConfig+0x58>)
 800d54e:	685b      	ldr	r3, [r3, #4]
 800d550:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800d558:	4b0b      	ldr	r3, [pc, #44]	@ (800d588 <HAL_RCC_GetClockConfig+0x58>)
 800d55a:	685b      	ldr	r3, [r3, #4]
 800d55c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800d564:	4b08      	ldr	r3, [pc, #32]	@ (800d588 <HAL_RCC_GetClockConfig+0x58>)
 800d566:	685b      	ldr	r3, [r3, #4]
 800d568:	08db      	lsrs	r3, r3, #3
 800d56a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800d572:	4b06      	ldr	r3, [pc, #24]	@ (800d58c <HAL_RCC_GetClockConfig+0x5c>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	f003 0207 	and.w	r2, r3, #7
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800d57e:	bf00      	nop
 800d580:	370c      	adds	r7, #12
 800d582:	46bd      	mov	sp, r7
 800d584:	bc80      	pop	{r7}
 800d586:	4770      	bx	lr
 800d588:	40021000 	.word	0x40021000
 800d58c:	40022000 	.word	0x40022000

0800d590 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800d590:	b480      	push	{r7}
 800d592:	b085      	sub	sp, #20
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800d598:	4b0a      	ldr	r3, [pc, #40]	@ (800d5c4 <RCC_Delay+0x34>)
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	4a0a      	ldr	r2, [pc, #40]	@ (800d5c8 <RCC_Delay+0x38>)
 800d59e:	fba2 2303 	umull	r2, r3, r2, r3
 800d5a2:	0a5b      	lsrs	r3, r3, #9
 800d5a4:	687a      	ldr	r2, [r7, #4]
 800d5a6:	fb02 f303 	mul.w	r3, r2, r3
 800d5aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800d5ac:	bf00      	nop
  }
  while (Delay --);
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	1e5a      	subs	r2, r3, #1
 800d5b2:	60fa      	str	r2, [r7, #12]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d1f9      	bne.n	800d5ac <RCC_Delay+0x1c>
}
 800d5b8:	bf00      	nop
 800d5ba:	bf00      	nop
 800d5bc:	3714      	adds	r7, #20
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bc80      	pop	{r7}
 800d5c2:	4770      	bx	lr
 800d5c4:	20000000 	.word	0x20000000
 800d5c8:	10624dd3 	.word	0x10624dd3

0800d5cc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b086      	sub	sp, #24
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	613b      	str	r3, [r7, #16]
 800d5d8:	2300      	movs	r3, #0
 800d5da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	f003 0301 	and.w	r3, r3, #1
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d07d      	beq.n	800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d5ec:	4b4f      	ldr	r3, [pc, #316]	@ (800d72c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800d5ee:	69db      	ldr	r3, [r3, #28]
 800d5f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d10d      	bne.n	800d614 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d5f8:	4b4c      	ldr	r3, [pc, #304]	@ (800d72c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800d5fa:	69db      	ldr	r3, [r3, #28]
 800d5fc:	4a4b      	ldr	r2, [pc, #300]	@ (800d72c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800d5fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d602:	61d3      	str	r3, [r2, #28]
 800d604:	4b49      	ldr	r3, [pc, #292]	@ (800d72c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800d606:	69db      	ldr	r3, [r3, #28]
 800d608:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d60c:	60bb      	str	r3, [r7, #8]
 800d60e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d610:	2301      	movs	r3, #1
 800d612:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d614:	4b46      	ldr	r3, [pc, #280]	@ (800d730 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d118      	bne.n	800d652 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d620:	4b43      	ldr	r3, [pc, #268]	@ (800d730 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	4a42      	ldr	r2, [pc, #264]	@ (800d730 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800d626:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d62a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d62c:	f7fa ff4a 	bl	80084c4 <HAL_GetTick>
 800d630:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d632:	e008      	b.n	800d646 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d634:	f7fa ff46 	bl	80084c4 <HAL_GetTick>
 800d638:	4602      	mov	r2, r0
 800d63a:	693b      	ldr	r3, [r7, #16]
 800d63c:	1ad3      	subs	r3, r2, r3
 800d63e:	2b64      	cmp	r3, #100	@ 0x64
 800d640:	d901      	bls.n	800d646 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800d642:	2303      	movs	r3, #3
 800d644:	e06d      	b.n	800d722 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d646:	4b3a      	ldr	r3, [pc, #232]	@ (800d730 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d0f0      	beq.n	800d634 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800d652:	4b36      	ldr	r3, [pc, #216]	@ (800d72c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800d654:	6a1b      	ldr	r3, [r3, #32]
 800d656:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d65a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d02e      	beq.n	800d6c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	685b      	ldr	r3, [r3, #4]
 800d666:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d66a:	68fa      	ldr	r2, [r7, #12]
 800d66c:	429a      	cmp	r2, r3
 800d66e:	d027      	beq.n	800d6c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d670:	4b2e      	ldr	r3, [pc, #184]	@ (800d72c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800d672:	6a1b      	ldr	r3, [r3, #32]
 800d674:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d678:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800d67a:	4b2e      	ldr	r3, [pc, #184]	@ (800d734 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800d67c:	2201      	movs	r2, #1
 800d67e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800d680:	4b2c      	ldr	r3, [pc, #176]	@ (800d734 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800d682:	2200      	movs	r2, #0
 800d684:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800d686:	4a29      	ldr	r2, [pc, #164]	@ (800d72c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	f003 0301 	and.w	r3, r3, #1
 800d692:	2b00      	cmp	r3, #0
 800d694:	d014      	beq.n	800d6c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d696:	f7fa ff15 	bl	80084c4 <HAL_GetTick>
 800d69a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d69c:	e00a      	b.n	800d6b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d69e:	f7fa ff11 	bl	80084c4 <HAL_GetTick>
 800d6a2:	4602      	mov	r2, r0
 800d6a4:	693b      	ldr	r3, [r7, #16]
 800d6a6:	1ad3      	subs	r3, r2, r3
 800d6a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d6ac:	4293      	cmp	r3, r2
 800d6ae:	d901      	bls.n	800d6b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800d6b0:	2303      	movs	r3, #3
 800d6b2:	e036      	b.n	800d722 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d6b4:	4b1d      	ldr	r3, [pc, #116]	@ (800d72c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800d6b6:	6a1b      	ldr	r3, [r3, #32]
 800d6b8:	f003 0302 	and.w	r3, r3, #2
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d0ee      	beq.n	800d69e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d6c0:	4b1a      	ldr	r3, [pc, #104]	@ (800d72c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800d6c2:	6a1b      	ldr	r3, [r3, #32]
 800d6c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	685b      	ldr	r3, [r3, #4]
 800d6cc:	4917      	ldr	r1, [pc, #92]	@ (800d72c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800d6ce:	4313      	orrs	r3, r2
 800d6d0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800d6d2:	7dfb      	ldrb	r3, [r7, #23]
 800d6d4:	2b01      	cmp	r3, #1
 800d6d6:	d105      	bne.n	800d6e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d6d8:	4b14      	ldr	r3, [pc, #80]	@ (800d72c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800d6da:	69db      	ldr	r3, [r3, #28]
 800d6dc:	4a13      	ldr	r2, [pc, #76]	@ (800d72c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800d6de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d6e2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	f003 0302 	and.w	r3, r3, #2
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d008      	beq.n	800d702 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d6f0:	4b0e      	ldr	r3, [pc, #56]	@ (800d72c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800d6f2:	685b      	ldr	r3, [r3, #4]
 800d6f4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	689b      	ldr	r3, [r3, #8]
 800d6fc:	490b      	ldr	r1, [pc, #44]	@ (800d72c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800d6fe:	4313      	orrs	r3, r2
 800d700:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	f003 0310 	and.w	r3, r3, #16
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d008      	beq.n	800d720 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d70e:	4b07      	ldr	r3, [pc, #28]	@ (800d72c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800d710:	685b      	ldr	r3, [r3, #4]
 800d712:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	695b      	ldr	r3, [r3, #20]
 800d71a:	4904      	ldr	r1, [pc, #16]	@ (800d72c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800d71c:	4313      	orrs	r3, r2
 800d71e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800d720:	2300      	movs	r3, #0
}
 800d722:	4618      	mov	r0, r3
 800d724:	3718      	adds	r7, #24
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}
 800d72a:	bf00      	nop
 800d72c:	40021000 	.word	0x40021000
 800d730:	40007000 	.word	0x40007000
 800d734:	42420440 	.word	0x42420440

0800d738 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b088      	sub	sp, #32
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800d740:	2300      	movs	r3, #0
 800d742:	617b      	str	r3, [r7, #20]
 800d744:	2300      	movs	r3, #0
 800d746:	61fb      	str	r3, [r7, #28]
 800d748:	2300      	movs	r3, #0
 800d74a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800d74c:	2300      	movs	r3, #0
 800d74e:	60fb      	str	r3, [r7, #12]
 800d750:	2300      	movs	r3, #0
 800d752:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	3b01      	subs	r3, #1
 800d758:	2b0f      	cmp	r3, #15
 800d75a:	f200 80af 	bhi.w	800d8bc <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 800d75e:	a201      	add	r2, pc, #4	@ (adr r2, 800d764 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800d760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d764:	0800d83b 	.word	0x0800d83b
 800d768:	0800d8a1 	.word	0x0800d8a1
 800d76c:	0800d8bd 	.word	0x0800d8bd
 800d770:	0800d82b 	.word	0x0800d82b
 800d774:	0800d8bd 	.word	0x0800d8bd
 800d778:	0800d8bd 	.word	0x0800d8bd
 800d77c:	0800d8bd 	.word	0x0800d8bd
 800d780:	0800d833 	.word	0x0800d833
 800d784:	0800d8bd 	.word	0x0800d8bd
 800d788:	0800d8bd 	.word	0x0800d8bd
 800d78c:	0800d8bd 	.word	0x0800d8bd
 800d790:	0800d8bd 	.word	0x0800d8bd
 800d794:	0800d8bd 	.word	0x0800d8bd
 800d798:	0800d8bd 	.word	0x0800d8bd
 800d79c:	0800d8bd 	.word	0x0800d8bd
 800d7a0:	0800d7a5 	.word	0x0800d7a5
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 800d7a4:	4b4a      	ldr	r3, [pc, #296]	@ (800d8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800d7a6:	685b      	ldr	r3, [r3, #4]
 800d7a8:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800d7aa:	4b49      	ldr	r3, [pc, #292]	@ (800d8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	f000 8084 	beq.w	800d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	0c9b      	lsrs	r3, r3, #18
 800d7bc:	f003 030f 	and.w	r3, r3, #15
 800d7c0:	4a44      	ldr	r2, [pc, #272]	@ (800d8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 800d7c2:	5cd3      	ldrb	r3, [r2, r3]
 800d7c4:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d015      	beq.n	800d7fc <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800d7d0:	4b3f      	ldr	r3, [pc, #252]	@ (800d8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800d7d2:	685b      	ldr	r3, [r3, #4]
 800d7d4:	0c5b      	lsrs	r3, r3, #17
 800d7d6:	f003 0301 	and.w	r3, r3, #1
 800d7da:	4a3f      	ldr	r2, [pc, #252]	@ (800d8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 800d7dc:	5cd3      	ldrb	r3, [r2, r3]
 800d7de:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d00d      	beq.n	800d806 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800d7ea:	4a3c      	ldr	r2, [pc, #240]	@ (800d8dc <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 800d7ec:	697b      	ldr	r3, [r7, #20]
 800d7ee:	fbb2 f2f3 	udiv	r2, r2, r3
 800d7f2:	693b      	ldr	r3, [r7, #16]
 800d7f4:	fb02 f303 	mul.w	r3, r2, r3
 800d7f8:	61fb      	str	r3, [r7, #28]
 800d7fa:	e004      	b.n	800d806 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800d7fc:	693b      	ldr	r3, [r7, #16]
 800d7fe:	4a38      	ldr	r2, [pc, #224]	@ (800d8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 800d800:	fb02 f303 	mul.w	r3, r2, r3
 800d804:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800d806:	4b32      	ldr	r3, [pc, #200]	@ (800d8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800d808:	685b      	ldr	r3, [r3, #4]
 800d80a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d80e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d812:	d102      	bne.n	800d81a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 800d814:	69fb      	ldr	r3, [r7, #28]
 800d816:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 800d818:	e052      	b.n	800d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 800d81a:	69fb      	ldr	r3, [r7, #28]
 800d81c:	005b      	lsls	r3, r3, #1
 800d81e:	4a31      	ldr	r2, [pc, #196]	@ (800d8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 800d820:	fba2 2303 	umull	r2, r3, r2, r3
 800d824:	085b      	lsrs	r3, r3, #1
 800d826:	61bb      	str	r3, [r7, #24]
      break;
 800d828:	e04a      	b.n	800d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 800d82a:	f7ff fdfb 	bl	800d424 <HAL_RCC_GetSysClockFreq>
 800d82e:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800d830:	e049      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 800d832:	f7ff fdf7 	bl	800d424 <HAL_RCC_GetSysClockFreq>
 800d836:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800d838:	e045      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 800d83a:	4b25      	ldr	r3, [pc, #148]	@ (800d8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800d83c:	6a1b      	ldr	r3, [r3, #32]
 800d83e:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d846:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d84a:	d108      	bne.n	800d85e <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	f003 0302 	and.w	r3, r3, #2
 800d852:	2b00      	cmp	r3, #0
 800d854:	d003      	beq.n	800d85e <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 800d856:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d85a:	61bb      	str	r3, [r7, #24]
 800d85c:	e01f      	b.n	800d89e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d864:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d868:	d109      	bne.n	800d87e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800d86a:	4b19      	ldr	r3, [pc, #100]	@ (800d8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800d86c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d86e:	f003 0302 	and.w	r3, r3, #2
 800d872:	2b00      	cmp	r3, #0
 800d874:	d003      	beq.n	800d87e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 800d876:	f649 4340 	movw	r3, #40000	@ 0x9c40
 800d87a:	61bb      	str	r3, [r7, #24]
 800d87c:	e00f      	b.n	800d89e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d884:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d888:	d11c      	bne.n	800d8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 800d88a:	4b11      	ldr	r3, [pc, #68]	@ (800d8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d892:	2b00      	cmp	r3, #0
 800d894:	d016      	beq.n	800d8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 800d896:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800d89a:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 800d89c:	e012      	b.n	800d8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 800d89e:	e011      	b.n	800d8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800d8a0:	f7ff fe32 	bl	800d508 <HAL_RCC_GetPCLK2Freq>
 800d8a4:	4602      	mov	r2, r0
 800d8a6:	4b0a      	ldr	r3, [pc, #40]	@ (800d8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800d8a8:	685b      	ldr	r3, [r3, #4]
 800d8aa:	0b9b      	lsrs	r3, r3, #14
 800d8ac:	f003 0303 	and.w	r3, r3, #3
 800d8b0:	3301      	adds	r3, #1
 800d8b2:	005b      	lsls	r3, r3, #1
 800d8b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8b8:	61bb      	str	r3, [r7, #24]
      break;
 800d8ba:	e004      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 800d8bc:	bf00      	nop
 800d8be:	e002      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 800d8c0:	bf00      	nop
 800d8c2:	e000      	b.n	800d8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 800d8c4:	bf00      	nop
    }
  }
  return (frequency);
 800d8c6:	69bb      	ldr	r3, [r7, #24]
}
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	3720      	adds	r7, #32
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}
 800d8d0:	40021000 	.word	0x40021000
 800d8d4:	08019f48 	.word	0x08019f48
 800d8d8:	08019f58 	.word	0x08019f58
 800d8dc:	007a1200 	.word	0x007a1200
 800d8e0:	003d0900 	.word	0x003d0900
 800d8e4:	aaaaaaab 	.word	0xaaaaaaab

0800d8e8 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b084      	sub	sp, #16
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d101      	bne.n	800d8fe <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800d8fa:	2301      	movs	r3, #1
 800d8fc:	e07a      	b.n	800d9f4 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	7c5b      	ldrb	r3, [r3, #17]
 800d902:	b2db      	uxtb	r3, r3
 800d904:	2b00      	cmp	r3, #0
 800d906:	d105      	bne.n	800d914 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2200      	movs	r2, #0
 800d90c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800d90e:	6878      	ldr	r0, [r7, #4]
 800d910:	f7f4 f858 	bl	80019c4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2202      	movs	r2, #2
 800d918:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d91a:	6878      	ldr	r0, [r7, #4]
 800d91c:	f000 f9cf 	bl	800dcbe <HAL_RTC_WaitForSynchro>
 800d920:	4603      	mov	r3, r0
 800d922:	2b00      	cmp	r3, #0
 800d924:	d004      	beq.n	800d930 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2204      	movs	r2, #4
 800d92a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800d92c:	2301      	movs	r3, #1
 800d92e:	e061      	b.n	800d9f4 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800d930:	6878      	ldr	r0, [r7, #4]
 800d932:	f000 fa88 	bl	800de46 <RTC_EnterInitMode>
 800d936:	4603      	mov	r3, r0
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d004      	beq.n	800d946 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2204      	movs	r2, #4
 800d940:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800d942:	2301      	movs	r3, #1
 800d944:	e056      	b.n	800d9f4 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	685a      	ldr	r2, [r3, #4]
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	f022 0207 	bic.w	r2, r2, #7
 800d954:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	689b      	ldr	r3, [r3, #8]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d005      	beq.n	800d96a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800d95e:	4b27      	ldr	r3, [pc, #156]	@ (800d9fc <HAL_RTC_Init+0x114>)
 800d960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d962:	4a26      	ldr	r2, [pc, #152]	@ (800d9fc <HAL_RTC_Init+0x114>)
 800d964:	f023 0301 	bic.w	r3, r3, #1
 800d968:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800d96a:	4b24      	ldr	r3, [pc, #144]	@ (800d9fc <HAL_RTC_Init+0x114>)
 800d96c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d96e:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	689b      	ldr	r3, [r3, #8]
 800d976:	4921      	ldr	r1, [pc, #132]	@ (800d9fc <HAL_RTC_Init+0x114>)
 800d978:	4313      	orrs	r3, r2
 800d97a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	685b      	ldr	r3, [r3, #4]
 800d980:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d984:	d003      	beq.n	800d98e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	685b      	ldr	r3, [r3, #4]
 800d98a:	60fb      	str	r3, [r7, #12]
 800d98c:	e00e      	b.n	800d9ac <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800d98e:	2001      	movs	r0, #1
 800d990:	f7ff fed2 	bl	800d738 <HAL_RCCEx_GetPeriphCLKFreq>
 800d994:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d104      	bne.n	800d9a6 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2204      	movs	r2, #4
 800d9a0:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800d9a2:	2301      	movs	r3, #1
 800d9a4:	e026      	b.n	800d9f4 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	3b01      	subs	r3, #1
 800d9aa:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	0c1a      	lsrs	r2, r3, #16
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	f002 020f 	and.w	r2, r2, #15
 800d9b8:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	68fa      	ldr	r2, [r7, #12]
 800d9c0:	b292      	uxth	r2, r2
 800d9c2:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800d9c4:	6878      	ldr	r0, [r7, #4]
 800d9c6:	f000 fa66 	bl	800de96 <RTC_ExitInitMode>
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d004      	beq.n	800d9da <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2204      	movs	r2, #4
 800d9d4:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800d9d6:	2301      	movs	r3, #1
 800d9d8:	e00c      	b.n	800d9f4 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2200      	movs	r2, #0
 800d9de:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2201      	movs	r2, #1
 800d9e4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	2201      	movs	r2, #1
 800d9ea:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2201      	movs	r2, #1
 800d9f0:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800d9f2:	2300      	movs	r3, #0
  }
}
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	3710      	adds	r7, #16
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}
 800d9fc:	40006c00 	.word	0x40006c00

0800da00 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b088      	sub	sp, #32
 800da04:	af00      	add	r7, sp, #0
 800da06:	60f8      	str	r0, [r7, #12]
 800da08:	60b9      	str	r1, [r7, #8]
 800da0a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 800da0c:	2300      	movs	r3, #0
 800da0e:	61bb      	str	r3, [r7, #24]
 800da10:	2300      	movs	r3, #0
 800da12:	61fb      	str	r3, [r7, #28]
 800da14:	2300      	movs	r3, #0
 800da16:	617b      	str	r3, [r7, #20]
 800da18:	2300      	movs	r3, #0
 800da1a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d002      	beq.n	800da28 <HAL_RTC_GetTime+0x28>
 800da22:	68bb      	ldr	r3, [r7, #8]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d101      	bne.n	800da2c <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 800da28:	2301      	movs	r3, #1
 800da2a:	e0b5      	b.n	800db98 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	685b      	ldr	r3, [r3, #4]
 800da32:	f003 0304 	and.w	r3, r3, #4
 800da36:	2b00      	cmp	r3, #0
 800da38:	d001      	beq.n	800da3e <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800da3a:	2301      	movs	r3, #1
 800da3c:	e0ac      	b.n	800db98 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800da3e:	68f8      	ldr	r0, [r7, #12]
 800da40:	f000 f96a 	bl	800dd18 <RTC_ReadTimeCounter>
 800da44:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800da46:	69bb      	ldr	r3, [r7, #24]
 800da48:	4a55      	ldr	r2, [pc, #340]	@ (800dba0 <HAL_RTC_GetTime+0x1a0>)
 800da4a:	fba2 2303 	umull	r2, r3, r2, r3
 800da4e:	0adb      	lsrs	r3, r3, #11
 800da50:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 800da52:	69ba      	ldr	r2, [r7, #24]
 800da54:	4b52      	ldr	r3, [pc, #328]	@ (800dba0 <HAL_RTC_GetTime+0x1a0>)
 800da56:	fba3 1302 	umull	r1, r3, r3, r2
 800da5a:	0adb      	lsrs	r3, r3, #11
 800da5c:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800da60:	fb01 f303 	mul.w	r3, r1, r3
 800da64:	1ad3      	subs	r3, r2, r3
 800da66:	4a4f      	ldr	r2, [pc, #316]	@ (800dba4 <HAL_RTC_GetTime+0x1a4>)
 800da68:	fba2 2303 	umull	r2, r3, r2, r3
 800da6c:	095b      	lsrs	r3, r3, #5
 800da6e:	b2da      	uxtb	r2, r3
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 800da74:	69bb      	ldr	r3, [r7, #24]
 800da76:	4a4a      	ldr	r2, [pc, #296]	@ (800dba0 <HAL_RTC_GetTime+0x1a0>)
 800da78:	fba2 1203 	umull	r1, r2, r2, r3
 800da7c:	0ad2      	lsrs	r2, r2, #11
 800da7e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800da82:	fb01 f202 	mul.w	r2, r1, r2
 800da86:	1a9a      	subs	r2, r3, r2
 800da88:	4b46      	ldr	r3, [pc, #280]	@ (800dba4 <HAL_RTC_GetTime+0x1a4>)
 800da8a:	fba3 1302 	umull	r1, r3, r3, r2
 800da8e:	0959      	lsrs	r1, r3, #5
 800da90:	460b      	mov	r3, r1
 800da92:	011b      	lsls	r3, r3, #4
 800da94:	1a5b      	subs	r3, r3, r1
 800da96:	009b      	lsls	r3, r3, #2
 800da98:	1ad1      	subs	r1, r2, r3
 800da9a:	b2ca      	uxtb	r2, r1
 800da9c:	68bb      	ldr	r3, [r7, #8]
 800da9e:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 800daa0:	693b      	ldr	r3, [r7, #16]
 800daa2:	2b17      	cmp	r3, #23
 800daa4:	d955      	bls.n	800db52 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 800daa6:	693b      	ldr	r3, [r7, #16]
 800daa8:	4a3f      	ldr	r2, [pc, #252]	@ (800dba8 <HAL_RTC_GetTime+0x1a8>)
 800daaa:	fba2 2303 	umull	r2, r3, r2, r3
 800daae:	091b      	lsrs	r3, r3, #4
 800dab0:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800dab2:	6939      	ldr	r1, [r7, #16]
 800dab4:	4b3c      	ldr	r3, [pc, #240]	@ (800dba8 <HAL_RTC_GetTime+0x1a8>)
 800dab6:	fba3 2301 	umull	r2, r3, r3, r1
 800daba:	091a      	lsrs	r2, r3, #4
 800dabc:	4613      	mov	r3, r2
 800dabe:	005b      	lsls	r3, r3, #1
 800dac0:	4413      	add	r3, r2
 800dac2:	00db      	lsls	r3, r3, #3
 800dac4:	1aca      	subs	r2, r1, r3
 800dac6:	b2d2      	uxtb	r2, r2
 800dac8:	68bb      	ldr	r3, [r7, #8]
 800daca:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800dacc:	68f8      	ldr	r0, [r7, #12]
 800dace:	f000 f97a 	bl	800ddc6 <RTC_ReadAlarmCounter>
 800dad2:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 800dad4:	69fb      	ldr	r3, [r7, #28]
 800dad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dada:	d008      	beq.n	800daee <HAL_RTC_GetTime+0xee>
 800dadc:	69fa      	ldr	r2, [r7, #28]
 800dade:	69bb      	ldr	r3, [r7, #24]
 800dae0:	429a      	cmp	r2, r3
 800dae2:	d904      	bls.n	800daee <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 800dae4:	69fa      	ldr	r2, [r7, #28]
 800dae6:	69bb      	ldr	r3, [r7, #24]
 800dae8:	1ad3      	subs	r3, r2, r3
 800daea:	61fb      	str	r3, [r7, #28]
 800daec:	e002      	b.n	800daf4 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800daee:	f04f 33ff 	mov.w	r3, #4294967295
 800daf2:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 800daf4:	697b      	ldr	r3, [r7, #20]
 800daf6:	4a2d      	ldr	r2, [pc, #180]	@ (800dbac <HAL_RTC_GetTime+0x1ac>)
 800daf8:	fb02 f303 	mul.w	r3, r2, r3
 800dafc:	69ba      	ldr	r2, [r7, #24]
 800dafe:	1ad3      	subs	r3, r2, r3
 800db00:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800db02:	69b9      	ldr	r1, [r7, #24]
 800db04:	68f8      	ldr	r0, [r7, #12]
 800db06:	f000 f937 	bl	800dd78 <RTC_WriteTimeCounter>
 800db0a:	4603      	mov	r3, r0
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d001      	beq.n	800db14 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 800db10:	2301      	movs	r3, #1
 800db12:	e041      	b.n	800db98 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800db14:	69fb      	ldr	r3, [r7, #28]
 800db16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db1a:	d00c      	beq.n	800db36 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 800db1c:	69fa      	ldr	r2, [r7, #28]
 800db1e:	69bb      	ldr	r3, [r7, #24]
 800db20:	4413      	add	r3, r2
 800db22:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800db24:	69f9      	ldr	r1, [r7, #28]
 800db26:	68f8      	ldr	r0, [r7, #12]
 800db28:	f000 f966 	bl	800ddf8 <RTC_WriteAlarmCounter>
 800db2c:	4603      	mov	r3, r0
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d00a      	beq.n	800db48 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800db32:	2301      	movs	r3, #1
 800db34:	e030      	b.n	800db98 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800db36:	69f9      	ldr	r1, [r7, #28]
 800db38:	68f8      	ldr	r0, [r7, #12]
 800db3a:	f000 f95d 	bl	800ddf8 <RTC_WriteAlarmCounter>
 800db3e:	4603      	mov	r3, r0
 800db40:	2b00      	cmp	r3, #0
 800db42:	d001      	beq.n	800db48 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800db44:	2301      	movs	r3, #1
 800db46:	e027      	b.n	800db98 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 800db48:	6979      	ldr	r1, [r7, #20]
 800db4a:	68f8      	ldr	r0, [r7, #12]
 800db4c:	f000 f9e8 	bl	800df20 <RTC_DateUpdate>
 800db50:	e003      	b.n	800db5a <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 800db52:	693b      	ldr	r3, [r7, #16]
 800db54:	b2da      	uxtb	r2, r3
 800db56:	68bb      	ldr	r3, [r7, #8]
 800db58:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d01a      	beq.n	800db96 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	781b      	ldrb	r3, [r3, #0]
 800db64:	4618      	mov	r0, r3
 800db66:	f000 f9be 	bl	800dee6 <RTC_ByteToBcd2>
 800db6a:	4603      	mov	r3, r0
 800db6c:	461a      	mov	r2, r3
 800db6e:	68bb      	ldr	r3, [r7, #8]
 800db70:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	785b      	ldrb	r3, [r3, #1]
 800db76:	4618      	mov	r0, r3
 800db78:	f000 f9b5 	bl	800dee6 <RTC_ByteToBcd2>
 800db7c:	4603      	mov	r3, r0
 800db7e:	461a      	mov	r2, r3
 800db80:	68bb      	ldr	r3, [r7, #8]
 800db82:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	789b      	ldrb	r3, [r3, #2]
 800db88:	4618      	mov	r0, r3
 800db8a:	f000 f9ac 	bl	800dee6 <RTC_ByteToBcd2>
 800db8e:	4603      	mov	r3, r0
 800db90:	461a      	mov	r2, r3
 800db92:	68bb      	ldr	r3, [r7, #8]
 800db94:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800db96:	2300      	movs	r3, #0
}
 800db98:	4618      	mov	r0, r3
 800db9a:	3720      	adds	r7, #32
 800db9c:	46bd      	mov	sp, r7
 800db9e:	bd80      	pop	{r7, pc}
 800dba0:	91a2b3c5 	.word	0x91a2b3c5
 800dba4:	88888889 	.word	0x88888889
 800dba8:	aaaaaaab 	.word	0xaaaaaaab
 800dbac:	00015180 	.word	0x00015180

0800dbb0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b086      	sub	sp, #24
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	60f8      	str	r0, [r7, #12]
 800dbb8:	60b9      	str	r1, [r7, #8]
 800dbba:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 800dbbc:	f107 0314 	add.w	r3, r7, #20
 800dbc0:	2100      	movs	r1, #0
 800dbc2:	460a      	mov	r2, r1
 800dbc4:	801a      	strh	r2, [r3, #0]
 800dbc6:	460a      	mov	r2, r1
 800dbc8:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d002      	beq.n	800dbd6 <HAL_RTC_GetDate+0x26>
 800dbd0:	68bb      	ldr	r3, [r7, #8]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d101      	bne.n	800dbda <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 800dbd6:	2301      	movs	r3, #1
 800dbd8:	e03a      	b.n	800dc50 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800dbda:	f107 0314 	add.w	r3, r7, #20
 800dbde:	2200      	movs	r2, #0
 800dbe0:	4619      	mov	r1, r3
 800dbe2:	68f8      	ldr	r0, [r7, #12]
 800dbe4:	f7ff ff0c 	bl	800da00 <HAL_RTC_GetTime>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d001      	beq.n	800dbf2 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 800dbee:	2301      	movs	r3, #1
 800dbf0:	e02e      	b.n	800dc50 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	7b1a      	ldrb	r2, [r3, #12]
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	7bda      	ldrb	r2, [r3, #15]
 800dbfe:	68bb      	ldr	r3, [r7, #8]
 800dc00:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	7b5a      	ldrb	r2, [r3, #13]
 800dc06:	68bb      	ldr	r3, [r7, #8]
 800dc08:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	7b9a      	ldrb	r2, [r3, #14]
 800dc0e:	68bb      	ldr	r3, [r7, #8]
 800dc10:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d01a      	beq.n	800dc4e <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 800dc18:	68bb      	ldr	r3, [r7, #8]
 800dc1a:	78db      	ldrb	r3, [r3, #3]
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	f000 f962 	bl	800dee6 <RTC_ByteToBcd2>
 800dc22:	4603      	mov	r3, r0
 800dc24:	461a      	mov	r2, r3
 800dc26:	68bb      	ldr	r3, [r7, #8]
 800dc28:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 800dc2a:	68bb      	ldr	r3, [r7, #8]
 800dc2c:	785b      	ldrb	r3, [r3, #1]
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f000 f959 	bl	800dee6 <RTC_ByteToBcd2>
 800dc34:	4603      	mov	r3, r0
 800dc36:	461a      	mov	r2, r3
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 800dc3c:	68bb      	ldr	r3, [r7, #8]
 800dc3e:	789b      	ldrb	r3, [r3, #2]
 800dc40:	4618      	mov	r0, r3
 800dc42:	f000 f950 	bl	800dee6 <RTC_ByteToBcd2>
 800dc46:	4603      	mov	r3, r0
 800dc48:	461a      	mov	r2, r3
 800dc4a:	68bb      	ldr	r3, [r7, #8]
 800dc4c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800dc4e:	2300      	movs	r3, #0
}
 800dc50:	4618      	mov	r0, r3
 800dc52:	3718      	adds	r7, #24
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}

0800dc58 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b082      	sub	sp, #8
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	f003 0302 	and.w	r3, r3, #2
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d011      	beq.n	800dc92 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	685b      	ldr	r3, [r3, #4]
 800dc74:	f003 0302 	and.w	r3, r3, #2
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d00a      	beq.n	800dc92 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800dc7c:	6878      	ldr	r0, [r7, #4]
 800dc7e:	f000 f815 	bl	800dcac <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	685a      	ldr	r2, [r3, #4]
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	f022 0202 	bic.w	r2, r2, #2
 800dc90:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800dc92:	4b05      	ldr	r3, [pc, #20]	@ (800dca8 <HAL_RTC_AlarmIRQHandler+0x50>)
 800dc94:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800dc98:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2201      	movs	r2, #1
 800dc9e:	745a      	strb	r2, [r3, #17]
}
 800dca0:	bf00      	nop
 800dca2:	3708      	adds	r7, #8
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}
 800dca8:	40010400 	.word	0x40010400

0800dcac <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800dcac:	b480      	push	{r7}
 800dcae:	b083      	sub	sp, #12
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800dcb4:	bf00      	nop
 800dcb6:	370c      	adds	r7, #12
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bc80      	pop	{r7}
 800dcbc:	4770      	bx	lr

0800dcbe <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800dcbe:	b580      	push	{r7, lr}
 800dcc0:	b084      	sub	sp, #16
 800dcc2:	af00      	add	r7, sp, #0
 800dcc4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d101      	bne.n	800dcd4 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800dcd0:	2301      	movs	r3, #1
 800dcd2:	e01d      	b.n	800dd10 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	685a      	ldr	r2, [r3, #4]
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	f022 0208 	bic.w	r2, r2, #8
 800dce2:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800dce4:	f7fa fbee 	bl	80084c4 <HAL_GetTick>
 800dce8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800dcea:	e009      	b.n	800dd00 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800dcec:	f7fa fbea 	bl	80084c4 <HAL_GetTick>
 800dcf0:	4602      	mov	r2, r0
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	1ad3      	subs	r3, r2, r3
 800dcf6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800dcfa:	d901      	bls.n	800dd00 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800dcfc:	2303      	movs	r3, #3
 800dcfe:	e007      	b.n	800dd10 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	685b      	ldr	r3, [r3, #4]
 800dd06:	f003 0308 	and.w	r3, r3, #8
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d0ee      	beq.n	800dcec <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800dd0e:	2300      	movs	r3, #0
}
 800dd10:	4618      	mov	r0, r3
 800dd12:	3710      	adds	r7, #16
 800dd14:	46bd      	mov	sp, r7
 800dd16:	bd80      	pop	{r7, pc}

0800dd18 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800dd18:	b480      	push	{r7}
 800dd1a:	b087      	sub	sp, #28
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800dd20:	2300      	movs	r3, #0
 800dd22:	827b      	strh	r3, [r7, #18]
 800dd24:	2300      	movs	r3, #0
 800dd26:	823b      	strh	r3, [r7, #16]
 800dd28:	2300      	movs	r3, #0
 800dd2a:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	699b      	ldr	r3, [r3, #24]
 800dd36:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	69db      	ldr	r3, [r3, #28]
 800dd3e:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	699b      	ldr	r3, [r3, #24]
 800dd46:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800dd48:	8a7a      	ldrh	r2, [r7, #18]
 800dd4a:	8a3b      	ldrh	r3, [r7, #16]
 800dd4c:	429a      	cmp	r2, r3
 800dd4e:	d008      	beq.n	800dd62 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800dd50:	8a3b      	ldrh	r3, [r7, #16]
 800dd52:	041a      	lsls	r2, r3, #16
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	69db      	ldr	r3, [r3, #28]
 800dd5a:	b29b      	uxth	r3, r3
 800dd5c:	4313      	orrs	r3, r2
 800dd5e:	617b      	str	r3, [r7, #20]
 800dd60:	e004      	b.n	800dd6c <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800dd62:	8a7b      	ldrh	r3, [r7, #18]
 800dd64:	041a      	lsls	r2, r3, #16
 800dd66:	89fb      	ldrh	r3, [r7, #14]
 800dd68:	4313      	orrs	r3, r2
 800dd6a:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800dd6c:	697b      	ldr	r3, [r7, #20]
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	371c      	adds	r7, #28
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bc80      	pop	{r7}
 800dd76:	4770      	bx	lr

0800dd78 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b084      	sub	sp, #16
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
 800dd80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dd82:	2300      	movs	r3, #0
 800dd84:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f000 f85d 	bl	800de46 <RTC_EnterInitMode>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d002      	beq.n	800dd98 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 800dd92:	2301      	movs	r3, #1
 800dd94:	73fb      	strb	r3, [r7, #15]
 800dd96:	e011      	b.n	800ddbc <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	683a      	ldr	r2, [r7, #0]
 800dd9e:	0c12      	lsrs	r2, r2, #16
 800dda0:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	683a      	ldr	r2, [r7, #0]
 800dda8:	b292      	uxth	r2, r2
 800ddaa:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800ddac:	6878      	ldr	r0, [r7, #4]
 800ddae:	f000 f872 	bl	800de96 <RTC_ExitInitMode>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d001      	beq.n	800ddbc <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800ddb8:	2301      	movs	r3, #1
 800ddba:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800ddbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	3710      	adds	r7, #16
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	bd80      	pop	{r7, pc}

0800ddc6 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800ddc6:	b480      	push	{r7}
 800ddc8:	b085      	sub	sp, #20
 800ddca:	af00      	add	r7, sp, #0
 800ddcc:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 800ddce:	2300      	movs	r3, #0
 800ddd0:	81fb      	strh	r3, [r7, #14]
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	6a1b      	ldr	r3, [r3, #32]
 800dddc:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dde4:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800dde6:	89fb      	ldrh	r3, [r7, #14]
 800dde8:	041a      	lsls	r2, r3, #16
 800ddea:	89bb      	ldrh	r3, [r7, #12]
 800ddec:	4313      	orrs	r3, r2
}
 800ddee:	4618      	mov	r0, r3
 800ddf0:	3714      	adds	r7, #20
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	bc80      	pop	{r7}
 800ddf6:	4770      	bx	lr

0800ddf8 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b084      	sub	sp, #16
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
 800de00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800de02:	2300      	movs	r3, #0
 800de04:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800de06:	6878      	ldr	r0, [r7, #4]
 800de08:	f000 f81d 	bl	800de46 <RTC_EnterInitMode>
 800de0c:	4603      	mov	r3, r0
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d002      	beq.n	800de18 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800de12:	2301      	movs	r3, #1
 800de14:	73fb      	strb	r3, [r7, #15]
 800de16:	e011      	b.n	800de3c <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	683a      	ldr	r2, [r7, #0]
 800de1e:	0c12      	lsrs	r2, r2, #16
 800de20:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	683a      	ldr	r2, [r7, #0]
 800de28:	b292      	uxth	r2, r2
 800de2a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800de2c:	6878      	ldr	r0, [r7, #4]
 800de2e:	f000 f832 	bl	800de96 <RTC_ExitInitMode>
 800de32:	4603      	mov	r3, r0
 800de34:	2b00      	cmp	r3, #0
 800de36:	d001      	beq.n	800de3c <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800de38:	2301      	movs	r3, #1
 800de3a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800de3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800de3e:	4618      	mov	r0, r3
 800de40:	3710      	adds	r7, #16
 800de42:	46bd      	mov	sp, r7
 800de44:	bd80      	pop	{r7, pc}

0800de46 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800de46:	b580      	push	{r7, lr}
 800de48:	b084      	sub	sp, #16
 800de4a:	af00      	add	r7, sp, #0
 800de4c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800de4e:	2300      	movs	r3, #0
 800de50:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800de52:	f7fa fb37 	bl	80084c4 <HAL_GetTick>
 800de56:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800de58:	e009      	b.n	800de6e <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800de5a:	f7fa fb33 	bl	80084c4 <HAL_GetTick>
 800de5e:	4602      	mov	r2, r0
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	1ad3      	subs	r3, r2, r3
 800de64:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800de68:	d901      	bls.n	800de6e <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800de6a:	2303      	movs	r3, #3
 800de6c:	e00f      	b.n	800de8e <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	685b      	ldr	r3, [r3, #4]
 800de74:	f003 0320 	and.w	r3, r3, #32
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d0ee      	beq.n	800de5a <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	685a      	ldr	r2, [r3, #4]
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	f042 0210 	orr.w	r2, r2, #16
 800de8a:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800de8c:	2300      	movs	r3, #0
}
 800de8e:	4618      	mov	r0, r3
 800de90:	3710      	adds	r7, #16
 800de92:	46bd      	mov	sp, r7
 800de94:	bd80      	pop	{r7, pc}

0800de96 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800de96:	b580      	push	{r7, lr}
 800de98:	b084      	sub	sp, #16
 800de9a:	af00      	add	r7, sp, #0
 800de9c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800de9e:	2300      	movs	r3, #0
 800dea0:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	685a      	ldr	r2, [r3, #4]
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	f022 0210 	bic.w	r2, r2, #16
 800deb0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800deb2:	f7fa fb07 	bl	80084c4 <HAL_GetTick>
 800deb6:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800deb8:	e009      	b.n	800dece <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800deba:	f7fa fb03 	bl	80084c4 <HAL_GetTick>
 800debe:	4602      	mov	r2, r0
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	1ad3      	subs	r3, r2, r3
 800dec4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800dec8:	d901      	bls.n	800dece <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800deca:	2303      	movs	r3, #3
 800decc:	e007      	b.n	800dede <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	685b      	ldr	r3, [r3, #4]
 800ded4:	f003 0320 	and.w	r3, r3, #32
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d0ee      	beq.n	800deba <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800dedc:	2300      	movs	r3, #0
}
 800dede:	4618      	mov	r0, r3
 800dee0:	3710      	adds	r7, #16
 800dee2:	46bd      	mov	sp, r7
 800dee4:	bd80      	pop	{r7, pc}

0800dee6 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800dee6:	b480      	push	{r7}
 800dee8:	b085      	sub	sp, #20
 800deea:	af00      	add	r7, sp, #0
 800deec:	4603      	mov	r3, r0
 800deee:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800def0:	2300      	movs	r3, #0
 800def2:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800def4:	e005      	b.n	800df02 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	3301      	adds	r3, #1
 800defa:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800defc:	79fb      	ldrb	r3, [r7, #7]
 800defe:	3b0a      	subs	r3, #10
 800df00:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 800df02:	79fb      	ldrb	r3, [r7, #7]
 800df04:	2b09      	cmp	r3, #9
 800df06:	d8f6      	bhi.n	800def6 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	b2db      	uxtb	r3, r3
 800df0c:	011b      	lsls	r3, r3, #4
 800df0e:	b2da      	uxtb	r2, r3
 800df10:	79fb      	ldrb	r3, [r7, #7]
 800df12:	4313      	orrs	r3, r2
 800df14:	b2db      	uxtb	r3, r3
}
 800df16:	4618      	mov	r0, r3
 800df18:	3714      	adds	r7, #20
 800df1a:	46bd      	mov	sp, r7
 800df1c:	bc80      	pop	{r7}
 800df1e:	4770      	bx	lr

0800df20 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b086      	sub	sp, #24
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
 800df28:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800df2a:	2300      	movs	r3, #0
 800df2c:	617b      	str	r3, [r7, #20]
 800df2e:	2300      	movs	r3, #0
 800df30:	613b      	str	r3, [r7, #16]
 800df32:	2300      	movs	r3, #0
 800df34:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800df36:	2300      	movs	r3, #0
 800df38:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	7bdb      	ldrb	r3, [r3, #15]
 800df3e:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	7b5b      	ldrb	r3, [r3, #13]
 800df44:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	7b9b      	ldrb	r3, [r3, #14]
 800df4a:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 800df4c:	2300      	movs	r3, #0
 800df4e:	60bb      	str	r3, [r7, #8]
 800df50:	e06f      	b.n	800e032 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800df52:	693b      	ldr	r3, [r7, #16]
 800df54:	2b01      	cmp	r3, #1
 800df56:	d011      	beq.n	800df7c <RTC_DateUpdate+0x5c>
 800df58:	693b      	ldr	r3, [r7, #16]
 800df5a:	2b03      	cmp	r3, #3
 800df5c:	d00e      	beq.n	800df7c <RTC_DateUpdate+0x5c>
 800df5e:	693b      	ldr	r3, [r7, #16]
 800df60:	2b05      	cmp	r3, #5
 800df62:	d00b      	beq.n	800df7c <RTC_DateUpdate+0x5c>
 800df64:	693b      	ldr	r3, [r7, #16]
 800df66:	2b07      	cmp	r3, #7
 800df68:	d008      	beq.n	800df7c <RTC_DateUpdate+0x5c>
 800df6a:	693b      	ldr	r3, [r7, #16]
 800df6c:	2b08      	cmp	r3, #8
 800df6e:	d005      	beq.n	800df7c <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 800df70:	693b      	ldr	r3, [r7, #16]
 800df72:	2b0a      	cmp	r3, #10
 800df74:	d002      	beq.n	800df7c <RTC_DateUpdate+0x5c>
 800df76:	693b      	ldr	r3, [r7, #16]
 800df78:	2b0c      	cmp	r3, #12
 800df7a:	d117      	bne.n	800dfac <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	2b1e      	cmp	r3, #30
 800df80:	d803      	bhi.n	800df8a <RTC_DateUpdate+0x6a>
      {
        day++;
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	3301      	adds	r3, #1
 800df86:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800df88:	e050      	b.n	800e02c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800df8a:	693b      	ldr	r3, [r7, #16]
 800df8c:	2b0c      	cmp	r3, #12
 800df8e:	d005      	beq.n	800df9c <RTC_DateUpdate+0x7c>
        {
          month++;
 800df90:	693b      	ldr	r3, [r7, #16]
 800df92:	3301      	adds	r3, #1
 800df94:	613b      	str	r3, [r7, #16]
          day = 1U;
 800df96:	2301      	movs	r3, #1
 800df98:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800df9a:	e047      	b.n	800e02c <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 800df9c:	2301      	movs	r3, #1
 800df9e:	613b      	str	r3, [r7, #16]
          day = 1U;
 800dfa0:	2301      	movs	r3, #1
 800dfa2:	60fb      	str	r3, [r7, #12]
          year++;
 800dfa4:	697b      	ldr	r3, [r7, #20]
 800dfa6:	3301      	adds	r3, #1
 800dfa8:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800dfaa:	e03f      	b.n	800e02c <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800dfac:	693b      	ldr	r3, [r7, #16]
 800dfae:	2b04      	cmp	r3, #4
 800dfb0:	d008      	beq.n	800dfc4 <RTC_DateUpdate+0xa4>
 800dfb2:	693b      	ldr	r3, [r7, #16]
 800dfb4:	2b06      	cmp	r3, #6
 800dfb6:	d005      	beq.n	800dfc4 <RTC_DateUpdate+0xa4>
 800dfb8:	693b      	ldr	r3, [r7, #16]
 800dfba:	2b09      	cmp	r3, #9
 800dfbc:	d002      	beq.n	800dfc4 <RTC_DateUpdate+0xa4>
 800dfbe:	693b      	ldr	r3, [r7, #16]
 800dfc0:	2b0b      	cmp	r3, #11
 800dfc2:	d10c      	bne.n	800dfde <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	2b1d      	cmp	r3, #29
 800dfc8:	d803      	bhi.n	800dfd2 <RTC_DateUpdate+0xb2>
      {
        day++;
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	3301      	adds	r3, #1
 800dfce:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800dfd0:	e02c      	b.n	800e02c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 800dfd2:	693b      	ldr	r3, [r7, #16]
 800dfd4:	3301      	adds	r3, #1
 800dfd6:	613b      	str	r3, [r7, #16]
        day = 1U;
 800dfd8:	2301      	movs	r3, #1
 800dfda:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800dfdc:	e026      	b.n	800e02c <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800dfde:	693b      	ldr	r3, [r7, #16]
 800dfe0:	2b02      	cmp	r3, #2
 800dfe2:	d123      	bne.n	800e02c <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	2b1b      	cmp	r3, #27
 800dfe8:	d803      	bhi.n	800dff2 <RTC_DateUpdate+0xd2>
      {
        day++;
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	3301      	adds	r3, #1
 800dfee:	60fb      	str	r3, [r7, #12]
 800dff0:	e01c      	b.n	800e02c <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	2b1c      	cmp	r3, #28
 800dff6:	d111      	bne.n	800e01c <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 800dff8:	697b      	ldr	r3, [r7, #20]
 800dffa:	b29b      	uxth	r3, r3
 800dffc:	4618      	mov	r0, r3
 800dffe:	f000 f839 	bl	800e074 <RTC_IsLeapYear>
 800e002:	4603      	mov	r3, r0
 800e004:	2b00      	cmp	r3, #0
 800e006:	d003      	beq.n	800e010 <RTC_DateUpdate+0xf0>
        {
          day++;
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	3301      	adds	r3, #1
 800e00c:	60fb      	str	r3, [r7, #12]
 800e00e:	e00d      	b.n	800e02c <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 800e010:	693b      	ldr	r3, [r7, #16]
 800e012:	3301      	adds	r3, #1
 800e014:	613b      	str	r3, [r7, #16]
          day = 1U;
 800e016:	2301      	movs	r3, #1
 800e018:	60fb      	str	r3, [r7, #12]
 800e01a:	e007      	b.n	800e02c <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	2b1d      	cmp	r3, #29
 800e020:	d104      	bne.n	800e02c <RTC_DateUpdate+0x10c>
      {
        month++;
 800e022:	693b      	ldr	r3, [r7, #16]
 800e024:	3301      	adds	r3, #1
 800e026:	613b      	str	r3, [r7, #16]
        day = 1U;
 800e028:	2301      	movs	r3, #1
 800e02a:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 800e02c:	68bb      	ldr	r3, [r7, #8]
 800e02e:	3301      	adds	r3, #1
 800e030:	60bb      	str	r3, [r7, #8]
 800e032:	68ba      	ldr	r2, [r7, #8]
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	429a      	cmp	r2, r3
 800e038:	d38b      	bcc.n	800df52 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800e03a:	697b      	ldr	r3, [r7, #20]
 800e03c:	b2da      	uxtb	r2, r3
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 800e042:	693b      	ldr	r3, [r7, #16]
 800e044:	b2da      	uxtb	r2, r3
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	b2da      	uxtb	r2, r3
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 800e052:	693b      	ldr	r3, [r7, #16]
 800e054:	b2db      	uxtb	r3, r3
 800e056:	68fa      	ldr	r2, [r7, #12]
 800e058:	b2d2      	uxtb	r2, r2
 800e05a:	4619      	mov	r1, r3
 800e05c:	6978      	ldr	r0, [r7, #20]
 800e05e:	f000 f83b 	bl	800e0d8 <RTC_WeekDayNum>
 800e062:	4603      	mov	r3, r0
 800e064:	461a      	mov	r2, r3
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	731a      	strb	r2, [r3, #12]
}
 800e06a:	bf00      	nop
 800e06c:	3718      	adds	r7, #24
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}
	...

0800e074 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 800e074:	b480      	push	{r7}
 800e076:	b083      	sub	sp, #12
 800e078:	af00      	add	r7, sp, #0
 800e07a:	4603      	mov	r3, r0
 800e07c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800e07e:	88fb      	ldrh	r3, [r7, #6]
 800e080:	f003 0303 	and.w	r3, r3, #3
 800e084:	b29b      	uxth	r3, r3
 800e086:	2b00      	cmp	r3, #0
 800e088:	d001      	beq.n	800e08e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800e08a:	2300      	movs	r3, #0
 800e08c:	e01d      	b.n	800e0ca <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800e08e:	88fb      	ldrh	r3, [r7, #6]
 800e090:	4a10      	ldr	r2, [pc, #64]	@ (800e0d4 <RTC_IsLeapYear+0x60>)
 800e092:	fba2 1203 	umull	r1, r2, r2, r3
 800e096:	0952      	lsrs	r2, r2, #5
 800e098:	2164      	movs	r1, #100	@ 0x64
 800e09a:	fb01 f202 	mul.w	r2, r1, r2
 800e09e:	1a9b      	subs	r3, r3, r2
 800e0a0:	b29b      	uxth	r3, r3
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d001      	beq.n	800e0aa <RTC_IsLeapYear+0x36>
  {
    return 1U;
 800e0a6:	2301      	movs	r3, #1
 800e0a8:	e00f      	b.n	800e0ca <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800e0aa:	88fb      	ldrh	r3, [r7, #6]
 800e0ac:	4a09      	ldr	r2, [pc, #36]	@ (800e0d4 <RTC_IsLeapYear+0x60>)
 800e0ae:	fba2 1203 	umull	r1, r2, r2, r3
 800e0b2:	09d2      	lsrs	r2, r2, #7
 800e0b4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800e0b8:	fb01 f202 	mul.w	r2, r1, r2
 800e0bc:	1a9b      	subs	r3, r3, r2
 800e0be:	b29b      	uxth	r3, r3
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d101      	bne.n	800e0c8 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 800e0c4:	2301      	movs	r3, #1
 800e0c6:	e000      	b.n	800e0ca <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 800e0c8:	2300      	movs	r3, #0
  }
}
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	370c      	adds	r7, #12
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bc80      	pop	{r7}
 800e0d2:	4770      	bx	lr
 800e0d4:	51eb851f 	.word	0x51eb851f

0800e0d8 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 800e0d8:	b480      	push	{r7}
 800e0da:	b085      	sub	sp, #20
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
 800e0e0:	460b      	mov	r3, r1
 800e0e2:	70fb      	strb	r3, [r7, #3]
 800e0e4:	4613      	mov	r3, r2
 800e0e6:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	60bb      	str	r3, [r7, #8]
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800e0f6:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 800e0f8:	78fb      	ldrb	r3, [r7, #3]
 800e0fa:	2b02      	cmp	r3, #2
 800e0fc:	d82d      	bhi.n	800e15a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800e0fe:	78fa      	ldrb	r2, [r7, #3]
 800e100:	4613      	mov	r3, r2
 800e102:	005b      	lsls	r3, r3, #1
 800e104:	4413      	add	r3, r2
 800e106:	00db      	lsls	r3, r3, #3
 800e108:	1a9b      	subs	r3, r3, r2
 800e10a:	4a2c      	ldr	r2, [pc, #176]	@ (800e1bc <RTC_WeekDayNum+0xe4>)
 800e10c:	fba2 2303 	umull	r2, r3, r2, r3
 800e110:	085a      	lsrs	r2, r3, #1
 800e112:	78bb      	ldrb	r3, [r7, #2]
 800e114:	441a      	add	r2, r3
 800e116:	68bb      	ldr	r3, [r7, #8]
 800e118:	441a      	add	r2, r3
 800e11a:	68bb      	ldr	r3, [r7, #8]
 800e11c:	3b01      	subs	r3, #1
 800e11e:	089b      	lsrs	r3, r3, #2
 800e120:	441a      	add	r2, r3
 800e122:	68bb      	ldr	r3, [r7, #8]
 800e124:	3b01      	subs	r3, #1
 800e126:	4926      	ldr	r1, [pc, #152]	@ (800e1c0 <RTC_WeekDayNum+0xe8>)
 800e128:	fba1 1303 	umull	r1, r3, r1, r3
 800e12c:	095b      	lsrs	r3, r3, #5
 800e12e:	1ad2      	subs	r2, r2, r3
 800e130:	68bb      	ldr	r3, [r7, #8]
 800e132:	3b01      	subs	r3, #1
 800e134:	4922      	ldr	r1, [pc, #136]	@ (800e1c0 <RTC_WeekDayNum+0xe8>)
 800e136:	fba1 1303 	umull	r1, r3, r1, r3
 800e13a:	09db      	lsrs	r3, r3, #7
 800e13c:	4413      	add	r3, r2
 800e13e:	1d1a      	adds	r2, r3, #4
 800e140:	4b20      	ldr	r3, [pc, #128]	@ (800e1c4 <RTC_WeekDayNum+0xec>)
 800e142:	fba3 1302 	umull	r1, r3, r3, r2
 800e146:	1ad1      	subs	r1, r2, r3
 800e148:	0849      	lsrs	r1, r1, #1
 800e14a:	440b      	add	r3, r1
 800e14c:	0899      	lsrs	r1, r3, #2
 800e14e:	460b      	mov	r3, r1
 800e150:	00db      	lsls	r3, r3, #3
 800e152:	1a5b      	subs	r3, r3, r1
 800e154:	1ad3      	subs	r3, r2, r3
 800e156:	60fb      	str	r3, [r7, #12]
 800e158:	e029      	b.n	800e1ae <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800e15a:	78fa      	ldrb	r2, [r7, #3]
 800e15c:	4613      	mov	r3, r2
 800e15e:	005b      	lsls	r3, r3, #1
 800e160:	4413      	add	r3, r2
 800e162:	00db      	lsls	r3, r3, #3
 800e164:	1a9b      	subs	r3, r3, r2
 800e166:	4a15      	ldr	r2, [pc, #84]	@ (800e1bc <RTC_WeekDayNum+0xe4>)
 800e168:	fba2 2303 	umull	r2, r3, r2, r3
 800e16c:	085a      	lsrs	r2, r3, #1
 800e16e:	78bb      	ldrb	r3, [r7, #2]
 800e170:	441a      	add	r2, r3
 800e172:	68bb      	ldr	r3, [r7, #8]
 800e174:	441a      	add	r2, r3
 800e176:	68bb      	ldr	r3, [r7, #8]
 800e178:	089b      	lsrs	r3, r3, #2
 800e17a:	441a      	add	r2, r3
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	4910      	ldr	r1, [pc, #64]	@ (800e1c0 <RTC_WeekDayNum+0xe8>)
 800e180:	fba1 1303 	umull	r1, r3, r1, r3
 800e184:	095b      	lsrs	r3, r3, #5
 800e186:	1ad2      	subs	r2, r2, r3
 800e188:	68bb      	ldr	r3, [r7, #8]
 800e18a:	490d      	ldr	r1, [pc, #52]	@ (800e1c0 <RTC_WeekDayNum+0xe8>)
 800e18c:	fba1 1303 	umull	r1, r3, r1, r3
 800e190:	09db      	lsrs	r3, r3, #7
 800e192:	4413      	add	r3, r2
 800e194:	1c9a      	adds	r2, r3, #2
 800e196:	4b0b      	ldr	r3, [pc, #44]	@ (800e1c4 <RTC_WeekDayNum+0xec>)
 800e198:	fba3 1302 	umull	r1, r3, r3, r2
 800e19c:	1ad1      	subs	r1, r2, r3
 800e19e:	0849      	lsrs	r1, r1, #1
 800e1a0:	440b      	add	r3, r1
 800e1a2:	0899      	lsrs	r1, r3, #2
 800e1a4:	460b      	mov	r3, r1
 800e1a6:	00db      	lsls	r3, r3, #3
 800e1a8:	1a5b      	subs	r3, r3, r1
 800e1aa:	1ad3      	subs	r3, r2, r3
 800e1ac:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	b2db      	uxtb	r3, r3
}
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	3714      	adds	r7, #20
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	bc80      	pop	{r7}
 800e1ba:	4770      	bx	lr
 800e1bc:	38e38e39 	.word	0x38e38e39
 800e1c0:	51eb851f 	.word	0x51eb851f
 800e1c4:	24924925 	.word	0x24924925

0800e1c8 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b082      	sub	sp, #8
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	f003 0301 	and.w	r3, r3, #1
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d027      	beq.n	800e22e <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	685b      	ldr	r3, [r3, #4]
 800e1e4:	f003 0301 	and.w	r3, r3, #1
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d020      	beq.n	800e22e <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	685b      	ldr	r3, [r3, #4]
 800e1f2:	f003 0304 	and.w	r3, r3, #4
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d00b      	beq.n	800e212 <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	f000 f824 	bl	800e248 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	f06f 0204 	mvn.w	r2, #4
 800e208:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	2204      	movs	r2, #4
 800e20e:	745a      	strb	r2, [r3, #17]
 800e210:	e005      	b.n	800e21e <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	f000 f80f 	bl	800e236 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2201      	movs	r2, #1
 800e21c:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	685a      	ldr	r2, [r3, #4]
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	f022 0201 	bic.w	r2, r2, #1
 800e22c:	605a      	str	r2, [r3, #4]
    }
  }
}
 800e22e:	bf00      	nop
 800e230:	3708      	adds	r7, #8
 800e232:	46bd      	mov	sp, r7
 800e234:	bd80      	pop	{r7, pc}

0800e236 <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 800e236:	b480      	push	{r7}
 800e238:	b083      	sub	sp, #12
 800e23a:	af00      	add	r7, sp, #0
 800e23c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 800e23e:	bf00      	nop
 800e240:	370c      	adds	r7, #12
 800e242:	46bd      	mov	sp, r7
 800e244:	bc80      	pop	{r7}
 800e246:	4770      	bx	lr

0800e248 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 800e248:	b480      	push	{r7}
 800e24a:	b083      	sub	sp, #12
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 800e250:	bf00      	nop
 800e252:	370c      	adds	r7, #12
 800e254:	46bd      	mov	sp, r7
 800e256:	bc80      	pop	{r7}
 800e258:	4770      	bx	lr

0800e25a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e25a:	b580      	push	{r7, lr}
 800e25c:	b082      	sub	sp, #8
 800e25e:	af00      	add	r7, sp, #0
 800e260:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d101      	bne.n	800e26c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e268:	2301      	movs	r3, #1
 800e26a:	e076      	b.n	800e35a <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e270:	2b00      	cmp	r3, #0
 800e272:	d108      	bne.n	800e286 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	685b      	ldr	r3, [r3, #4]
 800e278:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e27c:	d009      	beq.n	800e292 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	2200      	movs	r2, #0
 800e282:	61da      	str	r2, [r3, #28]
 800e284:	e005      	b.n	800e292 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	2200      	movs	r2, #0
 800e28a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2200      	movs	r2, #0
 800e290:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	2200      	movs	r2, #0
 800e296:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800e29e:	b2db      	uxtb	r3, r3
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d106      	bne.n	800e2b2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e2ac:	6878      	ldr	r0, [r7, #4]
 800e2ae:	f7f3 fc0f 	bl	8001ad0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	2202      	movs	r2, #2
 800e2b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	681a      	ldr	r2, [r3, #0]
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e2c8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	685b      	ldr	r3, [r3, #4]
 800e2ce:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	689b      	ldr	r3, [r3, #8]
 800e2d6:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800e2da:	431a      	orrs	r2, r3
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	68db      	ldr	r3, [r3, #12]
 800e2e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e2e4:	431a      	orrs	r2, r3
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	691b      	ldr	r3, [r3, #16]
 800e2ea:	f003 0302 	and.w	r3, r3, #2
 800e2ee:	431a      	orrs	r2, r3
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	695b      	ldr	r3, [r3, #20]
 800e2f4:	f003 0301 	and.w	r3, r3, #1
 800e2f8:	431a      	orrs	r2, r3
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	699b      	ldr	r3, [r3, #24]
 800e2fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e302:	431a      	orrs	r2, r3
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	69db      	ldr	r3, [r3, #28]
 800e308:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e30c:	431a      	orrs	r2, r3
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	6a1b      	ldr	r3, [r3, #32]
 800e312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e316:	ea42 0103 	orr.w	r1, r2, r3
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e31e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	430a      	orrs	r2, r1
 800e328:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	699b      	ldr	r3, [r3, #24]
 800e32e:	0c1a      	lsrs	r2, r3, #16
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	f002 0204 	and.w	r2, r2, #4
 800e338:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	69da      	ldr	r2, [r3, #28]
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e348:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	2200      	movs	r2, #0
 800e34e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2201      	movs	r2, #1
 800e354:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800e358:	2300      	movs	r3, #0
}
 800e35a:	4618      	mov	r0, r3
 800e35c:	3708      	adds	r7, #8
 800e35e:	46bd      	mov	sp, r7
 800e360:	bd80      	pop	{r7, pc}

0800e362 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e362:	b580      	push	{r7, lr}
 800e364:	b082      	sub	sp, #8
 800e366:	af00      	add	r7, sp, #0
 800e368:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d101      	bne.n	800e374 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e370:	2301      	movs	r3, #1
 800e372:	e041      	b.n	800e3f8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e37a:	b2db      	uxtb	r3, r3
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d106      	bne.n	800e38e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	2200      	movs	r2, #0
 800e384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e388:	6878      	ldr	r0, [r7, #4]
 800e38a:	f000 f839 	bl	800e400 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	2202      	movs	r2, #2
 800e392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681a      	ldr	r2, [r3, #0]
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	3304      	adds	r3, #4
 800e39e:	4619      	mov	r1, r3
 800e3a0:	4610      	mov	r0, r2
 800e3a2:	f000 f9ab 	bl	800e6fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	2201      	movs	r2, #1
 800e3aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	2201      	movs	r2, #1
 800e3b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	2201      	movs	r2, #1
 800e3ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	2201      	movs	r2, #1
 800e3c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	2201      	movs	r2, #1
 800e3ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	2201      	movs	r2, #1
 800e3d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	2201      	movs	r2, #1
 800e3da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2201      	movs	r2, #1
 800e3e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	2201      	movs	r2, #1
 800e3ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	2201      	movs	r2, #1
 800e3f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e3f6:	2300      	movs	r3, #0
}
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	3708      	adds	r7, #8
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bd80      	pop	{r7, pc}

0800e400 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800e400:	b480      	push	{r7}
 800e402:	b083      	sub	sp, #12
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800e408:	bf00      	nop
 800e40a:	370c      	adds	r7, #12
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bc80      	pop	{r7}
 800e410:	4770      	bx	lr
	...

0800e414 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e414:	b480      	push	{r7}
 800e416:	b085      	sub	sp, #20
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e422:	b2db      	uxtb	r3, r3
 800e424:	2b01      	cmp	r3, #1
 800e426:	d001      	beq.n	800e42c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e428:	2301      	movs	r3, #1
 800e42a:	e044      	b.n	800e4b6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	2202      	movs	r2, #2
 800e430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	68da      	ldr	r2, [r3, #12]
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	f042 0201 	orr.w	r2, r2, #1
 800e442:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	4a1d      	ldr	r2, [pc, #116]	@ (800e4c0 <HAL_TIM_Base_Start_IT+0xac>)
 800e44a:	4293      	cmp	r3, r2
 800e44c:	d018      	beq.n	800e480 <HAL_TIM_Base_Start_IT+0x6c>
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	4a1c      	ldr	r2, [pc, #112]	@ (800e4c4 <HAL_TIM_Base_Start_IT+0xb0>)
 800e454:	4293      	cmp	r3, r2
 800e456:	d013      	beq.n	800e480 <HAL_TIM_Base_Start_IT+0x6c>
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e460:	d00e      	beq.n	800e480 <HAL_TIM_Base_Start_IT+0x6c>
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	4a18      	ldr	r2, [pc, #96]	@ (800e4c8 <HAL_TIM_Base_Start_IT+0xb4>)
 800e468:	4293      	cmp	r3, r2
 800e46a:	d009      	beq.n	800e480 <HAL_TIM_Base_Start_IT+0x6c>
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	4a16      	ldr	r2, [pc, #88]	@ (800e4cc <HAL_TIM_Base_Start_IT+0xb8>)
 800e472:	4293      	cmp	r3, r2
 800e474:	d004      	beq.n	800e480 <HAL_TIM_Base_Start_IT+0x6c>
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	4a15      	ldr	r2, [pc, #84]	@ (800e4d0 <HAL_TIM_Base_Start_IT+0xbc>)
 800e47c:	4293      	cmp	r3, r2
 800e47e:	d111      	bne.n	800e4a4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	689b      	ldr	r3, [r3, #8]
 800e486:	f003 0307 	and.w	r3, r3, #7
 800e48a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	2b06      	cmp	r3, #6
 800e490:	d010      	beq.n	800e4b4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	681a      	ldr	r2, [r3, #0]
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	f042 0201 	orr.w	r2, r2, #1
 800e4a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e4a2:	e007      	b.n	800e4b4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	681a      	ldr	r2, [r3, #0]
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	f042 0201 	orr.w	r2, r2, #1
 800e4b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e4b4:	2300      	movs	r3, #0
}
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	3714      	adds	r7, #20
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	bc80      	pop	{r7}
 800e4be:	4770      	bx	lr
 800e4c0:	40012c00 	.word	0x40012c00
 800e4c4:	40013400 	.word	0x40013400
 800e4c8:	40000400 	.word	0x40000400
 800e4cc:	40000800 	.word	0x40000800
 800e4d0:	40000c00 	.word	0x40000c00

0800e4d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b084      	sub	sp, #16
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	68db      	ldr	r3, [r3, #12]
 800e4e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	691b      	ldr	r3, [r3, #16]
 800e4ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e4ec:	68bb      	ldr	r3, [r7, #8]
 800e4ee:	f003 0302 	and.w	r3, r3, #2
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d020      	beq.n	800e538 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	f003 0302 	and.w	r3, r3, #2
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d01b      	beq.n	800e538 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	f06f 0202 	mvn.w	r2, #2
 800e508:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	2201      	movs	r2, #1
 800e50e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	699b      	ldr	r3, [r3, #24]
 800e516:	f003 0303 	and.w	r3, r3, #3
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d003      	beq.n	800e526 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e51e:	6878      	ldr	r0, [r7, #4]
 800e520:	f000 f8d1 	bl	800e6c6 <HAL_TIM_IC_CaptureCallback>
 800e524:	e005      	b.n	800e532 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e526:	6878      	ldr	r0, [r7, #4]
 800e528:	f000 f8c4 	bl	800e6b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e52c:	6878      	ldr	r0, [r7, #4]
 800e52e:	f000 f8d3 	bl	800e6d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	2200      	movs	r2, #0
 800e536:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e538:	68bb      	ldr	r3, [r7, #8]
 800e53a:	f003 0304 	and.w	r3, r3, #4
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d020      	beq.n	800e584 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	f003 0304 	and.w	r3, r3, #4
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d01b      	beq.n	800e584 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	f06f 0204 	mvn.w	r2, #4
 800e554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	2202      	movs	r2, #2
 800e55a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	699b      	ldr	r3, [r3, #24]
 800e562:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e566:	2b00      	cmp	r3, #0
 800e568:	d003      	beq.n	800e572 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	f000 f8ab 	bl	800e6c6 <HAL_TIM_IC_CaptureCallback>
 800e570:	e005      	b.n	800e57e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e572:	6878      	ldr	r0, [r7, #4]
 800e574:	f000 f89e 	bl	800e6b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f000 f8ad 	bl	800e6d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	2200      	movs	r2, #0
 800e582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e584:	68bb      	ldr	r3, [r7, #8]
 800e586:	f003 0308 	and.w	r3, r3, #8
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d020      	beq.n	800e5d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	f003 0308 	and.w	r3, r3, #8
 800e594:	2b00      	cmp	r3, #0
 800e596:	d01b      	beq.n	800e5d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	f06f 0208 	mvn.w	r2, #8
 800e5a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	2204      	movs	r2, #4
 800e5a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	69db      	ldr	r3, [r3, #28]
 800e5ae:	f003 0303 	and.w	r3, r3, #3
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d003      	beq.n	800e5be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e5b6:	6878      	ldr	r0, [r7, #4]
 800e5b8:	f000 f885 	bl	800e6c6 <HAL_TIM_IC_CaptureCallback>
 800e5bc:	e005      	b.n	800e5ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e5be:	6878      	ldr	r0, [r7, #4]
 800e5c0:	f000 f878 	bl	800e6b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e5c4:	6878      	ldr	r0, [r7, #4]
 800e5c6:	f000 f887 	bl	800e6d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e5d0:	68bb      	ldr	r3, [r7, #8]
 800e5d2:	f003 0310 	and.w	r3, r3, #16
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d020      	beq.n	800e61c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	f003 0310 	and.w	r3, r3, #16
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d01b      	beq.n	800e61c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	f06f 0210 	mvn.w	r2, #16
 800e5ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	2208      	movs	r2, #8
 800e5f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	69db      	ldr	r3, [r3, #28]
 800e5fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d003      	beq.n	800e60a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e602:	6878      	ldr	r0, [r7, #4]
 800e604:	f000 f85f 	bl	800e6c6 <HAL_TIM_IC_CaptureCallback>
 800e608:	e005      	b.n	800e616 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e60a:	6878      	ldr	r0, [r7, #4]
 800e60c:	f000 f852 	bl	800e6b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e610:	6878      	ldr	r0, [r7, #4]
 800e612:	f000 f861 	bl	800e6d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	2200      	movs	r2, #0
 800e61a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e61c:	68bb      	ldr	r3, [r7, #8]
 800e61e:	f003 0301 	and.w	r3, r3, #1
 800e622:	2b00      	cmp	r3, #0
 800e624:	d00c      	beq.n	800e640 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	f003 0301 	and.w	r3, r3, #1
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d007      	beq.n	800e640 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	f06f 0201 	mvn.w	r2, #1
 800e638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e63a:	6878      	ldr	r0, [r7, #4]
 800e63c:	f7f3 f9aa 	bl	8001994 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800e640:	68bb      	ldr	r3, [r7, #8]
 800e642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e646:	2b00      	cmp	r3, #0
 800e648:	d00c      	beq.n	800e664 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e650:	2b00      	cmp	r3, #0
 800e652:	d007      	beq.n	800e664 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800e65c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e65e:	6878      	ldr	r0, [r7, #4]
 800e660:	f000 f8db 	bl	800e81a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e664:	68bb      	ldr	r3, [r7, #8]
 800e666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d00c      	beq.n	800e688 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e674:	2b00      	cmp	r3, #0
 800e676:	d007      	beq.n	800e688 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e682:	6878      	ldr	r0, [r7, #4]
 800e684:	f000 f831 	bl	800e6ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e688:	68bb      	ldr	r3, [r7, #8]
 800e68a:	f003 0320 	and.w	r3, r3, #32
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d00c      	beq.n	800e6ac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	f003 0320 	and.w	r3, r3, #32
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d007      	beq.n	800e6ac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	f06f 0220 	mvn.w	r2, #32
 800e6a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	f000 f8ae 	bl	800e808 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e6ac:	bf00      	nop
 800e6ae:	3710      	adds	r7, #16
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}

0800e6b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e6b4:	b480      	push	{r7}
 800e6b6:	b083      	sub	sp, #12
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e6bc:	bf00      	nop
 800e6be:	370c      	adds	r7, #12
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	bc80      	pop	{r7}
 800e6c4:	4770      	bx	lr

0800e6c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e6c6:	b480      	push	{r7}
 800e6c8:	b083      	sub	sp, #12
 800e6ca:	af00      	add	r7, sp, #0
 800e6cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e6ce:	bf00      	nop
 800e6d0:	370c      	adds	r7, #12
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bc80      	pop	{r7}
 800e6d6:	4770      	bx	lr

0800e6d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e6d8:	b480      	push	{r7}
 800e6da:	b083      	sub	sp, #12
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e6e0:	bf00      	nop
 800e6e2:	370c      	adds	r7, #12
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	bc80      	pop	{r7}
 800e6e8:	4770      	bx	lr

0800e6ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e6ea:	b480      	push	{r7}
 800e6ec:	b083      	sub	sp, #12
 800e6ee:	af00      	add	r7, sp, #0
 800e6f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e6f2:	bf00      	nop
 800e6f4:	370c      	adds	r7, #12
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bc80      	pop	{r7}
 800e6fa:	4770      	bx	lr

0800e6fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e6fc:	b480      	push	{r7}
 800e6fe:	b085      	sub	sp, #20
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
 800e704:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	4a39      	ldr	r2, [pc, #228]	@ (800e7f4 <TIM_Base_SetConfig+0xf8>)
 800e710:	4293      	cmp	r3, r2
 800e712:	d013      	beq.n	800e73c <TIM_Base_SetConfig+0x40>
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	4a38      	ldr	r2, [pc, #224]	@ (800e7f8 <TIM_Base_SetConfig+0xfc>)
 800e718:	4293      	cmp	r3, r2
 800e71a:	d00f      	beq.n	800e73c <TIM_Base_SetConfig+0x40>
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e722:	d00b      	beq.n	800e73c <TIM_Base_SetConfig+0x40>
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	4a35      	ldr	r2, [pc, #212]	@ (800e7fc <TIM_Base_SetConfig+0x100>)
 800e728:	4293      	cmp	r3, r2
 800e72a:	d007      	beq.n	800e73c <TIM_Base_SetConfig+0x40>
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	4a34      	ldr	r2, [pc, #208]	@ (800e800 <TIM_Base_SetConfig+0x104>)
 800e730:	4293      	cmp	r3, r2
 800e732:	d003      	beq.n	800e73c <TIM_Base_SetConfig+0x40>
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	4a33      	ldr	r2, [pc, #204]	@ (800e804 <TIM_Base_SetConfig+0x108>)
 800e738:	4293      	cmp	r3, r2
 800e73a:	d108      	bne.n	800e74e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e742:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e744:	683b      	ldr	r3, [r7, #0]
 800e746:	685b      	ldr	r3, [r3, #4]
 800e748:	68fa      	ldr	r2, [r7, #12]
 800e74a:	4313      	orrs	r3, r2
 800e74c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	4a28      	ldr	r2, [pc, #160]	@ (800e7f4 <TIM_Base_SetConfig+0xf8>)
 800e752:	4293      	cmp	r3, r2
 800e754:	d013      	beq.n	800e77e <TIM_Base_SetConfig+0x82>
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	4a27      	ldr	r2, [pc, #156]	@ (800e7f8 <TIM_Base_SetConfig+0xfc>)
 800e75a:	4293      	cmp	r3, r2
 800e75c:	d00f      	beq.n	800e77e <TIM_Base_SetConfig+0x82>
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e764:	d00b      	beq.n	800e77e <TIM_Base_SetConfig+0x82>
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	4a24      	ldr	r2, [pc, #144]	@ (800e7fc <TIM_Base_SetConfig+0x100>)
 800e76a:	4293      	cmp	r3, r2
 800e76c:	d007      	beq.n	800e77e <TIM_Base_SetConfig+0x82>
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	4a23      	ldr	r2, [pc, #140]	@ (800e800 <TIM_Base_SetConfig+0x104>)
 800e772:	4293      	cmp	r3, r2
 800e774:	d003      	beq.n	800e77e <TIM_Base_SetConfig+0x82>
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	4a22      	ldr	r2, [pc, #136]	@ (800e804 <TIM_Base_SetConfig+0x108>)
 800e77a:	4293      	cmp	r3, r2
 800e77c:	d108      	bne.n	800e790 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e784:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e786:	683b      	ldr	r3, [r7, #0]
 800e788:	68db      	ldr	r3, [r3, #12]
 800e78a:	68fa      	ldr	r2, [r7, #12]
 800e78c:	4313      	orrs	r3, r2
 800e78e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e796:	683b      	ldr	r3, [r7, #0]
 800e798:	695b      	ldr	r3, [r3, #20]
 800e79a:	4313      	orrs	r3, r2
 800e79c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	68fa      	ldr	r2, [r7, #12]
 800e7a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	689a      	ldr	r2, [r3, #8]
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e7ac:	683b      	ldr	r3, [r7, #0]
 800e7ae:	681a      	ldr	r2, [r3, #0]
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	4a0f      	ldr	r2, [pc, #60]	@ (800e7f4 <TIM_Base_SetConfig+0xf8>)
 800e7b8:	4293      	cmp	r3, r2
 800e7ba:	d003      	beq.n	800e7c4 <TIM_Base_SetConfig+0xc8>
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	4a0e      	ldr	r2, [pc, #56]	@ (800e7f8 <TIM_Base_SetConfig+0xfc>)
 800e7c0:	4293      	cmp	r3, r2
 800e7c2:	d103      	bne.n	800e7cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e7c4:	683b      	ldr	r3, [r7, #0]
 800e7c6:	691a      	ldr	r2, [r3, #16]
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2201      	movs	r2, #1
 800e7d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	691b      	ldr	r3, [r3, #16]
 800e7d6:	f003 0301 	and.w	r3, r3, #1
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d005      	beq.n	800e7ea <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	691b      	ldr	r3, [r3, #16]
 800e7e2:	f023 0201 	bic.w	r2, r3, #1
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	611a      	str	r2, [r3, #16]
  }
}
 800e7ea:	bf00      	nop
 800e7ec:	3714      	adds	r7, #20
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bc80      	pop	{r7}
 800e7f2:	4770      	bx	lr
 800e7f4:	40012c00 	.word	0x40012c00
 800e7f8:	40013400 	.word	0x40013400
 800e7fc:	40000400 	.word	0x40000400
 800e800:	40000800 	.word	0x40000800
 800e804:	40000c00 	.word	0x40000c00

0800e808 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e808:	b480      	push	{r7}
 800e80a:	b083      	sub	sp, #12
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e810:	bf00      	nop
 800e812:	370c      	adds	r7, #12
 800e814:	46bd      	mov	sp, r7
 800e816:	bc80      	pop	{r7}
 800e818:	4770      	bx	lr

0800e81a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e81a:	b480      	push	{r7}
 800e81c:	b083      	sub	sp, #12
 800e81e:	af00      	add	r7, sp, #0
 800e820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e822:	bf00      	nop
 800e824:	370c      	adds	r7, #12
 800e826:	46bd      	mov	sp, r7
 800e828:	bc80      	pop	{r7}
 800e82a:	4770      	bx	lr

0800e82c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b082      	sub	sp, #8
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d101      	bne.n	800e83e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e83a:	2301      	movs	r3, #1
 800e83c:	e042      	b.n	800e8c4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e844:	b2db      	uxtb	r3, r3
 800e846:	2b00      	cmp	r3, #0
 800e848:	d106      	bne.n	800e858 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	2200      	movs	r2, #0
 800e84e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e852:	6878      	ldr	r0, [r7, #4]
 800e854:	f7f3 fc5c 	bl	8002110 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	2224      	movs	r2, #36	@ 0x24
 800e85c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	68da      	ldr	r2, [r3, #12]
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800e86e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e870:	6878      	ldr	r0, [r7, #4]
 800e872:	f001 f889 	bl	800f988 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	691a      	ldr	r2, [r3, #16]
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e884:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	695a      	ldr	r2, [r3, #20]
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e894:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	68da      	ldr	r2, [r3, #12]
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800e8a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	2220      	movs	r2, #32
 800e8b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	2220      	movs	r2, #32
 800e8b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	2200      	movs	r2, #0
 800e8c0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800e8c2:	2300      	movs	r3, #0
}
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	3708      	adds	r7, #8
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	bd80      	pop	{r7, pc}

0800e8cc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b084      	sub	sp, #16
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	60f8      	str	r0, [r7, #12]
 800e8d4:	60b9      	str	r1, [r7, #8]
 800e8d6:	4613      	mov	r3, r2
 800e8d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e8e0:	b2db      	uxtb	r3, r3
 800e8e2:	2b20      	cmp	r3, #32
 800e8e4:	d112      	bne.n	800e90c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800e8e6:	68bb      	ldr	r3, [r7, #8]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d002      	beq.n	800e8f2 <HAL_UART_Receive_IT+0x26>
 800e8ec:	88fb      	ldrh	r3, [r7, #6]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d101      	bne.n	800e8f6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800e8f2:	2301      	movs	r3, #1
 800e8f4:	e00b      	b.n	800e90e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e8fc:	88fb      	ldrh	r3, [r7, #6]
 800e8fe:	461a      	mov	r2, r3
 800e900:	68b9      	ldr	r1, [r7, #8]
 800e902:	68f8      	ldr	r0, [r7, #12]
 800e904:	f000 fd93 	bl	800f42e <UART_Start_Receive_IT>
 800e908:	4603      	mov	r3, r0
 800e90a:	e000      	b.n	800e90e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800e90c:	2302      	movs	r3, #2
  }
}
 800e90e:	4618      	mov	r0, r3
 800e910:	3710      	adds	r7, #16
 800e912:	46bd      	mov	sp, r7
 800e914:	bd80      	pop	{r7, pc}
	...

0800e918 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b08c      	sub	sp, #48	@ 0x30
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	60f8      	str	r0, [r7, #12]
 800e920:	60b9      	str	r1, [r7, #8]
 800e922:	4613      	mov	r3, r2
 800e924:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e92c:	b2db      	uxtb	r3, r3
 800e92e:	2b20      	cmp	r3, #32
 800e930:	d156      	bne.n	800e9e0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800e932:	68bb      	ldr	r3, [r7, #8]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d002      	beq.n	800e93e <HAL_UART_Transmit_DMA+0x26>
 800e938:	88fb      	ldrh	r3, [r7, #6]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d101      	bne.n	800e942 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800e93e:	2301      	movs	r3, #1
 800e940:	e04f      	b.n	800e9e2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800e942:	68ba      	ldr	r2, [r7, #8]
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	88fa      	ldrh	r2, [r7, #6]
 800e94c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	88fa      	ldrh	r2, [r7, #6]
 800e952:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	2200      	movs	r2, #0
 800e958:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	2221      	movs	r2, #33	@ 0x21
 800e95e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e966:	4a21      	ldr	r2, [pc, #132]	@ (800e9ec <HAL_UART_Transmit_DMA+0xd4>)
 800e968:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e96e:	4a20      	ldr	r2, [pc, #128]	@ (800e9f0 <HAL_UART_Transmit_DMA+0xd8>)
 800e970:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e976:	4a1f      	ldr	r2, [pc, #124]	@ (800e9f4 <HAL_UART_Transmit_DMA+0xdc>)
 800e978:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e97e:	2200      	movs	r2, #0
 800e980:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 800e982:	f107 0308 	add.w	r3, r7, #8
 800e986:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800e98c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e98e:	6819      	ldr	r1, [r3, #0]
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	3304      	adds	r3, #4
 800e996:	461a      	mov	r2, r3
 800e998:	88fb      	ldrh	r3, [r7, #6]
 800e99a:	f7fa fd2f 	bl	80093fc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e9a6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	3314      	adds	r3, #20
 800e9ae:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9b0:	69bb      	ldr	r3, [r7, #24]
 800e9b2:	e853 3f00 	ldrex	r3, [r3]
 800e9b6:	617b      	str	r3, [r7, #20]
   return(result);
 800e9b8:	697b      	ldr	r3, [r7, #20]
 800e9ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e9be:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	3314      	adds	r3, #20
 800e9c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e9c8:	627a      	str	r2, [r7, #36]	@ 0x24
 800e9ca:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9cc:	6a39      	ldr	r1, [r7, #32]
 800e9ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e9d0:	e841 2300 	strex	r3, r2, [r1]
 800e9d4:	61fb      	str	r3, [r7, #28]
   return(result);
 800e9d6:	69fb      	ldr	r3, [r7, #28]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d1e5      	bne.n	800e9a8 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800e9dc:	2300      	movs	r3, #0
 800e9de:	e000      	b.n	800e9e2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800e9e0:	2302      	movs	r3, #2
  }
}
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	3730      	adds	r7, #48	@ 0x30
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}
 800e9ea:	bf00      	nop
 800e9ec:	0800f17d 	.word	0x0800f17d
 800e9f0:	0800f217 	.word	0x0800f217
 800e9f4:	0800f39b 	.word	0x0800f39b

0800e9f8 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b08c      	sub	sp, #48	@ 0x30
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	60f8      	str	r0, [r7, #12]
 800ea00:	60b9      	str	r1, [r7, #8]
 800ea02:	4613      	mov	r3, r2
 800ea04:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ea0c:	b2db      	uxtb	r3, r3
 800ea0e:	2b20      	cmp	r3, #32
 800ea10:	d146      	bne.n	800eaa0 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 800ea12:	68bb      	ldr	r3, [r7, #8]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d002      	beq.n	800ea1e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800ea18:	88fb      	ldrh	r3, [r7, #6]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d101      	bne.n	800ea22 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800ea1e:	2301      	movs	r3, #1
 800ea20:	e03f      	b.n	800eaa2 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	2201      	movs	r2, #1
 800ea26:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800ea2e:	88fb      	ldrh	r3, [r7, #6]
 800ea30:	461a      	mov	r2, r3
 800ea32:	68b9      	ldr	r1, [r7, #8]
 800ea34:	68f8      	ldr	r0, [r7, #12]
 800ea36:	f000 fd33 	bl	800f4a0 <UART_Start_Receive_DMA>
 800ea3a:	4603      	mov	r3, r0
 800ea3c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea44:	2b01      	cmp	r3, #1
 800ea46:	d125      	bne.n	800ea94 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ea48:	2300      	movs	r3, #0
 800ea4a:	613b      	str	r3, [r7, #16]
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	613b      	str	r3, [r7, #16]
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	685b      	ldr	r3, [r3, #4]
 800ea5a:	613b      	str	r3, [r7, #16]
 800ea5c:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	330c      	adds	r3, #12
 800ea64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea66:	69bb      	ldr	r3, [r7, #24]
 800ea68:	e853 3f00 	ldrex	r3, [r3]
 800ea6c:	617b      	str	r3, [r7, #20]
   return(result);
 800ea6e:	697b      	ldr	r3, [r7, #20]
 800ea70:	f043 0310 	orr.w	r3, r3, #16
 800ea74:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	330c      	adds	r3, #12
 800ea7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ea7e:	627a      	str	r2, [r7, #36]	@ 0x24
 800ea80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea82:	6a39      	ldr	r1, [r7, #32]
 800ea84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ea86:	e841 2300 	strex	r3, r2, [r1]
 800ea8a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ea8c:	69fb      	ldr	r3, [r7, #28]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d1e5      	bne.n	800ea5e <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 800ea92:	e002      	b.n	800ea9a <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800ea94:	2301      	movs	r3, #1
 800ea96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 800ea9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ea9e:	e000      	b.n	800eaa2 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 800eaa0:	2302      	movs	r3, #2
  }
}
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	3730      	adds	r7, #48	@ 0x30
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	bd80      	pop	{r7, pc}
	...

0800eaac <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b09a      	sub	sp, #104	@ 0x68
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	330c      	adds	r3, #12
 800eaba:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eabc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eabe:	e853 3f00 	ldrex	r3, [r3]
 800eac2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800eac4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eac6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800eaca:	667b      	str	r3, [r7, #100]	@ 0x64
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	330c      	adds	r3, #12
 800ead2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ead4:	657a      	str	r2, [r7, #84]	@ 0x54
 800ead6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ead8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800eada:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800eadc:	e841 2300 	strex	r3, r2, [r1]
 800eae0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800eae2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d1e5      	bne.n	800eab4 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	3314      	adds	r3, #20
 800eaee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eaf2:	e853 3f00 	ldrex	r3, [r3]
 800eaf6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800eaf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eafa:	f023 0301 	bic.w	r3, r3, #1
 800eafe:	663b      	str	r3, [r7, #96]	@ 0x60
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	3314      	adds	r3, #20
 800eb06:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800eb08:	643a      	str	r2, [r7, #64]	@ 0x40
 800eb0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb0c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800eb0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800eb10:	e841 2300 	strex	r3, r2, [r1]
 800eb14:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800eb16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d1e5      	bne.n	800eae8 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb20:	2b01      	cmp	r3, #1
 800eb22:	d119      	bne.n	800eb58 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	330c      	adds	r3, #12
 800eb2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb2c:	6a3b      	ldr	r3, [r7, #32]
 800eb2e:	e853 3f00 	ldrex	r3, [r3]
 800eb32:	61fb      	str	r3, [r7, #28]
   return(result);
 800eb34:	69fb      	ldr	r3, [r7, #28]
 800eb36:	f023 0310 	bic.w	r3, r3, #16
 800eb3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	330c      	adds	r3, #12
 800eb42:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800eb44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800eb46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eb4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eb4c:	e841 2300 	strex	r3, r2, [r1]
 800eb50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800eb52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d1e5      	bne.n	800eb24 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	695b      	ldr	r3, [r3, #20]
 800eb5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d03f      	beq.n	800ebe6 <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	3314      	adds	r3, #20
 800eb6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	e853 3f00 	ldrex	r3, [r3]
 800eb74:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb76:	68bb      	ldr	r3, [r7, #8]
 800eb78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800eb7c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	3314      	adds	r3, #20
 800eb84:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800eb86:	61ba      	str	r2, [r7, #24]
 800eb88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb8a:	6979      	ldr	r1, [r7, #20]
 800eb8c:	69ba      	ldr	r2, [r7, #24]
 800eb8e:	e841 2300 	strex	r3, r2, [r1]
 800eb92:	613b      	str	r3, [r7, #16]
   return(result);
 800eb94:	693b      	ldr	r3, [r7, #16]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d1e5      	bne.n	800eb66 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d013      	beq.n	800ebca <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eba6:	4a19      	ldr	r2, [pc, #100]	@ (800ec0c <HAL_UART_AbortReceive_IT+0x160>)
 800eba8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ebae:	4618      	mov	r0, r3
 800ebb0:	f7fa fcc0 	bl	8009534 <HAL_DMA_Abort_IT>
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d022      	beq.n	800ec00 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ebbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ebc0:	687a      	ldr	r2, [r7, #4]
 800ebc2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800ebc4:	4610      	mov	r0, r2
 800ebc6:	4798      	blx	r3
 800ebc8:	e01a      	b.n	800ec00 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	2200      	movs	r2, #0
 800ebce:	85da      	strh	r2, [r3, #46]	@ 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	2220      	movs	r2, #32
 800ebd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	2200      	movs	r2, #0
 800ebdc:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800ebde:	6878      	ldr	r0, [r7, #4]
 800ebe0:	f000 fac3 	bl	800f16a <HAL_UART_AbortReceiveCpltCallback>
 800ebe4:	e00c      	b.n	800ec00 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	2200      	movs	r2, #0
 800ebea:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	2220      	movs	r2, #32
 800ebf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800ebfa:	6878      	ldr	r0, [r7, #4]
 800ebfc:	f000 fab5 	bl	800f16a <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800ec00:	2300      	movs	r3, #0
}
 800ec02:	4618      	mov	r0, r3
 800ec04:	3768      	adds	r7, #104	@ 0x68
 800ec06:	46bd      	mov	sp, r7
 800ec08:	bd80      	pop	{r7, pc}
 800ec0a:	bf00      	nop
 800ec0c:	0800f70f 	.word	0x0800f70f

0800ec10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b0ba      	sub	sp, #232	@ 0xe8
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	68db      	ldr	r3, [r3, #12]
 800ec28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	695b      	ldr	r3, [r3, #20]
 800ec32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800ec36:	2300      	movs	r3, #0
 800ec38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ec42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ec46:	f003 030f 	and.w	r3, r3, #15
 800ec4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800ec4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d10f      	bne.n	800ec76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ec56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ec5a:	f003 0320 	and.w	r3, r3, #32
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d009      	beq.n	800ec76 <HAL_UART_IRQHandler+0x66>
 800ec62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ec66:	f003 0320 	and.w	r3, r3, #32
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d003      	beq.n	800ec76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ec6e:	6878      	ldr	r0, [r7, #4]
 800ec70:	f000 fdcc 	bl	800f80c <UART_Receive_IT>
      return;
 800ec74:	e25b      	b.n	800f12e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ec76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	f000 80de 	beq.w	800ee3c <HAL_UART_IRQHandler+0x22c>
 800ec80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ec84:	f003 0301 	and.w	r3, r3, #1
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d106      	bne.n	800ec9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ec8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ec90:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	f000 80d1 	beq.w	800ee3c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ec9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ec9e:	f003 0301 	and.w	r3, r3, #1
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d00b      	beq.n	800ecbe <HAL_UART_IRQHandler+0xae>
 800eca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ecaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d005      	beq.n	800ecbe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ecb6:	f043 0201 	orr.w	r2, r3, #1
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ecbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ecc2:	f003 0304 	and.w	r3, r3, #4
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d00b      	beq.n	800ece2 <HAL_UART_IRQHandler+0xd2>
 800ecca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ecce:	f003 0301 	and.w	r3, r3, #1
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d005      	beq.n	800ece2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ecda:	f043 0202 	orr.w	r2, r3, #2
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ece2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ece6:	f003 0302 	and.w	r3, r3, #2
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d00b      	beq.n	800ed06 <HAL_UART_IRQHandler+0xf6>
 800ecee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ecf2:	f003 0301 	and.w	r3, r3, #1
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d005      	beq.n	800ed06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ecfe:	f043 0204 	orr.w	r2, r3, #4
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ed06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ed0a:	f003 0308 	and.w	r3, r3, #8
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d011      	beq.n	800ed36 <HAL_UART_IRQHandler+0x126>
 800ed12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ed16:	f003 0320 	and.w	r3, r3, #32
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d105      	bne.n	800ed2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ed1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ed22:	f003 0301 	and.w	r3, r3, #1
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d005      	beq.n	800ed36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ed2e:	f043 0208 	orr.w	r2, r3, #8
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	f000 81f2 	beq.w	800f124 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ed40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ed44:	f003 0320 	and.w	r3, r3, #32
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d008      	beq.n	800ed5e <HAL_UART_IRQHandler+0x14e>
 800ed4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ed50:	f003 0320 	and.w	r3, r3, #32
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d002      	beq.n	800ed5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800ed58:	6878      	ldr	r0, [r7, #4]
 800ed5a:	f000 fd57 	bl	800f80c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	695b      	ldr	r3, [r3, #20]
 800ed64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	bf14      	ite	ne
 800ed6c:	2301      	movne	r3, #1
 800ed6e:	2300      	moveq	r3, #0
 800ed70:	b2db      	uxtb	r3, r3
 800ed72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ed7a:	f003 0308 	and.w	r3, r3, #8
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d103      	bne.n	800ed8a <HAL_UART_IRQHandler+0x17a>
 800ed82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d04f      	beq.n	800ee2a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ed8a:	6878      	ldr	r0, [r7, #4]
 800ed8c:	f000 fc49 	bl	800f622 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	695b      	ldr	r3, [r3, #20]
 800ed96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d041      	beq.n	800ee22 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	3314      	adds	r3, #20
 800eda4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eda8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800edac:	e853 3f00 	ldrex	r3, [r3]
 800edb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800edb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800edb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800edbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	3314      	adds	r3, #20
 800edc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800edca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800edce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800edd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800edda:	e841 2300 	strex	r3, r2, [r1]
 800edde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ede2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d1d9      	bne.n	800ed9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d013      	beq.n	800ee1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800edf6:	4a7e      	ldr	r2, [pc, #504]	@ (800eff0 <HAL_UART_IRQHandler+0x3e0>)
 800edf8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800edfe:	4618      	mov	r0, r3
 800ee00:	f7fa fb98 	bl	8009534 <HAL_DMA_Abort_IT>
 800ee04:	4603      	mov	r3, r0
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d016      	beq.n	800ee38 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ee0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee10:	687a      	ldr	r2, [r7, #4]
 800ee12:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800ee14:	4610      	mov	r0, r2
 800ee16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ee18:	e00e      	b.n	800ee38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ee1a:	6878      	ldr	r0, [r7, #4]
 800ee1c:	f000 f99c 	bl	800f158 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ee20:	e00a      	b.n	800ee38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ee22:	6878      	ldr	r0, [r7, #4]
 800ee24:	f000 f998 	bl	800f158 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ee28:	e006      	b.n	800ee38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ee2a:	6878      	ldr	r0, [r7, #4]
 800ee2c:	f000 f994 	bl	800f158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	2200      	movs	r2, #0
 800ee34:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800ee36:	e175      	b.n	800f124 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ee38:	bf00      	nop
    return;
 800ee3a:	e173      	b.n	800f124 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee40:	2b01      	cmp	r3, #1
 800ee42:	f040 814f 	bne.w	800f0e4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ee46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ee4a:	f003 0310 	and.w	r3, r3, #16
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	f000 8148 	beq.w	800f0e4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800ee54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ee58:	f003 0310 	and.w	r3, r3, #16
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	f000 8141 	beq.w	800f0e4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ee62:	2300      	movs	r3, #0
 800ee64:	60bb      	str	r3, [r7, #8]
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	60bb      	str	r3, [r7, #8]
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	685b      	ldr	r3, [r3, #4]
 800ee74:	60bb      	str	r3, [r7, #8]
 800ee76:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	695b      	ldr	r3, [r3, #20]
 800ee7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	f000 80b6 	beq.w	800eff4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	685b      	ldr	r3, [r3, #4]
 800ee90:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ee94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	f000 8145 	beq.w	800f128 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800eea2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800eea6:	429a      	cmp	r2, r3
 800eea8:	f080 813e 	bcs.w	800f128 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800eeb2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eeb8:	699b      	ldr	r3, [r3, #24]
 800eeba:	2b20      	cmp	r3, #32
 800eebc:	f000 8088 	beq.w	800efd0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	330c      	adds	r3, #12
 800eec6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eeca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800eece:	e853 3f00 	ldrex	r3, [r3]
 800eed2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800eed6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800eeda:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800eede:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	330c      	adds	r3, #12
 800eee8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800eeec:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800eef0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eef4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800eef8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800eefc:	e841 2300 	strex	r3, r2, [r1]
 800ef00:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ef04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d1d9      	bne.n	800eec0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	3314      	adds	r3, #20
 800ef12:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ef16:	e853 3f00 	ldrex	r3, [r3]
 800ef1a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ef1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ef1e:	f023 0301 	bic.w	r3, r3, #1
 800ef22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	3314      	adds	r3, #20
 800ef2c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ef30:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ef34:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef36:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ef38:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ef3c:	e841 2300 	strex	r3, r2, [r1]
 800ef40:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ef42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d1e1      	bne.n	800ef0c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	3314      	adds	r3, #20
 800ef4e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ef52:	e853 3f00 	ldrex	r3, [r3]
 800ef56:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ef58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ef5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ef5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	3314      	adds	r3, #20
 800ef68:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ef6c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ef6e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef70:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ef72:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ef74:	e841 2300 	strex	r3, r2, [r1]
 800ef78:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ef7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d1e3      	bne.n	800ef48 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	2220      	movs	r2, #32
 800ef84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	330c      	adds	r3, #12
 800ef94:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ef98:	e853 3f00 	ldrex	r3, [r3]
 800ef9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ef9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800efa0:	f023 0310 	bic.w	r3, r3, #16
 800efa4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	330c      	adds	r3, #12
 800efae:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800efb2:	65ba      	str	r2, [r7, #88]	@ 0x58
 800efb4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efb6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800efb8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800efba:	e841 2300 	strex	r3, r2, [r1]
 800efbe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800efc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d1e3      	bne.n	800ef8e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800efca:	4618      	mov	r0, r3
 800efcc:	f7fa fa76 	bl	80094bc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	2202      	movs	r2, #2
 800efd4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800efde:	b29b      	uxth	r3, r3
 800efe0:	1ad3      	subs	r3, r2, r3
 800efe2:	b29b      	uxth	r3, r3
 800efe4:	4619      	mov	r1, r3
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	f7f3 fa5c 	bl	80024a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800efec:	e09c      	b.n	800f128 <HAL_UART_IRQHandler+0x518>
 800efee:	bf00      	nop
 800eff0:	0800f6e7 	.word	0x0800f6e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800effc:	b29b      	uxth	r3, r3
 800effe:	1ad3      	subs	r3, r2, r3
 800f000:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800f008:	b29b      	uxth	r3, r3
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	f000 808e 	beq.w	800f12c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800f010:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f014:	2b00      	cmp	r3, #0
 800f016:	f000 8089 	beq.w	800f12c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	330c      	adds	r3, #12
 800f020:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f024:	e853 3f00 	ldrex	r3, [r3]
 800f028:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f02a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f02c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f030:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	330c      	adds	r3, #12
 800f03a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800f03e:	647a      	str	r2, [r7, #68]	@ 0x44
 800f040:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f042:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f044:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f046:	e841 2300 	strex	r3, r2, [r1]
 800f04a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f04c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d1e3      	bne.n	800f01a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	3314      	adds	r3, #20
 800f058:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f05a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f05c:	e853 3f00 	ldrex	r3, [r3]
 800f060:	623b      	str	r3, [r7, #32]
   return(result);
 800f062:	6a3b      	ldr	r3, [r7, #32]
 800f064:	f023 0301 	bic.w	r3, r3, #1
 800f068:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	3314      	adds	r3, #20
 800f072:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800f076:	633a      	str	r2, [r7, #48]	@ 0x30
 800f078:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f07a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f07c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f07e:	e841 2300 	strex	r3, r2, [r1]
 800f082:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f086:	2b00      	cmp	r3, #0
 800f088:	d1e3      	bne.n	800f052 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	2220      	movs	r2, #32
 800f08e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	2200      	movs	r2, #0
 800f096:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	330c      	adds	r3, #12
 800f09e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0a0:	693b      	ldr	r3, [r7, #16]
 800f0a2:	e853 3f00 	ldrex	r3, [r3]
 800f0a6:	60fb      	str	r3, [r7, #12]
   return(result);
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	f023 0310 	bic.w	r3, r3, #16
 800f0ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	330c      	adds	r3, #12
 800f0b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800f0bc:	61fa      	str	r2, [r7, #28]
 800f0be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0c0:	69b9      	ldr	r1, [r7, #24]
 800f0c2:	69fa      	ldr	r2, [r7, #28]
 800f0c4:	e841 2300 	strex	r3, r2, [r1]
 800f0c8:	617b      	str	r3, [r7, #20]
   return(result);
 800f0ca:	697b      	ldr	r3, [r7, #20]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d1e3      	bne.n	800f098 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	2202      	movs	r2, #2
 800f0d4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f0d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f0da:	4619      	mov	r1, r3
 800f0dc:	6878      	ldr	r0, [r7, #4]
 800f0de:	f7f3 f9e1 	bl	80024a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800f0e2:	e023      	b.n	800f12c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800f0e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f0e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d009      	beq.n	800f104 <HAL_UART_IRQHandler+0x4f4>
 800f0f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f0f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d003      	beq.n	800f104 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800f0fc:	6878      	ldr	r0, [r7, #4]
 800f0fe:	f000 fb1e 	bl	800f73e <UART_Transmit_IT>
    return;
 800f102:	e014      	b.n	800f12e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800f104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d00e      	beq.n	800f12e <HAL_UART_IRQHandler+0x51e>
 800f110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d008      	beq.n	800f12e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800f11c:	6878      	ldr	r0, [r7, #4]
 800f11e:	f000 fb5d 	bl	800f7dc <UART_EndTransmit_IT>
    return;
 800f122:	e004      	b.n	800f12e <HAL_UART_IRQHandler+0x51e>
    return;
 800f124:	bf00      	nop
 800f126:	e002      	b.n	800f12e <HAL_UART_IRQHandler+0x51e>
      return;
 800f128:	bf00      	nop
 800f12a:	e000      	b.n	800f12e <HAL_UART_IRQHandler+0x51e>
      return;
 800f12c:	bf00      	nop
  }
}
 800f12e:	37e8      	adds	r7, #232	@ 0xe8
 800f130:	46bd      	mov	sp, r7
 800f132:	bd80      	pop	{r7, pc}

0800f134 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f134:	b480      	push	{r7}
 800f136:	b083      	sub	sp, #12
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800f13c:	bf00      	nop
 800f13e:	370c      	adds	r7, #12
 800f140:	46bd      	mov	sp, r7
 800f142:	bc80      	pop	{r7}
 800f144:	4770      	bx	lr

0800f146 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f146:	b480      	push	{r7}
 800f148:	b083      	sub	sp, #12
 800f14a:	af00      	add	r7, sp, #0
 800f14c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800f14e:	bf00      	nop
 800f150:	370c      	adds	r7, #12
 800f152:	46bd      	mov	sp, r7
 800f154:	bc80      	pop	{r7}
 800f156:	4770      	bx	lr

0800f158 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f158:	b480      	push	{r7}
 800f15a:	b083      	sub	sp, #12
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800f160:	bf00      	nop
 800f162:	370c      	adds	r7, #12
 800f164:	46bd      	mov	sp, r7
 800f166:	bc80      	pop	{r7}
 800f168:	4770      	bx	lr

0800f16a <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800f16a:	b480      	push	{r7}
 800f16c:	b083      	sub	sp, #12
 800f16e:	af00      	add	r7, sp, #0
 800f170:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800f172:	bf00      	nop
 800f174:	370c      	adds	r7, #12
 800f176:	46bd      	mov	sp, r7
 800f178:	bc80      	pop	{r7}
 800f17a:	4770      	bx	lr

0800f17c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b090      	sub	sp, #64	@ 0x40
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f188:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	f003 0320 	and.w	r3, r3, #32
 800f194:	2b00      	cmp	r3, #0
 800f196:	d137      	bne.n	800f208 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800f198:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f19a:	2200      	movs	r2, #0
 800f19c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f19e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	3314      	adds	r3, #20
 800f1a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1a8:	e853 3f00 	ldrex	r3, [r3]
 800f1ac:	623b      	str	r3, [r7, #32]
   return(result);
 800f1ae:	6a3b      	ldr	r3, [r7, #32]
 800f1b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f1b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f1b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	3314      	adds	r3, #20
 800f1bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f1be:	633a      	str	r2, [r7, #48]	@ 0x30
 800f1c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f1c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f1c6:	e841 2300 	strex	r3, r2, [r1]
 800f1ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f1cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d1e5      	bne.n	800f19e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f1d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	330c      	adds	r3, #12
 800f1d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1da:	693b      	ldr	r3, [r7, #16]
 800f1dc:	e853 3f00 	ldrex	r3, [r3]
 800f1e0:	60fb      	str	r3, [r7, #12]
   return(result);
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f1e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800f1ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	330c      	adds	r3, #12
 800f1f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f1f2:	61fa      	str	r2, [r7, #28]
 800f1f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1f6:	69b9      	ldr	r1, [r7, #24]
 800f1f8:	69fa      	ldr	r2, [r7, #28]
 800f1fa:	e841 2300 	strex	r3, r2, [r1]
 800f1fe:	617b      	str	r3, [r7, #20]
   return(result);
 800f200:	697b      	ldr	r3, [r7, #20]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d1e5      	bne.n	800f1d2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f206:	e002      	b.n	800f20e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800f208:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800f20a:	f7f9 f8d1 	bl	80083b0 <HAL_UART_TxCpltCallback>
}
 800f20e:	bf00      	nop
 800f210:	3740      	adds	r7, #64	@ 0x40
 800f212:	46bd      	mov	sp, r7
 800f214:	bd80      	pop	{r7, pc}

0800f216 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f216:	b580      	push	{r7, lr}
 800f218:	b084      	sub	sp, #16
 800f21a:	af00      	add	r7, sp, #0
 800f21c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f222:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800f224:	68f8      	ldr	r0, [r7, #12]
 800f226:	f7ff ff85 	bl	800f134 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f22a:	bf00      	nop
 800f22c:	3710      	adds	r7, #16
 800f22e:	46bd      	mov	sp, r7
 800f230:	bd80      	pop	{r7, pc}

0800f232 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f232:	b580      	push	{r7, lr}
 800f234:	b09c      	sub	sp, #112	@ 0x70
 800f236:	af00      	add	r7, sp, #0
 800f238:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f23e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	f003 0320 	and.w	r3, r3, #32
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d172      	bne.n	800f334 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800f24e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f250:	2200      	movs	r2, #0
 800f252:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f254:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	330c      	adds	r3, #12
 800f25a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f25c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f25e:	e853 3f00 	ldrex	r3, [r3]
 800f262:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f264:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f266:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f26a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f26c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	330c      	adds	r3, #12
 800f272:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f274:	65ba      	str	r2, [r7, #88]	@ 0x58
 800f276:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f278:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f27a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f27c:	e841 2300 	strex	r3, r2, [r1]
 800f280:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f282:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f284:	2b00      	cmp	r3, #0
 800f286:	d1e5      	bne.n	800f254 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f288:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	3314      	adds	r3, #20
 800f28e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f292:	e853 3f00 	ldrex	r3, [r3]
 800f296:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f29a:	f023 0301 	bic.w	r3, r3, #1
 800f29e:	667b      	str	r3, [r7, #100]	@ 0x64
 800f2a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	3314      	adds	r3, #20
 800f2a6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f2a8:	647a      	str	r2, [r7, #68]	@ 0x44
 800f2aa:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f2ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f2b0:	e841 2300 	strex	r3, r2, [r1]
 800f2b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f2b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d1e5      	bne.n	800f288 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f2bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	3314      	adds	r3, #20
 800f2c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2c6:	e853 3f00 	ldrex	r3, [r3]
 800f2ca:	623b      	str	r3, [r7, #32]
   return(result);
 800f2cc:	6a3b      	ldr	r3, [r7, #32]
 800f2ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f2d2:	663b      	str	r3, [r7, #96]	@ 0x60
 800f2d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	3314      	adds	r3, #20
 800f2da:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f2dc:	633a      	str	r2, [r7, #48]	@ 0x30
 800f2de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f2e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f2e4:	e841 2300 	strex	r3, r2, [r1]
 800f2e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f2ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d1e5      	bne.n	800f2bc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f2f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f2f2:	2220      	movs	r2, #32
 800f2f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f2f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f2fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f2fc:	2b01      	cmp	r3, #1
 800f2fe:	d119      	bne.n	800f334 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f300:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	330c      	adds	r3, #12
 800f306:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f308:	693b      	ldr	r3, [r7, #16]
 800f30a:	e853 3f00 	ldrex	r3, [r3]
 800f30e:	60fb      	str	r3, [r7, #12]
   return(result);
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	f023 0310 	bic.w	r3, r3, #16
 800f316:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f318:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	330c      	adds	r3, #12
 800f31e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f320:	61fa      	str	r2, [r7, #28]
 800f322:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f324:	69b9      	ldr	r1, [r7, #24]
 800f326:	69fa      	ldr	r2, [r7, #28]
 800f328:	e841 2300 	strex	r3, r2, [r1]
 800f32c:	617b      	str	r3, [r7, #20]
   return(result);
 800f32e:	697b      	ldr	r3, [r7, #20]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d1e5      	bne.n	800f300 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f334:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f336:	2200      	movs	r2, #0
 800f338:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f33a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f33c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f33e:	2b01      	cmp	r3, #1
 800f340:	d106      	bne.n	800f350 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f342:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f344:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800f346:	4619      	mov	r1, r3
 800f348:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f34a:	f7f3 f8ab 	bl	80024a4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f34e:	e002      	b.n	800f356 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800f350:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f352:	f7f9 f805 	bl	8008360 <HAL_UART_RxCpltCallback>
}
 800f356:	bf00      	nop
 800f358:	3770      	adds	r7, #112	@ 0x70
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}

0800f35e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f35e:	b580      	push	{r7, lr}
 800f360:	b084      	sub	sp, #16
 800f362:	af00      	add	r7, sp, #0
 800f364:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f36a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	2201      	movs	r2, #1
 800f370:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f376:	2b01      	cmp	r3, #1
 800f378:	d108      	bne.n	800f38c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800f37e:	085b      	lsrs	r3, r3, #1
 800f380:	b29b      	uxth	r3, r3
 800f382:	4619      	mov	r1, r3
 800f384:	68f8      	ldr	r0, [r7, #12]
 800f386:	f7f3 f88d 	bl	80024a4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f38a:	e002      	b.n	800f392 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800f38c:	68f8      	ldr	r0, [r7, #12]
 800f38e:	f7ff feda 	bl	800f146 <HAL_UART_RxHalfCpltCallback>
}
 800f392:	bf00      	nop
 800f394:	3710      	adds	r7, #16
 800f396:	46bd      	mov	sp, r7
 800f398:	bd80      	pop	{r7, pc}

0800f39a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f39a:	b580      	push	{r7, lr}
 800f39c:	b084      	sub	sp, #16
 800f39e:	af00      	add	r7, sp, #0
 800f3a0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3aa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800f3ac:	68bb      	ldr	r3, [r7, #8]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	695b      	ldr	r3, [r3, #20]
 800f3b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	bf14      	ite	ne
 800f3ba:	2301      	movne	r3, #1
 800f3bc:	2300      	moveq	r3, #0
 800f3be:	b2db      	uxtb	r3, r3
 800f3c0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800f3c2:	68bb      	ldr	r3, [r7, #8]
 800f3c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f3c8:	b2db      	uxtb	r3, r3
 800f3ca:	2b21      	cmp	r3, #33	@ 0x21
 800f3cc:	d108      	bne.n	800f3e0 <UART_DMAError+0x46>
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d005      	beq.n	800f3e0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800f3d4:	68bb      	ldr	r3, [r7, #8]
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800f3da:	68b8      	ldr	r0, [r7, #8]
 800f3dc:	f000 f8fa 	bl	800f5d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800f3e0:	68bb      	ldr	r3, [r7, #8]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	695b      	ldr	r3, [r3, #20]
 800f3e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	bf14      	ite	ne
 800f3ee:	2301      	movne	r3, #1
 800f3f0:	2300      	moveq	r3, #0
 800f3f2:	b2db      	uxtb	r3, r3
 800f3f4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800f3f6:	68bb      	ldr	r3, [r7, #8]
 800f3f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f3fc:	b2db      	uxtb	r3, r3
 800f3fe:	2b22      	cmp	r3, #34	@ 0x22
 800f400:	d108      	bne.n	800f414 <UART_DMAError+0x7a>
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d005      	beq.n	800f414 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800f408:	68bb      	ldr	r3, [r7, #8]
 800f40a:	2200      	movs	r2, #0
 800f40c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800f40e:	68b8      	ldr	r0, [r7, #8]
 800f410:	f000 f907 	bl	800f622 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f414:	68bb      	ldr	r3, [r7, #8]
 800f416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f418:	f043 0210 	orr.w	r2, r3, #16
 800f41c:	68bb      	ldr	r3, [r7, #8]
 800f41e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f420:	68b8      	ldr	r0, [r7, #8]
 800f422:	f7ff fe99 	bl	800f158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f426:	bf00      	nop
 800f428:	3710      	adds	r7, #16
 800f42a:	46bd      	mov	sp, r7
 800f42c:	bd80      	pop	{r7, pc}

0800f42e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f42e:	b480      	push	{r7}
 800f430:	b085      	sub	sp, #20
 800f432:	af00      	add	r7, sp, #0
 800f434:	60f8      	str	r0, [r7, #12]
 800f436:	60b9      	str	r1, [r7, #8]
 800f438:	4613      	mov	r3, r2
 800f43a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	68ba      	ldr	r2, [r7, #8]
 800f440:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	88fa      	ldrh	r2, [r7, #6]
 800f446:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	88fa      	ldrh	r2, [r7, #6]
 800f44c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	2200      	movs	r2, #0
 800f452:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	2222      	movs	r2, #34	@ 0x22
 800f458:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	691b      	ldr	r3, [r3, #16]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d007      	beq.n	800f474 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	68da      	ldr	r2, [r3, #12]
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f472:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	695a      	ldr	r2, [r3, #20]
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	f042 0201 	orr.w	r2, r2, #1
 800f482:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	68da      	ldr	r2, [r3, #12]
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	f042 0220 	orr.w	r2, r2, #32
 800f492:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f494:	2300      	movs	r3, #0
}
 800f496:	4618      	mov	r0, r3
 800f498:	3714      	adds	r7, #20
 800f49a:	46bd      	mov	sp, r7
 800f49c:	bc80      	pop	{r7}
 800f49e:	4770      	bx	lr

0800f4a0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f4a0:	b580      	push	{r7, lr}
 800f4a2:	b098      	sub	sp, #96	@ 0x60
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	60f8      	str	r0, [r7, #12]
 800f4a8:	60b9      	str	r1, [r7, #8]
 800f4aa:	4613      	mov	r3, r2
 800f4ac:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800f4ae:	68ba      	ldr	r2, [r7, #8]
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	88fa      	ldrh	r2, [r7, #6]
 800f4b8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	2200      	movs	r2, #0
 800f4be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	2222      	movs	r2, #34	@ 0x22
 800f4c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f4cc:	4a3e      	ldr	r2, [pc, #248]	@ (800f5c8 <UART_Start_Receive_DMA+0x128>)
 800f4ce:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f4d4:	4a3d      	ldr	r2, [pc, #244]	@ (800f5cc <UART_Start_Receive_DMA+0x12c>)
 800f4d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f4dc:	4a3c      	ldr	r2, [pc, #240]	@ (800f5d0 <UART_Start_Receive_DMA+0x130>)
 800f4de:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f4e4:	2200      	movs	r2, #0
 800f4e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800f4e8:	f107 0308 	add.w	r3, r7, #8
 800f4ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	3304      	adds	r3, #4
 800f4f8:	4619      	mov	r1, r3
 800f4fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f4fc:	681a      	ldr	r2, [r3, #0]
 800f4fe:	88fb      	ldrh	r3, [r7, #6]
 800f500:	f7f9 ff7c 	bl	80093fc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800f504:	2300      	movs	r3, #0
 800f506:	613b      	str	r3, [r7, #16]
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	613b      	str	r3, [r7, #16]
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	685b      	ldr	r3, [r3, #4]
 800f516:	613b      	str	r3, [r7, #16]
 800f518:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	691b      	ldr	r3, [r3, #16]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d019      	beq.n	800f556 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	330c      	adds	r3, #12
 800f528:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f52a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f52c:	e853 3f00 	ldrex	r3, [r3]
 800f530:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f532:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f534:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f538:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	330c      	adds	r3, #12
 800f540:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f542:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800f544:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f546:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800f548:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f54a:	e841 2300 	strex	r3, r2, [r1]
 800f54e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800f550:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f552:	2b00      	cmp	r3, #0
 800f554:	d1e5      	bne.n	800f522 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	3314      	adds	r3, #20
 800f55c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f55e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f560:	e853 3f00 	ldrex	r3, [r3]
 800f564:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f568:	f043 0301 	orr.w	r3, r3, #1
 800f56c:	657b      	str	r3, [r7, #84]	@ 0x54
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	3314      	adds	r3, #20
 800f574:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f576:	63ba      	str	r2, [r7, #56]	@ 0x38
 800f578:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f57a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800f57c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f57e:	e841 2300 	strex	r3, r2, [r1]
 800f582:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f586:	2b00      	cmp	r3, #0
 800f588:	d1e5      	bne.n	800f556 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	3314      	adds	r3, #20
 800f590:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f592:	69bb      	ldr	r3, [r7, #24]
 800f594:	e853 3f00 	ldrex	r3, [r3]
 800f598:	617b      	str	r3, [r7, #20]
   return(result);
 800f59a:	697b      	ldr	r3, [r7, #20]
 800f59c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f5a0:	653b      	str	r3, [r7, #80]	@ 0x50
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	3314      	adds	r3, #20
 800f5a8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f5aa:	627a      	str	r2, [r7, #36]	@ 0x24
 800f5ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5ae:	6a39      	ldr	r1, [r7, #32]
 800f5b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f5b2:	e841 2300 	strex	r3, r2, [r1]
 800f5b6:	61fb      	str	r3, [r7, #28]
   return(result);
 800f5b8:	69fb      	ldr	r3, [r7, #28]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d1e5      	bne.n	800f58a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800f5be:	2300      	movs	r3, #0
}
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	3760      	adds	r7, #96	@ 0x60
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	bd80      	pop	{r7, pc}
 800f5c8:	0800f233 	.word	0x0800f233
 800f5cc:	0800f35f 	.word	0x0800f35f
 800f5d0:	0800f39b 	.word	0x0800f39b

0800f5d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f5d4:	b480      	push	{r7}
 800f5d6:	b089      	sub	sp, #36	@ 0x24
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	330c      	adds	r3, #12
 800f5e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	e853 3f00 	ldrex	r3, [r3]
 800f5ea:	60bb      	str	r3, [r7, #8]
   return(result);
 800f5ec:	68bb      	ldr	r3, [r7, #8]
 800f5ee:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800f5f2:	61fb      	str	r3, [r7, #28]
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	330c      	adds	r3, #12
 800f5fa:	69fa      	ldr	r2, [r7, #28]
 800f5fc:	61ba      	str	r2, [r7, #24]
 800f5fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f600:	6979      	ldr	r1, [r7, #20]
 800f602:	69ba      	ldr	r2, [r7, #24]
 800f604:	e841 2300 	strex	r3, r2, [r1]
 800f608:	613b      	str	r3, [r7, #16]
   return(result);
 800f60a:	693b      	ldr	r3, [r7, #16]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d1e5      	bne.n	800f5dc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	2220      	movs	r2, #32
 800f614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800f618:	bf00      	nop
 800f61a:	3724      	adds	r7, #36	@ 0x24
 800f61c:	46bd      	mov	sp, r7
 800f61e:	bc80      	pop	{r7}
 800f620:	4770      	bx	lr

0800f622 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f622:	b480      	push	{r7}
 800f624:	b095      	sub	sp, #84	@ 0x54
 800f626:	af00      	add	r7, sp, #0
 800f628:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	330c      	adds	r3, #12
 800f630:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f634:	e853 3f00 	ldrex	r3, [r3]
 800f638:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f63a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f63c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f640:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	330c      	adds	r3, #12
 800f648:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f64a:	643a      	str	r2, [r7, #64]	@ 0x40
 800f64c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f64e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f650:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f652:	e841 2300 	strex	r3, r2, [r1]
 800f656:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d1e5      	bne.n	800f62a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	3314      	adds	r3, #20
 800f664:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f666:	6a3b      	ldr	r3, [r7, #32]
 800f668:	e853 3f00 	ldrex	r3, [r3]
 800f66c:	61fb      	str	r3, [r7, #28]
   return(result);
 800f66e:	69fb      	ldr	r3, [r7, #28]
 800f670:	f023 0301 	bic.w	r3, r3, #1
 800f674:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	3314      	adds	r3, #20
 800f67c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f67e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f680:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f682:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f684:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f686:	e841 2300 	strex	r3, r2, [r1]
 800f68a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d1e5      	bne.n	800f65e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f696:	2b01      	cmp	r3, #1
 800f698:	d119      	bne.n	800f6ce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	330c      	adds	r3, #12
 800f6a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	e853 3f00 	ldrex	r3, [r3]
 800f6a8:	60bb      	str	r3, [r7, #8]
   return(result);
 800f6aa:	68bb      	ldr	r3, [r7, #8]
 800f6ac:	f023 0310 	bic.w	r3, r3, #16
 800f6b0:	647b      	str	r3, [r7, #68]	@ 0x44
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	330c      	adds	r3, #12
 800f6b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f6ba:	61ba      	str	r2, [r7, #24]
 800f6bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6be:	6979      	ldr	r1, [r7, #20]
 800f6c0:	69ba      	ldr	r2, [r7, #24]
 800f6c2:	e841 2300 	strex	r3, r2, [r1]
 800f6c6:	613b      	str	r3, [r7, #16]
   return(result);
 800f6c8:	693b      	ldr	r3, [r7, #16]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d1e5      	bne.n	800f69a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	2220      	movs	r2, #32
 800f6d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	2200      	movs	r2, #0
 800f6da:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800f6dc:	bf00      	nop
 800f6de:	3754      	adds	r7, #84	@ 0x54
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	bc80      	pop	{r7}
 800f6e4:	4770      	bx	lr

0800f6e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f6e6:	b580      	push	{r7, lr}
 800f6e8:	b084      	sub	sp, #16
 800f6ea:	af00      	add	r7, sp, #0
 800f6ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f700:	68f8      	ldr	r0, [r7, #12]
 800f702:	f7ff fd29 	bl	800f158 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f706:	bf00      	nop
 800f708:	3710      	adds	r7, #16
 800f70a:	46bd      	mov	sp, r7
 800f70c:	bd80      	pop	{r7, pc}

0800f70e <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800f70e:	b580      	push	{r7, lr}
 800f710:	b084      	sub	sp, #16
 800f712:	af00      	add	r7, sp, #0
 800f714:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f71a:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	2200      	movs	r2, #0
 800f720:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	2220      	movs	r2, #32
 800f726:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	2200      	movs	r2, #0
 800f72e:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800f730:	68f8      	ldr	r0, [r7, #12]
 800f732:	f7ff fd1a 	bl	800f16a <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f736:	bf00      	nop
 800f738:	3710      	adds	r7, #16
 800f73a:	46bd      	mov	sp, r7
 800f73c:	bd80      	pop	{r7, pc}

0800f73e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800f73e:	b480      	push	{r7}
 800f740:	b085      	sub	sp, #20
 800f742:	af00      	add	r7, sp, #0
 800f744:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f74c:	b2db      	uxtb	r3, r3
 800f74e:	2b21      	cmp	r3, #33	@ 0x21
 800f750:	d13e      	bne.n	800f7d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	689b      	ldr	r3, [r3, #8]
 800f756:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f75a:	d114      	bne.n	800f786 <UART_Transmit_IT+0x48>
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	691b      	ldr	r3, [r3, #16]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d110      	bne.n	800f786 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	6a1b      	ldr	r3, [r3, #32]
 800f768:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	881b      	ldrh	r3, [r3, #0]
 800f76e:	461a      	mov	r2, r3
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f778:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	6a1b      	ldr	r3, [r3, #32]
 800f77e:	1c9a      	adds	r2, r3, #2
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	621a      	str	r2, [r3, #32]
 800f784:	e008      	b.n	800f798 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	6a1b      	ldr	r3, [r3, #32]
 800f78a:	1c59      	adds	r1, r3, #1
 800f78c:	687a      	ldr	r2, [r7, #4]
 800f78e:	6211      	str	r1, [r2, #32]
 800f790:	781a      	ldrb	r2, [r3, #0]
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800f79c:	b29b      	uxth	r3, r3
 800f79e:	3b01      	subs	r3, #1
 800f7a0:	b29b      	uxth	r3, r3
 800f7a2:	687a      	ldr	r2, [r7, #4]
 800f7a4:	4619      	mov	r1, r3
 800f7a6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d10f      	bne.n	800f7cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	68da      	ldr	r2, [r3, #12]
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f7ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	68da      	ldr	r2, [r3, #12]
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f7ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	e000      	b.n	800f7d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800f7d0:	2302      	movs	r3, #2
  }
}
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	3714      	adds	r7, #20
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	bc80      	pop	{r7}
 800f7da:	4770      	bx	lr

0800f7dc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b082      	sub	sp, #8
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	68da      	ldr	r2, [r3, #12]
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f7f2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	2220      	movs	r2, #32
 800f7f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f7fc:	6878      	ldr	r0, [r7, #4]
 800f7fe:	f7f8 fdd7 	bl	80083b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800f802:	2300      	movs	r3, #0
}
 800f804:	4618      	mov	r0, r3
 800f806:	3708      	adds	r7, #8
 800f808:	46bd      	mov	sp, r7
 800f80a:	bd80      	pop	{r7, pc}

0800f80c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b08c      	sub	sp, #48	@ 0x30
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f81a:	b2db      	uxtb	r3, r3
 800f81c:	2b22      	cmp	r3, #34	@ 0x22
 800f81e:	f040 80ae 	bne.w	800f97e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	689b      	ldr	r3, [r3, #8]
 800f826:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f82a:	d117      	bne.n	800f85c <UART_Receive_IT+0x50>
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	691b      	ldr	r3, [r3, #16]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d113      	bne.n	800f85c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800f834:	2300      	movs	r3, #0
 800f836:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f83c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	685b      	ldr	r3, [r3, #4]
 800f844:	b29b      	uxth	r3, r3
 800f846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f84a:	b29a      	uxth	r2, r3
 800f84c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f84e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f854:	1c9a      	adds	r2, r3, #2
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	629a      	str	r2, [r3, #40]	@ 0x28
 800f85a:	e026      	b.n	800f8aa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f860:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800f862:	2300      	movs	r3, #0
 800f864:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	689b      	ldr	r3, [r3, #8]
 800f86a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f86e:	d007      	beq.n	800f880 <UART_Receive_IT+0x74>
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	689b      	ldr	r3, [r3, #8]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d10a      	bne.n	800f88e <UART_Receive_IT+0x82>
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	691b      	ldr	r3, [r3, #16]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d106      	bne.n	800f88e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	685b      	ldr	r3, [r3, #4]
 800f886:	b2da      	uxtb	r2, r3
 800f888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f88a:	701a      	strb	r2, [r3, #0]
 800f88c:	e008      	b.n	800f8a0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	685b      	ldr	r3, [r3, #4]
 800f894:	b2db      	uxtb	r3, r3
 800f896:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f89a:	b2da      	uxtb	r2, r3
 800f89c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f89e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f8a4:	1c5a      	adds	r2, r3, #1
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800f8ae:	b29b      	uxth	r3, r3
 800f8b0:	3b01      	subs	r3, #1
 800f8b2:	b29b      	uxth	r3, r3
 800f8b4:	687a      	ldr	r2, [r7, #4]
 800f8b6:	4619      	mov	r1, r3
 800f8b8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d15d      	bne.n	800f97a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	68da      	ldr	r2, [r3, #12]
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	f022 0220 	bic.w	r2, r2, #32
 800f8cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	68da      	ldr	r2, [r3, #12]
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800f8dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	695a      	ldr	r2, [r3, #20]
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	f022 0201 	bic.w	r2, r2, #1
 800f8ec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	2220      	movs	r2, #32
 800f8f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f900:	2b01      	cmp	r3, #1
 800f902:	d135      	bne.n	800f970 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	2200      	movs	r2, #0
 800f908:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	330c      	adds	r3, #12
 800f910:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f912:	697b      	ldr	r3, [r7, #20]
 800f914:	e853 3f00 	ldrex	r3, [r3]
 800f918:	613b      	str	r3, [r7, #16]
   return(result);
 800f91a:	693b      	ldr	r3, [r7, #16]
 800f91c:	f023 0310 	bic.w	r3, r3, #16
 800f920:	627b      	str	r3, [r7, #36]	@ 0x24
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	330c      	adds	r3, #12
 800f928:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f92a:	623a      	str	r2, [r7, #32]
 800f92c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f92e:	69f9      	ldr	r1, [r7, #28]
 800f930:	6a3a      	ldr	r2, [r7, #32]
 800f932:	e841 2300 	strex	r3, r2, [r1]
 800f936:	61bb      	str	r3, [r7, #24]
   return(result);
 800f938:	69bb      	ldr	r3, [r7, #24]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d1e5      	bne.n	800f90a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	f003 0310 	and.w	r3, r3, #16
 800f948:	2b10      	cmp	r3, #16
 800f94a:	d10a      	bne.n	800f962 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800f94c:	2300      	movs	r3, #0
 800f94e:	60fb      	str	r3, [r7, #12]
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	60fb      	str	r3, [r7, #12]
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	685b      	ldr	r3, [r3, #4]
 800f95e:	60fb      	str	r3, [r7, #12]
 800f960:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800f966:	4619      	mov	r1, r3
 800f968:	6878      	ldr	r0, [r7, #4]
 800f96a:	f7f2 fd9b 	bl	80024a4 <HAL_UARTEx_RxEventCallback>
 800f96e:	e002      	b.n	800f976 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800f970:	6878      	ldr	r0, [r7, #4]
 800f972:	f7f8 fcf5 	bl	8008360 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800f976:	2300      	movs	r3, #0
 800f978:	e002      	b.n	800f980 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800f97a:	2300      	movs	r3, #0
 800f97c:	e000      	b.n	800f980 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800f97e:	2302      	movs	r3, #2
  }
}
 800f980:	4618      	mov	r0, r3
 800f982:	3730      	adds	r7, #48	@ 0x30
 800f984:	46bd      	mov	sp, r7
 800f986:	bd80      	pop	{r7, pc}

0800f988 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b084      	sub	sp, #16
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	691b      	ldr	r3, [r3, #16]
 800f996:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	68da      	ldr	r2, [r3, #12]
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	430a      	orrs	r2, r1
 800f9a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	689a      	ldr	r2, [r3, #8]
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	691b      	ldr	r3, [r3, #16]
 800f9ae:	431a      	orrs	r2, r3
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	695b      	ldr	r3, [r3, #20]
 800f9b4:	4313      	orrs	r3, r2
 800f9b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	68db      	ldr	r3, [r3, #12]
 800f9be:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800f9c2:	f023 030c 	bic.w	r3, r3, #12
 800f9c6:	687a      	ldr	r2, [r7, #4]
 800f9c8:	6812      	ldr	r2, [r2, #0]
 800f9ca:	68b9      	ldr	r1, [r7, #8]
 800f9cc:	430b      	orrs	r3, r1
 800f9ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	695b      	ldr	r3, [r3, #20]
 800f9d6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	699a      	ldr	r2, [r3, #24]
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	430a      	orrs	r2, r1
 800f9e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	4a2c      	ldr	r2, [pc, #176]	@ (800fa9c <UART_SetConfig+0x114>)
 800f9ec:	4293      	cmp	r3, r2
 800f9ee:	d103      	bne.n	800f9f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800f9f0:	f7fd fd8a 	bl	800d508 <HAL_RCC_GetPCLK2Freq>
 800f9f4:	60f8      	str	r0, [r7, #12]
 800f9f6:	e002      	b.n	800f9fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800f9f8:	f7fd fd72 	bl	800d4e0 <HAL_RCC_GetPCLK1Freq>
 800f9fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f9fe:	68fa      	ldr	r2, [r7, #12]
 800fa00:	4613      	mov	r3, r2
 800fa02:	009b      	lsls	r3, r3, #2
 800fa04:	4413      	add	r3, r2
 800fa06:	009a      	lsls	r2, r3, #2
 800fa08:	441a      	add	r2, r3
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	685b      	ldr	r3, [r3, #4]
 800fa0e:	009b      	lsls	r3, r3, #2
 800fa10:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa14:	4a22      	ldr	r2, [pc, #136]	@ (800faa0 <UART_SetConfig+0x118>)
 800fa16:	fba2 2303 	umull	r2, r3, r2, r3
 800fa1a:	095b      	lsrs	r3, r3, #5
 800fa1c:	0119      	lsls	r1, r3, #4
 800fa1e:	68fa      	ldr	r2, [r7, #12]
 800fa20:	4613      	mov	r3, r2
 800fa22:	009b      	lsls	r3, r3, #2
 800fa24:	4413      	add	r3, r2
 800fa26:	009a      	lsls	r2, r3, #2
 800fa28:	441a      	add	r2, r3
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	685b      	ldr	r3, [r3, #4]
 800fa2e:	009b      	lsls	r3, r3, #2
 800fa30:	fbb2 f2f3 	udiv	r2, r2, r3
 800fa34:	4b1a      	ldr	r3, [pc, #104]	@ (800faa0 <UART_SetConfig+0x118>)
 800fa36:	fba3 0302 	umull	r0, r3, r3, r2
 800fa3a:	095b      	lsrs	r3, r3, #5
 800fa3c:	2064      	movs	r0, #100	@ 0x64
 800fa3e:	fb00 f303 	mul.w	r3, r0, r3
 800fa42:	1ad3      	subs	r3, r2, r3
 800fa44:	011b      	lsls	r3, r3, #4
 800fa46:	3332      	adds	r3, #50	@ 0x32
 800fa48:	4a15      	ldr	r2, [pc, #84]	@ (800faa0 <UART_SetConfig+0x118>)
 800fa4a:	fba2 2303 	umull	r2, r3, r2, r3
 800fa4e:	095b      	lsrs	r3, r3, #5
 800fa50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fa54:	4419      	add	r1, r3
 800fa56:	68fa      	ldr	r2, [r7, #12]
 800fa58:	4613      	mov	r3, r2
 800fa5a:	009b      	lsls	r3, r3, #2
 800fa5c:	4413      	add	r3, r2
 800fa5e:	009a      	lsls	r2, r3, #2
 800fa60:	441a      	add	r2, r3
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	685b      	ldr	r3, [r3, #4]
 800fa66:	009b      	lsls	r3, r3, #2
 800fa68:	fbb2 f2f3 	udiv	r2, r2, r3
 800fa6c:	4b0c      	ldr	r3, [pc, #48]	@ (800faa0 <UART_SetConfig+0x118>)
 800fa6e:	fba3 0302 	umull	r0, r3, r3, r2
 800fa72:	095b      	lsrs	r3, r3, #5
 800fa74:	2064      	movs	r0, #100	@ 0x64
 800fa76:	fb00 f303 	mul.w	r3, r0, r3
 800fa7a:	1ad3      	subs	r3, r2, r3
 800fa7c:	011b      	lsls	r3, r3, #4
 800fa7e:	3332      	adds	r3, #50	@ 0x32
 800fa80:	4a07      	ldr	r2, [pc, #28]	@ (800faa0 <UART_SetConfig+0x118>)
 800fa82:	fba2 2303 	umull	r2, r3, r2, r3
 800fa86:	095b      	lsrs	r3, r3, #5
 800fa88:	f003 020f 	and.w	r2, r3, #15
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	440a      	add	r2, r1
 800fa92:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800fa94:	bf00      	nop
 800fa96:	3710      	adds	r7, #16
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	bd80      	pop	{r7, pc}
 800fa9c:	40013800 	.word	0x40013800
 800faa0:	51eb851f 	.word	0x51eb851f

0800faa4 <__NVIC_SetPriority>:
{
 800faa4:	b480      	push	{r7}
 800faa6:	b083      	sub	sp, #12
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	4603      	mov	r3, r0
 800faac:	6039      	str	r1, [r7, #0]
 800faae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800fab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	db0a      	blt.n	800face <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fab8:	683b      	ldr	r3, [r7, #0]
 800faba:	b2da      	uxtb	r2, r3
 800fabc:	490c      	ldr	r1, [pc, #48]	@ (800faf0 <__NVIC_SetPriority+0x4c>)
 800fabe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fac2:	0112      	lsls	r2, r2, #4
 800fac4:	b2d2      	uxtb	r2, r2
 800fac6:	440b      	add	r3, r1
 800fac8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800facc:	e00a      	b.n	800fae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800face:	683b      	ldr	r3, [r7, #0]
 800fad0:	b2da      	uxtb	r2, r3
 800fad2:	4908      	ldr	r1, [pc, #32]	@ (800faf4 <__NVIC_SetPriority+0x50>)
 800fad4:	79fb      	ldrb	r3, [r7, #7]
 800fad6:	f003 030f 	and.w	r3, r3, #15
 800fada:	3b04      	subs	r3, #4
 800fadc:	0112      	lsls	r2, r2, #4
 800fade:	b2d2      	uxtb	r2, r2
 800fae0:	440b      	add	r3, r1
 800fae2:	761a      	strb	r2, [r3, #24]
}
 800fae4:	bf00      	nop
 800fae6:	370c      	adds	r7, #12
 800fae8:	46bd      	mov	sp, r7
 800faea:	bc80      	pop	{r7}
 800faec:	4770      	bx	lr
 800faee:	bf00      	nop
 800faf0:	e000e100 	.word	0xe000e100
 800faf4:	e000ed00 	.word	0xe000ed00

0800faf8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800faf8:	b580      	push	{r7, lr}
 800fafa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800fafc:	4b05      	ldr	r3, [pc, #20]	@ (800fb14 <SysTick_Handler+0x1c>)
 800fafe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800fb00:	f002 fe28 	bl	8012754 <xTaskGetSchedulerState>
 800fb04:	4603      	mov	r3, r0
 800fb06:	2b01      	cmp	r3, #1
 800fb08:	d001      	beq.n	800fb0e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800fb0a:	f003 ff95 	bl	8013a38 <xPortSysTickHandler>
  }
}
 800fb0e:	bf00      	nop
 800fb10:	bd80      	pop	{r7, pc}
 800fb12:	bf00      	nop
 800fb14:	e000e010 	.word	0xe000e010

0800fb18 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800fb1c:	2100      	movs	r1, #0
 800fb1e:	f06f 0004 	mvn.w	r0, #4
 800fb22:	f7ff ffbf 	bl	800faa4 <__NVIC_SetPriority>
#endif
}
 800fb26:	bf00      	nop
 800fb28:	bd80      	pop	{r7, pc}
	...

0800fb2c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800fb2c:	b480      	push	{r7}
 800fb2e:	b083      	sub	sp, #12
 800fb30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fb32:	f3ef 8305 	mrs	r3, IPSR
 800fb36:	603b      	str	r3, [r7, #0]
  return(result);
 800fb38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d003      	beq.n	800fb46 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800fb3e:	f06f 0305 	mvn.w	r3, #5
 800fb42:	607b      	str	r3, [r7, #4]
 800fb44:	e00c      	b.n	800fb60 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800fb46:	4b09      	ldr	r3, [pc, #36]	@ (800fb6c <osKernelInitialize+0x40>)
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d105      	bne.n	800fb5a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800fb4e:	4b07      	ldr	r3, [pc, #28]	@ (800fb6c <osKernelInitialize+0x40>)
 800fb50:	2201      	movs	r2, #1
 800fb52:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800fb54:	2300      	movs	r3, #0
 800fb56:	607b      	str	r3, [r7, #4]
 800fb58:	e002      	b.n	800fb60 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800fb5a:	f04f 33ff 	mov.w	r3, #4294967295
 800fb5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800fb60:	687b      	ldr	r3, [r7, #4]
}
 800fb62:	4618      	mov	r0, r3
 800fb64:	370c      	adds	r7, #12
 800fb66:	46bd      	mov	sp, r7
 800fb68:	bc80      	pop	{r7}
 800fb6a:	4770      	bx	lr
 800fb6c:	200015f0 	.word	0x200015f0

0800fb70 <osKernelGetInfo>:

osStatus_t osKernelGetInfo (osVersion_t *version, char *id_buf, uint32_t id_size) {
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b084      	sub	sp, #16
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	60f8      	str	r0, [r7, #12]
 800fb78:	60b9      	str	r1, [r7, #8]
 800fb7a:	607a      	str	r2, [r7, #4]

  if (version != NULL) {
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d005      	beq.n	800fb8e <osKernelGetInfo+0x1e>
    /* Version encoding is major.minor.rev: mmnnnrrrr dec */
    version->api    = KERNEL_VERSION;
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	4a0c      	ldr	r2, [pc, #48]	@ (800fbb8 <osKernelGetInfo+0x48>)
 800fb86:	601a      	str	r2, [r3, #0]
    version->kernel = KERNEL_VERSION;
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	4a0b      	ldr	r2, [pc, #44]	@ (800fbb8 <osKernelGetInfo+0x48>)
 800fb8c:	605a      	str	r2, [r3, #4]
  }

  if ((id_buf != NULL) && (id_size != 0U)) {
 800fb8e:	68bb      	ldr	r3, [r7, #8]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d00c      	beq.n	800fbae <osKernelGetInfo+0x3e>
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d009      	beq.n	800fbae <osKernelGetInfo+0x3e>
    if (id_size > sizeof(KERNEL_ID)) {
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	2b11      	cmp	r3, #17
 800fb9e:	d901      	bls.n	800fba4 <osKernelGetInfo+0x34>
      id_size = sizeof(KERNEL_ID);
 800fba0:	2311      	movs	r3, #17
 800fba2:	607b      	str	r3, [r7, #4]
    }
    memcpy(id_buf, KERNEL_ID, id_size);
 800fba4:	687a      	ldr	r2, [r7, #4]
 800fba6:	4905      	ldr	r1, [pc, #20]	@ (800fbbc <osKernelGetInfo+0x4c>)
 800fba8:	68b8      	ldr	r0, [r7, #8]
 800fbaa:	f004 fefa 	bl	80149a2 <memcpy>
  }

  return (osOK);
 800fbae:	2300      	movs	r3, #0
}
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	3710      	adds	r7, #16
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	bd80      	pop	{r7, pc}
 800fbb8:	05f5f531 	.word	0x05f5f531
 800fbbc:	08019984 	.word	0x08019984

0800fbc0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	b082      	sub	sp, #8
 800fbc4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fbc6:	f3ef 8305 	mrs	r3, IPSR
 800fbca:	603b      	str	r3, [r7, #0]
  return(result);
 800fbcc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d003      	beq.n	800fbda <osKernelStart+0x1a>
    stat = osErrorISR;
 800fbd2:	f06f 0305 	mvn.w	r3, #5
 800fbd6:	607b      	str	r3, [r7, #4]
 800fbd8:	e010      	b.n	800fbfc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800fbda:	4b0b      	ldr	r3, [pc, #44]	@ (800fc08 <osKernelStart+0x48>)
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	2b01      	cmp	r3, #1
 800fbe0:	d109      	bne.n	800fbf6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800fbe2:	f7ff ff99 	bl	800fb18 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800fbe6:	4b08      	ldr	r3, [pc, #32]	@ (800fc08 <osKernelStart+0x48>)
 800fbe8:	2202      	movs	r2, #2
 800fbea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800fbec:	f001 ffda 	bl	8011ba4 <vTaskStartScheduler>
      stat = osOK;
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	607b      	str	r3, [r7, #4]
 800fbf4:	e002      	b.n	800fbfc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800fbf6:	f04f 33ff 	mov.w	r3, #4294967295
 800fbfa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800fbfc:	687b      	ldr	r3, [r7, #4]
}
 800fbfe:	4618      	mov	r0, r3
 800fc00:	3708      	adds	r7, #8
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bd80      	pop	{r7, pc}
 800fc06:	bf00      	nop
 800fc08:	200015f0 	.word	0x200015f0

0800fc0c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b08e      	sub	sp, #56	@ 0x38
 800fc10:	af04      	add	r7, sp, #16
 800fc12:	60f8      	str	r0, [r7, #12]
 800fc14:	60b9      	str	r1, [r7, #8]
 800fc16:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800fc18:	2300      	movs	r3, #0
 800fc1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fc1c:	f3ef 8305 	mrs	r3, IPSR
 800fc20:	617b      	str	r3, [r7, #20]
  return(result);
 800fc22:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d17e      	bne.n	800fd26 <osThreadNew+0x11a>
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d07b      	beq.n	800fd26 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800fc2e:	2380      	movs	r3, #128	@ 0x80
 800fc30:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800fc32:	2318      	movs	r3, #24
 800fc34:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800fc36:	2300      	movs	r3, #0
 800fc38:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800fc3a:	f04f 33ff 	mov.w	r3, #4294967295
 800fc3e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d045      	beq.n	800fcd2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d002      	beq.n	800fc54 <osThreadNew+0x48>
        name = attr->name;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	699b      	ldr	r3, [r3, #24]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d002      	beq.n	800fc62 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	699b      	ldr	r3, [r3, #24]
 800fc60:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800fc62:	69fb      	ldr	r3, [r7, #28]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d008      	beq.n	800fc7a <osThreadNew+0x6e>
 800fc68:	69fb      	ldr	r3, [r7, #28]
 800fc6a:	2b38      	cmp	r3, #56	@ 0x38
 800fc6c:	d805      	bhi.n	800fc7a <osThreadNew+0x6e>
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	685b      	ldr	r3, [r3, #4]
 800fc72:	f003 0301 	and.w	r3, r3, #1
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d001      	beq.n	800fc7e <osThreadNew+0x72>
        return (NULL);
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	e054      	b.n	800fd28 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	695b      	ldr	r3, [r3, #20]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d003      	beq.n	800fc8e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	695b      	ldr	r3, [r3, #20]
 800fc8a:	089b      	lsrs	r3, r3, #2
 800fc8c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	689b      	ldr	r3, [r3, #8]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d00e      	beq.n	800fcb4 <osThreadNew+0xa8>
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	68db      	ldr	r3, [r3, #12]
 800fc9a:	2ba7      	cmp	r3, #167	@ 0xa7
 800fc9c:	d90a      	bls.n	800fcb4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d006      	beq.n	800fcb4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	695b      	ldr	r3, [r3, #20]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d002      	beq.n	800fcb4 <osThreadNew+0xa8>
        mem = 1;
 800fcae:	2301      	movs	r3, #1
 800fcb0:	61bb      	str	r3, [r7, #24]
 800fcb2:	e010      	b.n	800fcd6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	689b      	ldr	r3, [r3, #8]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d10c      	bne.n	800fcd6 <osThreadNew+0xca>
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	68db      	ldr	r3, [r3, #12]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d108      	bne.n	800fcd6 <osThreadNew+0xca>
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	691b      	ldr	r3, [r3, #16]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d104      	bne.n	800fcd6 <osThreadNew+0xca>
          mem = 0;
 800fccc:	2300      	movs	r3, #0
 800fcce:	61bb      	str	r3, [r7, #24]
 800fcd0:	e001      	b.n	800fcd6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800fcd6:	69bb      	ldr	r3, [r7, #24]
 800fcd8:	2b01      	cmp	r3, #1
 800fcda:	d110      	bne.n	800fcfe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800fce0:	687a      	ldr	r2, [r7, #4]
 800fce2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fce4:	9202      	str	r2, [sp, #8]
 800fce6:	9301      	str	r3, [sp, #4]
 800fce8:	69fb      	ldr	r3, [r7, #28]
 800fcea:	9300      	str	r3, [sp, #0]
 800fcec:	68bb      	ldr	r3, [r7, #8]
 800fcee:	6a3a      	ldr	r2, [r7, #32]
 800fcf0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fcf2:	68f8      	ldr	r0, [r7, #12]
 800fcf4:	f001 fc86 	bl	8011604 <xTaskCreateStatic>
 800fcf8:	4603      	mov	r3, r0
 800fcfa:	613b      	str	r3, [r7, #16]
 800fcfc:	e013      	b.n	800fd26 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800fcfe:	69bb      	ldr	r3, [r7, #24]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d110      	bne.n	800fd26 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800fd04:	6a3b      	ldr	r3, [r7, #32]
 800fd06:	b29a      	uxth	r2, r3
 800fd08:	f107 0310 	add.w	r3, r7, #16
 800fd0c:	9301      	str	r3, [sp, #4]
 800fd0e:	69fb      	ldr	r3, [r7, #28]
 800fd10:	9300      	str	r3, [sp, #0]
 800fd12:	68bb      	ldr	r3, [r7, #8]
 800fd14:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fd16:	68f8      	ldr	r0, [r7, #12]
 800fd18:	f001 fcd4 	bl	80116c4 <xTaskCreate>
 800fd1c:	4603      	mov	r3, r0
 800fd1e:	2b01      	cmp	r3, #1
 800fd20:	d001      	beq.n	800fd26 <osThreadNew+0x11a>
            hTask = NULL;
 800fd22:	2300      	movs	r3, #0
 800fd24:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800fd26:	693b      	ldr	r3, [r7, #16]
}
 800fd28:	4618      	mov	r0, r3
 800fd2a:	3728      	adds	r7, #40	@ 0x28
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	bd80      	pop	{r7, pc}

0800fd30 <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 800fd30:	b580      	push	{r7, lr}
 800fd32:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 800fd34:	2000      	movs	r0, #0
 800fd36:	f001 fe23 	bl	8011980 <vTaskDelete>
#endif
  for (;;);
 800fd3a:	bf00      	nop
 800fd3c:	e7fd      	b.n	800fd3a <osThreadExit+0xa>
	...

0800fd40 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b088      	sub	sp, #32
 800fd44:	af02      	add	r7, sp, #8
 800fd46:	6078      	str	r0, [r7, #4]
 800fd48:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800fd4e:	697b      	ldr	r3, [r7, #20]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d002      	beq.n	800fd5a <osThreadFlagsSet+0x1a>
 800fd54:	683b      	ldr	r3, [r7, #0]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	da03      	bge.n	800fd62 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800fd5a:	f06f 0303 	mvn.w	r3, #3
 800fd5e:	60fb      	str	r3, [r7, #12]
 800fd60:	e035      	b.n	800fdce <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800fd62:	f04f 33ff 	mov.w	r3, #4294967295
 800fd66:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fd68:	f3ef 8305 	mrs	r3, IPSR
 800fd6c:	613b      	str	r3, [r7, #16]
  return(result);
 800fd6e:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d01f      	beq.n	800fdb4 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800fd74:	2300      	movs	r3, #0
 800fd76:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800fd78:	f107 0308 	add.w	r3, r7, #8
 800fd7c:	9300      	str	r3, [sp, #0]
 800fd7e:	2300      	movs	r3, #0
 800fd80:	2201      	movs	r2, #1
 800fd82:	6839      	ldr	r1, [r7, #0]
 800fd84:	6978      	ldr	r0, [r7, #20]
 800fd86:	f002 ff95 	bl	8012cb4 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800fd8a:	f107 030c 	add.w	r3, r7, #12
 800fd8e:	2200      	movs	r2, #0
 800fd90:	9200      	str	r2, [sp, #0]
 800fd92:	2200      	movs	r2, #0
 800fd94:	2100      	movs	r1, #0
 800fd96:	6978      	ldr	r0, [r7, #20]
 800fd98:	f002 ff8c 	bl	8012cb4 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800fd9c:	68bb      	ldr	r3, [r7, #8]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d015      	beq.n	800fdce <osThreadFlagsSet+0x8e>
 800fda2:	4b0d      	ldr	r3, [pc, #52]	@ (800fdd8 <osThreadFlagsSet+0x98>)
 800fda4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fda8:	601a      	str	r2, [r3, #0]
 800fdaa:	f3bf 8f4f 	dsb	sy
 800fdae:	f3bf 8f6f 	isb	sy
 800fdb2:	e00c      	b.n	800fdce <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	2201      	movs	r2, #1
 800fdb8:	6839      	ldr	r1, [r7, #0]
 800fdba:	6978      	ldr	r0, [r7, #20]
 800fdbc:	f002 feb8 	bl	8012b30 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800fdc0:	f107 030c 	add.w	r3, r7, #12
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	2100      	movs	r1, #0
 800fdc8:	6978      	ldr	r0, [r7, #20]
 800fdca:	f002 feb1 	bl	8012b30 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800fdce:	68fb      	ldr	r3, [r7, #12]
}
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	3718      	adds	r7, #24
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	bd80      	pop	{r7, pc}
 800fdd8:	e000ed04 	.word	0xe000ed04

0800fddc <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800fddc:	b580      	push	{r7, lr}
 800fdde:	b08c      	sub	sp, #48	@ 0x30
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	60f8      	str	r0, [r7, #12]
 800fde4:	60b9      	str	r1, [r7, #8]
 800fde6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fde8:	f3ef 8305 	mrs	r3, IPSR
 800fdec:	617b      	str	r3, [r7, #20]
  return(result);
 800fdee:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d003      	beq.n	800fdfc <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800fdf4:	f06f 0305 	mvn.w	r3, #5
 800fdf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fdfa:	e06b      	b.n	800fed4 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	da03      	bge.n	800fe0a <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800fe02:	f06f 0303 	mvn.w	r3, #3
 800fe06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fe08:	e064      	b.n	800fed4 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800fe0a:	68bb      	ldr	r3, [r7, #8]
 800fe0c:	f003 0302 	and.w	r3, r3, #2
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d002      	beq.n	800fe1a <osThreadFlagsWait+0x3e>
      clear = 0U;
 800fe14:	2300      	movs	r3, #0
 800fe16:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fe18:	e001      	b.n	800fe1e <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 800fe1e:	2300      	movs	r3, #0
 800fe20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 800fe26:	f001 ffd9 	bl	8011ddc <xTaskGetTickCount>
 800fe2a:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800fe2c:	f107 0210 	add.w	r2, r7, #16
 800fe30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fe34:	2000      	movs	r0, #0
 800fe36:	f002 fe1b 	bl	8012a70 <xTaskNotifyWait>
 800fe3a:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800fe3c:	69fb      	ldr	r3, [r7, #28]
 800fe3e:	2b01      	cmp	r3, #1
 800fe40:	d137      	bne.n	800feb2 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800fe42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	4013      	ands	r3, r2
 800fe48:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 800fe4a:	693b      	ldr	r3, [r7, #16]
 800fe4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fe4e:	4313      	orrs	r3, r2
 800fe50:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800fe52:	68bb      	ldr	r3, [r7, #8]
 800fe54:	f003 0301 	and.w	r3, r3, #1
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d00c      	beq.n	800fe76 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800fe5c:	68fa      	ldr	r2, [r7, #12]
 800fe5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe60:	4013      	ands	r3, r2
 800fe62:	68fa      	ldr	r2, [r7, #12]
 800fe64:	429a      	cmp	r2, r3
 800fe66:	d032      	beq.n	800fece <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d10f      	bne.n	800fe8e <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800fe6e:	f06f 0302 	mvn.w	r3, #2
 800fe72:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800fe74:	e02e      	b.n	800fed4 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800fe76:	68fa      	ldr	r2, [r7, #12]
 800fe78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe7a:	4013      	ands	r3, r2
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d128      	bne.n	800fed2 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d103      	bne.n	800fe8e <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800fe86:	f06f 0302 	mvn.w	r3, #2
 800fe8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800fe8c:	e022      	b.n	800fed4 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800fe8e:	f001 ffa5 	bl	8011ddc <xTaskGetTickCount>
 800fe92:	4602      	mov	r2, r0
 800fe94:	6a3b      	ldr	r3, [r7, #32]
 800fe96:	1ad3      	subs	r3, r2, r3
 800fe98:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800fe9a:	69ba      	ldr	r2, [r7, #24]
 800fe9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe9e:	429a      	cmp	r2, r3
 800fea0:	d902      	bls.n	800fea8 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800fea2:	2300      	movs	r3, #0
 800fea4:	627b      	str	r3, [r7, #36]	@ 0x24
 800fea6:	e00e      	b.n	800fec6 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800fea8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800feaa:	69bb      	ldr	r3, [r7, #24]
 800feac:	1ad3      	subs	r3, r2, r3
 800feae:	627b      	str	r3, [r7, #36]	@ 0x24
 800feb0:	e009      	b.n	800fec6 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d103      	bne.n	800fec0 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800feb8:	f06f 0302 	mvn.w	r3, #2
 800febc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800febe:	e002      	b.n	800fec6 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800fec0:	f06f 0301 	mvn.w	r3, #1
 800fec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800fec6:	69fb      	ldr	r3, [r7, #28]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d1af      	bne.n	800fe2c <osThreadFlagsWait+0x50>
 800fecc:	e002      	b.n	800fed4 <osThreadFlagsWait+0xf8>
            break;
 800fece:	bf00      	nop
 800fed0:	e000      	b.n	800fed4 <osThreadFlagsWait+0xf8>
            break;
 800fed2:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800fed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800fed6:	4618      	mov	r0, r3
 800fed8:	3730      	adds	r7, #48	@ 0x30
 800feda:	46bd      	mov	sp, r7
 800fedc:	bd80      	pop	{r7, pc}

0800fede <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800fede:	b580      	push	{r7, lr}
 800fee0:	b084      	sub	sp, #16
 800fee2:	af00      	add	r7, sp, #0
 800fee4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fee6:	f3ef 8305 	mrs	r3, IPSR
 800feea:	60bb      	str	r3, [r7, #8]
  return(result);
 800feec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d003      	beq.n	800fefa <osDelay+0x1c>
    stat = osErrorISR;
 800fef2:	f06f 0305 	mvn.w	r3, #5
 800fef6:	60fb      	str	r3, [r7, #12]
 800fef8:	e007      	b.n	800ff0a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800fefa:	2300      	movs	r3, #0
 800fefc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d002      	beq.n	800ff0a <osDelay+0x2c>
      vTaskDelay(ticks);
 800ff04:	6878      	ldr	r0, [r7, #4]
 800ff06:	f001 fdaf 	bl	8011a68 <vTaskDelay>
    }
  }

  return (stat);
 800ff0a:	68fb      	ldr	r3, [r7, #12]
}
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	3710      	adds	r7, #16
 800ff10:	46bd      	mov	sp, r7
 800ff12:	bd80      	pop	{r7, pc}

0800ff14 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b084      	sub	sp, #16
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800ff1c:	6878      	ldr	r0, [r7, #4]
 800ff1e:	f003 fbf9 	bl	8013714 <pvTimerGetTimerID>
 800ff22:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d005      	beq.n	800ff36 <TimerCallback+0x22>
    callb->func (callb->arg);
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	68fa      	ldr	r2, [r7, #12]
 800ff30:	6852      	ldr	r2, [r2, #4]
 800ff32:	4610      	mov	r0, r2
 800ff34:	4798      	blx	r3
  }
}
 800ff36:	bf00      	nop
 800ff38:	3710      	adds	r7, #16
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	bd80      	pop	{r7, pc}
	...

0800ff40 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b08c      	sub	sp, #48	@ 0x30
 800ff44:	af02      	add	r7, sp, #8
 800ff46:	60f8      	str	r0, [r7, #12]
 800ff48:	607a      	str	r2, [r7, #4]
 800ff4a:	603b      	str	r3, [r7, #0]
 800ff4c:	460b      	mov	r3, r1
 800ff4e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800ff50:	2300      	movs	r3, #0
 800ff52:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ff54:	f3ef 8305 	mrs	r3, IPSR
 800ff58:	613b      	str	r3, [r7, #16]
  return(result);
 800ff5a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d163      	bne.n	8010028 <osTimerNew+0xe8>
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d060      	beq.n	8010028 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800ff66:	2008      	movs	r0, #8
 800ff68:	f003 fdea 	bl	8013b40 <pvPortMalloc>
 800ff6c:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800ff6e:	697b      	ldr	r3, [r7, #20]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d059      	beq.n	8010028 <osTimerNew+0xe8>
      callb->func = func;
 800ff74:	697b      	ldr	r3, [r7, #20]
 800ff76:	68fa      	ldr	r2, [r7, #12]
 800ff78:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800ff7a:	697b      	ldr	r3, [r7, #20]
 800ff7c:	687a      	ldr	r2, [r7, #4]
 800ff7e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800ff80:	7afb      	ldrb	r3, [r7, #11]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d102      	bne.n	800ff8c <osTimerNew+0x4c>
        reload = pdFALSE;
 800ff86:	2300      	movs	r3, #0
 800ff88:	61fb      	str	r3, [r7, #28]
 800ff8a:	e001      	b.n	800ff90 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800ff8c:	2301      	movs	r3, #1
 800ff8e:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800ff90:	f04f 33ff 	mov.w	r3, #4294967295
 800ff94:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800ff96:	2300      	movs	r3, #0
 800ff98:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 800ff9a:	683b      	ldr	r3, [r7, #0]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d01c      	beq.n	800ffda <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800ffa0:	683b      	ldr	r3, [r7, #0]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d002      	beq.n	800ffae <osTimerNew+0x6e>
          name = attr->name;
 800ffa8:	683b      	ldr	r3, [r7, #0]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800ffae:	683b      	ldr	r3, [r7, #0]
 800ffb0:	689b      	ldr	r3, [r3, #8]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d006      	beq.n	800ffc4 <osTimerNew+0x84>
 800ffb6:	683b      	ldr	r3, [r7, #0]
 800ffb8:	68db      	ldr	r3, [r3, #12]
 800ffba:	2b2b      	cmp	r3, #43	@ 0x2b
 800ffbc:	d902      	bls.n	800ffc4 <osTimerNew+0x84>
          mem = 1;
 800ffbe:	2301      	movs	r3, #1
 800ffc0:	61bb      	str	r3, [r7, #24]
 800ffc2:	e00c      	b.n	800ffde <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ffc4:	683b      	ldr	r3, [r7, #0]
 800ffc6:	689b      	ldr	r3, [r3, #8]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d108      	bne.n	800ffde <osTimerNew+0x9e>
 800ffcc:	683b      	ldr	r3, [r7, #0]
 800ffce:	68db      	ldr	r3, [r3, #12]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d104      	bne.n	800ffde <osTimerNew+0x9e>
            mem = 0;
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	61bb      	str	r3, [r7, #24]
 800ffd8:	e001      	b.n	800ffde <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800ffda:	2300      	movs	r3, #0
 800ffdc:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800ffde:	69bb      	ldr	r3, [r7, #24]
 800ffe0:	2b01      	cmp	r3, #1
 800ffe2:	d10c      	bne.n	800fffe <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800ffe4:	683b      	ldr	r3, [r7, #0]
 800ffe6:	689b      	ldr	r3, [r3, #8]
 800ffe8:	9301      	str	r3, [sp, #4]
 800ffea:	4b12      	ldr	r3, [pc, #72]	@ (8010034 <osTimerNew+0xf4>)
 800ffec:	9300      	str	r3, [sp, #0]
 800ffee:	697b      	ldr	r3, [r7, #20]
 800fff0:	69fa      	ldr	r2, [r7, #28]
 800fff2:	2101      	movs	r1, #1
 800fff4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fff6:	f003 f802 	bl	8012ffe <xTimerCreateStatic>
 800fffa:	6238      	str	r0, [r7, #32]
 800fffc:	e00b      	b.n	8010016 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800fffe:	69bb      	ldr	r3, [r7, #24]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d108      	bne.n	8010016 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8010004:	4b0b      	ldr	r3, [pc, #44]	@ (8010034 <osTimerNew+0xf4>)
 8010006:	9300      	str	r3, [sp, #0]
 8010008:	697b      	ldr	r3, [r7, #20]
 801000a:	69fa      	ldr	r2, [r7, #28]
 801000c:	2101      	movs	r1, #1
 801000e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010010:	f002 ffd4 	bl	8012fbc <xTimerCreate>
 8010014:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8010016:	6a3b      	ldr	r3, [r7, #32]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d105      	bne.n	8010028 <osTimerNew+0xe8>
 801001c:	697b      	ldr	r3, [r7, #20]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d002      	beq.n	8010028 <osTimerNew+0xe8>
        vPortFree (callb);
 8010022:	6978      	ldr	r0, [r7, #20]
 8010024:	f003 fe5a 	bl	8013cdc <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8010028:	6a3b      	ldr	r3, [r7, #32]
}
 801002a:	4618      	mov	r0, r3
 801002c:	3728      	adds	r7, #40	@ 0x28
 801002e:	46bd      	mov	sp, r7
 8010030:	bd80      	pop	{r7, pc}
 8010032:	bf00      	nop
 8010034:	0800ff15 	.word	0x0800ff15

08010038 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8010038:	b580      	push	{r7, lr}
 801003a:	b088      	sub	sp, #32
 801003c:	af02      	add	r7, sp, #8
 801003e:	6078      	str	r0, [r7, #4]
 8010040:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010046:	f3ef 8305 	mrs	r3, IPSR
 801004a:	60fb      	str	r3, [r7, #12]
  return(result);
 801004c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 801004e:	2b00      	cmp	r3, #0
 8010050:	d003      	beq.n	801005a <osTimerStart+0x22>
    stat = osErrorISR;
 8010052:	f06f 0305 	mvn.w	r3, #5
 8010056:	617b      	str	r3, [r7, #20]
 8010058:	e017      	b.n	801008a <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 801005a:	693b      	ldr	r3, [r7, #16]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d103      	bne.n	8010068 <osTimerStart+0x30>
    stat = osErrorParameter;
 8010060:	f06f 0303 	mvn.w	r3, #3
 8010064:	617b      	str	r3, [r7, #20]
 8010066:	e010      	b.n	801008a <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8010068:	2300      	movs	r3, #0
 801006a:	9300      	str	r3, [sp, #0]
 801006c:	2300      	movs	r3, #0
 801006e:	683a      	ldr	r2, [r7, #0]
 8010070:	2104      	movs	r1, #4
 8010072:	6938      	ldr	r0, [r7, #16]
 8010074:	f003 f840 	bl	80130f8 <xTimerGenericCommand>
 8010078:	4603      	mov	r3, r0
 801007a:	2b01      	cmp	r3, #1
 801007c:	d102      	bne.n	8010084 <osTimerStart+0x4c>
      stat = osOK;
 801007e:	2300      	movs	r3, #0
 8010080:	617b      	str	r3, [r7, #20]
 8010082:	e002      	b.n	801008a <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8010084:	f06f 0302 	mvn.w	r3, #2
 8010088:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 801008a:	697b      	ldr	r3, [r7, #20]
}
 801008c:	4618      	mov	r0, r3
 801008e:	3718      	adds	r7, #24
 8010090:	46bd      	mov	sp, r7
 8010092:	bd80      	pop	{r7, pc}

08010094 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8010094:	b580      	push	{r7, lr}
 8010096:	b088      	sub	sp, #32
 8010098:	af00      	add	r7, sp, #0
 801009a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 801009c:	2300      	movs	r3, #0
 801009e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80100a0:	f3ef 8305 	mrs	r3, IPSR
 80100a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80100a6:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d174      	bne.n	8010196 <osMutexNew+0x102>
    if (attr != NULL) {
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d003      	beq.n	80100ba <osMutexNew+0x26>
      type = attr->attr_bits;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	685b      	ldr	r3, [r3, #4]
 80100b6:	61bb      	str	r3, [r7, #24]
 80100b8:	e001      	b.n	80100be <osMutexNew+0x2a>
    } else {
      type = 0U;
 80100ba:	2300      	movs	r3, #0
 80100bc:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80100be:	69bb      	ldr	r3, [r7, #24]
 80100c0:	f003 0301 	and.w	r3, r3, #1
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d002      	beq.n	80100ce <osMutexNew+0x3a>
      rmtx = 1U;
 80100c8:	2301      	movs	r3, #1
 80100ca:	617b      	str	r3, [r7, #20]
 80100cc:	e001      	b.n	80100d2 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80100ce:	2300      	movs	r3, #0
 80100d0:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80100d2:	69bb      	ldr	r3, [r7, #24]
 80100d4:	f003 0308 	and.w	r3, r3, #8
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d15c      	bne.n	8010196 <osMutexNew+0x102>
      mem = -1;
 80100dc:	f04f 33ff 	mov.w	r3, #4294967295
 80100e0:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d015      	beq.n	8010114 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	689b      	ldr	r3, [r3, #8]
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d006      	beq.n	80100fe <osMutexNew+0x6a>
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	68db      	ldr	r3, [r3, #12]
 80100f4:	2b4f      	cmp	r3, #79	@ 0x4f
 80100f6:	d902      	bls.n	80100fe <osMutexNew+0x6a>
          mem = 1;
 80100f8:	2301      	movs	r3, #1
 80100fa:	613b      	str	r3, [r7, #16]
 80100fc:	e00c      	b.n	8010118 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	689b      	ldr	r3, [r3, #8]
 8010102:	2b00      	cmp	r3, #0
 8010104:	d108      	bne.n	8010118 <osMutexNew+0x84>
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	68db      	ldr	r3, [r3, #12]
 801010a:	2b00      	cmp	r3, #0
 801010c:	d104      	bne.n	8010118 <osMutexNew+0x84>
            mem = 0;
 801010e:	2300      	movs	r3, #0
 8010110:	613b      	str	r3, [r7, #16]
 8010112:	e001      	b.n	8010118 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8010114:	2300      	movs	r3, #0
 8010116:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8010118:	693b      	ldr	r3, [r7, #16]
 801011a:	2b01      	cmp	r3, #1
 801011c:	d112      	bne.n	8010144 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 801011e:	697b      	ldr	r3, [r7, #20]
 8010120:	2b00      	cmp	r3, #0
 8010122:	d007      	beq.n	8010134 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	689b      	ldr	r3, [r3, #8]
 8010128:	4619      	mov	r1, r3
 801012a:	2004      	movs	r0, #4
 801012c:	f000 fc4b 	bl	80109c6 <xQueueCreateMutexStatic>
 8010130:	61f8      	str	r0, [r7, #28]
 8010132:	e016      	b.n	8010162 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	689b      	ldr	r3, [r3, #8]
 8010138:	4619      	mov	r1, r3
 801013a:	2001      	movs	r0, #1
 801013c:	f000 fc43 	bl	80109c6 <xQueueCreateMutexStatic>
 8010140:	61f8      	str	r0, [r7, #28]
 8010142:	e00e      	b.n	8010162 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8010144:	693b      	ldr	r3, [r7, #16]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d10b      	bne.n	8010162 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 801014a:	697b      	ldr	r3, [r7, #20]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d004      	beq.n	801015a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8010150:	2004      	movs	r0, #4
 8010152:	f000 fc20 	bl	8010996 <xQueueCreateMutex>
 8010156:	61f8      	str	r0, [r7, #28]
 8010158:	e003      	b.n	8010162 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 801015a:	2001      	movs	r0, #1
 801015c:	f000 fc1b 	bl	8010996 <xQueueCreateMutex>
 8010160:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8010162:	69fb      	ldr	r3, [r7, #28]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d00c      	beq.n	8010182 <osMutexNew+0xee>
        if (attr != NULL) {
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	2b00      	cmp	r3, #0
 801016c:	d003      	beq.n	8010176 <osMutexNew+0xe2>
          name = attr->name;
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	60fb      	str	r3, [r7, #12]
 8010174:	e001      	b.n	801017a <osMutexNew+0xe6>
        } else {
          name = NULL;
 8010176:	2300      	movs	r3, #0
 8010178:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 801017a:	68f9      	ldr	r1, [r7, #12]
 801017c:	69f8      	ldr	r0, [r7, #28]
 801017e:	f001 f9e5 	bl	801154c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8010182:	69fb      	ldr	r3, [r7, #28]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d006      	beq.n	8010196 <osMutexNew+0x102>
 8010188:	697b      	ldr	r3, [r7, #20]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d003      	beq.n	8010196 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 801018e:	69fb      	ldr	r3, [r7, #28]
 8010190:	f043 0301 	orr.w	r3, r3, #1
 8010194:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8010196:	69fb      	ldr	r3, [r7, #28]
}
 8010198:	4618      	mov	r0, r3
 801019a:	3720      	adds	r7, #32
 801019c:	46bd      	mov	sp, r7
 801019e:	bd80      	pop	{r7, pc}

080101a0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80101a0:	b580      	push	{r7, lr}
 80101a2:	b086      	sub	sp, #24
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	6078      	str	r0, [r7, #4]
 80101a8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	f023 0301 	bic.w	r3, r3, #1
 80101b0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	f003 0301 	and.w	r3, r3, #1
 80101b8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80101ba:	2300      	movs	r3, #0
 80101bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80101be:	f3ef 8305 	mrs	r3, IPSR
 80101c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80101c4:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d003      	beq.n	80101d2 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80101ca:	f06f 0305 	mvn.w	r3, #5
 80101ce:	617b      	str	r3, [r7, #20]
 80101d0:	e02c      	b.n	801022c <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80101d2:	693b      	ldr	r3, [r7, #16]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d103      	bne.n	80101e0 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80101d8:	f06f 0303 	mvn.w	r3, #3
 80101dc:	617b      	str	r3, [r7, #20]
 80101de:	e025      	b.n	801022c <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d011      	beq.n	801020a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80101e6:	6839      	ldr	r1, [r7, #0]
 80101e8:	6938      	ldr	r0, [r7, #16]
 80101ea:	f000 fc3c 	bl	8010a66 <xQueueTakeMutexRecursive>
 80101ee:	4603      	mov	r3, r0
 80101f0:	2b01      	cmp	r3, #1
 80101f2:	d01b      	beq.n	801022c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80101f4:	683b      	ldr	r3, [r7, #0]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d003      	beq.n	8010202 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80101fa:	f06f 0301 	mvn.w	r3, #1
 80101fe:	617b      	str	r3, [r7, #20]
 8010200:	e014      	b.n	801022c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8010202:	f06f 0302 	mvn.w	r3, #2
 8010206:	617b      	str	r3, [r7, #20]
 8010208:	e010      	b.n	801022c <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 801020a:	6839      	ldr	r1, [r7, #0]
 801020c:	6938      	ldr	r0, [r7, #16]
 801020e:	f000 fee3 	bl	8010fd8 <xQueueSemaphoreTake>
 8010212:	4603      	mov	r3, r0
 8010214:	2b01      	cmp	r3, #1
 8010216:	d009      	beq.n	801022c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8010218:	683b      	ldr	r3, [r7, #0]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d003      	beq.n	8010226 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 801021e:	f06f 0301 	mvn.w	r3, #1
 8010222:	617b      	str	r3, [r7, #20]
 8010224:	e002      	b.n	801022c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8010226:	f06f 0302 	mvn.w	r3, #2
 801022a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 801022c:	697b      	ldr	r3, [r7, #20]
}
 801022e:	4618      	mov	r0, r3
 8010230:	3718      	adds	r7, #24
 8010232:	46bd      	mov	sp, r7
 8010234:	bd80      	pop	{r7, pc}

08010236 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8010236:	b580      	push	{r7, lr}
 8010238:	b086      	sub	sp, #24
 801023a:	af00      	add	r7, sp, #0
 801023c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	f023 0301 	bic.w	r3, r3, #1
 8010244:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	f003 0301 	and.w	r3, r3, #1
 801024c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 801024e:	2300      	movs	r3, #0
 8010250:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010252:	f3ef 8305 	mrs	r3, IPSR
 8010256:	60bb      	str	r3, [r7, #8]
  return(result);
 8010258:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 801025a:	2b00      	cmp	r3, #0
 801025c:	d003      	beq.n	8010266 <osMutexRelease+0x30>
    stat = osErrorISR;
 801025e:	f06f 0305 	mvn.w	r3, #5
 8010262:	617b      	str	r3, [r7, #20]
 8010264:	e01f      	b.n	80102a6 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8010266:	693b      	ldr	r3, [r7, #16]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d103      	bne.n	8010274 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 801026c:	f06f 0303 	mvn.w	r3, #3
 8010270:	617b      	str	r3, [r7, #20]
 8010272:	e018      	b.n	80102a6 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d009      	beq.n	801028e <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 801027a:	6938      	ldr	r0, [r7, #16]
 801027c:	f000 fbbe 	bl	80109fc <xQueueGiveMutexRecursive>
 8010280:	4603      	mov	r3, r0
 8010282:	2b01      	cmp	r3, #1
 8010284:	d00f      	beq.n	80102a6 <osMutexRelease+0x70>
        stat = osErrorResource;
 8010286:	f06f 0302 	mvn.w	r3, #2
 801028a:	617b      	str	r3, [r7, #20]
 801028c:	e00b      	b.n	80102a6 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 801028e:	2300      	movs	r3, #0
 8010290:	2200      	movs	r2, #0
 8010292:	2100      	movs	r1, #0
 8010294:	6938      	ldr	r0, [r7, #16]
 8010296:	f000 fc1d 	bl	8010ad4 <xQueueGenericSend>
 801029a:	4603      	mov	r3, r0
 801029c:	2b01      	cmp	r3, #1
 801029e:	d002      	beq.n	80102a6 <osMutexRelease+0x70>
        stat = osErrorResource;
 80102a0:	f06f 0302 	mvn.w	r3, #2
 80102a4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80102a6:	697b      	ldr	r3, [r7, #20]
}
 80102a8:	4618      	mov	r0, r3
 80102aa:	3718      	adds	r7, #24
 80102ac:	46bd      	mov	sp, r7
 80102ae:	bd80      	pop	{r7, pc}

080102b0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b08a      	sub	sp, #40	@ 0x28
 80102b4:	af02      	add	r7, sp, #8
 80102b6:	60f8      	str	r0, [r7, #12]
 80102b8:	60b9      	str	r1, [r7, #8]
 80102ba:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80102bc:	2300      	movs	r3, #0
 80102be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80102c0:	f3ef 8305 	mrs	r3, IPSR
 80102c4:	613b      	str	r3, [r7, #16]
  return(result);
 80102c6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d15f      	bne.n	801038c <osMessageQueueNew+0xdc>
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d05c      	beq.n	801038c <osMessageQueueNew+0xdc>
 80102d2:	68bb      	ldr	r3, [r7, #8]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d059      	beq.n	801038c <osMessageQueueNew+0xdc>
    mem = -1;
 80102d8:	f04f 33ff 	mov.w	r3, #4294967295
 80102dc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d029      	beq.n	8010338 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	689b      	ldr	r3, [r3, #8]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d012      	beq.n	8010312 <osMessageQueueNew+0x62>
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	68db      	ldr	r3, [r3, #12]
 80102f0:	2b4f      	cmp	r3, #79	@ 0x4f
 80102f2:	d90e      	bls.n	8010312 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d00a      	beq.n	8010312 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	695a      	ldr	r2, [r3, #20]
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	68b9      	ldr	r1, [r7, #8]
 8010304:	fb01 f303 	mul.w	r3, r1, r3
 8010308:	429a      	cmp	r2, r3
 801030a:	d302      	bcc.n	8010312 <osMessageQueueNew+0x62>
        mem = 1;
 801030c:	2301      	movs	r3, #1
 801030e:	61bb      	str	r3, [r7, #24]
 8010310:	e014      	b.n	801033c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	689b      	ldr	r3, [r3, #8]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d110      	bne.n	801033c <osMessageQueueNew+0x8c>
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	68db      	ldr	r3, [r3, #12]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d10c      	bne.n	801033c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010326:	2b00      	cmp	r3, #0
 8010328:	d108      	bne.n	801033c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	695b      	ldr	r3, [r3, #20]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d104      	bne.n	801033c <osMessageQueueNew+0x8c>
          mem = 0;
 8010332:	2300      	movs	r3, #0
 8010334:	61bb      	str	r3, [r7, #24]
 8010336:	e001      	b.n	801033c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8010338:	2300      	movs	r3, #0
 801033a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801033c:	69bb      	ldr	r3, [r7, #24]
 801033e:	2b01      	cmp	r3, #1
 8010340:	d10b      	bne.n	801035a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	691a      	ldr	r2, [r3, #16]
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	689b      	ldr	r3, [r3, #8]
 801034a:	2100      	movs	r1, #0
 801034c:	9100      	str	r1, [sp, #0]
 801034e:	68b9      	ldr	r1, [r7, #8]
 8010350:	68f8      	ldr	r0, [r7, #12]
 8010352:	f000 fa2b 	bl	80107ac <xQueueGenericCreateStatic>
 8010356:	61f8      	str	r0, [r7, #28]
 8010358:	e008      	b.n	801036c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 801035a:	69bb      	ldr	r3, [r7, #24]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d105      	bne.n	801036c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8010360:	2200      	movs	r2, #0
 8010362:	68b9      	ldr	r1, [r7, #8]
 8010364:	68f8      	ldr	r0, [r7, #12]
 8010366:	f000 fa9e 	bl	80108a6 <xQueueGenericCreate>
 801036a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 801036c:	69fb      	ldr	r3, [r7, #28]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d00c      	beq.n	801038c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d003      	beq.n	8010380 <osMessageQueueNew+0xd0>
        name = attr->name;
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	617b      	str	r3, [r7, #20]
 801037e:	e001      	b.n	8010384 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8010380:	2300      	movs	r3, #0
 8010382:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8010384:	6979      	ldr	r1, [r7, #20]
 8010386:	69f8      	ldr	r0, [r7, #28]
 8010388:	f001 f8e0 	bl	801154c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 801038c:	69fb      	ldr	r3, [r7, #28]
}
 801038e:	4618      	mov	r0, r3
 8010390:	3720      	adds	r7, #32
 8010392:	46bd      	mov	sp, r7
 8010394:	bd80      	pop	{r7, pc}
	...

08010398 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8010398:	b580      	push	{r7, lr}
 801039a:	b088      	sub	sp, #32
 801039c:	af00      	add	r7, sp, #0
 801039e:	60f8      	str	r0, [r7, #12]
 80103a0:	60b9      	str	r1, [r7, #8]
 80103a2:	603b      	str	r3, [r7, #0]
 80103a4:	4613      	mov	r3, r2
 80103a6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80103ac:	2300      	movs	r3, #0
 80103ae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80103b0:	f3ef 8305 	mrs	r3, IPSR
 80103b4:	617b      	str	r3, [r7, #20]
  return(result);
 80103b6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d028      	beq.n	801040e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80103bc:	69bb      	ldr	r3, [r7, #24]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d005      	beq.n	80103ce <osMessageQueuePut+0x36>
 80103c2:	68bb      	ldr	r3, [r7, #8]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d002      	beq.n	80103ce <osMessageQueuePut+0x36>
 80103c8:	683b      	ldr	r3, [r7, #0]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d003      	beq.n	80103d6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80103ce:	f06f 0303 	mvn.w	r3, #3
 80103d2:	61fb      	str	r3, [r7, #28]
 80103d4:	e038      	b.n	8010448 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80103d6:	2300      	movs	r3, #0
 80103d8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80103da:	f107 0210 	add.w	r2, r7, #16
 80103de:	2300      	movs	r3, #0
 80103e0:	68b9      	ldr	r1, [r7, #8]
 80103e2:	69b8      	ldr	r0, [r7, #24]
 80103e4:	f000 fc78 	bl	8010cd8 <xQueueGenericSendFromISR>
 80103e8:	4603      	mov	r3, r0
 80103ea:	2b01      	cmp	r3, #1
 80103ec:	d003      	beq.n	80103f6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80103ee:	f06f 0302 	mvn.w	r3, #2
 80103f2:	61fb      	str	r3, [r7, #28]
 80103f4:	e028      	b.n	8010448 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80103f6:	693b      	ldr	r3, [r7, #16]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d025      	beq.n	8010448 <osMessageQueuePut+0xb0>
 80103fc:	4b15      	ldr	r3, [pc, #84]	@ (8010454 <osMessageQueuePut+0xbc>)
 80103fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010402:	601a      	str	r2, [r3, #0]
 8010404:	f3bf 8f4f 	dsb	sy
 8010408:	f3bf 8f6f 	isb	sy
 801040c:	e01c      	b.n	8010448 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801040e:	69bb      	ldr	r3, [r7, #24]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d002      	beq.n	801041a <osMessageQueuePut+0x82>
 8010414:	68bb      	ldr	r3, [r7, #8]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d103      	bne.n	8010422 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 801041a:	f06f 0303 	mvn.w	r3, #3
 801041e:	61fb      	str	r3, [r7, #28]
 8010420:	e012      	b.n	8010448 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010422:	2300      	movs	r3, #0
 8010424:	683a      	ldr	r2, [r7, #0]
 8010426:	68b9      	ldr	r1, [r7, #8]
 8010428:	69b8      	ldr	r0, [r7, #24]
 801042a:	f000 fb53 	bl	8010ad4 <xQueueGenericSend>
 801042e:	4603      	mov	r3, r0
 8010430:	2b01      	cmp	r3, #1
 8010432:	d009      	beq.n	8010448 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8010434:	683b      	ldr	r3, [r7, #0]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d003      	beq.n	8010442 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 801043a:	f06f 0301 	mvn.w	r3, #1
 801043e:	61fb      	str	r3, [r7, #28]
 8010440:	e002      	b.n	8010448 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8010442:	f06f 0302 	mvn.w	r3, #2
 8010446:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8010448:	69fb      	ldr	r3, [r7, #28]
}
 801044a:	4618      	mov	r0, r3
 801044c:	3720      	adds	r7, #32
 801044e:	46bd      	mov	sp, r7
 8010450:	bd80      	pop	{r7, pc}
 8010452:	bf00      	nop
 8010454:	e000ed04 	.word	0xe000ed04

08010458 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8010458:	b580      	push	{r7, lr}
 801045a:	b088      	sub	sp, #32
 801045c:	af00      	add	r7, sp, #0
 801045e:	60f8      	str	r0, [r7, #12]
 8010460:	60b9      	str	r1, [r7, #8]
 8010462:	607a      	str	r2, [r7, #4]
 8010464:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801046a:	2300      	movs	r3, #0
 801046c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801046e:	f3ef 8305 	mrs	r3, IPSR
 8010472:	617b      	str	r3, [r7, #20]
  return(result);
 8010474:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8010476:	2b00      	cmp	r3, #0
 8010478:	d028      	beq.n	80104cc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801047a:	69bb      	ldr	r3, [r7, #24]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d005      	beq.n	801048c <osMessageQueueGet+0x34>
 8010480:	68bb      	ldr	r3, [r7, #8]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d002      	beq.n	801048c <osMessageQueueGet+0x34>
 8010486:	683b      	ldr	r3, [r7, #0]
 8010488:	2b00      	cmp	r3, #0
 801048a:	d003      	beq.n	8010494 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 801048c:	f06f 0303 	mvn.w	r3, #3
 8010490:	61fb      	str	r3, [r7, #28]
 8010492:	e037      	b.n	8010504 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8010494:	2300      	movs	r3, #0
 8010496:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8010498:	f107 0310 	add.w	r3, r7, #16
 801049c:	461a      	mov	r2, r3
 801049e:	68b9      	ldr	r1, [r7, #8]
 80104a0:	69b8      	ldr	r0, [r7, #24]
 80104a2:	f000 fea9 	bl	80111f8 <xQueueReceiveFromISR>
 80104a6:	4603      	mov	r3, r0
 80104a8:	2b01      	cmp	r3, #1
 80104aa:	d003      	beq.n	80104b4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80104ac:	f06f 0302 	mvn.w	r3, #2
 80104b0:	61fb      	str	r3, [r7, #28]
 80104b2:	e027      	b.n	8010504 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80104b4:	693b      	ldr	r3, [r7, #16]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d024      	beq.n	8010504 <osMessageQueueGet+0xac>
 80104ba:	4b15      	ldr	r3, [pc, #84]	@ (8010510 <osMessageQueueGet+0xb8>)
 80104bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80104c0:	601a      	str	r2, [r3, #0]
 80104c2:	f3bf 8f4f 	dsb	sy
 80104c6:	f3bf 8f6f 	isb	sy
 80104ca:	e01b      	b.n	8010504 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80104cc:	69bb      	ldr	r3, [r7, #24]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d002      	beq.n	80104d8 <osMessageQueueGet+0x80>
 80104d2:	68bb      	ldr	r3, [r7, #8]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d103      	bne.n	80104e0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80104d8:	f06f 0303 	mvn.w	r3, #3
 80104dc:	61fb      	str	r3, [r7, #28]
 80104de:	e011      	b.n	8010504 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80104e0:	683a      	ldr	r2, [r7, #0]
 80104e2:	68b9      	ldr	r1, [r7, #8]
 80104e4:	69b8      	ldr	r0, [r7, #24]
 80104e6:	f000 fc95 	bl	8010e14 <xQueueReceive>
 80104ea:	4603      	mov	r3, r0
 80104ec:	2b01      	cmp	r3, #1
 80104ee:	d009      	beq.n	8010504 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80104f0:	683b      	ldr	r3, [r7, #0]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d003      	beq.n	80104fe <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80104f6:	f06f 0301 	mvn.w	r3, #1
 80104fa:	61fb      	str	r3, [r7, #28]
 80104fc:	e002      	b.n	8010504 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80104fe:	f06f 0302 	mvn.w	r3, #2
 8010502:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8010504:	69fb      	ldr	r3, [r7, #28]
}
 8010506:	4618      	mov	r0, r3
 8010508:	3720      	adds	r7, #32
 801050a:	46bd      	mov	sp, r7
 801050c:	bd80      	pop	{r7, pc}
 801050e:	bf00      	nop
 8010510:	e000ed04 	.word	0xe000ed04

08010514 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010514:	b480      	push	{r7}
 8010516:	b085      	sub	sp, #20
 8010518:	af00      	add	r7, sp, #0
 801051a:	60f8      	str	r0, [r7, #12]
 801051c:	60b9      	str	r1, [r7, #8]
 801051e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	4a06      	ldr	r2, [pc, #24]	@ (801053c <vApplicationGetIdleTaskMemory+0x28>)
 8010524:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8010526:	68bb      	ldr	r3, [r7, #8]
 8010528:	4a05      	ldr	r2, [pc, #20]	@ (8010540 <vApplicationGetIdleTaskMemory+0x2c>)
 801052a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	2280      	movs	r2, #128	@ 0x80
 8010530:	601a      	str	r2, [r3, #0]
}
 8010532:	bf00      	nop
 8010534:	3714      	adds	r7, #20
 8010536:	46bd      	mov	sp, r7
 8010538:	bc80      	pop	{r7}
 801053a:	4770      	bx	lr
 801053c:	200015f4 	.word	0x200015f4
 8010540:	2000169c 	.word	0x2000169c

08010544 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8010544:	b480      	push	{r7}
 8010546:	b085      	sub	sp, #20
 8010548:	af00      	add	r7, sp, #0
 801054a:	60f8      	str	r0, [r7, #12]
 801054c:	60b9      	str	r1, [r7, #8]
 801054e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	4a07      	ldr	r2, [pc, #28]	@ (8010570 <vApplicationGetTimerTaskMemory+0x2c>)
 8010554:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8010556:	68bb      	ldr	r3, [r7, #8]
 8010558:	4a06      	ldr	r2, [pc, #24]	@ (8010574 <vApplicationGetTimerTaskMemory+0x30>)
 801055a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010562:	601a      	str	r2, [r3, #0]
}
 8010564:	bf00      	nop
 8010566:	3714      	adds	r7, #20
 8010568:	46bd      	mov	sp, r7
 801056a:	bc80      	pop	{r7}
 801056c:	4770      	bx	lr
 801056e:	bf00      	nop
 8010570:	2000189c 	.word	0x2000189c
 8010574:	20001944 	.word	0x20001944

08010578 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010578:	b480      	push	{r7}
 801057a:	b083      	sub	sp, #12
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	f103 0208 	add.w	r2, r3, #8
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	f04f 32ff 	mov.w	r2, #4294967295
 8010590:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	f103 0208 	add.w	r2, r3, #8
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	f103 0208 	add.w	r2, r3, #8
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	2200      	movs	r2, #0
 80105aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80105ac:	bf00      	nop
 80105ae:	370c      	adds	r7, #12
 80105b0:	46bd      	mov	sp, r7
 80105b2:	bc80      	pop	{r7}
 80105b4:	4770      	bx	lr

080105b6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80105b6:	b480      	push	{r7}
 80105b8:	b083      	sub	sp, #12
 80105ba:	af00      	add	r7, sp, #0
 80105bc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	2200      	movs	r2, #0
 80105c2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80105c4:	bf00      	nop
 80105c6:	370c      	adds	r7, #12
 80105c8:	46bd      	mov	sp, r7
 80105ca:	bc80      	pop	{r7}
 80105cc:	4770      	bx	lr

080105ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80105ce:	b480      	push	{r7}
 80105d0:	b085      	sub	sp, #20
 80105d2:	af00      	add	r7, sp, #0
 80105d4:	6078      	str	r0, [r7, #4]
 80105d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	685b      	ldr	r3, [r3, #4]
 80105dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80105de:	683b      	ldr	r3, [r7, #0]
 80105e0:	68fa      	ldr	r2, [r7, #12]
 80105e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	689a      	ldr	r2, [r3, #8]
 80105e8:	683b      	ldr	r3, [r7, #0]
 80105ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	689b      	ldr	r3, [r3, #8]
 80105f0:	683a      	ldr	r2, [r7, #0]
 80105f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	683a      	ldr	r2, [r7, #0]
 80105f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80105fa:	683b      	ldr	r3, [r7, #0]
 80105fc:	687a      	ldr	r2, [r7, #4]
 80105fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	1c5a      	adds	r2, r3, #1
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	601a      	str	r2, [r3, #0]
}
 801060a:	bf00      	nop
 801060c:	3714      	adds	r7, #20
 801060e:	46bd      	mov	sp, r7
 8010610:	bc80      	pop	{r7}
 8010612:	4770      	bx	lr

08010614 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010614:	b480      	push	{r7}
 8010616:	b085      	sub	sp, #20
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]
 801061c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801061e:	683b      	ldr	r3, [r7, #0]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010624:	68bb      	ldr	r3, [r7, #8]
 8010626:	f1b3 3fff 	cmp.w	r3, #4294967295
 801062a:	d103      	bne.n	8010634 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	691b      	ldr	r3, [r3, #16]
 8010630:	60fb      	str	r3, [r7, #12]
 8010632:	e00c      	b.n	801064e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	3308      	adds	r3, #8
 8010638:	60fb      	str	r3, [r7, #12]
 801063a:	e002      	b.n	8010642 <vListInsert+0x2e>
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	685b      	ldr	r3, [r3, #4]
 8010640:	60fb      	str	r3, [r7, #12]
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	685b      	ldr	r3, [r3, #4]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	68ba      	ldr	r2, [r7, #8]
 801064a:	429a      	cmp	r2, r3
 801064c:	d2f6      	bcs.n	801063c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	685a      	ldr	r2, [r3, #4]
 8010652:	683b      	ldr	r3, [r7, #0]
 8010654:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010656:	683b      	ldr	r3, [r7, #0]
 8010658:	685b      	ldr	r3, [r3, #4]
 801065a:	683a      	ldr	r2, [r7, #0]
 801065c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801065e:	683b      	ldr	r3, [r7, #0]
 8010660:	68fa      	ldr	r2, [r7, #12]
 8010662:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	683a      	ldr	r2, [r7, #0]
 8010668:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801066a:	683b      	ldr	r3, [r7, #0]
 801066c:	687a      	ldr	r2, [r7, #4]
 801066e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	1c5a      	adds	r2, r3, #1
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	601a      	str	r2, [r3, #0]
}
 801067a:	bf00      	nop
 801067c:	3714      	adds	r7, #20
 801067e:	46bd      	mov	sp, r7
 8010680:	bc80      	pop	{r7}
 8010682:	4770      	bx	lr

08010684 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010684:	b480      	push	{r7}
 8010686:	b085      	sub	sp, #20
 8010688:	af00      	add	r7, sp, #0
 801068a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	691b      	ldr	r3, [r3, #16]
 8010690:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	685b      	ldr	r3, [r3, #4]
 8010696:	687a      	ldr	r2, [r7, #4]
 8010698:	6892      	ldr	r2, [r2, #8]
 801069a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	689b      	ldr	r3, [r3, #8]
 80106a0:	687a      	ldr	r2, [r7, #4]
 80106a2:	6852      	ldr	r2, [r2, #4]
 80106a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	685b      	ldr	r3, [r3, #4]
 80106aa:	687a      	ldr	r2, [r7, #4]
 80106ac:	429a      	cmp	r2, r3
 80106ae:	d103      	bne.n	80106b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	689a      	ldr	r2, [r3, #8]
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	2200      	movs	r2, #0
 80106bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	1e5a      	subs	r2, r3, #1
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	681b      	ldr	r3, [r3, #0]
}
 80106cc:	4618      	mov	r0, r3
 80106ce:	3714      	adds	r7, #20
 80106d0:	46bd      	mov	sp, r7
 80106d2:	bc80      	pop	{r7}
 80106d4:	4770      	bx	lr
	...

080106d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80106d8:	b580      	push	{r7, lr}
 80106da:	b084      	sub	sp, #16
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
 80106e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d10b      	bne.n	8010704 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80106ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106f0:	f383 8811 	msr	BASEPRI, r3
 80106f4:	f3bf 8f6f 	isb	sy
 80106f8:	f3bf 8f4f 	dsb	sy
 80106fc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80106fe:	bf00      	nop
 8010700:	bf00      	nop
 8010702:	e7fd      	b.n	8010700 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8010704:	f003 f91a 	bl	801393c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	681a      	ldr	r2, [r3, #0]
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010710:	68f9      	ldr	r1, [r7, #12]
 8010712:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8010714:	fb01 f303 	mul.w	r3, r1, r3
 8010718:	441a      	add	r2, r3
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	2200      	movs	r2, #0
 8010722:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	681a      	ldr	r2, [r3, #0]
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	681a      	ldr	r2, [r3, #0]
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010734:	3b01      	subs	r3, #1
 8010736:	68f9      	ldr	r1, [r7, #12]
 8010738:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801073a:	fb01 f303 	mul.w	r3, r1, r3
 801073e:	441a      	add	r2, r3
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	22ff      	movs	r2, #255	@ 0xff
 8010748:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	22ff      	movs	r2, #255	@ 0xff
 8010750:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8010754:	683b      	ldr	r3, [r7, #0]
 8010756:	2b00      	cmp	r3, #0
 8010758:	d114      	bne.n	8010784 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	691b      	ldr	r3, [r3, #16]
 801075e:	2b00      	cmp	r3, #0
 8010760:	d01a      	beq.n	8010798 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	3310      	adds	r3, #16
 8010766:	4618      	mov	r0, r3
 8010768:	f001 fd4e 	bl	8012208 <xTaskRemoveFromEventList>
 801076c:	4603      	mov	r3, r0
 801076e:	2b00      	cmp	r3, #0
 8010770:	d012      	beq.n	8010798 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010772:	4b0d      	ldr	r3, [pc, #52]	@ (80107a8 <xQueueGenericReset+0xd0>)
 8010774:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010778:	601a      	str	r2, [r3, #0]
 801077a:	f3bf 8f4f 	dsb	sy
 801077e:	f3bf 8f6f 	isb	sy
 8010782:	e009      	b.n	8010798 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	3310      	adds	r3, #16
 8010788:	4618      	mov	r0, r3
 801078a:	f7ff fef5 	bl	8010578 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	3324      	adds	r3, #36	@ 0x24
 8010792:	4618      	mov	r0, r3
 8010794:	f7ff fef0 	bl	8010578 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010798:	f003 f900 	bl	801399c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801079c:	2301      	movs	r3, #1
}
 801079e:	4618      	mov	r0, r3
 80107a0:	3710      	adds	r7, #16
 80107a2:	46bd      	mov	sp, r7
 80107a4:	bd80      	pop	{r7, pc}
 80107a6:	bf00      	nop
 80107a8:	e000ed04 	.word	0xe000ed04

080107ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80107ac:	b580      	push	{r7, lr}
 80107ae:	b08e      	sub	sp, #56	@ 0x38
 80107b0:	af02      	add	r7, sp, #8
 80107b2:	60f8      	str	r0, [r7, #12]
 80107b4:	60b9      	str	r1, [r7, #8]
 80107b6:	607a      	str	r2, [r7, #4]
 80107b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d10b      	bne.n	80107d8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80107c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107c4:	f383 8811 	msr	BASEPRI, r3
 80107c8:	f3bf 8f6f 	isb	sy
 80107cc:	f3bf 8f4f 	dsb	sy
 80107d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80107d2:	bf00      	nop
 80107d4:	bf00      	nop
 80107d6:	e7fd      	b.n	80107d4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80107d8:	683b      	ldr	r3, [r7, #0]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d10b      	bne.n	80107f6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80107de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107e2:	f383 8811 	msr	BASEPRI, r3
 80107e6:	f3bf 8f6f 	isb	sy
 80107ea:	f3bf 8f4f 	dsb	sy
 80107ee:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80107f0:	bf00      	nop
 80107f2:	bf00      	nop
 80107f4:	e7fd      	b.n	80107f2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d002      	beq.n	8010802 <xQueueGenericCreateStatic+0x56>
 80107fc:	68bb      	ldr	r3, [r7, #8]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d001      	beq.n	8010806 <xQueueGenericCreateStatic+0x5a>
 8010802:	2301      	movs	r3, #1
 8010804:	e000      	b.n	8010808 <xQueueGenericCreateStatic+0x5c>
 8010806:	2300      	movs	r3, #0
 8010808:	2b00      	cmp	r3, #0
 801080a:	d10b      	bne.n	8010824 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 801080c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010810:	f383 8811 	msr	BASEPRI, r3
 8010814:	f3bf 8f6f 	isb	sy
 8010818:	f3bf 8f4f 	dsb	sy
 801081c:	623b      	str	r3, [r7, #32]
}
 801081e:	bf00      	nop
 8010820:	bf00      	nop
 8010822:	e7fd      	b.n	8010820 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	2b00      	cmp	r3, #0
 8010828:	d102      	bne.n	8010830 <xQueueGenericCreateStatic+0x84>
 801082a:	68bb      	ldr	r3, [r7, #8]
 801082c:	2b00      	cmp	r3, #0
 801082e:	d101      	bne.n	8010834 <xQueueGenericCreateStatic+0x88>
 8010830:	2301      	movs	r3, #1
 8010832:	e000      	b.n	8010836 <xQueueGenericCreateStatic+0x8a>
 8010834:	2300      	movs	r3, #0
 8010836:	2b00      	cmp	r3, #0
 8010838:	d10b      	bne.n	8010852 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 801083a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801083e:	f383 8811 	msr	BASEPRI, r3
 8010842:	f3bf 8f6f 	isb	sy
 8010846:	f3bf 8f4f 	dsb	sy
 801084a:	61fb      	str	r3, [r7, #28]
}
 801084c:	bf00      	nop
 801084e:	bf00      	nop
 8010850:	e7fd      	b.n	801084e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010852:	2350      	movs	r3, #80	@ 0x50
 8010854:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010856:	697b      	ldr	r3, [r7, #20]
 8010858:	2b50      	cmp	r3, #80	@ 0x50
 801085a:	d00b      	beq.n	8010874 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 801085c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010860:	f383 8811 	msr	BASEPRI, r3
 8010864:	f3bf 8f6f 	isb	sy
 8010868:	f3bf 8f4f 	dsb	sy
 801086c:	61bb      	str	r3, [r7, #24]
}
 801086e:	bf00      	nop
 8010870:	bf00      	nop
 8010872:	e7fd      	b.n	8010870 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010874:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010876:	683b      	ldr	r3, [r7, #0]
 8010878:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 801087a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801087c:	2b00      	cmp	r3, #0
 801087e:	d00d      	beq.n	801089c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010882:	2201      	movs	r2, #1
 8010884:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010888:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 801088c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801088e:	9300      	str	r3, [sp, #0]
 8010890:	4613      	mov	r3, r2
 8010892:	687a      	ldr	r2, [r7, #4]
 8010894:	68b9      	ldr	r1, [r7, #8]
 8010896:	68f8      	ldr	r0, [r7, #12]
 8010898:	f000 f840 	bl	801091c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801089c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 801089e:	4618      	mov	r0, r3
 80108a0:	3730      	adds	r7, #48	@ 0x30
 80108a2:	46bd      	mov	sp, r7
 80108a4:	bd80      	pop	{r7, pc}

080108a6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80108a6:	b580      	push	{r7, lr}
 80108a8:	b08a      	sub	sp, #40	@ 0x28
 80108aa:	af02      	add	r7, sp, #8
 80108ac:	60f8      	str	r0, [r7, #12]
 80108ae:	60b9      	str	r1, [r7, #8]
 80108b0:	4613      	mov	r3, r2
 80108b2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d10b      	bne.n	80108d2 <xQueueGenericCreate+0x2c>
	__asm volatile
 80108ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108be:	f383 8811 	msr	BASEPRI, r3
 80108c2:	f3bf 8f6f 	isb	sy
 80108c6:	f3bf 8f4f 	dsb	sy
 80108ca:	613b      	str	r3, [r7, #16]
}
 80108cc:	bf00      	nop
 80108ce:	bf00      	nop
 80108d0:	e7fd      	b.n	80108ce <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	68ba      	ldr	r2, [r7, #8]
 80108d6:	fb02 f303 	mul.w	r3, r2, r3
 80108da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80108dc:	69fb      	ldr	r3, [r7, #28]
 80108de:	3350      	adds	r3, #80	@ 0x50
 80108e0:	4618      	mov	r0, r3
 80108e2:	f003 f92d 	bl	8013b40 <pvPortMalloc>
 80108e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80108e8:	69bb      	ldr	r3, [r7, #24]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d011      	beq.n	8010912 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80108ee:	69bb      	ldr	r3, [r7, #24]
 80108f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80108f2:	697b      	ldr	r3, [r7, #20]
 80108f4:	3350      	adds	r3, #80	@ 0x50
 80108f6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80108f8:	69bb      	ldr	r3, [r7, #24]
 80108fa:	2200      	movs	r2, #0
 80108fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010900:	79fa      	ldrb	r2, [r7, #7]
 8010902:	69bb      	ldr	r3, [r7, #24]
 8010904:	9300      	str	r3, [sp, #0]
 8010906:	4613      	mov	r3, r2
 8010908:	697a      	ldr	r2, [r7, #20]
 801090a:	68b9      	ldr	r1, [r7, #8]
 801090c:	68f8      	ldr	r0, [r7, #12]
 801090e:	f000 f805 	bl	801091c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010912:	69bb      	ldr	r3, [r7, #24]
	}
 8010914:	4618      	mov	r0, r3
 8010916:	3720      	adds	r7, #32
 8010918:	46bd      	mov	sp, r7
 801091a:	bd80      	pop	{r7, pc}

0801091c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801091c:	b580      	push	{r7, lr}
 801091e:	b084      	sub	sp, #16
 8010920:	af00      	add	r7, sp, #0
 8010922:	60f8      	str	r0, [r7, #12]
 8010924:	60b9      	str	r1, [r7, #8]
 8010926:	607a      	str	r2, [r7, #4]
 8010928:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801092a:	68bb      	ldr	r3, [r7, #8]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d103      	bne.n	8010938 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010930:	69bb      	ldr	r3, [r7, #24]
 8010932:	69ba      	ldr	r2, [r7, #24]
 8010934:	601a      	str	r2, [r3, #0]
 8010936:	e002      	b.n	801093e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010938:	69bb      	ldr	r3, [r7, #24]
 801093a:	687a      	ldr	r2, [r7, #4]
 801093c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801093e:	69bb      	ldr	r3, [r7, #24]
 8010940:	68fa      	ldr	r2, [r7, #12]
 8010942:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010944:	69bb      	ldr	r3, [r7, #24]
 8010946:	68ba      	ldr	r2, [r7, #8]
 8010948:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801094a:	2101      	movs	r1, #1
 801094c:	69b8      	ldr	r0, [r7, #24]
 801094e:	f7ff fec3 	bl	80106d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8010952:	69bb      	ldr	r3, [r7, #24]
 8010954:	78fa      	ldrb	r2, [r7, #3]
 8010956:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801095a:	bf00      	nop
 801095c:	3710      	adds	r7, #16
 801095e:	46bd      	mov	sp, r7
 8010960:	bd80      	pop	{r7, pc}

08010962 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8010962:	b580      	push	{r7, lr}
 8010964:	b082      	sub	sp, #8
 8010966:	af00      	add	r7, sp, #0
 8010968:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d00e      	beq.n	801098e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	2200      	movs	r2, #0
 8010974:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	2200      	movs	r2, #0
 801097a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	2200      	movs	r2, #0
 8010980:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8010982:	2300      	movs	r3, #0
 8010984:	2200      	movs	r2, #0
 8010986:	2100      	movs	r1, #0
 8010988:	6878      	ldr	r0, [r7, #4]
 801098a:	f000 f8a3 	bl	8010ad4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801098e:	bf00      	nop
 8010990:	3708      	adds	r7, #8
 8010992:	46bd      	mov	sp, r7
 8010994:	bd80      	pop	{r7, pc}

08010996 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8010996:	b580      	push	{r7, lr}
 8010998:	b086      	sub	sp, #24
 801099a:	af00      	add	r7, sp, #0
 801099c:	4603      	mov	r3, r0
 801099e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80109a0:	2301      	movs	r3, #1
 80109a2:	617b      	str	r3, [r7, #20]
 80109a4:	2300      	movs	r3, #0
 80109a6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80109a8:	79fb      	ldrb	r3, [r7, #7]
 80109aa:	461a      	mov	r2, r3
 80109ac:	6939      	ldr	r1, [r7, #16]
 80109ae:	6978      	ldr	r0, [r7, #20]
 80109b0:	f7ff ff79 	bl	80108a6 <xQueueGenericCreate>
 80109b4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80109b6:	68f8      	ldr	r0, [r7, #12]
 80109b8:	f7ff ffd3 	bl	8010962 <prvInitialiseMutex>

		return xNewQueue;
 80109bc:	68fb      	ldr	r3, [r7, #12]
	}
 80109be:	4618      	mov	r0, r3
 80109c0:	3718      	adds	r7, #24
 80109c2:	46bd      	mov	sp, r7
 80109c4:	bd80      	pop	{r7, pc}

080109c6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80109c6:	b580      	push	{r7, lr}
 80109c8:	b088      	sub	sp, #32
 80109ca:	af02      	add	r7, sp, #8
 80109cc:	4603      	mov	r3, r0
 80109ce:	6039      	str	r1, [r7, #0]
 80109d0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80109d2:	2301      	movs	r3, #1
 80109d4:	617b      	str	r3, [r7, #20]
 80109d6:	2300      	movs	r3, #0
 80109d8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80109da:	79fb      	ldrb	r3, [r7, #7]
 80109dc:	9300      	str	r3, [sp, #0]
 80109de:	683b      	ldr	r3, [r7, #0]
 80109e0:	2200      	movs	r2, #0
 80109e2:	6939      	ldr	r1, [r7, #16]
 80109e4:	6978      	ldr	r0, [r7, #20]
 80109e6:	f7ff fee1 	bl	80107ac <xQueueGenericCreateStatic>
 80109ea:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80109ec:	68f8      	ldr	r0, [r7, #12]
 80109ee:	f7ff ffb8 	bl	8010962 <prvInitialiseMutex>

		return xNewQueue;
 80109f2:	68fb      	ldr	r3, [r7, #12]
	}
 80109f4:	4618      	mov	r0, r3
 80109f6:	3718      	adds	r7, #24
 80109f8:	46bd      	mov	sp, r7
 80109fa:	bd80      	pop	{r7, pc}

080109fc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80109fc:	b590      	push	{r4, r7, lr}
 80109fe:	b087      	sub	sp, #28
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8010a08:	693b      	ldr	r3, [r7, #16]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d10b      	bne.n	8010a26 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8010a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a12:	f383 8811 	msr	BASEPRI, r3
 8010a16:	f3bf 8f6f 	isb	sy
 8010a1a:	f3bf 8f4f 	dsb	sy
 8010a1e:	60fb      	str	r3, [r7, #12]
}
 8010a20:	bf00      	nop
 8010a22:	bf00      	nop
 8010a24:	e7fd      	b.n	8010a22 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8010a26:	693b      	ldr	r3, [r7, #16]
 8010a28:	689c      	ldr	r4, [r3, #8]
 8010a2a:	f001 fe85 	bl	8012738 <xTaskGetCurrentTaskHandle>
 8010a2e:	4603      	mov	r3, r0
 8010a30:	429c      	cmp	r4, r3
 8010a32:	d111      	bne.n	8010a58 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8010a34:	693b      	ldr	r3, [r7, #16]
 8010a36:	68db      	ldr	r3, [r3, #12]
 8010a38:	1e5a      	subs	r2, r3, #1
 8010a3a:	693b      	ldr	r3, [r7, #16]
 8010a3c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8010a3e:	693b      	ldr	r3, [r7, #16]
 8010a40:	68db      	ldr	r3, [r3, #12]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d105      	bne.n	8010a52 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8010a46:	2300      	movs	r3, #0
 8010a48:	2200      	movs	r2, #0
 8010a4a:	2100      	movs	r1, #0
 8010a4c:	6938      	ldr	r0, [r7, #16]
 8010a4e:	f000 f841 	bl	8010ad4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8010a52:	2301      	movs	r3, #1
 8010a54:	617b      	str	r3, [r7, #20]
 8010a56:	e001      	b.n	8010a5c <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8010a58:	2300      	movs	r3, #0
 8010a5a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8010a5c:	697b      	ldr	r3, [r7, #20]
	}
 8010a5e:	4618      	mov	r0, r3
 8010a60:	371c      	adds	r7, #28
 8010a62:	46bd      	mov	sp, r7
 8010a64:	bd90      	pop	{r4, r7, pc}

08010a66 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8010a66:	b590      	push	{r4, r7, lr}
 8010a68:	b087      	sub	sp, #28
 8010a6a:	af00      	add	r7, sp, #0
 8010a6c:	6078      	str	r0, [r7, #4]
 8010a6e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8010a74:	693b      	ldr	r3, [r7, #16]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d10b      	bne.n	8010a92 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8010a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a7e:	f383 8811 	msr	BASEPRI, r3
 8010a82:	f3bf 8f6f 	isb	sy
 8010a86:	f3bf 8f4f 	dsb	sy
 8010a8a:	60fb      	str	r3, [r7, #12]
}
 8010a8c:	bf00      	nop
 8010a8e:	bf00      	nop
 8010a90:	e7fd      	b.n	8010a8e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8010a92:	693b      	ldr	r3, [r7, #16]
 8010a94:	689c      	ldr	r4, [r3, #8]
 8010a96:	f001 fe4f 	bl	8012738 <xTaskGetCurrentTaskHandle>
 8010a9a:	4603      	mov	r3, r0
 8010a9c:	429c      	cmp	r4, r3
 8010a9e:	d107      	bne.n	8010ab0 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8010aa0:	693b      	ldr	r3, [r7, #16]
 8010aa2:	68db      	ldr	r3, [r3, #12]
 8010aa4:	1c5a      	adds	r2, r3, #1
 8010aa6:	693b      	ldr	r3, [r7, #16]
 8010aa8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8010aaa:	2301      	movs	r3, #1
 8010aac:	617b      	str	r3, [r7, #20]
 8010aae:	e00c      	b.n	8010aca <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8010ab0:	6839      	ldr	r1, [r7, #0]
 8010ab2:	6938      	ldr	r0, [r7, #16]
 8010ab4:	f000 fa90 	bl	8010fd8 <xQueueSemaphoreTake>
 8010ab8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8010aba:	697b      	ldr	r3, [r7, #20]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d004      	beq.n	8010aca <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8010ac0:	693b      	ldr	r3, [r7, #16]
 8010ac2:	68db      	ldr	r3, [r3, #12]
 8010ac4:	1c5a      	adds	r2, r3, #1
 8010ac6:	693b      	ldr	r3, [r7, #16]
 8010ac8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8010aca:	697b      	ldr	r3, [r7, #20]
	}
 8010acc:	4618      	mov	r0, r3
 8010ace:	371c      	adds	r7, #28
 8010ad0:	46bd      	mov	sp, r7
 8010ad2:	bd90      	pop	{r4, r7, pc}

08010ad4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b08e      	sub	sp, #56	@ 0x38
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	60f8      	str	r0, [r7, #12]
 8010adc:	60b9      	str	r1, [r7, #8]
 8010ade:	607a      	str	r2, [r7, #4]
 8010ae0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8010aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d10b      	bne.n	8010b08 <xQueueGenericSend+0x34>
	__asm volatile
 8010af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010af4:	f383 8811 	msr	BASEPRI, r3
 8010af8:	f3bf 8f6f 	isb	sy
 8010afc:	f3bf 8f4f 	dsb	sy
 8010b00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8010b02:	bf00      	nop
 8010b04:	bf00      	nop
 8010b06:	e7fd      	b.n	8010b04 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010b08:	68bb      	ldr	r3, [r7, #8]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d103      	bne.n	8010b16 <xQueueGenericSend+0x42>
 8010b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d101      	bne.n	8010b1a <xQueueGenericSend+0x46>
 8010b16:	2301      	movs	r3, #1
 8010b18:	e000      	b.n	8010b1c <xQueueGenericSend+0x48>
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d10b      	bne.n	8010b38 <xQueueGenericSend+0x64>
	__asm volatile
 8010b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b24:	f383 8811 	msr	BASEPRI, r3
 8010b28:	f3bf 8f6f 	isb	sy
 8010b2c:	f3bf 8f4f 	dsb	sy
 8010b30:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010b32:	bf00      	nop
 8010b34:	bf00      	nop
 8010b36:	e7fd      	b.n	8010b34 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010b38:	683b      	ldr	r3, [r7, #0]
 8010b3a:	2b02      	cmp	r3, #2
 8010b3c:	d103      	bne.n	8010b46 <xQueueGenericSend+0x72>
 8010b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010b42:	2b01      	cmp	r3, #1
 8010b44:	d101      	bne.n	8010b4a <xQueueGenericSend+0x76>
 8010b46:	2301      	movs	r3, #1
 8010b48:	e000      	b.n	8010b4c <xQueueGenericSend+0x78>
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d10b      	bne.n	8010b68 <xQueueGenericSend+0x94>
	__asm volatile
 8010b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b54:	f383 8811 	msr	BASEPRI, r3
 8010b58:	f3bf 8f6f 	isb	sy
 8010b5c:	f3bf 8f4f 	dsb	sy
 8010b60:	623b      	str	r3, [r7, #32]
}
 8010b62:	bf00      	nop
 8010b64:	bf00      	nop
 8010b66:	e7fd      	b.n	8010b64 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010b68:	f001 fdf4 	bl	8012754 <xTaskGetSchedulerState>
 8010b6c:	4603      	mov	r3, r0
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d102      	bne.n	8010b78 <xQueueGenericSend+0xa4>
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d101      	bne.n	8010b7c <xQueueGenericSend+0xa8>
 8010b78:	2301      	movs	r3, #1
 8010b7a:	e000      	b.n	8010b7e <xQueueGenericSend+0xaa>
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d10b      	bne.n	8010b9a <xQueueGenericSend+0xc6>
	__asm volatile
 8010b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b86:	f383 8811 	msr	BASEPRI, r3
 8010b8a:	f3bf 8f6f 	isb	sy
 8010b8e:	f3bf 8f4f 	dsb	sy
 8010b92:	61fb      	str	r3, [r7, #28]
}
 8010b94:	bf00      	nop
 8010b96:	bf00      	nop
 8010b98:	e7fd      	b.n	8010b96 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010b9a:	f002 fecf 	bl	801393c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ba0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010ba6:	429a      	cmp	r2, r3
 8010ba8:	d302      	bcc.n	8010bb0 <xQueueGenericSend+0xdc>
 8010baa:	683b      	ldr	r3, [r7, #0]
 8010bac:	2b02      	cmp	r3, #2
 8010bae:	d129      	bne.n	8010c04 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010bb0:	683a      	ldr	r2, [r7, #0]
 8010bb2:	68b9      	ldr	r1, [r7, #8]
 8010bb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010bb6:	f000 fbb8 	bl	801132a <prvCopyDataToQueue>
 8010bba:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d010      	beq.n	8010be6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bc6:	3324      	adds	r3, #36	@ 0x24
 8010bc8:	4618      	mov	r0, r3
 8010bca:	f001 fb1d 	bl	8012208 <xTaskRemoveFromEventList>
 8010bce:	4603      	mov	r3, r0
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d013      	beq.n	8010bfc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010bd4:	4b3f      	ldr	r3, [pc, #252]	@ (8010cd4 <xQueueGenericSend+0x200>)
 8010bd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010bda:	601a      	str	r2, [r3, #0]
 8010bdc:	f3bf 8f4f 	dsb	sy
 8010be0:	f3bf 8f6f 	isb	sy
 8010be4:	e00a      	b.n	8010bfc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d007      	beq.n	8010bfc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010bec:	4b39      	ldr	r3, [pc, #228]	@ (8010cd4 <xQueueGenericSend+0x200>)
 8010bee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010bf2:	601a      	str	r2, [r3, #0]
 8010bf4:	f3bf 8f4f 	dsb	sy
 8010bf8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010bfc:	f002 fece 	bl	801399c <vPortExitCritical>
				return pdPASS;
 8010c00:	2301      	movs	r3, #1
 8010c02:	e063      	b.n	8010ccc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d103      	bne.n	8010c12 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010c0a:	f002 fec7 	bl	801399c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010c0e:	2300      	movs	r3, #0
 8010c10:	e05c      	b.n	8010ccc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d106      	bne.n	8010c26 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010c18:	f107 0314 	add.w	r3, r7, #20
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	f001 fb57 	bl	80122d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010c22:	2301      	movs	r3, #1
 8010c24:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010c26:	f002 feb9 	bl	801399c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010c2a:	f001 f82b 	bl	8011c84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010c2e:	f002 fe85 	bl	801393c <vPortEnterCritical>
 8010c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010c38:	b25b      	sxtb	r3, r3
 8010c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c3e:	d103      	bne.n	8010c48 <xQueueGenericSend+0x174>
 8010c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c42:	2200      	movs	r2, #0
 8010c44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010c4e:	b25b      	sxtb	r3, r3
 8010c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c54:	d103      	bne.n	8010c5e <xQueueGenericSend+0x18a>
 8010c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c58:	2200      	movs	r2, #0
 8010c5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010c5e:	f002 fe9d 	bl	801399c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010c62:	1d3a      	adds	r2, r7, #4
 8010c64:	f107 0314 	add.w	r3, r7, #20
 8010c68:	4611      	mov	r1, r2
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	f001 fb46 	bl	80122fc <xTaskCheckForTimeOut>
 8010c70:	4603      	mov	r3, r0
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d124      	bne.n	8010cc0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010c76:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010c78:	f000 fc4f 	bl	801151a <prvIsQueueFull>
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d018      	beq.n	8010cb4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c84:	3310      	adds	r3, #16
 8010c86:	687a      	ldr	r2, [r7, #4]
 8010c88:	4611      	mov	r1, r2
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	f001 fa6a 	bl	8012164 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010c90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010c92:	f000 fbda 	bl	801144a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010c96:	f001 f803 	bl	8011ca0 <xTaskResumeAll>
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	f47f af7c 	bne.w	8010b9a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8010ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8010cd4 <xQueueGenericSend+0x200>)
 8010ca4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010ca8:	601a      	str	r2, [r3, #0]
 8010caa:	f3bf 8f4f 	dsb	sy
 8010cae:	f3bf 8f6f 	isb	sy
 8010cb2:	e772      	b.n	8010b9a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010cb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010cb6:	f000 fbc8 	bl	801144a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010cba:	f000 fff1 	bl	8011ca0 <xTaskResumeAll>
 8010cbe:	e76c      	b.n	8010b9a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010cc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010cc2:	f000 fbc2 	bl	801144a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010cc6:	f000 ffeb 	bl	8011ca0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010cca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010ccc:	4618      	mov	r0, r3
 8010cce:	3738      	adds	r7, #56	@ 0x38
 8010cd0:	46bd      	mov	sp, r7
 8010cd2:	bd80      	pop	{r7, pc}
 8010cd4:	e000ed04 	.word	0xe000ed04

08010cd8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010cd8:	b580      	push	{r7, lr}
 8010cda:	b090      	sub	sp, #64	@ 0x40
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	60f8      	str	r0, [r7, #12]
 8010ce0:	60b9      	str	r1, [r7, #8]
 8010ce2:	607a      	str	r2, [r7, #4]
 8010ce4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8010cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d10b      	bne.n	8010d08 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8010cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010cf4:	f383 8811 	msr	BASEPRI, r3
 8010cf8:	f3bf 8f6f 	isb	sy
 8010cfc:	f3bf 8f4f 	dsb	sy
 8010d00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8010d02:	bf00      	nop
 8010d04:	bf00      	nop
 8010d06:	e7fd      	b.n	8010d04 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010d08:	68bb      	ldr	r3, [r7, #8]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d103      	bne.n	8010d16 <xQueueGenericSendFromISR+0x3e>
 8010d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d101      	bne.n	8010d1a <xQueueGenericSendFromISR+0x42>
 8010d16:	2301      	movs	r3, #1
 8010d18:	e000      	b.n	8010d1c <xQueueGenericSendFromISR+0x44>
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d10b      	bne.n	8010d38 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8010d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d24:	f383 8811 	msr	BASEPRI, r3
 8010d28:	f3bf 8f6f 	isb	sy
 8010d2c:	f3bf 8f4f 	dsb	sy
 8010d30:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010d32:	bf00      	nop
 8010d34:	bf00      	nop
 8010d36:	e7fd      	b.n	8010d34 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010d38:	683b      	ldr	r3, [r7, #0]
 8010d3a:	2b02      	cmp	r3, #2
 8010d3c:	d103      	bne.n	8010d46 <xQueueGenericSendFromISR+0x6e>
 8010d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010d42:	2b01      	cmp	r3, #1
 8010d44:	d101      	bne.n	8010d4a <xQueueGenericSendFromISR+0x72>
 8010d46:	2301      	movs	r3, #1
 8010d48:	e000      	b.n	8010d4c <xQueueGenericSendFromISR+0x74>
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d10b      	bne.n	8010d68 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8010d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d54:	f383 8811 	msr	BASEPRI, r3
 8010d58:	f3bf 8f6f 	isb	sy
 8010d5c:	f3bf 8f4f 	dsb	sy
 8010d60:	623b      	str	r3, [r7, #32]
}
 8010d62:	bf00      	nop
 8010d64:	bf00      	nop
 8010d66:	e7fd      	b.n	8010d64 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010d68:	f002 feaa 	bl	8013ac0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010d6c:	f3ef 8211 	mrs	r2, BASEPRI
 8010d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d74:	f383 8811 	msr	BASEPRI, r3
 8010d78:	f3bf 8f6f 	isb	sy
 8010d7c:	f3bf 8f4f 	dsb	sy
 8010d80:	61fa      	str	r2, [r7, #28]
 8010d82:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010d84:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010d86:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010d90:	429a      	cmp	r2, r3
 8010d92:	d302      	bcc.n	8010d9a <xQueueGenericSendFromISR+0xc2>
 8010d94:	683b      	ldr	r3, [r7, #0]
 8010d96:	2b02      	cmp	r3, #2
 8010d98:	d12f      	bne.n	8010dfa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d9c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010da0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010daa:	683a      	ldr	r2, [r7, #0]
 8010dac:	68b9      	ldr	r1, [r7, #8]
 8010dae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010db0:	f000 fabb 	bl	801132a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010db4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8010db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dbc:	d112      	bne.n	8010de4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d016      	beq.n	8010df4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dc8:	3324      	adds	r3, #36	@ 0x24
 8010dca:	4618      	mov	r0, r3
 8010dcc:	f001 fa1c 	bl	8012208 <xTaskRemoveFromEventList>
 8010dd0:	4603      	mov	r3, r0
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d00e      	beq.n	8010df4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d00b      	beq.n	8010df4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	2201      	movs	r2, #1
 8010de0:	601a      	str	r2, [r3, #0]
 8010de2:	e007      	b.n	8010df4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010de4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8010de8:	3301      	adds	r3, #1
 8010dea:	b2db      	uxtb	r3, r3
 8010dec:	b25a      	sxtb	r2, r3
 8010dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010df0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8010df4:	2301      	movs	r3, #1
 8010df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8010df8:	e001      	b.n	8010dfe <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010dfa:	2300      	movs	r3, #0
 8010dfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e00:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010e02:	697b      	ldr	r3, [r7, #20]
 8010e04:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010e08:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010e0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	3740      	adds	r7, #64	@ 0x40
 8010e10:	46bd      	mov	sp, r7
 8010e12:	bd80      	pop	{r7, pc}

08010e14 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010e14:	b580      	push	{r7, lr}
 8010e16:	b08c      	sub	sp, #48	@ 0x30
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	60f8      	str	r0, [r7, #12]
 8010e1c:	60b9      	str	r1, [r7, #8]
 8010e1e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010e20:	2300      	movs	r3, #0
 8010e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d10b      	bne.n	8010e46 <xQueueReceive+0x32>
	__asm volatile
 8010e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e32:	f383 8811 	msr	BASEPRI, r3
 8010e36:	f3bf 8f6f 	isb	sy
 8010e3a:	f3bf 8f4f 	dsb	sy
 8010e3e:	623b      	str	r3, [r7, #32]
}
 8010e40:	bf00      	nop
 8010e42:	bf00      	nop
 8010e44:	e7fd      	b.n	8010e42 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010e46:	68bb      	ldr	r3, [r7, #8]
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d103      	bne.n	8010e54 <xQueueReceive+0x40>
 8010e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d101      	bne.n	8010e58 <xQueueReceive+0x44>
 8010e54:	2301      	movs	r3, #1
 8010e56:	e000      	b.n	8010e5a <xQueueReceive+0x46>
 8010e58:	2300      	movs	r3, #0
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d10b      	bne.n	8010e76 <xQueueReceive+0x62>
	__asm volatile
 8010e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e62:	f383 8811 	msr	BASEPRI, r3
 8010e66:	f3bf 8f6f 	isb	sy
 8010e6a:	f3bf 8f4f 	dsb	sy
 8010e6e:	61fb      	str	r3, [r7, #28]
}
 8010e70:	bf00      	nop
 8010e72:	bf00      	nop
 8010e74:	e7fd      	b.n	8010e72 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010e76:	f001 fc6d 	bl	8012754 <xTaskGetSchedulerState>
 8010e7a:	4603      	mov	r3, r0
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d102      	bne.n	8010e86 <xQueueReceive+0x72>
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d101      	bne.n	8010e8a <xQueueReceive+0x76>
 8010e86:	2301      	movs	r3, #1
 8010e88:	e000      	b.n	8010e8c <xQueueReceive+0x78>
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d10b      	bne.n	8010ea8 <xQueueReceive+0x94>
	__asm volatile
 8010e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e94:	f383 8811 	msr	BASEPRI, r3
 8010e98:	f3bf 8f6f 	isb	sy
 8010e9c:	f3bf 8f4f 	dsb	sy
 8010ea0:	61bb      	str	r3, [r7, #24]
}
 8010ea2:	bf00      	nop
 8010ea4:	bf00      	nop
 8010ea6:	e7fd      	b.n	8010ea4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010ea8:	f002 fd48 	bl	801393c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010eb0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d01f      	beq.n	8010ef8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010eb8:	68b9      	ldr	r1, [r7, #8]
 8010eba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010ebc:	f000 fa9f 	bl	80113fe <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ec2:	1e5a      	subs	r2, r3, #1
 8010ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ec6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010eca:	691b      	ldr	r3, [r3, #16]
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d00f      	beq.n	8010ef0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ed2:	3310      	adds	r3, #16
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	f001 f997 	bl	8012208 <xTaskRemoveFromEventList>
 8010eda:	4603      	mov	r3, r0
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d007      	beq.n	8010ef0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010ee0:	4b3c      	ldr	r3, [pc, #240]	@ (8010fd4 <xQueueReceive+0x1c0>)
 8010ee2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010ee6:	601a      	str	r2, [r3, #0]
 8010ee8:	f3bf 8f4f 	dsb	sy
 8010eec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010ef0:	f002 fd54 	bl	801399c <vPortExitCritical>
				return pdPASS;
 8010ef4:	2301      	movs	r3, #1
 8010ef6:	e069      	b.n	8010fcc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d103      	bne.n	8010f06 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010efe:	f002 fd4d 	bl	801399c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010f02:	2300      	movs	r3, #0
 8010f04:	e062      	b.n	8010fcc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d106      	bne.n	8010f1a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010f0c:	f107 0310 	add.w	r3, r7, #16
 8010f10:	4618      	mov	r0, r3
 8010f12:	f001 f9dd 	bl	80122d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010f16:	2301      	movs	r3, #1
 8010f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010f1a:	f002 fd3f 	bl	801399c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010f1e:	f000 feb1 	bl	8011c84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010f22:	f002 fd0b 	bl	801393c <vPortEnterCritical>
 8010f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010f2c:	b25b      	sxtb	r3, r3
 8010f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f32:	d103      	bne.n	8010f3c <xQueueReceive+0x128>
 8010f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f36:	2200      	movs	r2, #0
 8010f38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010f42:	b25b      	sxtb	r3, r3
 8010f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f48:	d103      	bne.n	8010f52 <xQueueReceive+0x13e>
 8010f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010f52:	f002 fd23 	bl	801399c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010f56:	1d3a      	adds	r2, r7, #4
 8010f58:	f107 0310 	add.w	r3, r7, #16
 8010f5c:	4611      	mov	r1, r2
 8010f5e:	4618      	mov	r0, r3
 8010f60:	f001 f9cc 	bl	80122fc <xTaskCheckForTimeOut>
 8010f64:	4603      	mov	r3, r0
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d123      	bne.n	8010fb2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010f6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010f6c:	f000 fabf 	bl	80114ee <prvIsQueueEmpty>
 8010f70:	4603      	mov	r3, r0
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d017      	beq.n	8010fa6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f78:	3324      	adds	r3, #36	@ 0x24
 8010f7a:	687a      	ldr	r2, [r7, #4]
 8010f7c:	4611      	mov	r1, r2
 8010f7e:	4618      	mov	r0, r3
 8010f80:	f001 f8f0 	bl	8012164 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010f84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010f86:	f000 fa60 	bl	801144a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010f8a:	f000 fe89 	bl	8011ca0 <xTaskResumeAll>
 8010f8e:	4603      	mov	r3, r0
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d189      	bne.n	8010ea8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8010f94:	4b0f      	ldr	r3, [pc, #60]	@ (8010fd4 <xQueueReceive+0x1c0>)
 8010f96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010f9a:	601a      	str	r2, [r3, #0]
 8010f9c:	f3bf 8f4f 	dsb	sy
 8010fa0:	f3bf 8f6f 	isb	sy
 8010fa4:	e780      	b.n	8010ea8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010fa6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010fa8:	f000 fa4f 	bl	801144a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010fac:	f000 fe78 	bl	8011ca0 <xTaskResumeAll>
 8010fb0:	e77a      	b.n	8010ea8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010fb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010fb4:	f000 fa49 	bl	801144a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010fb8:	f000 fe72 	bl	8011ca0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010fbc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010fbe:	f000 fa96 	bl	80114ee <prvIsQueueEmpty>
 8010fc2:	4603      	mov	r3, r0
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	f43f af6f 	beq.w	8010ea8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010fca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010fcc:	4618      	mov	r0, r3
 8010fce:	3730      	adds	r7, #48	@ 0x30
 8010fd0:	46bd      	mov	sp, r7
 8010fd2:	bd80      	pop	{r7, pc}
 8010fd4:	e000ed04 	.word	0xe000ed04

08010fd8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b08e      	sub	sp, #56	@ 0x38
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	6078      	str	r0, [r7, #4]
 8010fe0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010fea:	2300      	movs	r3, #0
 8010fec:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d10b      	bne.n	801100c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8010ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ff8:	f383 8811 	msr	BASEPRI, r3
 8010ffc:	f3bf 8f6f 	isb	sy
 8011000:	f3bf 8f4f 	dsb	sy
 8011004:	623b      	str	r3, [r7, #32]
}
 8011006:	bf00      	nop
 8011008:	bf00      	nop
 801100a:	e7fd      	b.n	8011008 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801100c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801100e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011010:	2b00      	cmp	r3, #0
 8011012:	d00b      	beq.n	801102c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8011014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011018:	f383 8811 	msr	BASEPRI, r3
 801101c:	f3bf 8f6f 	isb	sy
 8011020:	f3bf 8f4f 	dsb	sy
 8011024:	61fb      	str	r3, [r7, #28]
}
 8011026:	bf00      	nop
 8011028:	bf00      	nop
 801102a:	e7fd      	b.n	8011028 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801102c:	f001 fb92 	bl	8012754 <xTaskGetSchedulerState>
 8011030:	4603      	mov	r3, r0
 8011032:	2b00      	cmp	r3, #0
 8011034:	d102      	bne.n	801103c <xQueueSemaphoreTake+0x64>
 8011036:	683b      	ldr	r3, [r7, #0]
 8011038:	2b00      	cmp	r3, #0
 801103a:	d101      	bne.n	8011040 <xQueueSemaphoreTake+0x68>
 801103c:	2301      	movs	r3, #1
 801103e:	e000      	b.n	8011042 <xQueueSemaphoreTake+0x6a>
 8011040:	2300      	movs	r3, #0
 8011042:	2b00      	cmp	r3, #0
 8011044:	d10b      	bne.n	801105e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8011046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801104a:	f383 8811 	msr	BASEPRI, r3
 801104e:	f3bf 8f6f 	isb	sy
 8011052:	f3bf 8f4f 	dsb	sy
 8011056:	61bb      	str	r3, [r7, #24]
}
 8011058:	bf00      	nop
 801105a:	bf00      	nop
 801105c:	e7fd      	b.n	801105a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801105e:	f002 fc6d 	bl	801393c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8011062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011066:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801106a:	2b00      	cmp	r3, #0
 801106c:	d024      	beq.n	80110b8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801106e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011070:	1e5a      	subs	r2, r3, #1
 8011072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011074:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d104      	bne.n	8011088 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801107e:	f001 fce3 	bl	8012a48 <pvTaskIncrementMutexHeldCount>
 8011082:	4602      	mov	r2, r0
 8011084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011086:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801108a:	691b      	ldr	r3, [r3, #16]
 801108c:	2b00      	cmp	r3, #0
 801108e:	d00f      	beq.n	80110b0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011092:	3310      	adds	r3, #16
 8011094:	4618      	mov	r0, r3
 8011096:	f001 f8b7 	bl	8012208 <xTaskRemoveFromEventList>
 801109a:	4603      	mov	r3, r0
 801109c:	2b00      	cmp	r3, #0
 801109e:	d007      	beq.n	80110b0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80110a0:	4b54      	ldr	r3, [pc, #336]	@ (80111f4 <xQueueSemaphoreTake+0x21c>)
 80110a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80110a6:	601a      	str	r2, [r3, #0]
 80110a8:	f3bf 8f4f 	dsb	sy
 80110ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80110b0:	f002 fc74 	bl	801399c <vPortExitCritical>
				return pdPASS;
 80110b4:	2301      	movs	r3, #1
 80110b6:	e098      	b.n	80111ea <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80110b8:	683b      	ldr	r3, [r7, #0]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d112      	bne.n	80110e4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80110be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d00b      	beq.n	80110dc <xQueueSemaphoreTake+0x104>
	__asm volatile
 80110c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110c8:	f383 8811 	msr	BASEPRI, r3
 80110cc:	f3bf 8f6f 	isb	sy
 80110d0:	f3bf 8f4f 	dsb	sy
 80110d4:	617b      	str	r3, [r7, #20]
}
 80110d6:	bf00      	nop
 80110d8:	bf00      	nop
 80110da:	e7fd      	b.n	80110d8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80110dc:	f002 fc5e 	bl	801399c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80110e0:	2300      	movs	r3, #0
 80110e2:	e082      	b.n	80111ea <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80110e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d106      	bne.n	80110f8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80110ea:	f107 030c 	add.w	r3, r7, #12
 80110ee:	4618      	mov	r0, r3
 80110f0:	f001 f8ee 	bl	80122d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80110f4:	2301      	movs	r3, #1
 80110f6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80110f8:	f002 fc50 	bl	801399c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80110fc:	f000 fdc2 	bl	8011c84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011100:	f002 fc1c 	bl	801393c <vPortEnterCritical>
 8011104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011106:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801110a:	b25b      	sxtb	r3, r3
 801110c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011110:	d103      	bne.n	801111a <xQueueSemaphoreTake+0x142>
 8011112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011114:	2200      	movs	r2, #0
 8011116:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801111a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801111c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011120:	b25b      	sxtb	r3, r3
 8011122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011126:	d103      	bne.n	8011130 <xQueueSemaphoreTake+0x158>
 8011128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801112a:	2200      	movs	r2, #0
 801112c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011130:	f002 fc34 	bl	801399c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011134:	463a      	mov	r2, r7
 8011136:	f107 030c 	add.w	r3, r7, #12
 801113a:	4611      	mov	r1, r2
 801113c:	4618      	mov	r0, r3
 801113e:	f001 f8dd 	bl	80122fc <xTaskCheckForTimeOut>
 8011142:	4603      	mov	r3, r0
 8011144:	2b00      	cmp	r3, #0
 8011146:	d132      	bne.n	80111ae <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011148:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801114a:	f000 f9d0 	bl	80114ee <prvIsQueueEmpty>
 801114e:	4603      	mov	r3, r0
 8011150:	2b00      	cmp	r3, #0
 8011152:	d026      	beq.n	80111a2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	2b00      	cmp	r3, #0
 801115a:	d109      	bne.n	8011170 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 801115c:	f002 fbee 	bl	801393c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011162:	689b      	ldr	r3, [r3, #8]
 8011164:	4618      	mov	r0, r3
 8011166:	f001 fb13 	bl	8012790 <xTaskPriorityInherit>
 801116a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 801116c:	f002 fc16 	bl	801399c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011172:	3324      	adds	r3, #36	@ 0x24
 8011174:	683a      	ldr	r2, [r7, #0]
 8011176:	4611      	mov	r1, r2
 8011178:	4618      	mov	r0, r3
 801117a:	f000 fff3 	bl	8012164 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801117e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011180:	f000 f963 	bl	801144a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011184:	f000 fd8c 	bl	8011ca0 <xTaskResumeAll>
 8011188:	4603      	mov	r3, r0
 801118a:	2b00      	cmp	r3, #0
 801118c:	f47f af67 	bne.w	801105e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8011190:	4b18      	ldr	r3, [pc, #96]	@ (80111f4 <xQueueSemaphoreTake+0x21c>)
 8011192:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011196:	601a      	str	r2, [r3, #0]
 8011198:	f3bf 8f4f 	dsb	sy
 801119c:	f3bf 8f6f 	isb	sy
 80111a0:	e75d      	b.n	801105e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80111a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80111a4:	f000 f951 	bl	801144a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80111a8:	f000 fd7a 	bl	8011ca0 <xTaskResumeAll>
 80111ac:	e757      	b.n	801105e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80111ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80111b0:	f000 f94b 	bl	801144a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80111b4:	f000 fd74 	bl	8011ca0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80111b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80111ba:	f000 f998 	bl	80114ee <prvIsQueueEmpty>
 80111be:	4603      	mov	r3, r0
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	f43f af4c 	beq.w	801105e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80111c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d00d      	beq.n	80111e8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80111cc:	f002 fbb6 	bl	801393c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80111d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80111d2:	f000 f893 	bl	80112fc <prvGetDisinheritPriorityAfterTimeout>
 80111d6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80111d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111da:	689b      	ldr	r3, [r3, #8]
 80111dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80111de:	4618      	mov	r0, r3
 80111e0:	f001 fbae 	bl	8012940 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80111e4:	f002 fbda 	bl	801399c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80111e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80111ea:	4618      	mov	r0, r3
 80111ec:	3738      	adds	r7, #56	@ 0x38
 80111ee:	46bd      	mov	sp, r7
 80111f0:	bd80      	pop	{r7, pc}
 80111f2:	bf00      	nop
 80111f4:	e000ed04 	.word	0xe000ed04

080111f8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b08e      	sub	sp, #56	@ 0x38
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	60f8      	str	r0, [r7, #12]
 8011200:	60b9      	str	r1, [r7, #8]
 8011202:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8011208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801120a:	2b00      	cmp	r3, #0
 801120c:	d10b      	bne.n	8011226 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 801120e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011212:	f383 8811 	msr	BASEPRI, r3
 8011216:	f3bf 8f6f 	isb	sy
 801121a:	f3bf 8f4f 	dsb	sy
 801121e:	623b      	str	r3, [r7, #32]
}
 8011220:	bf00      	nop
 8011222:	bf00      	nop
 8011224:	e7fd      	b.n	8011222 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011226:	68bb      	ldr	r3, [r7, #8]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d103      	bne.n	8011234 <xQueueReceiveFromISR+0x3c>
 801122c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801122e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011230:	2b00      	cmp	r3, #0
 8011232:	d101      	bne.n	8011238 <xQueueReceiveFromISR+0x40>
 8011234:	2301      	movs	r3, #1
 8011236:	e000      	b.n	801123a <xQueueReceiveFromISR+0x42>
 8011238:	2300      	movs	r3, #0
 801123a:	2b00      	cmp	r3, #0
 801123c:	d10b      	bne.n	8011256 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 801123e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011242:	f383 8811 	msr	BASEPRI, r3
 8011246:	f3bf 8f6f 	isb	sy
 801124a:	f3bf 8f4f 	dsb	sy
 801124e:	61fb      	str	r3, [r7, #28]
}
 8011250:	bf00      	nop
 8011252:	bf00      	nop
 8011254:	e7fd      	b.n	8011252 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011256:	f002 fc33 	bl	8013ac0 <vPortValidateInterruptPriority>
	__asm volatile
 801125a:	f3ef 8211 	mrs	r2, BASEPRI
 801125e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011262:	f383 8811 	msr	BASEPRI, r3
 8011266:	f3bf 8f6f 	isb	sy
 801126a:	f3bf 8f4f 	dsb	sy
 801126e:	61ba      	str	r2, [r7, #24]
 8011270:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011272:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011274:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801127a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801127c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801127e:	2b00      	cmp	r3, #0
 8011280:	d02f      	beq.n	80112e2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8011282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011284:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011288:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801128c:	68b9      	ldr	r1, [r7, #8]
 801128e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011290:	f000 f8b5 	bl	80113fe <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011296:	1e5a      	subs	r2, r3, #1
 8011298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801129a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801129c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80112a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112a4:	d112      	bne.n	80112cc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80112a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112a8:	691b      	ldr	r3, [r3, #16]
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d016      	beq.n	80112dc <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80112ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112b0:	3310      	adds	r3, #16
 80112b2:	4618      	mov	r0, r3
 80112b4:	f000 ffa8 	bl	8012208 <xTaskRemoveFromEventList>
 80112b8:	4603      	mov	r3, r0
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d00e      	beq.n	80112dc <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d00b      	beq.n	80112dc <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	2201      	movs	r2, #1
 80112c8:	601a      	str	r2, [r3, #0]
 80112ca:	e007      	b.n	80112dc <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80112cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80112d0:	3301      	adds	r3, #1
 80112d2:	b2db      	uxtb	r3, r3
 80112d4:	b25a      	sxtb	r2, r3
 80112d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80112dc:	2301      	movs	r3, #1
 80112de:	637b      	str	r3, [r7, #52]	@ 0x34
 80112e0:	e001      	b.n	80112e6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80112e2:	2300      	movs	r3, #0
 80112e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80112e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112e8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80112ea:	693b      	ldr	r3, [r7, #16]
 80112ec:	f383 8811 	msr	BASEPRI, r3
}
 80112f0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80112f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80112f4:	4618      	mov	r0, r3
 80112f6:	3738      	adds	r7, #56	@ 0x38
 80112f8:	46bd      	mov	sp, r7
 80112fa:	bd80      	pop	{r7, pc}

080112fc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80112fc:	b480      	push	{r7}
 80112fe:	b085      	sub	sp, #20
 8011300:	af00      	add	r7, sp, #0
 8011302:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011308:	2b00      	cmp	r3, #0
 801130a:	d006      	beq.n	801131a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8011316:	60fb      	str	r3, [r7, #12]
 8011318:	e001      	b.n	801131e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801131a:	2300      	movs	r3, #0
 801131c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801131e:	68fb      	ldr	r3, [r7, #12]
	}
 8011320:	4618      	mov	r0, r3
 8011322:	3714      	adds	r7, #20
 8011324:	46bd      	mov	sp, r7
 8011326:	bc80      	pop	{r7}
 8011328:	4770      	bx	lr

0801132a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801132a:	b580      	push	{r7, lr}
 801132c:	b086      	sub	sp, #24
 801132e:	af00      	add	r7, sp, #0
 8011330:	60f8      	str	r0, [r7, #12]
 8011332:	60b9      	str	r1, [r7, #8]
 8011334:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011336:	2300      	movs	r3, #0
 8011338:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801133e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011344:	2b00      	cmp	r3, #0
 8011346:	d10d      	bne.n	8011364 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d14d      	bne.n	80113ec <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	689b      	ldr	r3, [r3, #8]
 8011354:	4618      	mov	r0, r3
 8011356:	f001 fa83 	bl	8012860 <xTaskPriorityDisinherit>
 801135a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	2200      	movs	r2, #0
 8011360:	609a      	str	r2, [r3, #8]
 8011362:	e043      	b.n	80113ec <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	2b00      	cmp	r3, #0
 8011368:	d119      	bne.n	801139e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	6858      	ldr	r0, [r3, #4]
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011372:	461a      	mov	r2, r3
 8011374:	68b9      	ldr	r1, [r7, #8]
 8011376:	f003 fb14 	bl	80149a2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	685a      	ldr	r2, [r3, #4]
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011382:	441a      	add	r2, r3
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	685a      	ldr	r2, [r3, #4]
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	689b      	ldr	r3, [r3, #8]
 8011390:	429a      	cmp	r2, r3
 8011392:	d32b      	bcc.n	80113ec <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	681a      	ldr	r2, [r3, #0]
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	605a      	str	r2, [r3, #4]
 801139c:	e026      	b.n	80113ec <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	68d8      	ldr	r0, [r3, #12]
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80113a6:	461a      	mov	r2, r3
 80113a8:	68b9      	ldr	r1, [r7, #8]
 80113aa:	f003 fafa 	bl	80149a2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	68da      	ldr	r2, [r3, #12]
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80113b6:	425b      	negs	r3, r3
 80113b8:	441a      	add	r2, r3
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	68da      	ldr	r2, [r3, #12]
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	429a      	cmp	r2, r3
 80113c8:	d207      	bcs.n	80113da <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	689a      	ldr	r2, [r3, #8]
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80113d2:	425b      	negs	r3, r3
 80113d4:	441a      	add	r2, r3
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	2b02      	cmp	r3, #2
 80113de:	d105      	bne.n	80113ec <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80113e0:	693b      	ldr	r3, [r7, #16]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d002      	beq.n	80113ec <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80113e6:	693b      	ldr	r3, [r7, #16]
 80113e8:	3b01      	subs	r3, #1
 80113ea:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80113ec:	693b      	ldr	r3, [r7, #16]
 80113ee:	1c5a      	adds	r2, r3, #1
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80113f4:	697b      	ldr	r3, [r7, #20]
}
 80113f6:	4618      	mov	r0, r3
 80113f8:	3718      	adds	r7, #24
 80113fa:	46bd      	mov	sp, r7
 80113fc:	bd80      	pop	{r7, pc}

080113fe <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80113fe:	b580      	push	{r7, lr}
 8011400:	b082      	sub	sp, #8
 8011402:	af00      	add	r7, sp, #0
 8011404:	6078      	str	r0, [r7, #4]
 8011406:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801140c:	2b00      	cmp	r3, #0
 801140e:	d018      	beq.n	8011442 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	68da      	ldr	r2, [r3, #12]
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011418:	441a      	add	r2, r3
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	68da      	ldr	r2, [r3, #12]
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	689b      	ldr	r3, [r3, #8]
 8011426:	429a      	cmp	r2, r3
 8011428:	d303      	bcc.n	8011432 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	681a      	ldr	r2, [r3, #0]
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	68d9      	ldr	r1, [r3, #12]
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801143a:	461a      	mov	r2, r3
 801143c:	6838      	ldr	r0, [r7, #0]
 801143e:	f003 fab0 	bl	80149a2 <memcpy>
	}
}
 8011442:	bf00      	nop
 8011444:	3708      	adds	r7, #8
 8011446:	46bd      	mov	sp, r7
 8011448:	bd80      	pop	{r7, pc}

0801144a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801144a:	b580      	push	{r7, lr}
 801144c:	b084      	sub	sp, #16
 801144e:	af00      	add	r7, sp, #0
 8011450:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011452:	f002 fa73 	bl	801393c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801145c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801145e:	e011      	b.n	8011484 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011464:	2b00      	cmp	r3, #0
 8011466:	d012      	beq.n	801148e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	3324      	adds	r3, #36	@ 0x24
 801146c:	4618      	mov	r0, r3
 801146e:	f000 fecb 	bl	8012208 <xTaskRemoveFromEventList>
 8011472:	4603      	mov	r3, r0
 8011474:	2b00      	cmp	r3, #0
 8011476:	d001      	beq.n	801147c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011478:	f000 ffa4 	bl	80123c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801147c:	7bfb      	ldrb	r3, [r7, #15]
 801147e:	3b01      	subs	r3, #1
 8011480:	b2db      	uxtb	r3, r3
 8011482:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011484:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011488:	2b00      	cmp	r3, #0
 801148a:	dce9      	bgt.n	8011460 <prvUnlockQueue+0x16>
 801148c:	e000      	b.n	8011490 <prvUnlockQueue+0x46>
					break;
 801148e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	22ff      	movs	r2, #255	@ 0xff
 8011494:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8011498:	f002 fa80 	bl	801399c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801149c:	f002 fa4e 	bl	801393c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80114a6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80114a8:	e011      	b.n	80114ce <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	691b      	ldr	r3, [r3, #16]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d012      	beq.n	80114d8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	3310      	adds	r3, #16
 80114b6:	4618      	mov	r0, r3
 80114b8:	f000 fea6 	bl	8012208 <xTaskRemoveFromEventList>
 80114bc:	4603      	mov	r3, r0
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d001      	beq.n	80114c6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80114c2:	f000 ff7f 	bl	80123c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80114c6:	7bbb      	ldrb	r3, [r7, #14]
 80114c8:	3b01      	subs	r3, #1
 80114ca:	b2db      	uxtb	r3, r3
 80114cc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80114ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	dce9      	bgt.n	80114aa <prvUnlockQueue+0x60>
 80114d6:	e000      	b.n	80114da <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80114d8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	22ff      	movs	r2, #255	@ 0xff
 80114de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80114e2:	f002 fa5b 	bl	801399c <vPortExitCritical>
}
 80114e6:	bf00      	nop
 80114e8:	3710      	adds	r7, #16
 80114ea:	46bd      	mov	sp, r7
 80114ec:	bd80      	pop	{r7, pc}

080114ee <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80114ee:	b580      	push	{r7, lr}
 80114f0:	b084      	sub	sp, #16
 80114f2:	af00      	add	r7, sp, #0
 80114f4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80114f6:	f002 fa21 	bl	801393c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d102      	bne.n	8011508 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011502:	2301      	movs	r3, #1
 8011504:	60fb      	str	r3, [r7, #12]
 8011506:	e001      	b.n	801150c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011508:	2300      	movs	r3, #0
 801150a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801150c:	f002 fa46 	bl	801399c <vPortExitCritical>

	return xReturn;
 8011510:	68fb      	ldr	r3, [r7, #12]
}
 8011512:	4618      	mov	r0, r3
 8011514:	3710      	adds	r7, #16
 8011516:	46bd      	mov	sp, r7
 8011518:	bd80      	pop	{r7, pc}

0801151a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801151a:	b580      	push	{r7, lr}
 801151c:	b084      	sub	sp, #16
 801151e:	af00      	add	r7, sp, #0
 8011520:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011522:	f002 fa0b 	bl	801393c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801152e:	429a      	cmp	r2, r3
 8011530:	d102      	bne.n	8011538 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011532:	2301      	movs	r3, #1
 8011534:	60fb      	str	r3, [r7, #12]
 8011536:	e001      	b.n	801153c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011538:	2300      	movs	r3, #0
 801153a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801153c:	f002 fa2e 	bl	801399c <vPortExitCritical>

	return xReturn;
 8011540:	68fb      	ldr	r3, [r7, #12]
}
 8011542:	4618      	mov	r0, r3
 8011544:	3710      	adds	r7, #16
 8011546:	46bd      	mov	sp, r7
 8011548:	bd80      	pop	{r7, pc}
	...

0801154c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801154c:	b480      	push	{r7}
 801154e:	b085      	sub	sp, #20
 8011550:	af00      	add	r7, sp, #0
 8011552:	6078      	str	r0, [r7, #4]
 8011554:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011556:	2300      	movs	r3, #0
 8011558:	60fb      	str	r3, [r7, #12]
 801155a:	e014      	b.n	8011586 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801155c:	4a0e      	ldr	r2, [pc, #56]	@ (8011598 <vQueueAddToRegistry+0x4c>)
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011564:	2b00      	cmp	r3, #0
 8011566:	d10b      	bne.n	8011580 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011568:	490b      	ldr	r1, [pc, #44]	@ (8011598 <vQueueAddToRegistry+0x4c>)
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	683a      	ldr	r2, [r7, #0]
 801156e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011572:	4a09      	ldr	r2, [pc, #36]	@ (8011598 <vQueueAddToRegistry+0x4c>)
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	00db      	lsls	r3, r3, #3
 8011578:	4413      	add	r3, r2
 801157a:	687a      	ldr	r2, [r7, #4]
 801157c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801157e:	e006      	b.n	801158e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	3301      	adds	r3, #1
 8011584:	60fb      	str	r3, [r7, #12]
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	2b07      	cmp	r3, #7
 801158a:	d9e7      	bls.n	801155c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801158c:	bf00      	nop
 801158e:	bf00      	nop
 8011590:	3714      	adds	r7, #20
 8011592:	46bd      	mov	sp, r7
 8011594:	bc80      	pop	{r7}
 8011596:	4770      	bx	lr
 8011598:	20001d44 	.word	0x20001d44

0801159c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801159c:	b580      	push	{r7, lr}
 801159e:	b086      	sub	sp, #24
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	60f8      	str	r0, [r7, #12]
 80115a4:	60b9      	str	r1, [r7, #8]
 80115a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80115ac:	f002 f9c6 	bl	801393c <vPortEnterCritical>
 80115b0:	697b      	ldr	r3, [r7, #20]
 80115b2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80115b6:	b25b      	sxtb	r3, r3
 80115b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115bc:	d103      	bne.n	80115c6 <vQueueWaitForMessageRestricted+0x2a>
 80115be:	697b      	ldr	r3, [r7, #20]
 80115c0:	2200      	movs	r2, #0
 80115c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80115c6:	697b      	ldr	r3, [r7, #20]
 80115c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80115cc:	b25b      	sxtb	r3, r3
 80115ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115d2:	d103      	bne.n	80115dc <vQueueWaitForMessageRestricted+0x40>
 80115d4:	697b      	ldr	r3, [r7, #20]
 80115d6:	2200      	movs	r2, #0
 80115d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80115dc:	f002 f9de 	bl	801399c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80115e0:	697b      	ldr	r3, [r7, #20]
 80115e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d106      	bne.n	80115f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80115e8:	697b      	ldr	r3, [r7, #20]
 80115ea:	3324      	adds	r3, #36	@ 0x24
 80115ec:	687a      	ldr	r2, [r7, #4]
 80115ee:	68b9      	ldr	r1, [r7, #8]
 80115f0:	4618      	mov	r0, r3
 80115f2:	f000 fddd 	bl	80121b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80115f6:	6978      	ldr	r0, [r7, #20]
 80115f8:	f7ff ff27 	bl	801144a <prvUnlockQueue>
	}
 80115fc:	bf00      	nop
 80115fe:	3718      	adds	r7, #24
 8011600:	46bd      	mov	sp, r7
 8011602:	bd80      	pop	{r7, pc}

08011604 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011604:	b580      	push	{r7, lr}
 8011606:	b08e      	sub	sp, #56	@ 0x38
 8011608:	af04      	add	r7, sp, #16
 801160a:	60f8      	str	r0, [r7, #12]
 801160c:	60b9      	str	r1, [r7, #8]
 801160e:	607a      	str	r2, [r7, #4]
 8011610:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011614:	2b00      	cmp	r3, #0
 8011616:	d10b      	bne.n	8011630 <xTaskCreateStatic+0x2c>
	__asm volatile
 8011618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801161c:	f383 8811 	msr	BASEPRI, r3
 8011620:	f3bf 8f6f 	isb	sy
 8011624:	f3bf 8f4f 	dsb	sy
 8011628:	623b      	str	r3, [r7, #32]
}
 801162a:	bf00      	nop
 801162c:	bf00      	nop
 801162e:	e7fd      	b.n	801162c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8011630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011632:	2b00      	cmp	r3, #0
 8011634:	d10b      	bne.n	801164e <xTaskCreateStatic+0x4a>
	__asm volatile
 8011636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801163a:	f383 8811 	msr	BASEPRI, r3
 801163e:	f3bf 8f6f 	isb	sy
 8011642:	f3bf 8f4f 	dsb	sy
 8011646:	61fb      	str	r3, [r7, #28]
}
 8011648:	bf00      	nop
 801164a:	bf00      	nop
 801164c:	e7fd      	b.n	801164a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801164e:	23a8      	movs	r3, #168	@ 0xa8
 8011650:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011652:	693b      	ldr	r3, [r7, #16]
 8011654:	2ba8      	cmp	r3, #168	@ 0xa8
 8011656:	d00b      	beq.n	8011670 <xTaskCreateStatic+0x6c>
	__asm volatile
 8011658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801165c:	f383 8811 	msr	BASEPRI, r3
 8011660:	f3bf 8f6f 	isb	sy
 8011664:	f3bf 8f4f 	dsb	sy
 8011668:	61bb      	str	r3, [r7, #24]
}
 801166a:	bf00      	nop
 801166c:	bf00      	nop
 801166e:	e7fd      	b.n	801166c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011670:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011674:	2b00      	cmp	r3, #0
 8011676:	d01e      	beq.n	80116b6 <xTaskCreateStatic+0xb2>
 8011678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801167a:	2b00      	cmp	r3, #0
 801167c:	d01b      	beq.n	80116b6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801167e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011680:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011684:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011686:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801168a:	2202      	movs	r2, #2
 801168c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011690:	2300      	movs	r3, #0
 8011692:	9303      	str	r3, [sp, #12]
 8011694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011696:	9302      	str	r3, [sp, #8]
 8011698:	f107 0314 	add.w	r3, r7, #20
 801169c:	9301      	str	r3, [sp, #4]
 801169e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116a0:	9300      	str	r3, [sp, #0]
 80116a2:	683b      	ldr	r3, [r7, #0]
 80116a4:	687a      	ldr	r2, [r7, #4]
 80116a6:	68b9      	ldr	r1, [r7, #8]
 80116a8:	68f8      	ldr	r0, [r7, #12]
 80116aa:	f000 f851 	bl	8011750 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80116ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80116b0:	f000 f8f6 	bl	80118a0 <prvAddNewTaskToReadyList>
 80116b4:	e001      	b.n	80116ba <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80116b6:	2300      	movs	r3, #0
 80116b8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80116ba:	697b      	ldr	r3, [r7, #20]
	}
 80116bc:	4618      	mov	r0, r3
 80116be:	3728      	adds	r7, #40	@ 0x28
 80116c0:	46bd      	mov	sp, r7
 80116c2:	bd80      	pop	{r7, pc}

080116c4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80116c4:	b580      	push	{r7, lr}
 80116c6:	b08c      	sub	sp, #48	@ 0x30
 80116c8:	af04      	add	r7, sp, #16
 80116ca:	60f8      	str	r0, [r7, #12]
 80116cc:	60b9      	str	r1, [r7, #8]
 80116ce:	603b      	str	r3, [r7, #0]
 80116d0:	4613      	mov	r3, r2
 80116d2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80116d4:	88fb      	ldrh	r3, [r7, #6]
 80116d6:	009b      	lsls	r3, r3, #2
 80116d8:	4618      	mov	r0, r3
 80116da:	f002 fa31 	bl	8013b40 <pvPortMalloc>
 80116de:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80116e0:	697b      	ldr	r3, [r7, #20]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d00e      	beq.n	8011704 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80116e6:	20a8      	movs	r0, #168	@ 0xa8
 80116e8:	f002 fa2a 	bl	8013b40 <pvPortMalloc>
 80116ec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80116ee:	69fb      	ldr	r3, [r7, #28]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d003      	beq.n	80116fc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80116f4:	69fb      	ldr	r3, [r7, #28]
 80116f6:	697a      	ldr	r2, [r7, #20]
 80116f8:	631a      	str	r2, [r3, #48]	@ 0x30
 80116fa:	e005      	b.n	8011708 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80116fc:	6978      	ldr	r0, [r7, #20]
 80116fe:	f002 faed 	bl	8013cdc <vPortFree>
 8011702:	e001      	b.n	8011708 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011704:	2300      	movs	r3, #0
 8011706:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011708:	69fb      	ldr	r3, [r7, #28]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d017      	beq.n	801173e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801170e:	69fb      	ldr	r3, [r7, #28]
 8011710:	2200      	movs	r2, #0
 8011712:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011716:	88fa      	ldrh	r2, [r7, #6]
 8011718:	2300      	movs	r3, #0
 801171a:	9303      	str	r3, [sp, #12]
 801171c:	69fb      	ldr	r3, [r7, #28]
 801171e:	9302      	str	r3, [sp, #8]
 8011720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011722:	9301      	str	r3, [sp, #4]
 8011724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011726:	9300      	str	r3, [sp, #0]
 8011728:	683b      	ldr	r3, [r7, #0]
 801172a:	68b9      	ldr	r1, [r7, #8]
 801172c:	68f8      	ldr	r0, [r7, #12]
 801172e:	f000 f80f 	bl	8011750 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011732:	69f8      	ldr	r0, [r7, #28]
 8011734:	f000 f8b4 	bl	80118a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011738:	2301      	movs	r3, #1
 801173a:	61bb      	str	r3, [r7, #24]
 801173c:	e002      	b.n	8011744 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801173e:	f04f 33ff 	mov.w	r3, #4294967295
 8011742:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011744:	69bb      	ldr	r3, [r7, #24]
	}
 8011746:	4618      	mov	r0, r3
 8011748:	3720      	adds	r7, #32
 801174a:	46bd      	mov	sp, r7
 801174c:	bd80      	pop	{r7, pc}
	...

08011750 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011750:	b580      	push	{r7, lr}
 8011752:	b088      	sub	sp, #32
 8011754:	af00      	add	r7, sp, #0
 8011756:	60f8      	str	r0, [r7, #12]
 8011758:	60b9      	str	r1, [r7, #8]
 801175a:	607a      	str	r2, [r7, #4]
 801175c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801175e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011760:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	009b      	lsls	r3, r3, #2
 8011766:	461a      	mov	r2, r3
 8011768:	21a5      	movs	r1, #165	@ 0xa5
 801176a:	f002 ff9b 	bl	80146a4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801176e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011770:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011778:	3b01      	subs	r3, #1
 801177a:	009b      	lsls	r3, r3, #2
 801177c:	4413      	add	r3, r2
 801177e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011780:	69bb      	ldr	r3, [r7, #24]
 8011782:	f023 0307 	bic.w	r3, r3, #7
 8011786:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011788:	69bb      	ldr	r3, [r7, #24]
 801178a:	f003 0307 	and.w	r3, r3, #7
 801178e:	2b00      	cmp	r3, #0
 8011790:	d00b      	beq.n	80117aa <prvInitialiseNewTask+0x5a>
	__asm volatile
 8011792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011796:	f383 8811 	msr	BASEPRI, r3
 801179a:	f3bf 8f6f 	isb	sy
 801179e:	f3bf 8f4f 	dsb	sy
 80117a2:	617b      	str	r3, [r7, #20]
}
 80117a4:	bf00      	nop
 80117a6:	bf00      	nop
 80117a8:	e7fd      	b.n	80117a6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80117aa:	68bb      	ldr	r3, [r7, #8]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d01f      	beq.n	80117f0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80117b0:	2300      	movs	r3, #0
 80117b2:	61fb      	str	r3, [r7, #28]
 80117b4:	e012      	b.n	80117dc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80117b6:	68ba      	ldr	r2, [r7, #8]
 80117b8:	69fb      	ldr	r3, [r7, #28]
 80117ba:	4413      	add	r3, r2
 80117bc:	7819      	ldrb	r1, [r3, #0]
 80117be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80117c0:	69fb      	ldr	r3, [r7, #28]
 80117c2:	4413      	add	r3, r2
 80117c4:	3334      	adds	r3, #52	@ 0x34
 80117c6:	460a      	mov	r2, r1
 80117c8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80117ca:	68ba      	ldr	r2, [r7, #8]
 80117cc:	69fb      	ldr	r3, [r7, #28]
 80117ce:	4413      	add	r3, r2
 80117d0:	781b      	ldrb	r3, [r3, #0]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d006      	beq.n	80117e4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80117d6:	69fb      	ldr	r3, [r7, #28]
 80117d8:	3301      	adds	r3, #1
 80117da:	61fb      	str	r3, [r7, #28]
 80117dc:	69fb      	ldr	r3, [r7, #28]
 80117de:	2b0f      	cmp	r3, #15
 80117e0:	d9e9      	bls.n	80117b6 <prvInitialiseNewTask+0x66>
 80117e2:	e000      	b.n	80117e6 <prvInitialiseNewTask+0x96>
			{
				break;
 80117e4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80117e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117e8:	2200      	movs	r2, #0
 80117ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80117ee:	e003      	b.n	80117f8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80117f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117f2:	2200      	movs	r2, #0
 80117f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80117f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117fa:	2b37      	cmp	r3, #55	@ 0x37
 80117fc:	d901      	bls.n	8011802 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80117fe:	2337      	movs	r3, #55	@ 0x37
 8011800:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011804:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011806:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801180a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801180c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801180e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011810:	2200      	movs	r2, #0
 8011812:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011816:	3304      	adds	r3, #4
 8011818:	4618      	mov	r0, r3
 801181a:	f7fe fecc 	bl	80105b6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801181e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011820:	3318      	adds	r3, #24
 8011822:	4618      	mov	r0, r3
 8011824:	f7fe fec7 	bl	80105b6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801182a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801182c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801182e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011830:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8011834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011836:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801183a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801183c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801183e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011840:	2200      	movs	r2, #0
 8011842:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011848:	2200      	movs	r2, #0
 801184a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801184e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011850:	3354      	adds	r3, #84	@ 0x54
 8011852:	224c      	movs	r2, #76	@ 0x4c
 8011854:	2100      	movs	r1, #0
 8011856:	4618      	mov	r0, r3
 8011858:	f002 ff24 	bl	80146a4 <memset>
 801185c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801185e:	4a0d      	ldr	r2, [pc, #52]	@ (8011894 <prvInitialiseNewTask+0x144>)
 8011860:	659a      	str	r2, [r3, #88]	@ 0x58
 8011862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011864:	4a0c      	ldr	r2, [pc, #48]	@ (8011898 <prvInitialiseNewTask+0x148>)
 8011866:	65da      	str	r2, [r3, #92]	@ 0x5c
 8011868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801186a:	4a0c      	ldr	r2, [pc, #48]	@ (801189c <prvInitialiseNewTask+0x14c>)
 801186c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801186e:	683a      	ldr	r2, [r7, #0]
 8011870:	68f9      	ldr	r1, [r7, #12]
 8011872:	69b8      	ldr	r0, [r7, #24]
 8011874:	f001 ff70 	bl	8013758 <pxPortInitialiseStack>
 8011878:	4602      	mov	r2, r0
 801187a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801187c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801187e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011880:	2b00      	cmp	r3, #0
 8011882:	d002      	beq.n	801188a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011886:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011888:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801188a:	bf00      	nop
 801188c:	3720      	adds	r7, #32
 801188e:	46bd      	mov	sp, r7
 8011890:	bd80      	pop	{r7, pc}
 8011892:	bf00      	nop
 8011894:	200083e0 	.word	0x200083e0
 8011898:	20008448 	.word	0x20008448
 801189c:	200084b0 	.word	0x200084b0

080118a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80118a0:	b580      	push	{r7, lr}
 80118a2:	b082      	sub	sp, #8
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80118a8:	f002 f848 	bl	801393c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80118ac:	4b2d      	ldr	r3, [pc, #180]	@ (8011964 <prvAddNewTaskToReadyList+0xc4>)
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	3301      	adds	r3, #1
 80118b2:	4a2c      	ldr	r2, [pc, #176]	@ (8011964 <prvAddNewTaskToReadyList+0xc4>)
 80118b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80118b6:	4b2c      	ldr	r3, [pc, #176]	@ (8011968 <prvAddNewTaskToReadyList+0xc8>)
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d109      	bne.n	80118d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80118be:	4a2a      	ldr	r2, [pc, #168]	@ (8011968 <prvAddNewTaskToReadyList+0xc8>)
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80118c4:	4b27      	ldr	r3, [pc, #156]	@ (8011964 <prvAddNewTaskToReadyList+0xc4>)
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	2b01      	cmp	r3, #1
 80118ca:	d110      	bne.n	80118ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80118cc:	f000 fd9e 	bl	801240c <prvInitialiseTaskLists>
 80118d0:	e00d      	b.n	80118ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80118d2:	4b26      	ldr	r3, [pc, #152]	@ (801196c <prvAddNewTaskToReadyList+0xcc>)
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d109      	bne.n	80118ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80118da:	4b23      	ldr	r3, [pc, #140]	@ (8011968 <prvAddNewTaskToReadyList+0xc8>)
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118e4:	429a      	cmp	r2, r3
 80118e6:	d802      	bhi.n	80118ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80118e8:	4a1f      	ldr	r2, [pc, #124]	@ (8011968 <prvAddNewTaskToReadyList+0xc8>)
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80118ee:	4b20      	ldr	r3, [pc, #128]	@ (8011970 <prvAddNewTaskToReadyList+0xd0>)
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	3301      	adds	r3, #1
 80118f4:	4a1e      	ldr	r2, [pc, #120]	@ (8011970 <prvAddNewTaskToReadyList+0xd0>)
 80118f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80118f8:	4b1d      	ldr	r3, [pc, #116]	@ (8011970 <prvAddNewTaskToReadyList+0xd0>)
 80118fa:	681a      	ldr	r2, [r3, #0]
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011904:	4b1b      	ldr	r3, [pc, #108]	@ (8011974 <prvAddNewTaskToReadyList+0xd4>)
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	429a      	cmp	r2, r3
 801190a:	d903      	bls.n	8011914 <prvAddNewTaskToReadyList+0x74>
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011910:	4a18      	ldr	r2, [pc, #96]	@ (8011974 <prvAddNewTaskToReadyList+0xd4>)
 8011912:	6013      	str	r3, [r2, #0]
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011918:	4613      	mov	r3, r2
 801191a:	009b      	lsls	r3, r3, #2
 801191c:	4413      	add	r3, r2
 801191e:	009b      	lsls	r3, r3, #2
 8011920:	4a15      	ldr	r2, [pc, #84]	@ (8011978 <prvAddNewTaskToReadyList+0xd8>)
 8011922:	441a      	add	r2, r3
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	3304      	adds	r3, #4
 8011928:	4619      	mov	r1, r3
 801192a:	4610      	mov	r0, r2
 801192c:	f7fe fe4f 	bl	80105ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011930:	f002 f834 	bl	801399c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011934:	4b0d      	ldr	r3, [pc, #52]	@ (801196c <prvAddNewTaskToReadyList+0xcc>)
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	2b00      	cmp	r3, #0
 801193a:	d00e      	beq.n	801195a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801193c:	4b0a      	ldr	r3, [pc, #40]	@ (8011968 <prvAddNewTaskToReadyList+0xc8>)
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011946:	429a      	cmp	r2, r3
 8011948:	d207      	bcs.n	801195a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801194a:	4b0c      	ldr	r3, [pc, #48]	@ (801197c <prvAddNewTaskToReadyList+0xdc>)
 801194c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011950:	601a      	str	r2, [r3, #0]
 8011952:	f3bf 8f4f 	dsb	sy
 8011956:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801195a:	bf00      	nop
 801195c:	3708      	adds	r7, #8
 801195e:	46bd      	mov	sp, r7
 8011960:	bd80      	pop	{r7, pc}
 8011962:	bf00      	nop
 8011964:	20002258 	.word	0x20002258
 8011968:	20001d84 	.word	0x20001d84
 801196c:	20002264 	.word	0x20002264
 8011970:	20002274 	.word	0x20002274
 8011974:	20002260 	.word	0x20002260
 8011978:	20001d88 	.word	0x20001d88
 801197c:	e000ed04 	.word	0xe000ed04

08011980 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8011980:	b580      	push	{r7, lr}
 8011982:	b084      	sub	sp, #16
 8011984:	af00      	add	r7, sp, #0
 8011986:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8011988:	f001 ffd8 	bl	801393c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d102      	bne.n	8011998 <vTaskDelete+0x18>
 8011992:	4b2d      	ldr	r3, [pc, #180]	@ (8011a48 <vTaskDelete+0xc8>)
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	e000      	b.n	801199a <vTaskDelete+0x1a>
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	3304      	adds	r3, #4
 80119a0:	4618      	mov	r0, r3
 80119a2:	f7fe fe6f 	bl	8010684 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d004      	beq.n	80119b8 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	3318      	adds	r3, #24
 80119b2:	4618      	mov	r0, r3
 80119b4:	f7fe fe66 	bl	8010684 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80119b8:	4b24      	ldr	r3, [pc, #144]	@ (8011a4c <vTaskDelete+0xcc>)
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	3301      	adds	r3, #1
 80119be:	4a23      	ldr	r2, [pc, #140]	@ (8011a4c <vTaskDelete+0xcc>)
 80119c0:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80119c2:	4b21      	ldr	r3, [pc, #132]	@ (8011a48 <vTaskDelete+0xc8>)
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	68fa      	ldr	r2, [r7, #12]
 80119c8:	429a      	cmp	r2, r3
 80119ca:	d10b      	bne.n	80119e4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	3304      	adds	r3, #4
 80119d0:	4619      	mov	r1, r3
 80119d2:	481f      	ldr	r0, [pc, #124]	@ (8011a50 <vTaskDelete+0xd0>)
 80119d4:	f7fe fdfb 	bl	80105ce <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80119d8:	4b1e      	ldr	r3, [pc, #120]	@ (8011a54 <vTaskDelete+0xd4>)
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	3301      	adds	r3, #1
 80119de:	4a1d      	ldr	r2, [pc, #116]	@ (8011a54 <vTaskDelete+0xd4>)
 80119e0:	6013      	str	r3, [r2, #0]
 80119e2:	e009      	b.n	80119f8 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80119e4:	4b1c      	ldr	r3, [pc, #112]	@ (8011a58 <vTaskDelete+0xd8>)
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	3b01      	subs	r3, #1
 80119ea:	4a1b      	ldr	r2, [pc, #108]	@ (8011a58 <vTaskDelete+0xd8>)
 80119ec:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80119ee:	68f8      	ldr	r0, [r7, #12]
 80119f0:	f000 fe4d 	bl	801268e <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80119f4:	f000 fe80 	bl	80126f8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80119f8:	f001 ffd0 	bl	801399c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80119fc:	4b17      	ldr	r3, [pc, #92]	@ (8011a5c <vTaskDelete+0xdc>)
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d01c      	beq.n	8011a3e <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8011a04:	4b10      	ldr	r3, [pc, #64]	@ (8011a48 <vTaskDelete+0xc8>)
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	68fa      	ldr	r2, [r7, #12]
 8011a0a:	429a      	cmp	r2, r3
 8011a0c:	d117      	bne.n	8011a3e <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8011a0e:	4b14      	ldr	r3, [pc, #80]	@ (8011a60 <vTaskDelete+0xe0>)
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d00b      	beq.n	8011a2e <vTaskDelete+0xae>
	__asm volatile
 8011a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a1a:	f383 8811 	msr	BASEPRI, r3
 8011a1e:	f3bf 8f6f 	isb	sy
 8011a22:	f3bf 8f4f 	dsb	sy
 8011a26:	60bb      	str	r3, [r7, #8]
}
 8011a28:	bf00      	nop
 8011a2a:	bf00      	nop
 8011a2c:	e7fd      	b.n	8011a2a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8011a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8011a64 <vTaskDelete+0xe4>)
 8011a30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011a34:	601a      	str	r2, [r3, #0]
 8011a36:	f3bf 8f4f 	dsb	sy
 8011a3a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011a3e:	bf00      	nop
 8011a40:	3710      	adds	r7, #16
 8011a42:	46bd      	mov	sp, r7
 8011a44:	bd80      	pop	{r7, pc}
 8011a46:	bf00      	nop
 8011a48:	20001d84 	.word	0x20001d84
 8011a4c:	20002274 	.word	0x20002274
 8011a50:	2000222c 	.word	0x2000222c
 8011a54:	20002240 	.word	0x20002240
 8011a58:	20002258 	.word	0x20002258
 8011a5c:	20002264 	.word	0x20002264
 8011a60:	20002280 	.word	0x20002280
 8011a64:	e000ed04 	.word	0xe000ed04

08011a68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	b084      	sub	sp, #16
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011a70:	2300      	movs	r3, #0
 8011a72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d018      	beq.n	8011aac <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011a7a:	4b14      	ldr	r3, [pc, #80]	@ (8011acc <vTaskDelay+0x64>)
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d00b      	beq.n	8011a9a <vTaskDelay+0x32>
	__asm volatile
 8011a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a86:	f383 8811 	msr	BASEPRI, r3
 8011a8a:	f3bf 8f6f 	isb	sy
 8011a8e:	f3bf 8f4f 	dsb	sy
 8011a92:	60bb      	str	r3, [r7, #8]
}
 8011a94:	bf00      	nop
 8011a96:	bf00      	nop
 8011a98:	e7fd      	b.n	8011a96 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8011a9a:	f000 f8f3 	bl	8011c84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011a9e:	2100      	movs	r1, #0
 8011aa0:	6878      	ldr	r0, [r7, #4]
 8011aa2:	f001 f9ed 	bl	8012e80 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011aa6:	f000 f8fb 	bl	8011ca0 <xTaskResumeAll>
 8011aaa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d107      	bne.n	8011ac2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8011ab2:	4b07      	ldr	r3, [pc, #28]	@ (8011ad0 <vTaskDelay+0x68>)
 8011ab4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011ab8:	601a      	str	r2, [r3, #0]
 8011aba:	f3bf 8f4f 	dsb	sy
 8011abe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011ac2:	bf00      	nop
 8011ac4:	3710      	adds	r7, #16
 8011ac6:	46bd      	mov	sp, r7
 8011ac8:	bd80      	pop	{r7, pc}
 8011aca:	bf00      	nop
 8011acc:	20002280 	.word	0x20002280
 8011ad0:	e000ed04 	.word	0xe000ed04

08011ad4 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8011ad4:	b580      	push	{r7, lr}
 8011ad6:	b088      	sub	sp, #32
 8011ad8:	af00      	add	r7, sp, #0
 8011ada:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8011ae0:	69bb      	ldr	r3, [r7, #24]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d10b      	bne.n	8011afe <eTaskGetState+0x2a>
	__asm volatile
 8011ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011aea:	f383 8811 	msr	BASEPRI, r3
 8011aee:	f3bf 8f6f 	isb	sy
 8011af2:	f3bf 8f4f 	dsb	sy
 8011af6:	60bb      	str	r3, [r7, #8]
}
 8011af8:	bf00      	nop
 8011afa:	bf00      	nop
 8011afc:	e7fd      	b.n	8011afa <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8011afe:	4b24      	ldr	r3, [pc, #144]	@ (8011b90 <eTaskGetState+0xbc>)
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	69ba      	ldr	r2, [r7, #24]
 8011b04:	429a      	cmp	r2, r3
 8011b06:	d102      	bne.n	8011b0e <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8011b08:	2300      	movs	r3, #0
 8011b0a:	77fb      	strb	r3, [r7, #31]
 8011b0c:	e03a      	b.n	8011b84 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 8011b0e:	f001 ff15 	bl	801393c <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8011b12:	69bb      	ldr	r3, [r7, #24]
 8011b14:	695b      	ldr	r3, [r3, #20]
 8011b16:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8011b18:	4b1e      	ldr	r3, [pc, #120]	@ (8011b94 <eTaskGetState+0xc0>)
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8011b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8011b98 <eTaskGetState+0xc4>)
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8011b24:	f001 ff3a 	bl	801399c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8011b28:	697a      	ldr	r2, [r7, #20]
 8011b2a:	693b      	ldr	r3, [r7, #16]
 8011b2c:	429a      	cmp	r2, r3
 8011b2e:	d003      	beq.n	8011b38 <eTaskGetState+0x64>
 8011b30:	697a      	ldr	r2, [r7, #20]
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	429a      	cmp	r2, r3
 8011b36:	d102      	bne.n	8011b3e <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8011b38:	2302      	movs	r3, #2
 8011b3a:	77fb      	strb	r3, [r7, #31]
 8011b3c:	e022      	b.n	8011b84 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8011b3e:	697b      	ldr	r3, [r7, #20]
 8011b40:	4a16      	ldr	r2, [pc, #88]	@ (8011b9c <eTaskGetState+0xc8>)
 8011b42:	4293      	cmp	r3, r2
 8011b44:	d112      	bne.n	8011b6c <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8011b46:	69bb      	ldr	r3, [r7, #24]
 8011b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d10b      	bne.n	8011b66 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8011b4e:	69bb      	ldr	r3, [r7, #24]
 8011b50:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8011b54:	b2db      	uxtb	r3, r3
 8011b56:	2b01      	cmp	r3, #1
 8011b58:	d102      	bne.n	8011b60 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 8011b5a:	2302      	movs	r3, #2
 8011b5c:	77fb      	strb	r3, [r7, #31]
 8011b5e:	e011      	b.n	8011b84 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 8011b60:	2303      	movs	r3, #3
 8011b62:	77fb      	strb	r3, [r7, #31]
 8011b64:	e00e      	b.n	8011b84 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8011b66:	2302      	movs	r3, #2
 8011b68:	77fb      	strb	r3, [r7, #31]
 8011b6a:	e00b      	b.n	8011b84 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8011b6c:	697b      	ldr	r3, [r7, #20]
 8011b6e:	4a0c      	ldr	r2, [pc, #48]	@ (8011ba0 <eTaskGetState+0xcc>)
 8011b70:	4293      	cmp	r3, r2
 8011b72:	d002      	beq.n	8011b7a <eTaskGetState+0xa6>
 8011b74:	697b      	ldr	r3, [r7, #20]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d102      	bne.n	8011b80 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8011b7a:	2304      	movs	r3, #4
 8011b7c:	77fb      	strb	r3, [r7, #31]
 8011b7e:	e001      	b.n	8011b84 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8011b80:	2301      	movs	r3, #1
 8011b82:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8011b84:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8011b86:	4618      	mov	r0, r3
 8011b88:	3720      	adds	r7, #32
 8011b8a:	46bd      	mov	sp, r7
 8011b8c:	bd80      	pop	{r7, pc}
 8011b8e:	bf00      	nop
 8011b90:	20001d84 	.word	0x20001d84
 8011b94:	20002210 	.word	0x20002210
 8011b98:	20002214 	.word	0x20002214
 8011b9c:	20002244 	.word	0x20002244
 8011ba0:	2000222c 	.word	0x2000222c

08011ba4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011ba4:	b580      	push	{r7, lr}
 8011ba6:	b08a      	sub	sp, #40	@ 0x28
 8011ba8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011baa:	2300      	movs	r3, #0
 8011bac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011bae:	2300      	movs	r3, #0
 8011bb0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011bb2:	463a      	mov	r2, r7
 8011bb4:	1d39      	adds	r1, r7, #4
 8011bb6:	f107 0308 	add.w	r3, r7, #8
 8011bba:	4618      	mov	r0, r3
 8011bbc:	f7fe fcaa 	bl	8010514 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011bc0:	6839      	ldr	r1, [r7, #0]
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	68ba      	ldr	r2, [r7, #8]
 8011bc6:	9202      	str	r2, [sp, #8]
 8011bc8:	9301      	str	r3, [sp, #4]
 8011bca:	2300      	movs	r3, #0
 8011bcc:	9300      	str	r3, [sp, #0]
 8011bce:	2300      	movs	r3, #0
 8011bd0:	460a      	mov	r2, r1
 8011bd2:	4924      	ldr	r1, [pc, #144]	@ (8011c64 <vTaskStartScheduler+0xc0>)
 8011bd4:	4824      	ldr	r0, [pc, #144]	@ (8011c68 <vTaskStartScheduler+0xc4>)
 8011bd6:	f7ff fd15 	bl	8011604 <xTaskCreateStatic>
 8011bda:	4603      	mov	r3, r0
 8011bdc:	4a23      	ldr	r2, [pc, #140]	@ (8011c6c <vTaskStartScheduler+0xc8>)
 8011bde:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011be0:	4b22      	ldr	r3, [pc, #136]	@ (8011c6c <vTaskStartScheduler+0xc8>)
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d002      	beq.n	8011bee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011be8:	2301      	movs	r3, #1
 8011bea:	617b      	str	r3, [r7, #20]
 8011bec:	e001      	b.n	8011bf2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011bee:	2300      	movs	r3, #0
 8011bf0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8011bf2:	697b      	ldr	r3, [r7, #20]
 8011bf4:	2b01      	cmp	r3, #1
 8011bf6:	d102      	bne.n	8011bfe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8011bf8:	f001 f996 	bl	8012f28 <xTimerCreateTimerTask>
 8011bfc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011bfe:	697b      	ldr	r3, [r7, #20]
 8011c00:	2b01      	cmp	r3, #1
 8011c02:	d11b      	bne.n	8011c3c <vTaskStartScheduler+0x98>
	__asm volatile
 8011c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c08:	f383 8811 	msr	BASEPRI, r3
 8011c0c:	f3bf 8f6f 	isb	sy
 8011c10:	f3bf 8f4f 	dsb	sy
 8011c14:	613b      	str	r3, [r7, #16]
}
 8011c16:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011c18:	4b15      	ldr	r3, [pc, #84]	@ (8011c70 <vTaskStartScheduler+0xcc>)
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	3354      	adds	r3, #84	@ 0x54
 8011c1e:	4a15      	ldr	r2, [pc, #84]	@ (8011c74 <vTaskStartScheduler+0xd0>)
 8011c20:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011c22:	4b15      	ldr	r3, [pc, #84]	@ (8011c78 <vTaskStartScheduler+0xd4>)
 8011c24:	f04f 32ff 	mov.w	r2, #4294967295
 8011c28:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011c2a:	4b14      	ldr	r3, [pc, #80]	@ (8011c7c <vTaskStartScheduler+0xd8>)
 8011c2c:	2201      	movs	r2, #1
 8011c2e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011c30:	4b13      	ldr	r3, [pc, #76]	@ (8011c80 <vTaskStartScheduler+0xdc>)
 8011c32:	2200      	movs	r2, #0
 8011c34:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011c36:	f001 fe0f 	bl	8013858 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011c3a:	e00f      	b.n	8011c5c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011c3c:	697b      	ldr	r3, [r7, #20]
 8011c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c42:	d10b      	bne.n	8011c5c <vTaskStartScheduler+0xb8>
	__asm volatile
 8011c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c48:	f383 8811 	msr	BASEPRI, r3
 8011c4c:	f3bf 8f6f 	isb	sy
 8011c50:	f3bf 8f4f 	dsb	sy
 8011c54:	60fb      	str	r3, [r7, #12]
}
 8011c56:	bf00      	nop
 8011c58:	bf00      	nop
 8011c5a:	e7fd      	b.n	8011c58 <vTaskStartScheduler+0xb4>
}
 8011c5c:	bf00      	nop
 8011c5e:	3718      	adds	r7, #24
 8011c60:	46bd      	mov	sp, r7
 8011c62:	bd80      	pop	{r7, pc}
 8011c64:	08019998 	.word	0x08019998
 8011c68:	080123dd 	.word	0x080123dd
 8011c6c:	2000227c 	.word	0x2000227c
 8011c70:	20001d84 	.word	0x20001d84
 8011c74:	20000628 	.word	0x20000628
 8011c78:	20002278 	.word	0x20002278
 8011c7c:	20002264 	.word	0x20002264
 8011c80:	2000225c 	.word	0x2000225c

08011c84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011c84:	b480      	push	{r7}
 8011c86:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011c88:	4b04      	ldr	r3, [pc, #16]	@ (8011c9c <vTaskSuspendAll+0x18>)
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	3301      	adds	r3, #1
 8011c8e:	4a03      	ldr	r2, [pc, #12]	@ (8011c9c <vTaskSuspendAll+0x18>)
 8011c90:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8011c92:	bf00      	nop
 8011c94:	46bd      	mov	sp, r7
 8011c96:	bc80      	pop	{r7}
 8011c98:	4770      	bx	lr
 8011c9a:	bf00      	nop
 8011c9c:	20002280 	.word	0x20002280

08011ca0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011ca0:	b580      	push	{r7, lr}
 8011ca2:	b084      	sub	sp, #16
 8011ca4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011caa:	2300      	movs	r3, #0
 8011cac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011cae:	4b42      	ldr	r3, [pc, #264]	@ (8011db8 <xTaskResumeAll+0x118>)
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d10b      	bne.n	8011cce <xTaskResumeAll+0x2e>
	__asm volatile
 8011cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011cba:	f383 8811 	msr	BASEPRI, r3
 8011cbe:	f3bf 8f6f 	isb	sy
 8011cc2:	f3bf 8f4f 	dsb	sy
 8011cc6:	603b      	str	r3, [r7, #0]
}
 8011cc8:	bf00      	nop
 8011cca:	bf00      	nop
 8011ccc:	e7fd      	b.n	8011cca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011cce:	f001 fe35 	bl	801393c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011cd2:	4b39      	ldr	r3, [pc, #228]	@ (8011db8 <xTaskResumeAll+0x118>)
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	3b01      	subs	r3, #1
 8011cd8:	4a37      	ldr	r2, [pc, #220]	@ (8011db8 <xTaskResumeAll+0x118>)
 8011cda:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011cdc:	4b36      	ldr	r3, [pc, #216]	@ (8011db8 <xTaskResumeAll+0x118>)
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d162      	bne.n	8011daa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011ce4:	4b35      	ldr	r3, [pc, #212]	@ (8011dbc <xTaskResumeAll+0x11c>)
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d05e      	beq.n	8011daa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011cec:	e02f      	b.n	8011d4e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011cee:	4b34      	ldr	r3, [pc, #208]	@ (8011dc0 <xTaskResumeAll+0x120>)
 8011cf0:	68db      	ldr	r3, [r3, #12]
 8011cf2:	68db      	ldr	r3, [r3, #12]
 8011cf4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	3318      	adds	r3, #24
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	f7fe fcc2 	bl	8010684 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	3304      	adds	r3, #4
 8011d04:	4618      	mov	r0, r3
 8011d06:	f7fe fcbd 	bl	8010684 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011d0e:	4b2d      	ldr	r3, [pc, #180]	@ (8011dc4 <xTaskResumeAll+0x124>)
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	429a      	cmp	r2, r3
 8011d14:	d903      	bls.n	8011d1e <xTaskResumeAll+0x7e>
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d1a:	4a2a      	ldr	r2, [pc, #168]	@ (8011dc4 <xTaskResumeAll+0x124>)
 8011d1c:	6013      	str	r3, [r2, #0]
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011d22:	4613      	mov	r3, r2
 8011d24:	009b      	lsls	r3, r3, #2
 8011d26:	4413      	add	r3, r2
 8011d28:	009b      	lsls	r3, r3, #2
 8011d2a:	4a27      	ldr	r2, [pc, #156]	@ (8011dc8 <xTaskResumeAll+0x128>)
 8011d2c:	441a      	add	r2, r3
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	3304      	adds	r3, #4
 8011d32:	4619      	mov	r1, r3
 8011d34:	4610      	mov	r0, r2
 8011d36:	f7fe fc4a 	bl	80105ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011d3e:	4b23      	ldr	r3, [pc, #140]	@ (8011dcc <xTaskResumeAll+0x12c>)
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d44:	429a      	cmp	r2, r3
 8011d46:	d302      	bcc.n	8011d4e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8011d48:	4b21      	ldr	r3, [pc, #132]	@ (8011dd0 <xTaskResumeAll+0x130>)
 8011d4a:	2201      	movs	r2, #1
 8011d4c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011d4e:	4b1c      	ldr	r3, [pc, #112]	@ (8011dc0 <xTaskResumeAll+0x120>)
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d1cb      	bne.n	8011cee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d001      	beq.n	8011d60 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011d5c:	f000 fccc 	bl	80126f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011d60:	4b1c      	ldr	r3, [pc, #112]	@ (8011dd4 <xTaskResumeAll+0x134>)
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d010      	beq.n	8011d8e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011d6c:	f000 f8dc 	bl	8011f28 <xTaskIncrementTick>
 8011d70:	4603      	mov	r3, r0
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d002      	beq.n	8011d7c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8011d76:	4b16      	ldr	r3, [pc, #88]	@ (8011dd0 <xTaskResumeAll+0x130>)
 8011d78:	2201      	movs	r2, #1
 8011d7a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	3b01      	subs	r3, #1
 8011d80:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d1f1      	bne.n	8011d6c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8011d88:	4b12      	ldr	r3, [pc, #72]	@ (8011dd4 <xTaskResumeAll+0x134>)
 8011d8a:	2200      	movs	r2, #0
 8011d8c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011d8e:	4b10      	ldr	r3, [pc, #64]	@ (8011dd0 <xTaskResumeAll+0x130>)
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d009      	beq.n	8011daa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011d96:	2301      	movs	r3, #1
 8011d98:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011d9a:	4b0f      	ldr	r3, [pc, #60]	@ (8011dd8 <xTaskResumeAll+0x138>)
 8011d9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011da0:	601a      	str	r2, [r3, #0]
 8011da2:	f3bf 8f4f 	dsb	sy
 8011da6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011daa:	f001 fdf7 	bl	801399c <vPortExitCritical>

	return xAlreadyYielded;
 8011dae:	68bb      	ldr	r3, [r7, #8]
}
 8011db0:	4618      	mov	r0, r3
 8011db2:	3710      	adds	r7, #16
 8011db4:	46bd      	mov	sp, r7
 8011db6:	bd80      	pop	{r7, pc}
 8011db8:	20002280 	.word	0x20002280
 8011dbc:	20002258 	.word	0x20002258
 8011dc0:	20002218 	.word	0x20002218
 8011dc4:	20002260 	.word	0x20002260
 8011dc8:	20001d88 	.word	0x20001d88
 8011dcc:	20001d84 	.word	0x20001d84
 8011dd0:	2000226c 	.word	0x2000226c
 8011dd4:	20002268 	.word	0x20002268
 8011dd8:	e000ed04 	.word	0xe000ed04

08011ddc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011ddc:	b480      	push	{r7}
 8011dde:	b083      	sub	sp, #12
 8011de0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011de2:	4b04      	ldr	r3, [pc, #16]	@ (8011df4 <xTaskGetTickCount+0x18>)
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011de8:	687b      	ldr	r3, [r7, #4]
}
 8011dea:	4618      	mov	r0, r3
 8011dec:	370c      	adds	r7, #12
 8011dee:	46bd      	mov	sp, r7
 8011df0:	bc80      	pop	{r7}
 8011df2:	4770      	bx	lr
 8011df4:	2000225c 	.word	0x2000225c

08011df8 <uxTaskGetNumberOfTasks>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8011df8:	b480      	push	{r7}
 8011dfa:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
 8011dfc:	4b02      	ldr	r3, [pc, #8]	@ (8011e08 <uxTaskGetNumberOfTasks+0x10>)
 8011dfe:	681b      	ldr	r3, [r3, #0]
}
 8011e00:	4618      	mov	r0, r3
 8011e02:	46bd      	mov	sp, r7
 8011e04:	bc80      	pop	{r7}
 8011e06:	4770      	bx	lr
 8011e08:	20002258 	.word	0x20002258

08011e0c <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	b086      	sub	sp, #24
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	60f8      	str	r0, [r7, #12]
 8011e14:	60b9      	str	r1, [r7, #8]
 8011e16:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8011e18:	2300      	movs	r3, #0
 8011e1a:	617b      	str	r3, [r7, #20]
 8011e1c:	2338      	movs	r3, #56	@ 0x38
 8011e1e:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8011e20:	f7ff ff30 	bl	8011c84 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8011e24:	4b3a      	ldr	r3, [pc, #232]	@ (8011f10 <uxTaskGetSystemState+0x104>)
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	68ba      	ldr	r2, [r7, #8]
 8011e2a:	429a      	cmp	r2, r3
 8011e2c:	d368      	bcc.n	8011f00 <uxTaskGetSystemState+0xf4>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 8011e2e:	693b      	ldr	r3, [r7, #16]
 8011e30:	3b01      	subs	r3, #1
 8011e32:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8011e34:	697a      	ldr	r2, [r7, #20]
 8011e36:	4613      	mov	r3, r2
 8011e38:	00db      	lsls	r3, r3, #3
 8011e3a:	4413      	add	r3, r2
 8011e3c:	009b      	lsls	r3, r3, #2
 8011e3e:	461a      	mov	r2, r3
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	1898      	adds	r0, r3, r2
 8011e44:	693a      	ldr	r2, [r7, #16]
 8011e46:	4613      	mov	r3, r2
 8011e48:	009b      	lsls	r3, r3, #2
 8011e4a:	4413      	add	r3, r2
 8011e4c:	009b      	lsls	r3, r3, #2
 8011e4e:	4a31      	ldr	r2, [pc, #196]	@ (8011f14 <uxTaskGetSystemState+0x108>)
 8011e50:	4413      	add	r3, r2
 8011e52:	2201      	movs	r2, #1
 8011e54:	4619      	mov	r1, r3
 8011e56:	f000 fbad 	bl	80125b4 <prvListTasksWithinSingleList>
 8011e5a:	4602      	mov	r2, r0
 8011e5c:	697b      	ldr	r3, [r7, #20]
 8011e5e:	4413      	add	r3, r2
 8011e60:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011e62:	693b      	ldr	r3, [r7, #16]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d1e2      	bne.n	8011e2e <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8011e68:	697a      	ldr	r2, [r7, #20]
 8011e6a:	4613      	mov	r3, r2
 8011e6c:	00db      	lsls	r3, r3, #3
 8011e6e:	4413      	add	r3, r2
 8011e70:	009b      	lsls	r3, r3, #2
 8011e72:	461a      	mov	r2, r3
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	4413      	add	r3, r2
 8011e78:	4a27      	ldr	r2, [pc, #156]	@ (8011f18 <uxTaskGetSystemState+0x10c>)
 8011e7a:	6811      	ldr	r1, [r2, #0]
 8011e7c:	2202      	movs	r2, #2
 8011e7e:	4618      	mov	r0, r3
 8011e80:	f000 fb98 	bl	80125b4 <prvListTasksWithinSingleList>
 8011e84:	4602      	mov	r2, r0
 8011e86:	697b      	ldr	r3, [r7, #20]
 8011e88:	4413      	add	r3, r2
 8011e8a:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8011e8c:	697a      	ldr	r2, [r7, #20]
 8011e8e:	4613      	mov	r3, r2
 8011e90:	00db      	lsls	r3, r3, #3
 8011e92:	4413      	add	r3, r2
 8011e94:	009b      	lsls	r3, r3, #2
 8011e96:	461a      	mov	r2, r3
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	4413      	add	r3, r2
 8011e9c:	4a1f      	ldr	r2, [pc, #124]	@ (8011f1c <uxTaskGetSystemState+0x110>)
 8011e9e:	6811      	ldr	r1, [r2, #0]
 8011ea0:	2202      	movs	r2, #2
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	f000 fb86 	bl	80125b4 <prvListTasksWithinSingleList>
 8011ea8:	4602      	mov	r2, r0
 8011eaa:	697b      	ldr	r3, [r7, #20]
 8011eac:	4413      	add	r3, r2
 8011eae:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8011eb0:	697a      	ldr	r2, [r7, #20]
 8011eb2:	4613      	mov	r3, r2
 8011eb4:	00db      	lsls	r3, r3, #3
 8011eb6:	4413      	add	r3, r2
 8011eb8:	009b      	lsls	r3, r3, #2
 8011eba:	461a      	mov	r2, r3
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	4413      	add	r3, r2
 8011ec0:	2204      	movs	r2, #4
 8011ec2:	4917      	ldr	r1, [pc, #92]	@ (8011f20 <uxTaskGetSystemState+0x114>)
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	f000 fb75 	bl	80125b4 <prvListTasksWithinSingleList>
 8011eca:	4602      	mov	r2, r0
 8011ecc:	697b      	ldr	r3, [r7, #20]
 8011ece:	4413      	add	r3, r2
 8011ed0:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8011ed2:	697a      	ldr	r2, [r7, #20]
 8011ed4:	4613      	mov	r3, r2
 8011ed6:	00db      	lsls	r3, r3, #3
 8011ed8:	4413      	add	r3, r2
 8011eda:	009b      	lsls	r3, r3, #2
 8011edc:	461a      	mov	r2, r3
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	4413      	add	r3, r2
 8011ee2:	2203      	movs	r2, #3
 8011ee4:	490f      	ldr	r1, [pc, #60]	@ (8011f24 <uxTaskGetSystemState+0x118>)
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	f000 fb64 	bl	80125b4 <prvListTasksWithinSingleList>
 8011eec:	4602      	mov	r2, r0
 8011eee:	697b      	ldr	r3, [r7, #20]
 8011ef0:	4413      	add	r3, r2
 8011ef2:	617b      	str	r3, [r7, #20]
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d002      	beq.n	8011f00 <uxTaskGetSystemState+0xf4>
					{
						*pulTotalRunTime = 0;
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	2200      	movs	r2, #0
 8011efe:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 8011f00:	f7ff fece 	bl	8011ca0 <xTaskResumeAll>

		return uxTask;
 8011f04:	697b      	ldr	r3, [r7, #20]
	}
 8011f06:	4618      	mov	r0, r3
 8011f08:	3718      	adds	r7, #24
 8011f0a:	46bd      	mov	sp, r7
 8011f0c:	bd80      	pop	{r7, pc}
 8011f0e:	bf00      	nop
 8011f10:	20002258 	.word	0x20002258
 8011f14:	20001d88 	.word	0x20001d88
 8011f18:	20002210 	.word	0x20002210
 8011f1c:	20002214 	.word	0x20002214
 8011f20:	2000222c 	.word	0x2000222c
 8011f24:	20002244 	.word	0x20002244

08011f28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011f28:	b580      	push	{r7, lr}
 8011f2a:	b086      	sub	sp, #24
 8011f2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011f2e:	2300      	movs	r3, #0
 8011f30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011f32:	4b4f      	ldr	r3, [pc, #316]	@ (8012070 <xTaskIncrementTick+0x148>)
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	f040 8090 	bne.w	801205c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011f3c:	4b4d      	ldr	r3, [pc, #308]	@ (8012074 <xTaskIncrementTick+0x14c>)
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	3301      	adds	r3, #1
 8011f42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011f44:	4a4b      	ldr	r2, [pc, #300]	@ (8012074 <xTaskIncrementTick+0x14c>)
 8011f46:	693b      	ldr	r3, [r7, #16]
 8011f48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011f4a:	693b      	ldr	r3, [r7, #16]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d121      	bne.n	8011f94 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8011f50:	4b49      	ldr	r3, [pc, #292]	@ (8012078 <xTaskIncrementTick+0x150>)
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d00b      	beq.n	8011f72 <xTaskIncrementTick+0x4a>
	__asm volatile
 8011f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f5e:	f383 8811 	msr	BASEPRI, r3
 8011f62:	f3bf 8f6f 	isb	sy
 8011f66:	f3bf 8f4f 	dsb	sy
 8011f6a:	603b      	str	r3, [r7, #0]
}
 8011f6c:	bf00      	nop
 8011f6e:	bf00      	nop
 8011f70:	e7fd      	b.n	8011f6e <xTaskIncrementTick+0x46>
 8011f72:	4b41      	ldr	r3, [pc, #260]	@ (8012078 <xTaskIncrementTick+0x150>)
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	60fb      	str	r3, [r7, #12]
 8011f78:	4b40      	ldr	r3, [pc, #256]	@ (801207c <xTaskIncrementTick+0x154>)
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	4a3e      	ldr	r2, [pc, #248]	@ (8012078 <xTaskIncrementTick+0x150>)
 8011f7e:	6013      	str	r3, [r2, #0]
 8011f80:	4a3e      	ldr	r2, [pc, #248]	@ (801207c <xTaskIncrementTick+0x154>)
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	6013      	str	r3, [r2, #0]
 8011f86:	4b3e      	ldr	r3, [pc, #248]	@ (8012080 <xTaskIncrementTick+0x158>)
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	3301      	adds	r3, #1
 8011f8c:	4a3c      	ldr	r2, [pc, #240]	@ (8012080 <xTaskIncrementTick+0x158>)
 8011f8e:	6013      	str	r3, [r2, #0]
 8011f90:	f000 fbb2 	bl	80126f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011f94:	4b3b      	ldr	r3, [pc, #236]	@ (8012084 <xTaskIncrementTick+0x15c>)
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	693a      	ldr	r2, [r7, #16]
 8011f9a:	429a      	cmp	r2, r3
 8011f9c:	d349      	bcc.n	8012032 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011f9e:	4b36      	ldr	r3, [pc, #216]	@ (8012078 <xTaskIncrementTick+0x150>)
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d104      	bne.n	8011fb2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011fa8:	4b36      	ldr	r3, [pc, #216]	@ (8012084 <xTaskIncrementTick+0x15c>)
 8011faa:	f04f 32ff 	mov.w	r2, #4294967295
 8011fae:	601a      	str	r2, [r3, #0]
					break;
 8011fb0:	e03f      	b.n	8012032 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011fb2:	4b31      	ldr	r3, [pc, #196]	@ (8012078 <xTaskIncrementTick+0x150>)
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	68db      	ldr	r3, [r3, #12]
 8011fb8:	68db      	ldr	r3, [r3, #12]
 8011fba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011fbc:	68bb      	ldr	r3, [r7, #8]
 8011fbe:	685b      	ldr	r3, [r3, #4]
 8011fc0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011fc2:	693a      	ldr	r2, [r7, #16]
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	429a      	cmp	r2, r3
 8011fc8:	d203      	bcs.n	8011fd2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011fca:	4a2e      	ldr	r2, [pc, #184]	@ (8012084 <xTaskIncrementTick+0x15c>)
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011fd0:	e02f      	b.n	8012032 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011fd2:	68bb      	ldr	r3, [r7, #8]
 8011fd4:	3304      	adds	r3, #4
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	f7fe fb54 	bl	8010684 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011fdc:	68bb      	ldr	r3, [r7, #8]
 8011fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d004      	beq.n	8011fee <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011fe4:	68bb      	ldr	r3, [r7, #8]
 8011fe6:	3318      	adds	r3, #24
 8011fe8:	4618      	mov	r0, r3
 8011fea:	f7fe fb4b 	bl	8010684 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011fee:	68bb      	ldr	r3, [r7, #8]
 8011ff0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011ff2:	4b25      	ldr	r3, [pc, #148]	@ (8012088 <xTaskIncrementTick+0x160>)
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	429a      	cmp	r2, r3
 8011ff8:	d903      	bls.n	8012002 <xTaskIncrementTick+0xda>
 8011ffa:	68bb      	ldr	r3, [r7, #8]
 8011ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ffe:	4a22      	ldr	r2, [pc, #136]	@ (8012088 <xTaskIncrementTick+0x160>)
 8012000:	6013      	str	r3, [r2, #0]
 8012002:	68bb      	ldr	r3, [r7, #8]
 8012004:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012006:	4613      	mov	r3, r2
 8012008:	009b      	lsls	r3, r3, #2
 801200a:	4413      	add	r3, r2
 801200c:	009b      	lsls	r3, r3, #2
 801200e:	4a1f      	ldr	r2, [pc, #124]	@ (801208c <xTaskIncrementTick+0x164>)
 8012010:	441a      	add	r2, r3
 8012012:	68bb      	ldr	r3, [r7, #8]
 8012014:	3304      	adds	r3, #4
 8012016:	4619      	mov	r1, r3
 8012018:	4610      	mov	r0, r2
 801201a:	f7fe fad8 	bl	80105ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801201e:	68bb      	ldr	r3, [r7, #8]
 8012020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012022:	4b1b      	ldr	r3, [pc, #108]	@ (8012090 <xTaskIncrementTick+0x168>)
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012028:	429a      	cmp	r2, r3
 801202a:	d3b8      	bcc.n	8011f9e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 801202c:	2301      	movs	r3, #1
 801202e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012030:	e7b5      	b.n	8011f9e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012032:	4b17      	ldr	r3, [pc, #92]	@ (8012090 <xTaskIncrementTick+0x168>)
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012038:	4914      	ldr	r1, [pc, #80]	@ (801208c <xTaskIncrementTick+0x164>)
 801203a:	4613      	mov	r3, r2
 801203c:	009b      	lsls	r3, r3, #2
 801203e:	4413      	add	r3, r2
 8012040:	009b      	lsls	r3, r3, #2
 8012042:	440b      	add	r3, r1
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	2b01      	cmp	r3, #1
 8012048:	d901      	bls.n	801204e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 801204a:	2301      	movs	r3, #1
 801204c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801204e:	4b11      	ldr	r3, [pc, #68]	@ (8012094 <xTaskIncrementTick+0x16c>)
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	2b00      	cmp	r3, #0
 8012054:	d007      	beq.n	8012066 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8012056:	2301      	movs	r3, #1
 8012058:	617b      	str	r3, [r7, #20]
 801205a:	e004      	b.n	8012066 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801205c:	4b0e      	ldr	r3, [pc, #56]	@ (8012098 <xTaskIncrementTick+0x170>)
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	3301      	adds	r3, #1
 8012062:	4a0d      	ldr	r2, [pc, #52]	@ (8012098 <xTaskIncrementTick+0x170>)
 8012064:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8012066:	697b      	ldr	r3, [r7, #20]
}
 8012068:	4618      	mov	r0, r3
 801206a:	3718      	adds	r7, #24
 801206c:	46bd      	mov	sp, r7
 801206e:	bd80      	pop	{r7, pc}
 8012070:	20002280 	.word	0x20002280
 8012074:	2000225c 	.word	0x2000225c
 8012078:	20002210 	.word	0x20002210
 801207c:	20002214 	.word	0x20002214
 8012080:	20002270 	.word	0x20002270
 8012084:	20002278 	.word	0x20002278
 8012088:	20002260 	.word	0x20002260
 801208c:	20001d88 	.word	0x20001d88
 8012090:	20001d84 	.word	0x20001d84
 8012094:	2000226c 	.word	0x2000226c
 8012098:	20002268 	.word	0x20002268

0801209c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801209c:	b480      	push	{r7}
 801209e:	b085      	sub	sp, #20
 80120a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80120a2:	4b2a      	ldr	r3, [pc, #168]	@ (801214c <vTaskSwitchContext+0xb0>)
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d003      	beq.n	80120b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80120aa:	4b29      	ldr	r3, [pc, #164]	@ (8012150 <vTaskSwitchContext+0xb4>)
 80120ac:	2201      	movs	r2, #1
 80120ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80120b0:	e047      	b.n	8012142 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80120b2:	4b27      	ldr	r3, [pc, #156]	@ (8012150 <vTaskSwitchContext+0xb4>)
 80120b4:	2200      	movs	r2, #0
 80120b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80120b8:	4b26      	ldr	r3, [pc, #152]	@ (8012154 <vTaskSwitchContext+0xb8>)
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	60fb      	str	r3, [r7, #12]
 80120be:	e011      	b.n	80120e4 <vTaskSwitchContext+0x48>
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d10b      	bne.n	80120de <vTaskSwitchContext+0x42>
	__asm volatile
 80120c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120ca:	f383 8811 	msr	BASEPRI, r3
 80120ce:	f3bf 8f6f 	isb	sy
 80120d2:	f3bf 8f4f 	dsb	sy
 80120d6:	607b      	str	r3, [r7, #4]
}
 80120d8:	bf00      	nop
 80120da:	bf00      	nop
 80120dc:	e7fd      	b.n	80120da <vTaskSwitchContext+0x3e>
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	3b01      	subs	r3, #1
 80120e2:	60fb      	str	r3, [r7, #12]
 80120e4:	491c      	ldr	r1, [pc, #112]	@ (8012158 <vTaskSwitchContext+0xbc>)
 80120e6:	68fa      	ldr	r2, [r7, #12]
 80120e8:	4613      	mov	r3, r2
 80120ea:	009b      	lsls	r3, r3, #2
 80120ec:	4413      	add	r3, r2
 80120ee:	009b      	lsls	r3, r3, #2
 80120f0:	440b      	add	r3, r1
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d0e3      	beq.n	80120c0 <vTaskSwitchContext+0x24>
 80120f8:	68fa      	ldr	r2, [r7, #12]
 80120fa:	4613      	mov	r3, r2
 80120fc:	009b      	lsls	r3, r3, #2
 80120fe:	4413      	add	r3, r2
 8012100:	009b      	lsls	r3, r3, #2
 8012102:	4a15      	ldr	r2, [pc, #84]	@ (8012158 <vTaskSwitchContext+0xbc>)
 8012104:	4413      	add	r3, r2
 8012106:	60bb      	str	r3, [r7, #8]
 8012108:	68bb      	ldr	r3, [r7, #8]
 801210a:	685b      	ldr	r3, [r3, #4]
 801210c:	685a      	ldr	r2, [r3, #4]
 801210e:	68bb      	ldr	r3, [r7, #8]
 8012110:	605a      	str	r2, [r3, #4]
 8012112:	68bb      	ldr	r3, [r7, #8]
 8012114:	685a      	ldr	r2, [r3, #4]
 8012116:	68bb      	ldr	r3, [r7, #8]
 8012118:	3308      	adds	r3, #8
 801211a:	429a      	cmp	r2, r3
 801211c:	d104      	bne.n	8012128 <vTaskSwitchContext+0x8c>
 801211e:	68bb      	ldr	r3, [r7, #8]
 8012120:	685b      	ldr	r3, [r3, #4]
 8012122:	685a      	ldr	r2, [r3, #4]
 8012124:	68bb      	ldr	r3, [r7, #8]
 8012126:	605a      	str	r2, [r3, #4]
 8012128:	68bb      	ldr	r3, [r7, #8]
 801212a:	685b      	ldr	r3, [r3, #4]
 801212c:	68db      	ldr	r3, [r3, #12]
 801212e:	4a0b      	ldr	r2, [pc, #44]	@ (801215c <vTaskSwitchContext+0xc0>)
 8012130:	6013      	str	r3, [r2, #0]
 8012132:	4a08      	ldr	r2, [pc, #32]	@ (8012154 <vTaskSwitchContext+0xb8>)
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012138:	4b08      	ldr	r3, [pc, #32]	@ (801215c <vTaskSwitchContext+0xc0>)
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	3354      	adds	r3, #84	@ 0x54
 801213e:	4a08      	ldr	r2, [pc, #32]	@ (8012160 <vTaskSwitchContext+0xc4>)
 8012140:	6013      	str	r3, [r2, #0]
}
 8012142:	bf00      	nop
 8012144:	3714      	adds	r7, #20
 8012146:	46bd      	mov	sp, r7
 8012148:	bc80      	pop	{r7}
 801214a:	4770      	bx	lr
 801214c:	20002280 	.word	0x20002280
 8012150:	2000226c 	.word	0x2000226c
 8012154:	20002260 	.word	0x20002260
 8012158:	20001d88 	.word	0x20001d88
 801215c:	20001d84 	.word	0x20001d84
 8012160:	20000628 	.word	0x20000628

08012164 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012164:	b580      	push	{r7, lr}
 8012166:	b084      	sub	sp, #16
 8012168:	af00      	add	r7, sp, #0
 801216a:	6078      	str	r0, [r7, #4]
 801216c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	2b00      	cmp	r3, #0
 8012172:	d10b      	bne.n	801218c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8012174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012178:	f383 8811 	msr	BASEPRI, r3
 801217c:	f3bf 8f6f 	isb	sy
 8012180:	f3bf 8f4f 	dsb	sy
 8012184:	60fb      	str	r3, [r7, #12]
}
 8012186:	bf00      	nop
 8012188:	bf00      	nop
 801218a:	e7fd      	b.n	8012188 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801218c:	4b07      	ldr	r3, [pc, #28]	@ (80121ac <vTaskPlaceOnEventList+0x48>)
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	3318      	adds	r3, #24
 8012192:	4619      	mov	r1, r3
 8012194:	6878      	ldr	r0, [r7, #4]
 8012196:	f7fe fa3d 	bl	8010614 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801219a:	2101      	movs	r1, #1
 801219c:	6838      	ldr	r0, [r7, #0]
 801219e:	f000 fe6f 	bl	8012e80 <prvAddCurrentTaskToDelayedList>
}
 80121a2:	bf00      	nop
 80121a4:	3710      	adds	r7, #16
 80121a6:	46bd      	mov	sp, r7
 80121a8:	bd80      	pop	{r7, pc}
 80121aa:	bf00      	nop
 80121ac:	20001d84 	.word	0x20001d84

080121b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b086      	sub	sp, #24
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	60f8      	str	r0, [r7, #12]
 80121b8:	60b9      	str	r1, [r7, #8]
 80121ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d10b      	bne.n	80121da <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80121c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80121c6:	f383 8811 	msr	BASEPRI, r3
 80121ca:	f3bf 8f6f 	isb	sy
 80121ce:	f3bf 8f4f 	dsb	sy
 80121d2:	617b      	str	r3, [r7, #20]
}
 80121d4:	bf00      	nop
 80121d6:	bf00      	nop
 80121d8:	e7fd      	b.n	80121d6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80121da:	4b0a      	ldr	r3, [pc, #40]	@ (8012204 <vTaskPlaceOnEventListRestricted+0x54>)
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	3318      	adds	r3, #24
 80121e0:	4619      	mov	r1, r3
 80121e2:	68f8      	ldr	r0, [r7, #12]
 80121e4:	f7fe f9f3 	bl	80105ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d002      	beq.n	80121f4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80121ee:	f04f 33ff 	mov.w	r3, #4294967295
 80121f2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80121f4:	6879      	ldr	r1, [r7, #4]
 80121f6:	68b8      	ldr	r0, [r7, #8]
 80121f8:	f000 fe42 	bl	8012e80 <prvAddCurrentTaskToDelayedList>
	}
 80121fc:	bf00      	nop
 80121fe:	3718      	adds	r7, #24
 8012200:	46bd      	mov	sp, r7
 8012202:	bd80      	pop	{r7, pc}
 8012204:	20001d84 	.word	0x20001d84

08012208 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012208:	b580      	push	{r7, lr}
 801220a:	b086      	sub	sp, #24
 801220c:	af00      	add	r7, sp, #0
 801220e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	68db      	ldr	r3, [r3, #12]
 8012214:	68db      	ldr	r3, [r3, #12]
 8012216:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012218:	693b      	ldr	r3, [r7, #16]
 801221a:	2b00      	cmp	r3, #0
 801221c:	d10b      	bne.n	8012236 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 801221e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012222:	f383 8811 	msr	BASEPRI, r3
 8012226:	f3bf 8f6f 	isb	sy
 801222a:	f3bf 8f4f 	dsb	sy
 801222e:	60fb      	str	r3, [r7, #12]
}
 8012230:	bf00      	nop
 8012232:	bf00      	nop
 8012234:	e7fd      	b.n	8012232 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012236:	693b      	ldr	r3, [r7, #16]
 8012238:	3318      	adds	r3, #24
 801223a:	4618      	mov	r0, r3
 801223c:	f7fe fa22 	bl	8010684 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012240:	4b1d      	ldr	r3, [pc, #116]	@ (80122b8 <xTaskRemoveFromEventList+0xb0>)
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	2b00      	cmp	r3, #0
 8012246:	d11d      	bne.n	8012284 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012248:	693b      	ldr	r3, [r7, #16]
 801224a:	3304      	adds	r3, #4
 801224c:	4618      	mov	r0, r3
 801224e:	f7fe fa19 	bl	8010684 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012252:	693b      	ldr	r3, [r7, #16]
 8012254:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012256:	4b19      	ldr	r3, [pc, #100]	@ (80122bc <xTaskRemoveFromEventList+0xb4>)
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	429a      	cmp	r2, r3
 801225c:	d903      	bls.n	8012266 <xTaskRemoveFromEventList+0x5e>
 801225e:	693b      	ldr	r3, [r7, #16]
 8012260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012262:	4a16      	ldr	r2, [pc, #88]	@ (80122bc <xTaskRemoveFromEventList+0xb4>)
 8012264:	6013      	str	r3, [r2, #0]
 8012266:	693b      	ldr	r3, [r7, #16]
 8012268:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801226a:	4613      	mov	r3, r2
 801226c:	009b      	lsls	r3, r3, #2
 801226e:	4413      	add	r3, r2
 8012270:	009b      	lsls	r3, r3, #2
 8012272:	4a13      	ldr	r2, [pc, #76]	@ (80122c0 <xTaskRemoveFromEventList+0xb8>)
 8012274:	441a      	add	r2, r3
 8012276:	693b      	ldr	r3, [r7, #16]
 8012278:	3304      	adds	r3, #4
 801227a:	4619      	mov	r1, r3
 801227c:	4610      	mov	r0, r2
 801227e:	f7fe f9a6 	bl	80105ce <vListInsertEnd>
 8012282:	e005      	b.n	8012290 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012284:	693b      	ldr	r3, [r7, #16]
 8012286:	3318      	adds	r3, #24
 8012288:	4619      	mov	r1, r3
 801228a:	480e      	ldr	r0, [pc, #56]	@ (80122c4 <xTaskRemoveFromEventList+0xbc>)
 801228c:	f7fe f99f 	bl	80105ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012290:	693b      	ldr	r3, [r7, #16]
 8012292:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012294:	4b0c      	ldr	r3, [pc, #48]	@ (80122c8 <xTaskRemoveFromEventList+0xc0>)
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801229a:	429a      	cmp	r2, r3
 801229c:	d905      	bls.n	80122aa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801229e:	2301      	movs	r3, #1
 80122a0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80122a2:	4b0a      	ldr	r3, [pc, #40]	@ (80122cc <xTaskRemoveFromEventList+0xc4>)
 80122a4:	2201      	movs	r2, #1
 80122a6:	601a      	str	r2, [r3, #0]
 80122a8:	e001      	b.n	80122ae <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80122aa:	2300      	movs	r3, #0
 80122ac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80122ae:	697b      	ldr	r3, [r7, #20]
}
 80122b0:	4618      	mov	r0, r3
 80122b2:	3718      	adds	r7, #24
 80122b4:	46bd      	mov	sp, r7
 80122b6:	bd80      	pop	{r7, pc}
 80122b8:	20002280 	.word	0x20002280
 80122bc:	20002260 	.word	0x20002260
 80122c0:	20001d88 	.word	0x20001d88
 80122c4:	20002218 	.word	0x20002218
 80122c8:	20001d84 	.word	0x20001d84
 80122cc:	2000226c 	.word	0x2000226c

080122d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80122d0:	b480      	push	{r7}
 80122d2:	b083      	sub	sp, #12
 80122d4:	af00      	add	r7, sp, #0
 80122d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80122d8:	4b06      	ldr	r3, [pc, #24]	@ (80122f4 <vTaskInternalSetTimeOutState+0x24>)
 80122da:	681a      	ldr	r2, [r3, #0]
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80122e0:	4b05      	ldr	r3, [pc, #20]	@ (80122f8 <vTaskInternalSetTimeOutState+0x28>)
 80122e2:	681a      	ldr	r2, [r3, #0]
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	605a      	str	r2, [r3, #4]
}
 80122e8:	bf00      	nop
 80122ea:	370c      	adds	r7, #12
 80122ec:	46bd      	mov	sp, r7
 80122ee:	bc80      	pop	{r7}
 80122f0:	4770      	bx	lr
 80122f2:	bf00      	nop
 80122f4:	20002270 	.word	0x20002270
 80122f8:	2000225c 	.word	0x2000225c

080122fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80122fc:	b580      	push	{r7, lr}
 80122fe:	b088      	sub	sp, #32
 8012300:	af00      	add	r7, sp, #0
 8012302:	6078      	str	r0, [r7, #4]
 8012304:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	2b00      	cmp	r3, #0
 801230a:	d10b      	bne.n	8012324 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 801230c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012310:	f383 8811 	msr	BASEPRI, r3
 8012314:	f3bf 8f6f 	isb	sy
 8012318:	f3bf 8f4f 	dsb	sy
 801231c:	613b      	str	r3, [r7, #16]
}
 801231e:	bf00      	nop
 8012320:	bf00      	nop
 8012322:	e7fd      	b.n	8012320 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8012324:	683b      	ldr	r3, [r7, #0]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d10b      	bne.n	8012342 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 801232a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801232e:	f383 8811 	msr	BASEPRI, r3
 8012332:	f3bf 8f6f 	isb	sy
 8012336:	f3bf 8f4f 	dsb	sy
 801233a:	60fb      	str	r3, [r7, #12]
}
 801233c:	bf00      	nop
 801233e:	bf00      	nop
 8012340:	e7fd      	b.n	801233e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8012342:	f001 fafb 	bl	801393c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012346:	4b1d      	ldr	r3, [pc, #116]	@ (80123bc <xTaskCheckForTimeOut+0xc0>)
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	685b      	ldr	r3, [r3, #4]
 8012350:	69ba      	ldr	r2, [r7, #24]
 8012352:	1ad3      	subs	r3, r2, r3
 8012354:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012356:	683b      	ldr	r3, [r7, #0]
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801235e:	d102      	bne.n	8012366 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012360:	2300      	movs	r3, #0
 8012362:	61fb      	str	r3, [r7, #28]
 8012364:	e023      	b.n	80123ae <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	681a      	ldr	r2, [r3, #0]
 801236a:	4b15      	ldr	r3, [pc, #84]	@ (80123c0 <xTaskCheckForTimeOut+0xc4>)
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	429a      	cmp	r2, r3
 8012370:	d007      	beq.n	8012382 <xTaskCheckForTimeOut+0x86>
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	685b      	ldr	r3, [r3, #4]
 8012376:	69ba      	ldr	r2, [r7, #24]
 8012378:	429a      	cmp	r2, r3
 801237a:	d302      	bcc.n	8012382 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801237c:	2301      	movs	r3, #1
 801237e:	61fb      	str	r3, [r7, #28]
 8012380:	e015      	b.n	80123ae <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012382:	683b      	ldr	r3, [r7, #0]
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	697a      	ldr	r2, [r7, #20]
 8012388:	429a      	cmp	r2, r3
 801238a:	d20b      	bcs.n	80123a4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801238c:	683b      	ldr	r3, [r7, #0]
 801238e:	681a      	ldr	r2, [r3, #0]
 8012390:	697b      	ldr	r3, [r7, #20]
 8012392:	1ad2      	subs	r2, r2, r3
 8012394:	683b      	ldr	r3, [r7, #0]
 8012396:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012398:	6878      	ldr	r0, [r7, #4]
 801239a:	f7ff ff99 	bl	80122d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801239e:	2300      	movs	r3, #0
 80123a0:	61fb      	str	r3, [r7, #28]
 80123a2:	e004      	b.n	80123ae <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80123a4:	683b      	ldr	r3, [r7, #0]
 80123a6:	2200      	movs	r2, #0
 80123a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80123aa:	2301      	movs	r3, #1
 80123ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80123ae:	f001 faf5 	bl	801399c <vPortExitCritical>

	return xReturn;
 80123b2:	69fb      	ldr	r3, [r7, #28]
}
 80123b4:	4618      	mov	r0, r3
 80123b6:	3720      	adds	r7, #32
 80123b8:	46bd      	mov	sp, r7
 80123ba:	bd80      	pop	{r7, pc}
 80123bc:	2000225c 	.word	0x2000225c
 80123c0:	20002270 	.word	0x20002270

080123c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80123c4:	b480      	push	{r7}
 80123c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80123c8:	4b03      	ldr	r3, [pc, #12]	@ (80123d8 <vTaskMissedYield+0x14>)
 80123ca:	2201      	movs	r2, #1
 80123cc:	601a      	str	r2, [r3, #0]
}
 80123ce:	bf00      	nop
 80123d0:	46bd      	mov	sp, r7
 80123d2:	bc80      	pop	{r7}
 80123d4:	4770      	bx	lr
 80123d6:	bf00      	nop
 80123d8:	2000226c 	.word	0x2000226c

080123dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80123dc:	b580      	push	{r7, lr}
 80123de:	b082      	sub	sp, #8
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80123e4:	f000 f852 	bl	801248c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80123e8:	4b06      	ldr	r3, [pc, #24]	@ (8012404 <prvIdleTask+0x28>)
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	2b01      	cmp	r3, #1
 80123ee:	d9f9      	bls.n	80123e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80123f0:	4b05      	ldr	r3, [pc, #20]	@ (8012408 <prvIdleTask+0x2c>)
 80123f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80123f6:	601a      	str	r2, [r3, #0]
 80123f8:	f3bf 8f4f 	dsb	sy
 80123fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012400:	e7f0      	b.n	80123e4 <prvIdleTask+0x8>
 8012402:	bf00      	nop
 8012404:	20001d88 	.word	0x20001d88
 8012408:	e000ed04 	.word	0xe000ed04

0801240c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801240c:	b580      	push	{r7, lr}
 801240e:	b082      	sub	sp, #8
 8012410:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012412:	2300      	movs	r3, #0
 8012414:	607b      	str	r3, [r7, #4]
 8012416:	e00c      	b.n	8012432 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012418:	687a      	ldr	r2, [r7, #4]
 801241a:	4613      	mov	r3, r2
 801241c:	009b      	lsls	r3, r3, #2
 801241e:	4413      	add	r3, r2
 8012420:	009b      	lsls	r3, r3, #2
 8012422:	4a12      	ldr	r2, [pc, #72]	@ (801246c <prvInitialiseTaskLists+0x60>)
 8012424:	4413      	add	r3, r2
 8012426:	4618      	mov	r0, r3
 8012428:	f7fe f8a6 	bl	8010578 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	3301      	adds	r3, #1
 8012430:	607b      	str	r3, [r7, #4]
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	2b37      	cmp	r3, #55	@ 0x37
 8012436:	d9ef      	bls.n	8012418 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012438:	480d      	ldr	r0, [pc, #52]	@ (8012470 <prvInitialiseTaskLists+0x64>)
 801243a:	f7fe f89d 	bl	8010578 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801243e:	480d      	ldr	r0, [pc, #52]	@ (8012474 <prvInitialiseTaskLists+0x68>)
 8012440:	f7fe f89a 	bl	8010578 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012444:	480c      	ldr	r0, [pc, #48]	@ (8012478 <prvInitialiseTaskLists+0x6c>)
 8012446:	f7fe f897 	bl	8010578 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801244a:	480c      	ldr	r0, [pc, #48]	@ (801247c <prvInitialiseTaskLists+0x70>)
 801244c:	f7fe f894 	bl	8010578 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012450:	480b      	ldr	r0, [pc, #44]	@ (8012480 <prvInitialiseTaskLists+0x74>)
 8012452:	f7fe f891 	bl	8010578 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012456:	4b0b      	ldr	r3, [pc, #44]	@ (8012484 <prvInitialiseTaskLists+0x78>)
 8012458:	4a05      	ldr	r2, [pc, #20]	@ (8012470 <prvInitialiseTaskLists+0x64>)
 801245a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801245c:	4b0a      	ldr	r3, [pc, #40]	@ (8012488 <prvInitialiseTaskLists+0x7c>)
 801245e:	4a05      	ldr	r2, [pc, #20]	@ (8012474 <prvInitialiseTaskLists+0x68>)
 8012460:	601a      	str	r2, [r3, #0]
}
 8012462:	bf00      	nop
 8012464:	3708      	adds	r7, #8
 8012466:	46bd      	mov	sp, r7
 8012468:	bd80      	pop	{r7, pc}
 801246a:	bf00      	nop
 801246c:	20001d88 	.word	0x20001d88
 8012470:	200021e8 	.word	0x200021e8
 8012474:	200021fc 	.word	0x200021fc
 8012478:	20002218 	.word	0x20002218
 801247c:	2000222c 	.word	0x2000222c
 8012480:	20002244 	.word	0x20002244
 8012484:	20002210 	.word	0x20002210
 8012488:	20002214 	.word	0x20002214

0801248c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801248c:	b580      	push	{r7, lr}
 801248e:	b082      	sub	sp, #8
 8012490:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012492:	e019      	b.n	80124c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012494:	f001 fa52 	bl	801393c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012498:	4b10      	ldr	r3, [pc, #64]	@ (80124dc <prvCheckTasksWaitingTermination+0x50>)
 801249a:	68db      	ldr	r3, [r3, #12]
 801249c:	68db      	ldr	r3, [r3, #12]
 801249e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	3304      	adds	r3, #4
 80124a4:	4618      	mov	r0, r3
 80124a6:	f7fe f8ed 	bl	8010684 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80124aa:	4b0d      	ldr	r3, [pc, #52]	@ (80124e0 <prvCheckTasksWaitingTermination+0x54>)
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	3b01      	subs	r3, #1
 80124b0:	4a0b      	ldr	r2, [pc, #44]	@ (80124e0 <prvCheckTasksWaitingTermination+0x54>)
 80124b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80124b4:	4b0b      	ldr	r3, [pc, #44]	@ (80124e4 <prvCheckTasksWaitingTermination+0x58>)
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	3b01      	subs	r3, #1
 80124ba:	4a0a      	ldr	r2, [pc, #40]	@ (80124e4 <prvCheckTasksWaitingTermination+0x58>)
 80124bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80124be:	f001 fa6d 	bl	801399c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80124c2:	6878      	ldr	r0, [r7, #4]
 80124c4:	f000 f8e3 	bl	801268e <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80124c8:	4b06      	ldr	r3, [pc, #24]	@ (80124e4 <prvCheckTasksWaitingTermination+0x58>)
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d1e1      	bne.n	8012494 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80124d0:	bf00      	nop
 80124d2:	bf00      	nop
 80124d4:	3708      	adds	r7, #8
 80124d6:	46bd      	mov	sp, r7
 80124d8:	bd80      	pop	{r7, pc}
 80124da:	bf00      	nop
 80124dc:	2000222c 	.word	0x2000222c
 80124e0:	20002258 	.word	0x20002258
 80124e4:	20002240 	.word	0x20002240

080124e8 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 80124e8:	b580      	push	{r7, lr}
 80124ea:	b086      	sub	sp, #24
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	60f8      	str	r0, [r7, #12]
 80124f0:	60b9      	str	r1, [r7, #8]
 80124f2:	607a      	str	r2, [r7, #4]
 80124f4:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d102      	bne.n	8012502 <vTaskGetInfo+0x1a>
 80124fc:	4b2c      	ldr	r3, [pc, #176]	@ (80125b0 <vTaskGetInfo+0xc8>)
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	e000      	b.n	8012504 <vTaskGetInfo+0x1c>
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8012506:	68bb      	ldr	r3, [r7, #8]
 8012508:	697a      	ldr	r2, [r7, #20]
 801250a:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 801250c:	697b      	ldr	r3, [r7, #20]
 801250e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8012512:	68bb      	ldr	r3, [r7, #8]
 8012514:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8012516:	697b      	ldr	r3, [r7, #20]
 8012518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801251a:	68bb      	ldr	r3, [r7, #8]
 801251c:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 801251e:	697b      	ldr	r3, [r7, #20]
 8012520:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012522:	68bb      	ldr	r3, [r7, #8]
 8012524:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8012526:	697b      	ldr	r3, [r7, #20]
 8012528:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801252a:	68bb      	ldr	r3, [r7, #8]
 801252c:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 801252e:	697b      	ldr	r3, [r7, #20]
 8012530:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012532:	68bb      	ldr	r3, [r7, #8]
 8012534:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 8012536:	68bb      	ldr	r3, [r7, #8]
 8012538:	2200      	movs	r2, #0
 801253a:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 801253c:	78fb      	ldrb	r3, [r7, #3]
 801253e:	2b05      	cmp	r3, #5
 8012540:	d01a      	beq.n	8012578 <vTaskGetInfo+0x90>
		{
			if( pxTCB == pxCurrentTCB )
 8012542:	4b1b      	ldr	r3, [pc, #108]	@ (80125b0 <vTaskGetInfo+0xc8>)
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	697a      	ldr	r2, [r7, #20]
 8012548:	429a      	cmp	r2, r3
 801254a:	d103      	bne.n	8012554 <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 801254c:	68bb      	ldr	r3, [r7, #8]
 801254e:	2200      	movs	r2, #0
 8012550:	731a      	strb	r2, [r3, #12]
 8012552:	e018      	b.n	8012586 <vTaskGetInfo+0x9e>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 8012554:	68bb      	ldr	r3, [r7, #8]
 8012556:	78fa      	ldrb	r2, [r7, #3]
 8012558:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 801255a:	78fb      	ldrb	r3, [r7, #3]
 801255c:	2b03      	cmp	r3, #3
 801255e:	d112      	bne.n	8012586 <vTaskGetInfo+0x9e>
					{
						vTaskSuspendAll();
 8012560:	f7ff fb90 	bl	8011c84 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012564:	697b      	ldr	r3, [r7, #20]
 8012566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012568:	2b00      	cmp	r3, #0
 801256a:	d002      	beq.n	8012572 <vTaskGetInfo+0x8a>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 801256c:	68bb      	ldr	r3, [r7, #8]
 801256e:	2202      	movs	r2, #2
 8012570:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8012572:	f7ff fb95 	bl	8011ca0 <xTaskResumeAll>
 8012576:	e006      	b.n	8012586 <vTaskGetInfo+0x9e>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8012578:	6978      	ldr	r0, [r7, #20]
 801257a:	f7ff faab 	bl	8011ad4 <eTaskGetState>
 801257e:	4603      	mov	r3, r0
 8012580:	461a      	mov	r2, r3
 8012582:	68bb      	ldr	r3, [r7, #8]
 8012584:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d009      	beq.n	80125a0 <vTaskGetInfo+0xb8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 801258c:	697b      	ldr	r3, [r7, #20]
 801258e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012590:	4618      	mov	r0, r3
 8012592:	f000 f861 	bl	8012658 <prvTaskCheckFreeStackSpace>
 8012596:	4603      	mov	r3, r0
 8012598:	461a      	mov	r2, r3
 801259a:	68bb      	ldr	r3, [r7, #8]
 801259c:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 801259e:	e002      	b.n	80125a6 <vTaskGetInfo+0xbe>
			pxTaskStatus->usStackHighWaterMark = 0;
 80125a0:	68bb      	ldr	r3, [r7, #8]
 80125a2:	2200      	movs	r2, #0
 80125a4:	841a      	strh	r2, [r3, #32]
	}
 80125a6:	bf00      	nop
 80125a8:	3718      	adds	r7, #24
 80125aa:	46bd      	mov	sp, r7
 80125ac:	bd80      	pop	{r7, pc}
 80125ae:	bf00      	nop
 80125b0:	20001d84 	.word	0x20001d84

080125b4 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 80125b4:	b580      	push	{r7, lr}
 80125b6:	b08a      	sub	sp, #40	@ 0x28
 80125b8:	af00      	add	r7, sp, #0
 80125ba:	60f8      	str	r0, [r7, #12]
 80125bc:	60b9      	str	r1, [r7, #8]
 80125be:	4613      	mov	r3, r2
 80125c0:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 80125c2:	2300      	movs	r3, #0
 80125c4:	627b      	str	r3, [r7, #36]	@ 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80125c6:	68bb      	ldr	r3, [r7, #8]
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d03f      	beq.n	801264e <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80125ce:	68bb      	ldr	r3, [r7, #8]
 80125d0:	623b      	str	r3, [r7, #32]
 80125d2:	6a3b      	ldr	r3, [r7, #32]
 80125d4:	685b      	ldr	r3, [r3, #4]
 80125d6:	685a      	ldr	r2, [r3, #4]
 80125d8:	6a3b      	ldr	r3, [r7, #32]
 80125da:	605a      	str	r2, [r3, #4]
 80125dc:	6a3b      	ldr	r3, [r7, #32]
 80125de:	685a      	ldr	r2, [r3, #4]
 80125e0:	6a3b      	ldr	r3, [r7, #32]
 80125e2:	3308      	adds	r3, #8
 80125e4:	429a      	cmp	r2, r3
 80125e6:	d104      	bne.n	80125f2 <prvListTasksWithinSingleList+0x3e>
 80125e8:	6a3b      	ldr	r3, [r7, #32]
 80125ea:	685b      	ldr	r3, [r3, #4]
 80125ec:	685a      	ldr	r2, [r3, #4]
 80125ee:	6a3b      	ldr	r3, [r7, #32]
 80125f0:	605a      	str	r2, [r3, #4]
 80125f2:	6a3b      	ldr	r3, [r7, #32]
 80125f4:	685b      	ldr	r3, [r3, #4]
 80125f6:	68db      	ldr	r3, [r3, #12]
 80125f8:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80125fa:	68bb      	ldr	r3, [r7, #8]
 80125fc:	61bb      	str	r3, [r7, #24]
 80125fe:	69bb      	ldr	r3, [r7, #24]
 8012600:	685b      	ldr	r3, [r3, #4]
 8012602:	685a      	ldr	r2, [r3, #4]
 8012604:	69bb      	ldr	r3, [r7, #24]
 8012606:	605a      	str	r2, [r3, #4]
 8012608:	69bb      	ldr	r3, [r7, #24]
 801260a:	685a      	ldr	r2, [r3, #4]
 801260c:	69bb      	ldr	r3, [r7, #24]
 801260e:	3308      	adds	r3, #8
 8012610:	429a      	cmp	r2, r3
 8012612:	d104      	bne.n	801261e <prvListTasksWithinSingleList+0x6a>
 8012614:	69bb      	ldr	r3, [r7, #24]
 8012616:	685b      	ldr	r3, [r3, #4]
 8012618:	685a      	ldr	r2, [r3, #4]
 801261a:	69bb      	ldr	r3, [r7, #24]
 801261c:	605a      	str	r2, [r3, #4]
 801261e:	69bb      	ldr	r3, [r7, #24]
 8012620:	685b      	ldr	r3, [r3, #4]
 8012622:	68db      	ldr	r3, [r3, #12]
 8012624:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8012626:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012628:	4613      	mov	r3, r2
 801262a:	00db      	lsls	r3, r3, #3
 801262c:	4413      	add	r3, r2
 801262e:	009b      	lsls	r3, r3, #2
 8012630:	461a      	mov	r2, r3
 8012632:	68fb      	ldr	r3, [r7, #12]
 8012634:	1899      	adds	r1, r3, r2
 8012636:	79fb      	ldrb	r3, [r7, #7]
 8012638:	2201      	movs	r2, #1
 801263a:	6978      	ldr	r0, [r7, #20]
 801263c:	f7ff ff54 	bl	80124e8 <vTaskGetInfo>
				uxTask++;
 8012640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012642:	3301      	adds	r3, #1
 8012644:	627b      	str	r3, [r7, #36]	@ 0x24
			} while( pxNextTCB != pxFirstTCB );
 8012646:	697a      	ldr	r2, [r7, #20]
 8012648:	69fb      	ldr	r3, [r7, #28]
 801264a:	429a      	cmp	r2, r3
 801264c:	d1d5      	bne.n	80125fa <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 801264e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8012650:	4618      	mov	r0, r3
 8012652:	3728      	adds	r7, #40	@ 0x28
 8012654:	46bd      	mov	sp, r7
 8012656:	bd80      	pop	{r7, pc}

08012658 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8012658:	b480      	push	{r7}
 801265a:	b085      	sub	sp, #20
 801265c:	af00      	add	r7, sp, #0
 801265e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8012660:	2300      	movs	r3, #0
 8012662:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8012664:	e005      	b.n	8012672 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	3301      	adds	r3, #1
 801266a:	607b      	str	r3, [r7, #4]
			ulCount++;
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	3301      	adds	r3, #1
 8012670:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	781b      	ldrb	r3, [r3, #0]
 8012676:	2ba5      	cmp	r3, #165	@ 0xa5
 8012678:	d0f5      	beq.n	8012666 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	089b      	lsrs	r3, r3, #2
 801267e:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	b29b      	uxth	r3, r3
	}
 8012684:	4618      	mov	r0, r3
 8012686:	3714      	adds	r7, #20
 8012688:	46bd      	mov	sp, r7
 801268a:	bc80      	pop	{r7}
 801268c:	4770      	bx	lr

0801268e <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801268e:	b580      	push	{r7, lr}
 8012690:	b084      	sub	sp, #16
 8012692:	af00      	add	r7, sp, #0
 8012694:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	3354      	adds	r3, #84	@ 0x54
 801269a:	4618      	mov	r0, r3
 801269c:	f002 f8a8 	bl	80147f0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d108      	bne.n	80126bc <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80126ae:	4618      	mov	r0, r3
 80126b0:	f001 fb14 	bl	8013cdc <vPortFree>
				vPortFree( pxTCB );
 80126b4:	6878      	ldr	r0, [r7, #4]
 80126b6:	f001 fb11 	bl	8013cdc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80126ba:	e019      	b.n	80126f0 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80126c2:	2b01      	cmp	r3, #1
 80126c4:	d103      	bne.n	80126ce <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80126c6:	6878      	ldr	r0, [r7, #4]
 80126c8:	f001 fb08 	bl	8013cdc <vPortFree>
	}
 80126cc:	e010      	b.n	80126f0 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80126d4:	2b02      	cmp	r3, #2
 80126d6:	d00b      	beq.n	80126f0 <prvDeleteTCB+0x62>
	__asm volatile
 80126d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126dc:	f383 8811 	msr	BASEPRI, r3
 80126e0:	f3bf 8f6f 	isb	sy
 80126e4:	f3bf 8f4f 	dsb	sy
 80126e8:	60fb      	str	r3, [r7, #12]
}
 80126ea:	bf00      	nop
 80126ec:	bf00      	nop
 80126ee:	e7fd      	b.n	80126ec <prvDeleteTCB+0x5e>
	}
 80126f0:	bf00      	nop
 80126f2:	3710      	adds	r7, #16
 80126f4:	46bd      	mov	sp, r7
 80126f6:	bd80      	pop	{r7, pc}

080126f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80126f8:	b480      	push	{r7}
 80126fa:	b083      	sub	sp, #12
 80126fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80126fe:	4b0c      	ldr	r3, [pc, #48]	@ (8012730 <prvResetNextTaskUnblockTime+0x38>)
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d104      	bne.n	8012712 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012708:	4b0a      	ldr	r3, [pc, #40]	@ (8012734 <prvResetNextTaskUnblockTime+0x3c>)
 801270a:	f04f 32ff 	mov.w	r2, #4294967295
 801270e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012710:	e008      	b.n	8012724 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012712:	4b07      	ldr	r3, [pc, #28]	@ (8012730 <prvResetNextTaskUnblockTime+0x38>)
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	68db      	ldr	r3, [r3, #12]
 8012718:	68db      	ldr	r3, [r3, #12]
 801271a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	685b      	ldr	r3, [r3, #4]
 8012720:	4a04      	ldr	r2, [pc, #16]	@ (8012734 <prvResetNextTaskUnblockTime+0x3c>)
 8012722:	6013      	str	r3, [r2, #0]
}
 8012724:	bf00      	nop
 8012726:	370c      	adds	r7, #12
 8012728:	46bd      	mov	sp, r7
 801272a:	bc80      	pop	{r7}
 801272c:	4770      	bx	lr
 801272e:	bf00      	nop
 8012730:	20002210 	.word	0x20002210
 8012734:	20002278 	.word	0x20002278

08012738 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8012738:	b480      	push	{r7}
 801273a:	b083      	sub	sp, #12
 801273c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801273e:	4b04      	ldr	r3, [pc, #16]	@ (8012750 <xTaskGetCurrentTaskHandle+0x18>)
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	607b      	str	r3, [r7, #4]

		return xReturn;
 8012744:	687b      	ldr	r3, [r7, #4]
	}
 8012746:	4618      	mov	r0, r3
 8012748:	370c      	adds	r7, #12
 801274a:	46bd      	mov	sp, r7
 801274c:	bc80      	pop	{r7}
 801274e:	4770      	bx	lr
 8012750:	20001d84 	.word	0x20001d84

08012754 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012754:	b480      	push	{r7}
 8012756:	b083      	sub	sp, #12
 8012758:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801275a:	4b0b      	ldr	r3, [pc, #44]	@ (8012788 <xTaskGetSchedulerState+0x34>)
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	2b00      	cmp	r3, #0
 8012760:	d102      	bne.n	8012768 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012762:	2301      	movs	r3, #1
 8012764:	607b      	str	r3, [r7, #4]
 8012766:	e008      	b.n	801277a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012768:	4b08      	ldr	r3, [pc, #32]	@ (801278c <xTaskGetSchedulerState+0x38>)
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	2b00      	cmp	r3, #0
 801276e:	d102      	bne.n	8012776 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012770:	2302      	movs	r3, #2
 8012772:	607b      	str	r3, [r7, #4]
 8012774:	e001      	b.n	801277a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012776:	2300      	movs	r3, #0
 8012778:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801277a:	687b      	ldr	r3, [r7, #4]
	}
 801277c:	4618      	mov	r0, r3
 801277e:	370c      	adds	r7, #12
 8012780:	46bd      	mov	sp, r7
 8012782:	bc80      	pop	{r7}
 8012784:	4770      	bx	lr
 8012786:	bf00      	nop
 8012788:	20002264 	.word	0x20002264
 801278c:	20002280 	.word	0x20002280

08012790 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012790:	b580      	push	{r7, lr}
 8012792:	b084      	sub	sp, #16
 8012794:	af00      	add	r7, sp, #0
 8012796:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801279c:	2300      	movs	r3, #0
 801279e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d051      	beq.n	801284a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80127a6:	68bb      	ldr	r3, [r7, #8]
 80127a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80127aa:	4b2a      	ldr	r3, [pc, #168]	@ (8012854 <xTaskPriorityInherit+0xc4>)
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80127b0:	429a      	cmp	r2, r3
 80127b2:	d241      	bcs.n	8012838 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80127b4:	68bb      	ldr	r3, [r7, #8]
 80127b6:	699b      	ldr	r3, [r3, #24]
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	db06      	blt.n	80127ca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80127bc:	4b25      	ldr	r3, [pc, #148]	@ (8012854 <xTaskPriorityInherit+0xc4>)
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80127c2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80127c6:	68bb      	ldr	r3, [r7, #8]
 80127c8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80127ca:	68bb      	ldr	r3, [r7, #8]
 80127cc:	6959      	ldr	r1, [r3, #20]
 80127ce:	68bb      	ldr	r3, [r7, #8]
 80127d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80127d2:	4613      	mov	r3, r2
 80127d4:	009b      	lsls	r3, r3, #2
 80127d6:	4413      	add	r3, r2
 80127d8:	009b      	lsls	r3, r3, #2
 80127da:	4a1f      	ldr	r2, [pc, #124]	@ (8012858 <xTaskPriorityInherit+0xc8>)
 80127dc:	4413      	add	r3, r2
 80127de:	4299      	cmp	r1, r3
 80127e0:	d122      	bne.n	8012828 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80127e2:	68bb      	ldr	r3, [r7, #8]
 80127e4:	3304      	adds	r3, #4
 80127e6:	4618      	mov	r0, r3
 80127e8:	f7fd ff4c 	bl	8010684 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80127ec:	4b19      	ldr	r3, [pc, #100]	@ (8012854 <xTaskPriorityInherit+0xc4>)
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80127f2:	68bb      	ldr	r3, [r7, #8]
 80127f4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80127f6:	68bb      	ldr	r3, [r7, #8]
 80127f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80127fa:	4b18      	ldr	r3, [pc, #96]	@ (801285c <xTaskPriorityInherit+0xcc>)
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	429a      	cmp	r2, r3
 8012800:	d903      	bls.n	801280a <xTaskPriorityInherit+0x7a>
 8012802:	68bb      	ldr	r3, [r7, #8]
 8012804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012806:	4a15      	ldr	r2, [pc, #84]	@ (801285c <xTaskPriorityInherit+0xcc>)
 8012808:	6013      	str	r3, [r2, #0]
 801280a:	68bb      	ldr	r3, [r7, #8]
 801280c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801280e:	4613      	mov	r3, r2
 8012810:	009b      	lsls	r3, r3, #2
 8012812:	4413      	add	r3, r2
 8012814:	009b      	lsls	r3, r3, #2
 8012816:	4a10      	ldr	r2, [pc, #64]	@ (8012858 <xTaskPriorityInherit+0xc8>)
 8012818:	441a      	add	r2, r3
 801281a:	68bb      	ldr	r3, [r7, #8]
 801281c:	3304      	adds	r3, #4
 801281e:	4619      	mov	r1, r3
 8012820:	4610      	mov	r0, r2
 8012822:	f7fd fed4 	bl	80105ce <vListInsertEnd>
 8012826:	e004      	b.n	8012832 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012828:	4b0a      	ldr	r3, [pc, #40]	@ (8012854 <xTaskPriorityInherit+0xc4>)
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801282e:	68bb      	ldr	r3, [r7, #8]
 8012830:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8012832:	2301      	movs	r3, #1
 8012834:	60fb      	str	r3, [r7, #12]
 8012836:	e008      	b.n	801284a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012838:	68bb      	ldr	r3, [r7, #8]
 801283a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801283c:	4b05      	ldr	r3, [pc, #20]	@ (8012854 <xTaskPriorityInherit+0xc4>)
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012842:	429a      	cmp	r2, r3
 8012844:	d201      	bcs.n	801284a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8012846:	2301      	movs	r3, #1
 8012848:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801284a:	68fb      	ldr	r3, [r7, #12]
	}
 801284c:	4618      	mov	r0, r3
 801284e:	3710      	adds	r7, #16
 8012850:	46bd      	mov	sp, r7
 8012852:	bd80      	pop	{r7, pc}
 8012854:	20001d84 	.word	0x20001d84
 8012858:	20001d88 	.word	0x20001d88
 801285c:	20002260 	.word	0x20002260

08012860 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012860:	b580      	push	{r7, lr}
 8012862:	b086      	sub	sp, #24
 8012864:	af00      	add	r7, sp, #0
 8012866:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801286c:	2300      	movs	r3, #0
 801286e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	2b00      	cmp	r3, #0
 8012874:	d058      	beq.n	8012928 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012876:	4b2f      	ldr	r3, [pc, #188]	@ (8012934 <xTaskPriorityDisinherit+0xd4>)
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	693a      	ldr	r2, [r7, #16]
 801287c:	429a      	cmp	r2, r3
 801287e:	d00b      	beq.n	8012898 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8012880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012884:	f383 8811 	msr	BASEPRI, r3
 8012888:	f3bf 8f6f 	isb	sy
 801288c:	f3bf 8f4f 	dsb	sy
 8012890:	60fb      	str	r3, [r7, #12]
}
 8012892:	bf00      	nop
 8012894:	bf00      	nop
 8012896:	e7fd      	b.n	8012894 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8012898:	693b      	ldr	r3, [r7, #16]
 801289a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801289c:	2b00      	cmp	r3, #0
 801289e:	d10b      	bne.n	80128b8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80128a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128a4:	f383 8811 	msr	BASEPRI, r3
 80128a8:	f3bf 8f6f 	isb	sy
 80128ac:	f3bf 8f4f 	dsb	sy
 80128b0:	60bb      	str	r3, [r7, #8]
}
 80128b2:	bf00      	nop
 80128b4:	bf00      	nop
 80128b6:	e7fd      	b.n	80128b4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80128b8:	693b      	ldr	r3, [r7, #16]
 80128ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80128bc:	1e5a      	subs	r2, r3, #1
 80128be:	693b      	ldr	r3, [r7, #16]
 80128c0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80128c2:	693b      	ldr	r3, [r7, #16]
 80128c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80128c6:	693b      	ldr	r3, [r7, #16]
 80128c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80128ca:	429a      	cmp	r2, r3
 80128cc:	d02c      	beq.n	8012928 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80128ce:	693b      	ldr	r3, [r7, #16]
 80128d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d128      	bne.n	8012928 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80128d6:	693b      	ldr	r3, [r7, #16]
 80128d8:	3304      	adds	r3, #4
 80128da:	4618      	mov	r0, r3
 80128dc:	f7fd fed2 	bl	8010684 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80128e0:	693b      	ldr	r3, [r7, #16]
 80128e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80128e4:	693b      	ldr	r3, [r7, #16]
 80128e6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80128e8:	693b      	ldr	r3, [r7, #16]
 80128ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80128ec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80128f0:	693b      	ldr	r3, [r7, #16]
 80128f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80128f4:	693b      	ldr	r3, [r7, #16]
 80128f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80128f8:	4b0f      	ldr	r3, [pc, #60]	@ (8012938 <xTaskPriorityDisinherit+0xd8>)
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	429a      	cmp	r2, r3
 80128fe:	d903      	bls.n	8012908 <xTaskPriorityDisinherit+0xa8>
 8012900:	693b      	ldr	r3, [r7, #16]
 8012902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012904:	4a0c      	ldr	r2, [pc, #48]	@ (8012938 <xTaskPriorityDisinherit+0xd8>)
 8012906:	6013      	str	r3, [r2, #0]
 8012908:	693b      	ldr	r3, [r7, #16]
 801290a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801290c:	4613      	mov	r3, r2
 801290e:	009b      	lsls	r3, r3, #2
 8012910:	4413      	add	r3, r2
 8012912:	009b      	lsls	r3, r3, #2
 8012914:	4a09      	ldr	r2, [pc, #36]	@ (801293c <xTaskPriorityDisinherit+0xdc>)
 8012916:	441a      	add	r2, r3
 8012918:	693b      	ldr	r3, [r7, #16]
 801291a:	3304      	adds	r3, #4
 801291c:	4619      	mov	r1, r3
 801291e:	4610      	mov	r0, r2
 8012920:	f7fd fe55 	bl	80105ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012924:	2301      	movs	r3, #1
 8012926:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012928:	697b      	ldr	r3, [r7, #20]
	}
 801292a:	4618      	mov	r0, r3
 801292c:	3718      	adds	r7, #24
 801292e:	46bd      	mov	sp, r7
 8012930:	bd80      	pop	{r7, pc}
 8012932:	bf00      	nop
 8012934:	20001d84 	.word	0x20001d84
 8012938:	20002260 	.word	0x20002260
 801293c:	20001d88 	.word	0x20001d88

08012940 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8012940:	b580      	push	{r7, lr}
 8012942:	b088      	sub	sp, #32
 8012944:	af00      	add	r7, sp, #0
 8012946:	6078      	str	r0, [r7, #4]
 8012948:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801294e:	2301      	movs	r3, #1
 8012950:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	2b00      	cmp	r3, #0
 8012956:	d06c      	beq.n	8012a32 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012958:	69bb      	ldr	r3, [r7, #24]
 801295a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801295c:	2b00      	cmp	r3, #0
 801295e:	d10b      	bne.n	8012978 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8012960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012964:	f383 8811 	msr	BASEPRI, r3
 8012968:	f3bf 8f6f 	isb	sy
 801296c:	f3bf 8f4f 	dsb	sy
 8012970:	60fb      	str	r3, [r7, #12]
}
 8012972:	bf00      	nop
 8012974:	bf00      	nop
 8012976:	e7fd      	b.n	8012974 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012978:	69bb      	ldr	r3, [r7, #24]
 801297a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801297c:	683a      	ldr	r2, [r7, #0]
 801297e:	429a      	cmp	r2, r3
 8012980:	d902      	bls.n	8012988 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012982:	683b      	ldr	r3, [r7, #0]
 8012984:	61fb      	str	r3, [r7, #28]
 8012986:	e002      	b.n	801298e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012988:	69bb      	ldr	r3, [r7, #24]
 801298a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801298c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801298e:	69bb      	ldr	r3, [r7, #24]
 8012990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012992:	69fa      	ldr	r2, [r7, #28]
 8012994:	429a      	cmp	r2, r3
 8012996:	d04c      	beq.n	8012a32 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012998:	69bb      	ldr	r3, [r7, #24]
 801299a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801299c:	697a      	ldr	r2, [r7, #20]
 801299e:	429a      	cmp	r2, r3
 80129a0:	d147      	bne.n	8012a32 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80129a2:	4b26      	ldr	r3, [pc, #152]	@ (8012a3c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	69ba      	ldr	r2, [r7, #24]
 80129a8:	429a      	cmp	r2, r3
 80129aa:	d10b      	bne.n	80129c4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80129ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129b0:	f383 8811 	msr	BASEPRI, r3
 80129b4:	f3bf 8f6f 	isb	sy
 80129b8:	f3bf 8f4f 	dsb	sy
 80129bc:	60bb      	str	r3, [r7, #8]
}
 80129be:	bf00      	nop
 80129c0:	bf00      	nop
 80129c2:	e7fd      	b.n	80129c0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80129c4:	69bb      	ldr	r3, [r7, #24]
 80129c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80129c8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80129ca:	69bb      	ldr	r3, [r7, #24]
 80129cc:	69fa      	ldr	r2, [r7, #28]
 80129ce:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80129d0:	69bb      	ldr	r3, [r7, #24]
 80129d2:	699b      	ldr	r3, [r3, #24]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	db04      	blt.n	80129e2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80129d8:	69fb      	ldr	r3, [r7, #28]
 80129da:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80129de:	69bb      	ldr	r3, [r7, #24]
 80129e0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80129e2:	69bb      	ldr	r3, [r7, #24]
 80129e4:	6959      	ldr	r1, [r3, #20]
 80129e6:	693a      	ldr	r2, [r7, #16]
 80129e8:	4613      	mov	r3, r2
 80129ea:	009b      	lsls	r3, r3, #2
 80129ec:	4413      	add	r3, r2
 80129ee:	009b      	lsls	r3, r3, #2
 80129f0:	4a13      	ldr	r2, [pc, #76]	@ (8012a40 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80129f2:	4413      	add	r3, r2
 80129f4:	4299      	cmp	r1, r3
 80129f6:	d11c      	bne.n	8012a32 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80129f8:	69bb      	ldr	r3, [r7, #24]
 80129fa:	3304      	adds	r3, #4
 80129fc:	4618      	mov	r0, r3
 80129fe:	f7fd fe41 	bl	8010684 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8012a02:	69bb      	ldr	r3, [r7, #24]
 8012a04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012a06:	4b0f      	ldr	r3, [pc, #60]	@ (8012a44 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	429a      	cmp	r2, r3
 8012a0c:	d903      	bls.n	8012a16 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8012a0e:	69bb      	ldr	r3, [r7, #24]
 8012a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a12:	4a0c      	ldr	r2, [pc, #48]	@ (8012a44 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8012a14:	6013      	str	r3, [r2, #0]
 8012a16:	69bb      	ldr	r3, [r7, #24]
 8012a18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012a1a:	4613      	mov	r3, r2
 8012a1c:	009b      	lsls	r3, r3, #2
 8012a1e:	4413      	add	r3, r2
 8012a20:	009b      	lsls	r3, r3, #2
 8012a22:	4a07      	ldr	r2, [pc, #28]	@ (8012a40 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8012a24:	441a      	add	r2, r3
 8012a26:	69bb      	ldr	r3, [r7, #24]
 8012a28:	3304      	adds	r3, #4
 8012a2a:	4619      	mov	r1, r3
 8012a2c:	4610      	mov	r0, r2
 8012a2e:	f7fd fdce 	bl	80105ce <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012a32:	bf00      	nop
 8012a34:	3720      	adds	r7, #32
 8012a36:	46bd      	mov	sp, r7
 8012a38:	bd80      	pop	{r7, pc}
 8012a3a:	bf00      	nop
 8012a3c:	20001d84 	.word	0x20001d84
 8012a40:	20001d88 	.word	0x20001d88
 8012a44:	20002260 	.word	0x20002260

08012a48 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8012a48:	b480      	push	{r7}
 8012a4a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012a4c:	4b07      	ldr	r3, [pc, #28]	@ (8012a6c <pvTaskIncrementMutexHeldCount+0x24>)
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d004      	beq.n	8012a5e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012a54:	4b05      	ldr	r3, [pc, #20]	@ (8012a6c <pvTaskIncrementMutexHeldCount+0x24>)
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012a5a:	3201      	adds	r2, #1
 8012a5c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8012a5e:	4b03      	ldr	r3, [pc, #12]	@ (8012a6c <pvTaskIncrementMutexHeldCount+0x24>)
 8012a60:	681b      	ldr	r3, [r3, #0]
	}
 8012a62:	4618      	mov	r0, r3
 8012a64:	46bd      	mov	sp, r7
 8012a66:	bc80      	pop	{r7}
 8012a68:	4770      	bx	lr
 8012a6a:	bf00      	nop
 8012a6c:	20001d84 	.word	0x20001d84

08012a70 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8012a70:	b580      	push	{r7, lr}
 8012a72:	b086      	sub	sp, #24
 8012a74:	af00      	add	r7, sp, #0
 8012a76:	60f8      	str	r0, [r7, #12]
 8012a78:	60b9      	str	r1, [r7, #8]
 8012a7a:	607a      	str	r2, [r7, #4]
 8012a7c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8012a7e:	f000 ff5d 	bl	801393c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8012a82:	4b29      	ldr	r3, [pc, #164]	@ (8012b28 <xTaskNotifyWait+0xb8>)
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8012a8a:	b2db      	uxtb	r3, r3
 8012a8c:	2b02      	cmp	r3, #2
 8012a8e:	d01c      	beq.n	8012aca <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8012a90:	4b25      	ldr	r3, [pc, #148]	@ (8012b28 <xTaskNotifyWait+0xb8>)
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8012a98:	68fa      	ldr	r2, [r7, #12]
 8012a9a:	43d2      	mvns	r2, r2
 8012a9c:	400a      	ands	r2, r1
 8012a9e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8012aa2:	4b21      	ldr	r3, [pc, #132]	@ (8012b28 <xTaskNotifyWait+0xb8>)
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	2201      	movs	r2, #1
 8012aa8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8012aac:	683b      	ldr	r3, [r7, #0]
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d00b      	beq.n	8012aca <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012ab2:	2101      	movs	r1, #1
 8012ab4:	6838      	ldr	r0, [r7, #0]
 8012ab6:	f000 f9e3 	bl	8012e80 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8012aba:	4b1c      	ldr	r3, [pc, #112]	@ (8012b2c <xTaskNotifyWait+0xbc>)
 8012abc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012ac0:	601a      	str	r2, [r3, #0]
 8012ac2:	f3bf 8f4f 	dsb	sy
 8012ac6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8012aca:	f000 ff67 	bl	801399c <vPortExitCritical>

		taskENTER_CRITICAL();
 8012ace:	f000 ff35 	bl	801393c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d005      	beq.n	8012ae4 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8012ad8:	4b13      	ldr	r3, [pc, #76]	@ (8012b28 <xTaskNotifyWait+0xb8>)
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8012ae4:	4b10      	ldr	r3, [pc, #64]	@ (8012b28 <xTaskNotifyWait+0xb8>)
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8012aec:	b2db      	uxtb	r3, r3
 8012aee:	2b02      	cmp	r3, #2
 8012af0:	d002      	beq.n	8012af8 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8012af2:	2300      	movs	r3, #0
 8012af4:	617b      	str	r3, [r7, #20]
 8012af6:	e00a      	b.n	8012b0e <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8012af8:	4b0b      	ldr	r3, [pc, #44]	@ (8012b28 <xTaskNotifyWait+0xb8>)
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8012b00:	68ba      	ldr	r2, [r7, #8]
 8012b02:	43d2      	mvns	r2, r2
 8012b04:	400a      	ands	r2, r1
 8012b06:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 8012b0a:	2301      	movs	r3, #1
 8012b0c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012b0e:	4b06      	ldr	r3, [pc, #24]	@ (8012b28 <xTaskNotifyWait+0xb8>)
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	2200      	movs	r2, #0
 8012b14:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8012b18:	f000 ff40 	bl	801399c <vPortExitCritical>

		return xReturn;
 8012b1c:	697b      	ldr	r3, [r7, #20]
	}
 8012b1e:	4618      	mov	r0, r3
 8012b20:	3718      	adds	r7, #24
 8012b22:	46bd      	mov	sp, r7
 8012b24:	bd80      	pop	{r7, pc}
 8012b26:	bf00      	nop
 8012b28:	20001d84 	.word	0x20001d84
 8012b2c:	e000ed04 	.word	0xe000ed04

08012b30 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8012b30:	b580      	push	{r7, lr}
 8012b32:	b08a      	sub	sp, #40	@ 0x28
 8012b34:	af00      	add	r7, sp, #0
 8012b36:	60f8      	str	r0, [r7, #12]
 8012b38:	60b9      	str	r1, [r7, #8]
 8012b3a:	603b      	str	r3, [r7, #0]
 8012b3c:	4613      	mov	r3, r2
 8012b3e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8012b40:	2301      	movs	r3, #1
 8012b42:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d10b      	bne.n	8012b62 <xTaskGenericNotify+0x32>
	__asm volatile
 8012b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b4e:	f383 8811 	msr	BASEPRI, r3
 8012b52:	f3bf 8f6f 	isb	sy
 8012b56:	f3bf 8f4f 	dsb	sy
 8012b5a:	61bb      	str	r3, [r7, #24]
}
 8012b5c:	bf00      	nop
 8012b5e:	bf00      	nop
 8012b60:	e7fd      	b.n	8012b5e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8012b66:	f000 fee9 	bl	801393c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8012b6a:	683b      	ldr	r3, [r7, #0]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d004      	beq.n	8012b7a <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8012b70:	6a3b      	ldr	r3, [r7, #32]
 8012b72:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8012b76:	683b      	ldr	r3, [r7, #0]
 8012b78:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8012b7a:	6a3b      	ldr	r3, [r7, #32]
 8012b7c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8012b80:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8012b82:	6a3b      	ldr	r3, [r7, #32]
 8012b84:	2202      	movs	r2, #2
 8012b86:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8012b8a:	79fb      	ldrb	r3, [r7, #7]
 8012b8c:	2b04      	cmp	r3, #4
 8012b8e:	d82e      	bhi.n	8012bee <xTaskGenericNotify+0xbe>
 8012b90:	a201      	add	r2, pc, #4	@ (adr r2, 8012b98 <xTaskGenericNotify+0x68>)
 8012b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b96:	bf00      	nop
 8012b98:	08012c13 	.word	0x08012c13
 8012b9c:	08012bad 	.word	0x08012bad
 8012ba0:	08012bbf 	.word	0x08012bbf
 8012ba4:	08012bcf 	.word	0x08012bcf
 8012ba8:	08012bd9 	.word	0x08012bd9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8012bac:	6a3b      	ldr	r3, [r7, #32]
 8012bae:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8012bb2:	68bb      	ldr	r3, [r7, #8]
 8012bb4:	431a      	orrs	r2, r3
 8012bb6:	6a3b      	ldr	r3, [r7, #32]
 8012bb8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8012bbc:	e02c      	b.n	8012c18 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8012bbe:	6a3b      	ldr	r3, [r7, #32]
 8012bc0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012bc4:	1c5a      	adds	r2, r3, #1
 8012bc6:	6a3b      	ldr	r3, [r7, #32]
 8012bc8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8012bcc:	e024      	b.n	8012c18 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8012bce:	6a3b      	ldr	r3, [r7, #32]
 8012bd0:	68ba      	ldr	r2, [r7, #8]
 8012bd2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8012bd6:	e01f      	b.n	8012c18 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8012bd8:	7ffb      	ldrb	r3, [r7, #31]
 8012bda:	2b02      	cmp	r3, #2
 8012bdc:	d004      	beq.n	8012be8 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8012bde:	6a3b      	ldr	r3, [r7, #32]
 8012be0:	68ba      	ldr	r2, [r7, #8]
 8012be2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8012be6:	e017      	b.n	8012c18 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8012be8:	2300      	movs	r3, #0
 8012bea:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8012bec:	e014      	b.n	8012c18 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8012bee:	6a3b      	ldr	r3, [r7, #32]
 8012bf0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012bf8:	d00d      	beq.n	8012c16 <xTaskGenericNotify+0xe6>
	__asm volatile
 8012bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012bfe:	f383 8811 	msr	BASEPRI, r3
 8012c02:	f3bf 8f6f 	isb	sy
 8012c06:	f3bf 8f4f 	dsb	sy
 8012c0a:	617b      	str	r3, [r7, #20]
}
 8012c0c:	bf00      	nop
 8012c0e:	bf00      	nop
 8012c10:	e7fd      	b.n	8012c0e <xTaskGenericNotify+0xde>
					break;
 8012c12:	bf00      	nop
 8012c14:	e000      	b.n	8012c18 <xTaskGenericNotify+0xe8>

					break;
 8012c16:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8012c18:	7ffb      	ldrb	r3, [r7, #31]
 8012c1a:	2b01      	cmp	r3, #1
 8012c1c:	d13b      	bne.n	8012c96 <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012c1e:	6a3b      	ldr	r3, [r7, #32]
 8012c20:	3304      	adds	r3, #4
 8012c22:	4618      	mov	r0, r3
 8012c24:	f7fd fd2e 	bl	8010684 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8012c28:	6a3b      	ldr	r3, [r7, #32]
 8012c2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8012ca4 <xTaskGenericNotify+0x174>)
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	429a      	cmp	r2, r3
 8012c32:	d903      	bls.n	8012c3c <xTaskGenericNotify+0x10c>
 8012c34:	6a3b      	ldr	r3, [r7, #32]
 8012c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c38:	4a1a      	ldr	r2, [pc, #104]	@ (8012ca4 <xTaskGenericNotify+0x174>)
 8012c3a:	6013      	str	r3, [r2, #0]
 8012c3c:	6a3b      	ldr	r3, [r7, #32]
 8012c3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012c40:	4613      	mov	r3, r2
 8012c42:	009b      	lsls	r3, r3, #2
 8012c44:	4413      	add	r3, r2
 8012c46:	009b      	lsls	r3, r3, #2
 8012c48:	4a17      	ldr	r2, [pc, #92]	@ (8012ca8 <xTaskGenericNotify+0x178>)
 8012c4a:	441a      	add	r2, r3
 8012c4c:	6a3b      	ldr	r3, [r7, #32]
 8012c4e:	3304      	adds	r3, #4
 8012c50:	4619      	mov	r1, r3
 8012c52:	4610      	mov	r0, r2
 8012c54:	f7fd fcbb 	bl	80105ce <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8012c58:	6a3b      	ldr	r3, [r7, #32]
 8012c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d00b      	beq.n	8012c78 <xTaskGenericNotify+0x148>
	__asm volatile
 8012c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c64:	f383 8811 	msr	BASEPRI, r3
 8012c68:	f3bf 8f6f 	isb	sy
 8012c6c:	f3bf 8f4f 	dsb	sy
 8012c70:	613b      	str	r3, [r7, #16]
}
 8012c72:	bf00      	nop
 8012c74:	bf00      	nop
 8012c76:	e7fd      	b.n	8012c74 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012c78:	6a3b      	ldr	r3, [r7, #32]
 8012c7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8012cac <xTaskGenericNotify+0x17c>)
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c82:	429a      	cmp	r2, r3
 8012c84:	d907      	bls.n	8012c96 <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8012c86:	4b0a      	ldr	r3, [pc, #40]	@ (8012cb0 <xTaskGenericNotify+0x180>)
 8012c88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012c8c:	601a      	str	r2, [r3, #0]
 8012c8e:	f3bf 8f4f 	dsb	sy
 8012c92:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8012c96:	f000 fe81 	bl	801399c <vPortExitCritical>

		return xReturn;
 8012c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8012c9c:	4618      	mov	r0, r3
 8012c9e:	3728      	adds	r7, #40	@ 0x28
 8012ca0:	46bd      	mov	sp, r7
 8012ca2:	bd80      	pop	{r7, pc}
 8012ca4:	20002260 	.word	0x20002260
 8012ca8:	20001d88 	.word	0x20001d88
 8012cac:	20001d84 	.word	0x20001d84
 8012cb0:	e000ed04 	.word	0xe000ed04

08012cb4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8012cb4:	b580      	push	{r7, lr}
 8012cb6:	b08e      	sub	sp, #56	@ 0x38
 8012cb8:	af00      	add	r7, sp, #0
 8012cba:	60f8      	str	r0, [r7, #12]
 8012cbc:	60b9      	str	r1, [r7, #8]
 8012cbe:	603b      	str	r3, [r7, #0]
 8012cc0:	4613      	mov	r3, r2
 8012cc2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8012cc4:	2301      	movs	r3, #1
 8012cc6:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d10b      	bne.n	8012ce6 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8012cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012cd2:	f383 8811 	msr	BASEPRI, r3
 8012cd6:	f3bf 8f6f 	isb	sy
 8012cda:	f3bf 8f4f 	dsb	sy
 8012cde:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012ce0:	bf00      	nop
 8012ce2:	bf00      	nop
 8012ce4:	e7fd      	b.n	8012ce2 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012ce6:	f000 feeb 	bl	8013ac0 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8012cee:	f3ef 8211 	mrs	r2, BASEPRI
 8012cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012cf6:	f383 8811 	msr	BASEPRI, r3
 8012cfa:	f3bf 8f6f 	isb	sy
 8012cfe:	f3bf 8f4f 	dsb	sy
 8012d02:	623a      	str	r2, [r7, #32]
 8012d04:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8012d06:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8012d0a:	683b      	ldr	r3, [r7, #0]
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d004      	beq.n	8012d1a <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8012d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d12:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8012d16:	683b      	ldr	r3, [r7, #0]
 8012d18:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8012d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d1c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8012d20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8012d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d26:	2202      	movs	r2, #2
 8012d28:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8012d2c:	79fb      	ldrb	r3, [r7, #7]
 8012d2e:	2b04      	cmp	r3, #4
 8012d30:	d82e      	bhi.n	8012d90 <xTaskGenericNotifyFromISR+0xdc>
 8012d32:	a201      	add	r2, pc, #4	@ (adr r2, 8012d38 <xTaskGenericNotifyFromISR+0x84>)
 8012d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d38:	08012db5 	.word	0x08012db5
 8012d3c:	08012d4d 	.word	0x08012d4d
 8012d40:	08012d5f 	.word	0x08012d5f
 8012d44:	08012d6f 	.word	0x08012d6f
 8012d48:	08012d79 	.word	0x08012d79
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8012d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d4e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8012d52:	68bb      	ldr	r3, [r7, #8]
 8012d54:	431a      	orrs	r2, r3
 8012d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d58:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8012d5c:	e02d      	b.n	8012dba <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8012d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012d64:	1c5a      	adds	r2, r3, #1
 8012d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d68:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8012d6c:	e025      	b.n	8012dba <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8012d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d70:	68ba      	ldr	r2, [r7, #8]
 8012d72:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8012d76:	e020      	b.n	8012dba <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8012d78:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8012d7c:	2b02      	cmp	r3, #2
 8012d7e:	d004      	beq.n	8012d8a <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8012d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d82:	68ba      	ldr	r2, [r7, #8]
 8012d84:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8012d88:	e017      	b.n	8012dba <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 8012d8a:	2300      	movs	r3, #0
 8012d8c:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8012d8e:	e014      	b.n	8012dba <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8012d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d92:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d9a:	d00d      	beq.n	8012db8 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8012d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012da0:	f383 8811 	msr	BASEPRI, r3
 8012da4:	f3bf 8f6f 	isb	sy
 8012da8:	f3bf 8f4f 	dsb	sy
 8012dac:	61bb      	str	r3, [r7, #24]
}
 8012dae:	bf00      	nop
 8012db0:	bf00      	nop
 8012db2:	e7fd      	b.n	8012db0 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8012db4:	bf00      	nop
 8012db6:	e000      	b.n	8012dba <xTaskGenericNotifyFromISR+0x106>
					break;
 8012db8:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8012dba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8012dbe:	2b01      	cmp	r3, #1
 8012dc0:	d147      	bne.n	8012e52 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8012dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d00b      	beq.n	8012de2 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 8012dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012dce:	f383 8811 	msr	BASEPRI, r3
 8012dd2:	f3bf 8f6f 	isb	sy
 8012dd6:	f3bf 8f4f 	dsb	sy
 8012dda:	617b      	str	r3, [r7, #20]
}
 8012ddc:	bf00      	nop
 8012dde:	bf00      	nop
 8012de0:	e7fd      	b.n	8012dde <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012de2:	4b21      	ldr	r3, [pc, #132]	@ (8012e68 <xTaskGenericNotifyFromISR+0x1b4>)
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d11d      	bne.n	8012e26 <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012dec:	3304      	adds	r3, #4
 8012dee:	4618      	mov	r0, r3
 8012df0:	f7fd fc48 	bl	8010684 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012df6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012df8:	4b1c      	ldr	r3, [pc, #112]	@ (8012e6c <xTaskGenericNotifyFromISR+0x1b8>)
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	429a      	cmp	r2, r3
 8012dfe:	d903      	bls.n	8012e08 <xTaskGenericNotifyFromISR+0x154>
 8012e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e04:	4a19      	ldr	r2, [pc, #100]	@ (8012e6c <xTaskGenericNotifyFromISR+0x1b8>)
 8012e06:	6013      	str	r3, [r2, #0]
 8012e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012e0c:	4613      	mov	r3, r2
 8012e0e:	009b      	lsls	r3, r3, #2
 8012e10:	4413      	add	r3, r2
 8012e12:	009b      	lsls	r3, r3, #2
 8012e14:	4a16      	ldr	r2, [pc, #88]	@ (8012e70 <xTaskGenericNotifyFromISR+0x1bc>)
 8012e16:	441a      	add	r2, r3
 8012e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e1a:	3304      	adds	r3, #4
 8012e1c:	4619      	mov	r1, r3
 8012e1e:	4610      	mov	r0, r2
 8012e20:	f7fd fbd5 	bl	80105ce <vListInsertEnd>
 8012e24:	e005      	b.n	8012e32 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8012e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e28:	3318      	adds	r3, #24
 8012e2a:	4619      	mov	r1, r3
 8012e2c:	4811      	ldr	r0, [pc, #68]	@ (8012e74 <xTaskGenericNotifyFromISR+0x1c0>)
 8012e2e:	f7fd fbce 	bl	80105ce <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012e36:	4b10      	ldr	r3, [pc, #64]	@ (8012e78 <xTaskGenericNotifyFromISR+0x1c4>)
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e3c:	429a      	cmp	r2, r3
 8012e3e:	d908      	bls.n	8012e52 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8012e40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d002      	beq.n	8012e4c <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8012e46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012e48:	2201      	movs	r2, #1
 8012e4a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8012e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8012e7c <xTaskGenericNotifyFromISR+0x1c8>)
 8012e4e:	2201      	movs	r2, #1
 8012e50:	601a      	str	r2, [r3, #0]
 8012e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e54:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012e56:	693b      	ldr	r3, [r7, #16]
 8012e58:	f383 8811 	msr	BASEPRI, r3
}
 8012e5c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8012e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8012e60:	4618      	mov	r0, r3
 8012e62:	3738      	adds	r7, #56	@ 0x38
 8012e64:	46bd      	mov	sp, r7
 8012e66:	bd80      	pop	{r7, pc}
 8012e68:	20002280 	.word	0x20002280
 8012e6c:	20002260 	.word	0x20002260
 8012e70:	20001d88 	.word	0x20001d88
 8012e74:	20002218 	.word	0x20002218
 8012e78:	20001d84 	.word	0x20001d84
 8012e7c:	2000226c 	.word	0x2000226c

08012e80 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012e80:	b580      	push	{r7, lr}
 8012e82:	b084      	sub	sp, #16
 8012e84:	af00      	add	r7, sp, #0
 8012e86:	6078      	str	r0, [r7, #4]
 8012e88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012e8a:	4b21      	ldr	r3, [pc, #132]	@ (8012f10 <prvAddCurrentTaskToDelayedList+0x90>)
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012e90:	4b20      	ldr	r3, [pc, #128]	@ (8012f14 <prvAddCurrentTaskToDelayedList+0x94>)
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	3304      	adds	r3, #4
 8012e96:	4618      	mov	r0, r3
 8012e98:	f7fd fbf4 	bl	8010684 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ea2:	d10a      	bne.n	8012eba <prvAddCurrentTaskToDelayedList+0x3a>
 8012ea4:	683b      	ldr	r3, [r7, #0]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d007      	beq.n	8012eba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012eaa:	4b1a      	ldr	r3, [pc, #104]	@ (8012f14 <prvAddCurrentTaskToDelayedList+0x94>)
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	3304      	adds	r3, #4
 8012eb0:	4619      	mov	r1, r3
 8012eb2:	4819      	ldr	r0, [pc, #100]	@ (8012f18 <prvAddCurrentTaskToDelayedList+0x98>)
 8012eb4:	f7fd fb8b 	bl	80105ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012eb8:	e026      	b.n	8012f08 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012eba:	68fa      	ldr	r2, [r7, #12]
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	4413      	add	r3, r2
 8012ec0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012ec2:	4b14      	ldr	r3, [pc, #80]	@ (8012f14 <prvAddCurrentTaskToDelayedList+0x94>)
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	68ba      	ldr	r2, [r7, #8]
 8012ec8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012eca:	68ba      	ldr	r2, [r7, #8]
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	429a      	cmp	r2, r3
 8012ed0:	d209      	bcs.n	8012ee6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012ed2:	4b12      	ldr	r3, [pc, #72]	@ (8012f1c <prvAddCurrentTaskToDelayedList+0x9c>)
 8012ed4:	681a      	ldr	r2, [r3, #0]
 8012ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8012f14 <prvAddCurrentTaskToDelayedList+0x94>)
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	3304      	adds	r3, #4
 8012edc:	4619      	mov	r1, r3
 8012ede:	4610      	mov	r0, r2
 8012ee0:	f7fd fb98 	bl	8010614 <vListInsert>
}
 8012ee4:	e010      	b.n	8012f08 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8012f20 <prvAddCurrentTaskToDelayedList+0xa0>)
 8012ee8:	681a      	ldr	r2, [r3, #0]
 8012eea:	4b0a      	ldr	r3, [pc, #40]	@ (8012f14 <prvAddCurrentTaskToDelayedList+0x94>)
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	3304      	adds	r3, #4
 8012ef0:	4619      	mov	r1, r3
 8012ef2:	4610      	mov	r0, r2
 8012ef4:	f7fd fb8e 	bl	8010614 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8012f24 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012efa:	681b      	ldr	r3, [r3, #0]
 8012efc:	68ba      	ldr	r2, [r7, #8]
 8012efe:	429a      	cmp	r2, r3
 8012f00:	d202      	bcs.n	8012f08 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8012f02:	4a08      	ldr	r2, [pc, #32]	@ (8012f24 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012f04:	68bb      	ldr	r3, [r7, #8]
 8012f06:	6013      	str	r3, [r2, #0]
}
 8012f08:	bf00      	nop
 8012f0a:	3710      	adds	r7, #16
 8012f0c:	46bd      	mov	sp, r7
 8012f0e:	bd80      	pop	{r7, pc}
 8012f10:	2000225c 	.word	0x2000225c
 8012f14:	20001d84 	.word	0x20001d84
 8012f18:	20002244 	.word	0x20002244
 8012f1c:	20002214 	.word	0x20002214
 8012f20:	20002210 	.word	0x20002210
 8012f24:	20002278 	.word	0x20002278

08012f28 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8012f28:	b580      	push	{r7, lr}
 8012f2a:	b08a      	sub	sp, #40	@ 0x28
 8012f2c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8012f2e:	2300      	movs	r3, #0
 8012f30:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8012f32:	f000 fbaf 	bl	8013694 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8012f36:	4b1d      	ldr	r3, [pc, #116]	@ (8012fac <xTimerCreateTimerTask+0x84>)
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d021      	beq.n	8012f82 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8012f3e:	2300      	movs	r3, #0
 8012f40:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8012f42:	2300      	movs	r3, #0
 8012f44:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012f46:	1d3a      	adds	r2, r7, #4
 8012f48:	f107 0108 	add.w	r1, r7, #8
 8012f4c:	f107 030c 	add.w	r3, r7, #12
 8012f50:	4618      	mov	r0, r3
 8012f52:	f7fd faf7 	bl	8010544 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8012f56:	6879      	ldr	r1, [r7, #4]
 8012f58:	68bb      	ldr	r3, [r7, #8]
 8012f5a:	68fa      	ldr	r2, [r7, #12]
 8012f5c:	9202      	str	r2, [sp, #8]
 8012f5e:	9301      	str	r3, [sp, #4]
 8012f60:	2302      	movs	r3, #2
 8012f62:	9300      	str	r3, [sp, #0]
 8012f64:	2300      	movs	r3, #0
 8012f66:	460a      	mov	r2, r1
 8012f68:	4911      	ldr	r1, [pc, #68]	@ (8012fb0 <xTimerCreateTimerTask+0x88>)
 8012f6a:	4812      	ldr	r0, [pc, #72]	@ (8012fb4 <xTimerCreateTimerTask+0x8c>)
 8012f6c:	f7fe fb4a 	bl	8011604 <xTaskCreateStatic>
 8012f70:	4603      	mov	r3, r0
 8012f72:	4a11      	ldr	r2, [pc, #68]	@ (8012fb8 <xTimerCreateTimerTask+0x90>)
 8012f74:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8012f76:	4b10      	ldr	r3, [pc, #64]	@ (8012fb8 <xTimerCreateTimerTask+0x90>)
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d001      	beq.n	8012f82 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8012f7e:	2301      	movs	r3, #1
 8012f80:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8012f82:	697b      	ldr	r3, [r7, #20]
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d10b      	bne.n	8012fa0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8012f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f8c:	f383 8811 	msr	BASEPRI, r3
 8012f90:	f3bf 8f6f 	isb	sy
 8012f94:	f3bf 8f4f 	dsb	sy
 8012f98:	613b      	str	r3, [r7, #16]
}
 8012f9a:	bf00      	nop
 8012f9c:	bf00      	nop
 8012f9e:	e7fd      	b.n	8012f9c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8012fa0:	697b      	ldr	r3, [r7, #20]
}
 8012fa2:	4618      	mov	r0, r3
 8012fa4:	3718      	adds	r7, #24
 8012fa6:	46bd      	mov	sp, r7
 8012fa8:	bd80      	pop	{r7, pc}
 8012faa:	bf00      	nop
 8012fac:	200022b4 	.word	0x200022b4
 8012fb0:	080199a0 	.word	0x080199a0
 8012fb4:	08013231 	.word	0x08013231
 8012fb8:	200022b8 	.word	0x200022b8

08012fbc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8012fbc:	b580      	push	{r7, lr}
 8012fbe:	b088      	sub	sp, #32
 8012fc0:	af02      	add	r7, sp, #8
 8012fc2:	60f8      	str	r0, [r7, #12]
 8012fc4:	60b9      	str	r1, [r7, #8]
 8012fc6:	607a      	str	r2, [r7, #4]
 8012fc8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8012fca:	202c      	movs	r0, #44	@ 0x2c
 8012fcc:	f000 fdb8 	bl	8013b40 <pvPortMalloc>
 8012fd0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8012fd2:	697b      	ldr	r3, [r7, #20]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d00d      	beq.n	8012ff4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8012fd8:	697b      	ldr	r3, [r7, #20]
 8012fda:	2200      	movs	r2, #0
 8012fdc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8012fe0:	697b      	ldr	r3, [r7, #20]
 8012fe2:	9301      	str	r3, [sp, #4]
 8012fe4:	6a3b      	ldr	r3, [r7, #32]
 8012fe6:	9300      	str	r3, [sp, #0]
 8012fe8:	683b      	ldr	r3, [r7, #0]
 8012fea:	687a      	ldr	r2, [r7, #4]
 8012fec:	68b9      	ldr	r1, [r7, #8]
 8012fee:	68f8      	ldr	r0, [r7, #12]
 8012ff0:	f000 f845 	bl	801307e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8012ff4:	697b      	ldr	r3, [r7, #20]
	}
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	3718      	adds	r7, #24
 8012ffa:	46bd      	mov	sp, r7
 8012ffc:	bd80      	pop	{r7, pc}

08012ffe <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8012ffe:	b580      	push	{r7, lr}
 8013000:	b08a      	sub	sp, #40	@ 0x28
 8013002:	af02      	add	r7, sp, #8
 8013004:	60f8      	str	r0, [r7, #12]
 8013006:	60b9      	str	r1, [r7, #8]
 8013008:	607a      	str	r2, [r7, #4]
 801300a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 801300c:	232c      	movs	r3, #44	@ 0x2c
 801300e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8013010:	693b      	ldr	r3, [r7, #16]
 8013012:	2b2c      	cmp	r3, #44	@ 0x2c
 8013014:	d00b      	beq.n	801302e <xTimerCreateStatic+0x30>
	__asm volatile
 8013016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801301a:	f383 8811 	msr	BASEPRI, r3
 801301e:	f3bf 8f6f 	isb	sy
 8013022:	f3bf 8f4f 	dsb	sy
 8013026:	61bb      	str	r3, [r7, #24]
}
 8013028:	bf00      	nop
 801302a:	bf00      	nop
 801302c:	e7fd      	b.n	801302a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801302e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8013030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013032:	2b00      	cmp	r3, #0
 8013034:	d10b      	bne.n	801304e <xTimerCreateStatic+0x50>
	__asm volatile
 8013036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801303a:	f383 8811 	msr	BASEPRI, r3
 801303e:	f3bf 8f6f 	isb	sy
 8013042:	f3bf 8f4f 	dsb	sy
 8013046:	617b      	str	r3, [r7, #20]
}
 8013048:	bf00      	nop
 801304a:	bf00      	nop
 801304c:	e7fd      	b.n	801304a <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 801304e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013050:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8013052:	69fb      	ldr	r3, [r7, #28]
 8013054:	2b00      	cmp	r3, #0
 8013056:	d00d      	beq.n	8013074 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8013058:	69fb      	ldr	r3, [r7, #28]
 801305a:	2202      	movs	r2, #2
 801305c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8013060:	69fb      	ldr	r3, [r7, #28]
 8013062:	9301      	str	r3, [sp, #4]
 8013064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013066:	9300      	str	r3, [sp, #0]
 8013068:	683b      	ldr	r3, [r7, #0]
 801306a:	687a      	ldr	r2, [r7, #4]
 801306c:	68b9      	ldr	r1, [r7, #8]
 801306e:	68f8      	ldr	r0, [r7, #12]
 8013070:	f000 f805 	bl	801307e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8013074:	69fb      	ldr	r3, [r7, #28]
	}
 8013076:	4618      	mov	r0, r3
 8013078:	3720      	adds	r7, #32
 801307a:	46bd      	mov	sp, r7
 801307c:	bd80      	pop	{r7, pc}

0801307e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 801307e:	b580      	push	{r7, lr}
 8013080:	b086      	sub	sp, #24
 8013082:	af00      	add	r7, sp, #0
 8013084:	60f8      	str	r0, [r7, #12]
 8013086:	60b9      	str	r1, [r7, #8]
 8013088:	607a      	str	r2, [r7, #4]
 801308a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 801308c:	68bb      	ldr	r3, [r7, #8]
 801308e:	2b00      	cmp	r3, #0
 8013090:	d10b      	bne.n	80130aa <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8013092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013096:	f383 8811 	msr	BASEPRI, r3
 801309a:	f3bf 8f6f 	isb	sy
 801309e:	f3bf 8f4f 	dsb	sy
 80130a2:	617b      	str	r3, [r7, #20]
}
 80130a4:	bf00      	nop
 80130a6:	bf00      	nop
 80130a8:	e7fd      	b.n	80130a6 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80130aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d01e      	beq.n	80130ee <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80130b0:	f000 faf0 	bl	8013694 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80130b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130b6:	68fa      	ldr	r2, [r7, #12]
 80130b8:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80130ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130bc:	68ba      	ldr	r2, [r7, #8]
 80130be:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80130c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130c2:	683a      	ldr	r2, [r7, #0]
 80130c4:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80130c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130c8:	6a3a      	ldr	r2, [r7, #32]
 80130ca:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80130cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130ce:	3304      	adds	r3, #4
 80130d0:	4618      	mov	r0, r3
 80130d2:	f7fd fa70 	bl	80105b6 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d008      	beq.n	80130ee <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80130dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80130e2:	f043 0304 	orr.w	r3, r3, #4
 80130e6:	b2da      	uxtb	r2, r3
 80130e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80130ee:	bf00      	nop
 80130f0:	3718      	adds	r7, #24
 80130f2:	46bd      	mov	sp, r7
 80130f4:	bd80      	pop	{r7, pc}
	...

080130f8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80130f8:	b580      	push	{r7, lr}
 80130fa:	b08a      	sub	sp, #40	@ 0x28
 80130fc:	af00      	add	r7, sp, #0
 80130fe:	60f8      	str	r0, [r7, #12]
 8013100:	60b9      	str	r1, [r7, #8]
 8013102:	607a      	str	r2, [r7, #4]
 8013104:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8013106:	2300      	movs	r3, #0
 8013108:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	2b00      	cmp	r3, #0
 801310e:	d10b      	bne.n	8013128 <xTimerGenericCommand+0x30>
	__asm volatile
 8013110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013114:	f383 8811 	msr	BASEPRI, r3
 8013118:	f3bf 8f6f 	isb	sy
 801311c:	f3bf 8f4f 	dsb	sy
 8013120:	623b      	str	r3, [r7, #32]
}
 8013122:	bf00      	nop
 8013124:	bf00      	nop
 8013126:	e7fd      	b.n	8013124 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8013128:	4b19      	ldr	r3, [pc, #100]	@ (8013190 <xTimerGenericCommand+0x98>)
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	2b00      	cmp	r3, #0
 801312e:	d02a      	beq.n	8013186 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8013130:	68bb      	ldr	r3, [r7, #8]
 8013132:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801313c:	68bb      	ldr	r3, [r7, #8]
 801313e:	2b05      	cmp	r3, #5
 8013140:	dc18      	bgt.n	8013174 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8013142:	f7ff fb07 	bl	8012754 <xTaskGetSchedulerState>
 8013146:	4603      	mov	r3, r0
 8013148:	2b02      	cmp	r3, #2
 801314a:	d109      	bne.n	8013160 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801314c:	4b10      	ldr	r3, [pc, #64]	@ (8013190 <xTimerGenericCommand+0x98>)
 801314e:	6818      	ldr	r0, [r3, #0]
 8013150:	f107 0110 	add.w	r1, r7, #16
 8013154:	2300      	movs	r3, #0
 8013156:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013158:	f7fd fcbc 	bl	8010ad4 <xQueueGenericSend>
 801315c:	6278      	str	r0, [r7, #36]	@ 0x24
 801315e:	e012      	b.n	8013186 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8013160:	4b0b      	ldr	r3, [pc, #44]	@ (8013190 <xTimerGenericCommand+0x98>)
 8013162:	6818      	ldr	r0, [r3, #0]
 8013164:	f107 0110 	add.w	r1, r7, #16
 8013168:	2300      	movs	r3, #0
 801316a:	2200      	movs	r2, #0
 801316c:	f7fd fcb2 	bl	8010ad4 <xQueueGenericSend>
 8013170:	6278      	str	r0, [r7, #36]	@ 0x24
 8013172:	e008      	b.n	8013186 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013174:	4b06      	ldr	r3, [pc, #24]	@ (8013190 <xTimerGenericCommand+0x98>)
 8013176:	6818      	ldr	r0, [r3, #0]
 8013178:	f107 0110 	add.w	r1, r7, #16
 801317c:	2300      	movs	r3, #0
 801317e:	683a      	ldr	r2, [r7, #0]
 8013180:	f7fd fdaa 	bl	8010cd8 <xQueueGenericSendFromISR>
 8013184:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8013186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8013188:	4618      	mov	r0, r3
 801318a:	3728      	adds	r7, #40	@ 0x28
 801318c:	46bd      	mov	sp, r7
 801318e:	bd80      	pop	{r7, pc}
 8013190:	200022b4 	.word	0x200022b4

08013194 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8013194:	b580      	push	{r7, lr}
 8013196:	b088      	sub	sp, #32
 8013198:	af02      	add	r7, sp, #8
 801319a:	6078      	str	r0, [r7, #4]
 801319c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801319e:	4b23      	ldr	r3, [pc, #140]	@ (801322c <prvProcessExpiredTimer+0x98>)
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	68db      	ldr	r3, [r3, #12]
 80131a4:	68db      	ldr	r3, [r3, #12]
 80131a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80131a8:	697b      	ldr	r3, [r7, #20]
 80131aa:	3304      	adds	r3, #4
 80131ac:	4618      	mov	r0, r3
 80131ae:	f7fd fa69 	bl	8010684 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80131b2:	697b      	ldr	r3, [r7, #20]
 80131b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80131b8:	f003 0304 	and.w	r3, r3, #4
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d023      	beq.n	8013208 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80131c0:	697b      	ldr	r3, [r7, #20]
 80131c2:	699a      	ldr	r2, [r3, #24]
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	18d1      	adds	r1, r2, r3
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	683a      	ldr	r2, [r7, #0]
 80131cc:	6978      	ldr	r0, [r7, #20]
 80131ce:	f000 f8d3 	bl	8013378 <prvInsertTimerInActiveList>
 80131d2:	4603      	mov	r3, r0
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d020      	beq.n	801321a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80131d8:	2300      	movs	r3, #0
 80131da:	9300      	str	r3, [sp, #0]
 80131dc:	2300      	movs	r3, #0
 80131de:	687a      	ldr	r2, [r7, #4]
 80131e0:	2100      	movs	r1, #0
 80131e2:	6978      	ldr	r0, [r7, #20]
 80131e4:	f7ff ff88 	bl	80130f8 <xTimerGenericCommand>
 80131e8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80131ea:	693b      	ldr	r3, [r7, #16]
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d114      	bne.n	801321a <prvProcessExpiredTimer+0x86>
	__asm volatile
 80131f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131f4:	f383 8811 	msr	BASEPRI, r3
 80131f8:	f3bf 8f6f 	isb	sy
 80131fc:	f3bf 8f4f 	dsb	sy
 8013200:	60fb      	str	r3, [r7, #12]
}
 8013202:	bf00      	nop
 8013204:	bf00      	nop
 8013206:	e7fd      	b.n	8013204 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013208:	697b      	ldr	r3, [r7, #20]
 801320a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801320e:	f023 0301 	bic.w	r3, r3, #1
 8013212:	b2da      	uxtb	r2, r3
 8013214:	697b      	ldr	r3, [r7, #20]
 8013216:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801321a:	697b      	ldr	r3, [r7, #20]
 801321c:	6a1b      	ldr	r3, [r3, #32]
 801321e:	6978      	ldr	r0, [r7, #20]
 8013220:	4798      	blx	r3
}
 8013222:	bf00      	nop
 8013224:	3718      	adds	r7, #24
 8013226:	46bd      	mov	sp, r7
 8013228:	bd80      	pop	{r7, pc}
 801322a:	bf00      	nop
 801322c:	200022ac 	.word	0x200022ac

08013230 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8013230:	b580      	push	{r7, lr}
 8013232:	b084      	sub	sp, #16
 8013234:	af00      	add	r7, sp, #0
 8013236:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013238:	f107 0308 	add.w	r3, r7, #8
 801323c:	4618      	mov	r0, r3
 801323e:	f000 f859 	bl	80132f4 <prvGetNextExpireTime>
 8013242:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8013244:	68bb      	ldr	r3, [r7, #8]
 8013246:	4619      	mov	r1, r3
 8013248:	68f8      	ldr	r0, [r7, #12]
 801324a:	f000 f805 	bl	8013258 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801324e:	f000 f8d5 	bl	80133fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013252:	bf00      	nop
 8013254:	e7f0      	b.n	8013238 <prvTimerTask+0x8>
	...

08013258 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8013258:	b580      	push	{r7, lr}
 801325a:	b084      	sub	sp, #16
 801325c:	af00      	add	r7, sp, #0
 801325e:	6078      	str	r0, [r7, #4]
 8013260:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8013262:	f7fe fd0f 	bl	8011c84 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013266:	f107 0308 	add.w	r3, r7, #8
 801326a:	4618      	mov	r0, r3
 801326c:	f000 f864 	bl	8013338 <prvSampleTimeNow>
 8013270:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8013272:	68bb      	ldr	r3, [r7, #8]
 8013274:	2b00      	cmp	r3, #0
 8013276:	d130      	bne.n	80132da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013278:	683b      	ldr	r3, [r7, #0]
 801327a:	2b00      	cmp	r3, #0
 801327c:	d10a      	bne.n	8013294 <prvProcessTimerOrBlockTask+0x3c>
 801327e:	687a      	ldr	r2, [r7, #4]
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	429a      	cmp	r2, r3
 8013284:	d806      	bhi.n	8013294 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8013286:	f7fe fd0b 	bl	8011ca0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801328a:	68f9      	ldr	r1, [r7, #12]
 801328c:	6878      	ldr	r0, [r7, #4]
 801328e:	f7ff ff81 	bl	8013194 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8013292:	e024      	b.n	80132de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8013294:	683b      	ldr	r3, [r7, #0]
 8013296:	2b00      	cmp	r3, #0
 8013298:	d008      	beq.n	80132ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801329a:	4b13      	ldr	r3, [pc, #76]	@ (80132e8 <prvProcessTimerOrBlockTask+0x90>)
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d101      	bne.n	80132a8 <prvProcessTimerOrBlockTask+0x50>
 80132a4:	2301      	movs	r3, #1
 80132a6:	e000      	b.n	80132aa <prvProcessTimerOrBlockTask+0x52>
 80132a8:	2300      	movs	r3, #0
 80132aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80132ac:	4b0f      	ldr	r3, [pc, #60]	@ (80132ec <prvProcessTimerOrBlockTask+0x94>)
 80132ae:	6818      	ldr	r0, [r3, #0]
 80132b0:	687a      	ldr	r2, [r7, #4]
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	1ad3      	subs	r3, r2, r3
 80132b6:	683a      	ldr	r2, [r7, #0]
 80132b8:	4619      	mov	r1, r3
 80132ba:	f7fe f96f 	bl	801159c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80132be:	f7fe fcef 	bl	8011ca0 <xTaskResumeAll>
 80132c2:	4603      	mov	r3, r0
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d10a      	bne.n	80132de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80132c8:	4b09      	ldr	r3, [pc, #36]	@ (80132f0 <prvProcessTimerOrBlockTask+0x98>)
 80132ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80132ce:	601a      	str	r2, [r3, #0]
 80132d0:	f3bf 8f4f 	dsb	sy
 80132d4:	f3bf 8f6f 	isb	sy
}
 80132d8:	e001      	b.n	80132de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80132da:	f7fe fce1 	bl	8011ca0 <xTaskResumeAll>
}
 80132de:	bf00      	nop
 80132e0:	3710      	adds	r7, #16
 80132e2:	46bd      	mov	sp, r7
 80132e4:	bd80      	pop	{r7, pc}
 80132e6:	bf00      	nop
 80132e8:	200022b0 	.word	0x200022b0
 80132ec:	200022b4 	.word	0x200022b4
 80132f0:	e000ed04 	.word	0xe000ed04

080132f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80132f4:	b480      	push	{r7}
 80132f6:	b085      	sub	sp, #20
 80132f8:	af00      	add	r7, sp, #0
 80132fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80132fc:	4b0d      	ldr	r3, [pc, #52]	@ (8013334 <prvGetNextExpireTime+0x40>)
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	2b00      	cmp	r3, #0
 8013304:	d101      	bne.n	801330a <prvGetNextExpireTime+0x16>
 8013306:	2201      	movs	r2, #1
 8013308:	e000      	b.n	801330c <prvGetNextExpireTime+0x18>
 801330a:	2200      	movs	r2, #0
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	2b00      	cmp	r3, #0
 8013316:	d105      	bne.n	8013324 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013318:	4b06      	ldr	r3, [pc, #24]	@ (8013334 <prvGetNextExpireTime+0x40>)
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	68db      	ldr	r3, [r3, #12]
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	60fb      	str	r3, [r7, #12]
 8013322:	e001      	b.n	8013328 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8013324:	2300      	movs	r3, #0
 8013326:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8013328:	68fb      	ldr	r3, [r7, #12]
}
 801332a:	4618      	mov	r0, r3
 801332c:	3714      	adds	r7, #20
 801332e:	46bd      	mov	sp, r7
 8013330:	bc80      	pop	{r7}
 8013332:	4770      	bx	lr
 8013334:	200022ac 	.word	0x200022ac

08013338 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8013338:	b580      	push	{r7, lr}
 801333a:	b084      	sub	sp, #16
 801333c:	af00      	add	r7, sp, #0
 801333e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8013340:	f7fe fd4c 	bl	8011ddc <xTaskGetTickCount>
 8013344:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8013346:	4b0b      	ldr	r3, [pc, #44]	@ (8013374 <prvSampleTimeNow+0x3c>)
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	68fa      	ldr	r2, [r7, #12]
 801334c:	429a      	cmp	r2, r3
 801334e:	d205      	bcs.n	801335c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8013350:	f000 f93a 	bl	80135c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	2201      	movs	r2, #1
 8013358:	601a      	str	r2, [r3, #0]
 801335a:	e002      	b.n	8013362 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	2200      	movs	r2, #0
 8013360:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8013362:	4a04      	ldr	r2, [pc, #16]	@ (8013374 <prvSampleTimeNow+0x3c>)
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8013368:	68fb      	ldr	r3, [r7, #12]
}
 801336a:	4618      	mov	r0, r3
 801336c:	3710      	adds	r7, #16
 801336e:	46bd      	mov	sp, r7
 8013370:	bd80      	pop	{r7, pc}
 8013372:	bf00      	nop
 8013374:	200022bc 	.word	0x200022bc

08013378 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8013378:	b580      	push	{r7, lr}
 801337a:	b086      	sub	sp, #24
 801337c:	af00      	add	r7, sp, #0
 801337e:	60f8      	str	r0, [r7, #12]
 8013380:	60b9      	str	r1, [r7, #8]
 8013382:	607a      	str	r2, [r7, #4]
 8013384:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8013386:	2300      	movs	r3, #0
 8013388:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	68ba      	ldr	r2, [r7, #8]
 801338e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	68fa      	ldr	r2, [r7, #12]
 8013394:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8013396:	68ba      	ldr	r2, [r7, #8]
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	429a      	cmp	r2, r3
 801339c:	d812      	bhi.n	80133c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801339e:	687a      	ldr	r2, [r7, #4]
 80133a0:	683b      	ldr	r3, [r7, #0]
 80133a2:	1ad2      	subs	r2, r2, r3
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	699b      	ldr	r3, [r3, #24]
 80133a8:	429a      	cmp	r2, r3
 80133aa:	d302      	bcc.n	80133b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80133ac:	2301      	movs	r3, #1
 80133ae:	617b      	str	r3, [r7, #20]
 80133b0:	e01b      	b.n	80133ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80133b2:	4b10      	ldr	r3, [pc, #64]	@ (80133f4 <prvInsertTimerInActiveList+0x7c>)
 80133b4:	681a      	ldr	r2, [r3, #0]
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	3304      	adds	r3, #4
 80133ba:	4619      	mov	r1, r3
 80133bc:	4610      	mov	r0, r2
 80133be:	f7fd f929 	bl	8010614 <vListInsert>
 80133c2:	e012      	b.n	80133ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80133c4:	687a      	ldr	r2, [r7, #4]
 80133c6:	683b      	ldr	r3, [r7, #0]
 80133c8:	429a      	cmp	r2, r3
 80133ca:	d206      	bcs.n	80133da <prvInsertTimerInActiveList+0x62>
 80133cc:	68ba      	ldr	r2, [r7, #8]
 80133ce:	683b      	ldr	r3, [r7, #0]
 80133d0:	429a      	cmp	r2, r3
 80133d2:	d302      	bcc.n	80133da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80133d4:	2301      	movs	r3, #1
 80133d6:	617b      	str	r3, [r7, #20]
 80133d8:	e007      	b.n	80133ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80133da:	4b07      	ldr	r3, [pc, #28]	@ (80133f8 <prvInsertTimerInActiveList+0x80>)
 80133dc:	681a      	ldr	r2, [r3, #0]
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	3304      	adds	r3, #4
 80133e2:	4619      	mov	r1, r3
 80133e4:	4610      	mov	r0, r2
 80133e6:	f7fd f915 	bl	8010614 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80133ea:	697b      	ldr	r3, [r7, #20]
}
 80133ec:	4618      	mov	r0, r3
 80133ee:	3718      	adds	r7, #24
 80133f0:	46bd      	mov	sp, r7
 80133f2:	bd80      	pop	{r7, pc}
 80133f4:	200022b0 	.word	0x200022b0
 80133f8:	200022ac 	.word	0x200022ac

080133fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80133fc:	b580      	push	{r7, lr}
 80133fe:	b08e      	sub	sp, #56	@ 0x38
 8013400:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013402:	e0ce      	b.n	80135a2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	2b00      	cmp	r3, #0
 8013408:	da19      	bge.n	801343e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801340a:	1d3b      	adds	r3, r7, #4
 801340c:	3304      	adds	r3, #4
 801340e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8013410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013412:	2b00      	cmp	r3, #0
 8013414:	d10b      	bne.n	801342e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8013416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801341a:	f383 8811 	msr	BASEPRI, r3
 801341e:	f3bf 8f6f 	isb	sy
 8013422:	f3bf 8f4f 	dsb	sy
 8013426:	61fb      	str	r3, [r7, #28]
}
 8013428:	bf00      	nop
 801342a:	bf00      	nop
 801342c:	e7fd      	b.n	801342a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801342e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013434:	6850      	ldr	r0, [r2, #4]
 8013436:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013438:	6892      	ldr	r2, [r2, #8]
 801343a:	4611      	mov	r1, r2
 801343c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	2b00      	cmp	r3, #0
 8013442:	f2c0 80ae 	blt.w	80135a2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801344a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801344c:	695b      	ldr	r3, [r3, #20]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d004      	beq.n	801345c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013454:	3304      	adds	r3, #4
 8013456:	4618      	mov	r0, r3
 8013458:	f7fd f914 	bl	8010684 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801345c:	463b      	mov	r3, r7
 801345e:	4618      	mov	r0, r3
 8013460:	f7ff ff6a 	bl	8013338 <prvSampleTimeNow>
 8013464:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	2b09      	cmp	r3, #9
 801346a:	f200 8097 	bhi.w	801359c <prvProcessReceivedCommands+0x1a0>
 801346e:	a201      	add	r2, pc, #4	@ (adr r2, 8013474 <prvProcessReceivedCommands+0x78>)
 8013470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013474:	0801349d 	.word	0x0801349d
 8013478:	0801349d 	.word	0x0801349d
 801347c:	0801349d 	.word	0x0801349d
 8013480:	08013513 	.word	0x08013513
 8013484:	08013527 	.word	0x08013527
 8013488:	08013573 	.word	0x08013573
 801348c:	0801349d 	.word	0x0801349d
 8013490:	0801349d 	.word	0x0801349d
 8013494:	08013513 	.word	0x08013513
 8013498:	08013527 	.word	0x08013527
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801349c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801349e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80134a2:	f043 0301 	orr.w	r3, r3, #1
 80134a6:	b2da      	uxtb	r2, r3
 80134a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80134ae:	68ba      	ldr	r2, [r7, #8]
 80134b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134b2:	699b      	ldr	r3, [r3, #24]
 80134b4:	18d1      	adds	r1, r2, r3
 80134b6:	68bb      	ldr	r3, [r7, #8]
 80134b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80134ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80134bc:	f7ff ff5c 	bl	8013378 <prvInsertTimerInActiveList>
 80134c0:	4603      	mov	r3, r0
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d06c      	beq.n	80135a0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80134c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134c8:	6a1b      	ldr	r3, [r3, #32]
 80134ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80134cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80134ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80134d4:	f003 0304 	and.w	r3, r3, #4
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d061      	beq.n	80135a0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80134dc:	68ba      	ldr	r2, [r7, #8]
 80134de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134e0:	699b      	ldr	r3, [r3, #24]
 80134e2:	441a      	add	r2, r3
 80134e4:	2300      	movs	r3, #0
 80134e6:	9300      	str	r3, [sp, #0]
 80134e8:	2300      	movs	r3, #0
 80134ea:	2100      	movs	r1, #0
 80134ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80134ee:	f7ff fe03 	bl	80130f8 <xTimerGenericCommand>
 80134f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80134f4:	6a3b      	ldr	r3, [r7, #32]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d152      	bne.n	80135a0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80134fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134fe:	f383 8811 	msr	BASEPRI, r3
 8013502:	f3bf 8f6f 	isb	sy
 8013506:	f3bf 8f4f 	dsb	sy
 801350a:	61bb      	str	r3, [r7, #24]
}
 801350c:	bf00      	nop
 801350e:	bf00      	nop
 8013510:	e7fd      	b.n	801350e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013514:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013518:	f023 0301 	bic.w	r3, r3, #1
 801351c:	b2da      	uxtb	r2, r3
 801351e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013520:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8013524:	e03d      	b.n	80135a2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013528:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801352c:	f043 0301 	orr.w	r3, r3, #1
 8013530:	b2da      	uxtb	r2, r3
 8013532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013534:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013538:	68ba      	ldr	r2, [r7, #8]
 801353a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801353c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801353e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013540:	699b      	ldr	r3, [r3, #24]
 8013542:	2b00      	cmp	r3, #0
 8013544:	d10b      	bne.n	801355e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8013546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801354a:	f383 8811 	msr	BASEPRI, r3
 801354e:	f3bf 8f6f 	isb	sy
 8013552:	f3bf 8f4f 	dsb	sy
 8013556:	617b      	str	r3, [r7, #20]
}
 8013558:	bf00      	nop
 801355a:	bf00      	nop
 801355c:	e7fd      	b.n	801355a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801355e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013560:	699a      	ldr	r2, [r3, #24]
 8013562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013564:	18d1      	adds	r1, r2, r3
 8013566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013568:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801356a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801356c:	f7ff ff04 	bl	8013378 <prvInsertTimerInActiveList>
					break;
 8013570:	e017      	b.n	80135a2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8013572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013574:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013578:	f003 0302 	and.w	r3, r3, #2
 801357c:	2b00      	cmp	r3, #0
 801357e:	d103      	bne.n	8013588 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8013580:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013582:	f000 fbab 	bl	8013cdc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8013586:	e00c      	b.n	80135a2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801358a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801358e:	f023 0301 	bic.w	r3, r3, #1
 8013592:	b2da      	uxtb	r2, r3
 8013594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013596:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801359a:	e002      	b.n	80135a2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 801359c:	bf00      	nop
 801359e:	e000      	b.n	80135a2 <prvProcessReceivedCommands+0x1a6>
					break;
 80135a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80135a2:	4b08      	ldr	r3, [pc, #32]	@ (80135c4 <prvProcessReceivedCommands+0x1c8>)
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	1d39      	adds	r1, r7, #4
 80135a8:	2200      	movs	r2, #0
 80135aa:	4618      	mov	r0, r3
 80135ac:	f7fd fc32 	bl	8010e14 <xQueueReceive>
 80135b0:	4603      	mov	r3, r0
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	f47f af26 	bne.w	8013404 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80135b8:	bf00      	nop
 80135ba:	bf00      	nop
 80135bc:	3730      	adds	r7, #48	@ 0x30
 80135be:	46bd      	mov	sp, r7
 80135c0:	bd80      	pop	{r7, pc}
 80135c2:	bf00      	nop
 80135c4:	200022b4 	.word	0x200022b4

080135c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80135c8:	b580      	push	{r7, lr}
 80135ca:	b088      	sub	sp, #32
 80135cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80135ce:	e049      	b.n	8013664 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80135d0:	4b2e      	ldr	r3, [pc, #184]	@ (801368c <prvSwitchTimerLists+0xc4>)
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	68db      	ldr	r3, [r3, #12]
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80135da:	4b2c      	ldr	r3, [pc, #176]	@ (801368c <prvSwitchTimerLists+0xc4>)
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	68db      	ldr	r3, [r3, #12]
 80135e0:	68db      	ldr	r3, [r3, #12]
 80135e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80135e4:	68fb      	ldr	r3, [r7, #12]
 80135e6:	3304      	adds	r3, #4
 80135e8:	4618      	mov	r0, r3
 80135ea:	f7fd f84b 	bl	8010684 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	6a1b      	ldr	r3, [r3, #32]
 80135f2:	68f8      	ldr	r0, [r7, #12]
 80135f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80135fc:	f003 0304 	and.w	r3, r3, #4
 8013600:	2b00      	cmp	r3, #0
 8013602:	d02f      	beq.n	8013664 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	699b      	ldr	r3, [r3, #24]
 8013608:	693a      	ldr	r2, [r7, #16]
 801360a:	4413      	add	r3, r2
 801360c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801360e:	68ba      	ldr	r2, [r7, #8]
 8013610:	693b      	ldr	r3, [r7, #16]
 8013612:	429a      	cmp	r2, r3
 8013614:	d90e      	bls.n	8013634 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8013616:	68fb      	ldr	r3, [r7, #12]
 8013618:	68ba      	ldr	r2, [r7, #8]
 801361a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	68fa      	ldr	r2, [r7, #12]
 8013620:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013622:	4b1a      	ldr	r3, [pc, #104]	@ (801368c <prvSwitchTimerLists+0xc4>)
 8013624:	681a      	ldr	r2, [r3, #0]
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	3304      	adds	r3, #4
 801362a:	4619      	mov	r1, r3
 801362c:	4610      	mov	r0, r2
 801362e:	f7fc fff1 	bl	8010614 <vListInsert>
 8013632:	e017      	b.n	8013664 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013634:	2300      	movs	r3, #0
 8013636:	9300      	str	r3, [sp, #0]
 8013638:	2300      	movs	r3, #0
 801363a:	693a      	ldr	r2, [r7, #16]
 801363c:	2100      	movs	r1, #0
 801363e:	68f8      	ldr	r0, [r7, #12]
 8013640:	f7ff fd5a 	bl	80130f8 <xTimerGenericCommand>
 8013644:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	2b00      	cmp	r3, #0
 801364a:	d10b      	bne.n	8013664 <prvSwitchTimerLists+0x9c>
	__asm volatile
 801364c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013650:	f383 8811 	msr	BASEPRI, r3
 8013654:	f3bf 8f6f 	isb	sy
 8013658:	f3bf 8f4f 	dsb	sy
 801365c:	603b      	str	r3, [r7, #0]
}
 801365e:	bf00      	nop
 8013660:	bf00      	nop
 8013662:	e7fd      	b.n	8013660 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013664:	4b09      	ldr	r3, [pc, #36]	@ (801368c <prvSwitchTimerLists+0xc4>)
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	2b00      	cmp	r3, #0
 801366c:	d1b0      	bne.n	80135d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801366e:	4b07      	ldr	r3, [pc, #28]	@ (801368c <prvSwitchTimerLists+0xc4>)
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8013674:	4b06      	ldr	r3, [pc, #24]	@ (8013690 <prvSwitchTimerLists+0xc8>)
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	4a04      	ldr	r2, [pc, #16]	@ (801368c <prvSwitchTimerLists+0xc4>)
 801367a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801367c:	4a04      	ldr	r2, [pc, #16]	@ (8013690 <prvSwitchTimerLists+0xc8>)
 801367e:	697b      	ldr	r3, [r7, #20]
 8013680:	6013      	str	r3, [r2, #0]
}
 8013682:	bf00      	nop
 8013684:	3718      	adds	r7, #24
 8013686:	46bd      	mov	sp, r7
 8013688:	bd80      	pop	{r7, pc}
 801368a:	bf00      	nop
 801368c:	200022ac 	.word	0x200022ac
 8013690:	200022b0 	.word	0x200022b0

08013694 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8013694:	b580      	push	{r7, lr}
 8013696:	b082      	sub	sp, #8
 8013698:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801369a:	f000 f94f 	bl	801393c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801369e:	4b15      	ldr	r3, [pc, #84]	@ (80136f4 <prvCheckForValidListAndQueue+0x60>)
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d120      	bne.n	80136e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80136a6:	4814      	ldr	r0, [pc, #80]	@ (80136f8 <prvCheckForValidListAndQueue+0x64>)
 80136a8:	f7fc ff66 	bl	8010578 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80136ac:	4813      	ldr	r0, [pc, #76]	@ (80136fc <prvCheckForValidListAndQueue+0x68>)
 80136ae:	f7fc ff63 	bl	8010578 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80136b2:	4b13      	ldr	r3, [pc, #76]	@ (8013700 <prvCheckForValidListAndQueue+0x6c>)
 80136b4:	4a10      	ldr	r2, [pc, #64]	@ (80136f8 <prvCheckForValidListAndQueue+0x64>)
 80136b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80136b8:	4b12      	ldr	r3, [pc, #72]	@ (8013704 <prvCheckForValidListAndQueue+0x70>)
 80136ba:	4a10      	ldr	r2, [pc, #64]	@ (80136fc <prvCheckForValidListAndQueue+0x68>)
 80136bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80136be:	2300      	movs	r3, #0
 80136c0:	9300      	str	r3, [sp, #0]
 80136c2:	4b11      	ldr	r3, [pc, #68]	@ (8013708 <prvCheckForValidListAndQueue+0x74>)
 80136c4:	4a11      	ldr	r2, [pc, #68]	@ (801370c <prvCheckForValidListAndQueue+0x78>)
 80136c6:	2110      	movs	r1, #16
 80136c8:	200a      	movs	r0, #10
 80136ca:	f7fd f86f 	bl	80107ac <xQueueGenericCreateStatic>
 80136ce:	4603      	mov	r3, r0
 80136d0:	4a08      	ldr	r2, [pc, #32]	@ (80136f4 <prvCheckForValidListAndQueue+0x60>)
 80136d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80136d4:	4b07      	ldr	r3, [pc, #28]	@ (80136f4 <prvCheckForValidListAndQueue+0x60>)
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d005      	beq.n	80136e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80136dc:	4b05      	ldr	r3, [pc, #20]	@ (80136f4 <prvCheckForValidListAndQueue+0x60>)
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	490b      	ldr	r1, [pc, #44]	@ (8013710 <prvCheckForValidListAndQueue+0x7c>)
 80136e2:	4618      	mov	r0, r3
 80136e4:	f7fd ff32 	bl	801154c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80136e8:	f000 f958 	bl	801399c <vPortExitCritical>
}
 80136ec:	bf00      	nop
 80136ee:	46bd      	mov	sp, r7
 80136f0:	bd80      	pop	{r7, pc}
 80136f2:	bf00      	nop
 80136f4:	200022b4 	.word	0x200022b4
 80136f8:	20002284 	.word	0x20002284
 80136fc:	20002298 	.word	0x20002298
 8013700:	200022ac 	.word	0x200022ac
 8013704:	200022b0 	.word	0x200022b0
 8013708:	20002360 	.word	0x20002360
 801370c:	200022c0 	.word	0x200022c0
 8013710:	080199a8 	.word	0x080199a8

08013714 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8013714:	b580      	push	{r7, lr}
 8013716:	b086      	sub	sp, #24
 8013718:	af00      	add	r7, sp, #0
 801371a:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	2b00      	cmp	r3, #0
 8013724:	d10b      	bne.n	801373e <pvTimerGetTimerID+0x2a>
	__asm volatile
 8013726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801372a:	f383 8811 	msr	BASEPRI, r3
 801372e:	f3bf 8f6f 	isb	sy
 8013732:	f3bf 8f4f 	dsb	sy
 8013736:	60fb      	str	r3, [r7, #12]
}
 8013738:	bf00      	nop
 801373a:	bf00      	nop
 801373c:	e7fd      	b.n	801373a <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 801373e:	f000 f8fd 	bl	801393c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8013742:	697b      	ldr	r3, [r7, #20]
 8013744:	69db      	ldr	r3, [r3, #28]
 8013746:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8013748:	f000 f928 	bl	801399c <vPortExitCritical>

	return pvReturn;
 801374c:	693b      	ldr	r3, [r7, #16]
}
 801374e:	4618      	mov	r0, r3
 8013750:	3718      	adds	r7, #24
 8013752:	46bd      	mov	sp, r7
 8013754:	bd80      	pop	{r7, pc}
	...

08013758 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013758:	b480      	push	{r7}
 801375a:	b085      	sub	sp, #20
 801375c:	af00      	add	r7, sp, #0
 801375e:	60f8      	str	r0, [r7, #12]
 8013760:	60b9      	str	r1, [r7, #8]
 8013762:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	3b04      	subs	r3, #4
 8013768:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801376a:	68fb      	ldr	r3, [r7, #12]
 801376c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8013770:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013772:	68fb      	ldr	r3, [r7, #12]
 8013774:	3b04      	subs	r3, #4
 8013776:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013778:	68bb      	ldr	r3, [r7, #8]
 801377a:	f023 0201 	bic.w	r2, r3, #1
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	3b04      	subs	r3, #4
 8013786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013788:	4a08      	ldr	r2, [pc, #32]	@ (80137ac <pxPortInitialiseStack+0x54>)
 801378a:	68fb      	ldr	r3, [r7, #12]
 801378c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	3b14      	subs	r3, #20
 8013792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013794:	687a      	ldr	r2, [r7, #4]
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	3b20      	subs	r3, #32
 801379e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80137a0:	68fb      	ldr	r3, [r7, #12]
}
 80137a2:	4618      	mov	r0, r3
 80137a4:	3714      	adds	r7, #20
 80137a6:	46bd      	mov	sp, r7
 80137a8:	bc80      	pop	{r7}
 80137aa:	4770      	bx	lr
 80137ac:	080137b1 	.word	0x080137b1

080137b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80137b0:	b480      	push	{r7}
 80137b2:	b085      	sub	sp, #20
 80137b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80137b6:	2300      	movs	r3, #0
 80137b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80137ba:	4b12      	ldr	r3, [pc, #72]	@ (8013804 <prvTaskExitError+0x54>)
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137c2:	d00b      	beq.n	80137dc <prvTaskExitError+0x2c>
	__asm volatile
 80137c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80137c8:	f383 8811 	msr	BASEPRI, r3
 80137cc:	f3bf 8f6f 	isb	sy
 80137d0:	f3bf 8f4f 	dsb	sy
 80137d4:	60fb      	str	r3, [r7, #12]
}
 80137d6:	bf00      	nop
 80137d8:	bf00      	nop
 80137da:	e7fd      	b.n	80137d8 <prvTaskExitError+0x28>
	__asm volatile
 80137dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80137e0:	f383 8811 	msr	BASEPRI, r3
 80137e4:	f3bf 8f6f 	isb	sy
 80137e8:	f3bf 8f4f 	dsb	sy
 80137ec:	60bb      	str	r3, [r7, #8]
}
 80137ee:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80137f0:	bf00      	nop
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d0fc      	beq.n	80137f2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80137f8:	bf00      	nop
 80137fa:	bf00      	nop
 80137fc:	3714      	adds	r7, #20
 80137fe:	46bd      	mov	sp, r7
 8013800:	bc80      	pop	{r7}
 8013802:	4770      	bx	lr
 8013804:	20000618 	.word	0x20000618
	...

08013810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013810:	4b07      	ldr	r3, [pc, #28]	@ (8013830 <pxCurrentTCBConst2>)
 8013812:	6819      	ldr	r1, [r3, #0]
 8013814:	6808      	ldr	r0, [r1, #0]
 8013816:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801381a:	f380 8809 	msr	PSP, r0
 801381e:	f3bf 8f6f 	isb	sy
 8013822:	f04f 0000 	mov.w	r0, #0
 8013826:	f380 8811 	msr	BASEPRI, r0
 801382a:	f04e 0e0d 	orr.w	lr, lr, #13
 801382e:	4770      	bx	lr

08013830 <pxCurrentTCBConst2>:
 8013830:	20001d84 	.word	0x20001d84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013834:	bf00      	nop
 8013836:	bf00      	nop

08013838 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8013838:	4806      	ldr	r0, [pc, #24]	@ (8013854 <prvPortStartFirstTask+0x1c>)
 801383a:	6800      	ldr	r0, [r0, #0]
 801383c:	6800      	ldr	r0, [r0, #0]
 801383e:	f380 8808 	msr	MSP, r0
 8013842:	b662      	cpsie	i
 8013844:	b661      	cpsie	f
 8013846:	f3bf 8f4f 	dsb	sy
 801384a:	f3bf 8f6f 	isb	sy
 801384e:	df00      	svc	0
 8013850:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8013852:	bf00      	nop
 8013854:	e000ed08 	.word	0xe000ed08

08013858 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013858:	b580      	push	{r7, lr}
 801385a:	b084      	sub	sp, #16
 801385c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801385e:	4b32      	ldr	r3, [pc, #200]	@ (8013928 <xPortStartScheduler+0xd0>)
 8013860:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	781b      	ldrb	r3, [r3, #0]
 8013866:	b2db      	uxtb	r3, r3
 8013868:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	22ff      	movs	r2, #255	@ 0xff
 801386e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013870:	68fb      	ldr	r3, [r7, #12]
 8013872:	781b      	ldrb	r3, [r3, #0]
 8013874:	b2db      	uxtb	r3, r3
 8013876:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013878:	78fb      	ldrb	r3, [r7, #3]
 801387a:	b2db      	uxtb	r3, r3
 801387c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8013880:	b2da      	uxtb	r2, r3
 8013882:	4b2a      	ldr	r3, [pc, #168]	@ (801392c <xPortStartScheduler+0xd4>)
 8013884:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8013886:	4b2a      	ldr	r3, [pc, #168]	@ (8013930 <xPortStartScheduler+0xd8>)
 8013888:	2207      	movs	r2, #7
 801388a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801388c:	e009      	b.n	80138a2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 801388e:	4b28      	ldr	r3, [pc, #160]	@ (8013930 <xPortStartScheduler+0xd8>)
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	3b01      	subs	r3, #1
 8013894:	4a26      	ldr	r2, [pc, #152]	@ (8013930 <xPortStartScheduler+0xd8>)
 8013896:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013898:	78fb      	ldrb	r3, [r7, #3]
 801389a:	b2db      	uxtb	r3, r3
 801389c:	005b      	lsls	r3, r3, #1
 801389e:	b2db      	uxtb	r3, r3
 80138a0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80138a2:	78fb      	ldrb	r3, [r7, #3]
 80138a4:	b2db      	uxtb	r3, r3
 80138a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80138aa:	2b80      	cmp	r3, #128	@ 0x80
 80138ac:	d0ef      	beq.n	801388e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80138ae:	4b20      	ldr	r3, [pc, #128]	@ (8013930 <xPortStartScheduler+0xd8>)
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	f1c3 0307 	rsb	r3, r3, #7
 80138b6:	2b04      	cmp	r3, #4
 80138b8:	d00b      	beq.n	80138d2 <xPortStartScheduler+0x7a>
	__asm volatile
 80138ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80138be:	f383 8811 	msr	BASEPRI, r3
 80138c2:	f3bf 8f6f 	isb	sy
 80138c6:	f3bf 8f4f 	dsb	sy
 80138ca:	60bb      	str	r3, [r7, #8]
}
 80138cc:	bf00      	nop
 80138ce:	bf00      	nop
 80138d0:	e7fd      	b.n	80138ce <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80138d2:	4b17      	ldr	r3, [pc, #92]	@ (8013930 <xPortStartScheduler+0xd8>)
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	021b      	lsls	r3, r3, #8
 80138d8:	4a15      	ldr	r2, [pc, #84]	@ (8013930 <xPortStartScheduler+0xd8>)
 80138da:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80138dc:	4b14      	ldr	r3, [pc, #80]	@ (8013930 <xPortStartScheduler+0xd8>)
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80138e4:	4a12      	ldr	r2, [pc, #72]	@ (8013930 <xPortStartScheduler+0xd8>)
 80138e6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	b2da      	uxtb	r2, r3
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80138f0:	4b10      	ldr	r3, [pc, #64]	@ (8013934 <xPortStartScheduler+0xdc>)
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	4a0f      	ldr	r2, [pc, #60]	@ (8013934 <xPortStartScheduler+0xdc>)
 80138f6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80138fa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80138fc:	4b0d      	ldr	r3, [pc, #52]	@ (8013934 <xPortStartScheduler+0xdc>)
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	4a0c      	ldr	r2, [pc, #48]	@ (8013934 <xPortStartScheduler+0xdc>)
 8013902:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8013906:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013908:	f000 f8b8 	bl	8013a7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801390c:	4b0a      	ldr	r3, [pc, #40]	@ (8013938 <xPortStartScheduler+0xe0>)
 801390e:	2200      	movs	r2, #0
 8013910:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013912:	f7ff ff91 	bl	8013838 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013916:	f7fe fbc1 	bl	801209c <vTaskSwitchContext>
	prvTaskExitError();
 801391a:	f7ff ff49 	bl	80137b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801391e:	2300      	movs	r3, #0
}
 8013920:	4618      	mov	r0, r3
 8013922:	3710      	adds	r7, #16
 8013924:	46bd      	mov	sp, r7
 8013926:	bd80      	pop	{r7, pc}
 8013928:	e000e400 	.word	0xe000e400
 801392c:	200023b0 	.word	0x200023b0
 8013930:	200023b4 	.word	0x200023b4
 8013934:	e000ed20 	.word	0xe000ed20
 8013938:	20000618 	.word	0x20000618

0801393c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801393c:	b480      	push	{r7}
 801393e:	b083      	sub	sp, #12
 8013940:	af00      	add	r7, sp, #0
	__asm volatile
 8013942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013946:	f383 8811 	msr	BASEPRI, r3
 801394a:	f3bf 8f6f 	isb	sy
 801394e:	f3bf 8f4f 	dsb	sy
 8013952:	607b      	str	r3, [r7, #4]
}
 8013954:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013956:	4b0f      	ldr	r3, [pc, #60]	@ (8013994 <vPortEnterCritical+0x58>)
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	3301      	adds	r3, #1
 801395c:	4a0d      	ldr	r2, [pc, #52]	@ (8013994 <vPortEnterCritical+0x58>)
 801395e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013960:	4b0c      	ldr	r3, [pc, #48]	@ (8013994 <vPortEnterCritical+0x58>)
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	2b01      	cmp	r3, #1
 8013966:	d110      	bne.n	801398a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013968:	4b0b      	ldr	r3, [pc, #44]	@ (8013998 <vPortEnterCritical+0x5c>)
 801396a:	681b      	ldr	r3, [r3, #0]
 801396c:	b2db      	uxtb	r3, r3
 801396e:	2b00      	cmp	r3, #0
 8013970:	d00b      	beq.n	801398a <vPortEnterCritical+0x4e>
	__asm volatile
 8013972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013976:	f383 8811 	msr	BASEPRI, r3
 801397a:	f3bf 8f6f 	isb	sy
 801397e:	f3bf 8f4f 	dsb	sy
 8013982:	603b      	str	r3, [r7, #0]
}
 8013984:	bf00      	nop
 8013986:	bf00      	nop
 8013988:	e7fd      	b.n	8013986 <vPortEnterCritical+0x4a>
	}
}
 801398a:	bf00      	nop
 801398c:	370c      	adds	r7, #12
 801398e:	46bd      	mov	sp, r7
 8013990:	bc80      	pop	{r7}
 8013992:	4770      	bx	lr
 8013994:	20000618 	.word	0x20000618
 8013998:	e000ed04 	.word	0xe000ed04

0801399c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801399c:	b480      	push	{r7}
 801399e:	b083      	sub	sp, #12
 80139a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80139a2:	4b12      	ldr	r3, [pc, #72]	@ (80139ec <vPortExitCritical+0x50>)
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d10b      	bne.n	80139c2 <vPortExitCritical+0x26>
	__asm volatile
 80139aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139ae:	f383 8811 	msr	BASEPRI, r3
 80139b2:	f3bf 8f6f 	isb	sy
 80139b6:	f3bf 8f4f 	dsb	sy
 80139ba:	607b      	str	r3, [r7, #4]
}
 80139bc:	bf00      	nop
 80139be:	bf00      	nop
 80139c0:	e7fd      	b.n	80139be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80139c2:	4b0a      	ldr	r3, [pc, #40]	@ (80139ec <vPortExitCritical+0x50>)
 80139c4:	681b      	ldr	r3, [r3, #0]
 80139c6:	3b01      	subs	r3, #1
 80139c8:	4a08      	ldr	r2, [pc, #32]	@ (80139ec <vPortExitCritical+0x50>)
 80139ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80139cc:	4b07      	ldr	r3, [pc, #28]	@ (80139ec <vPortExitCritical+0x50>)
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d105      	bne.n	80139e0 <vPortExitCritical+0x44>
 80139d4:	2300      	movs	r3, #0
 80139d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80139d8:	683b      	ldr	r3, [r7, #0]
 80139da:	f383 8811 	msr	BASEPRI, r3
}
 80139de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80139e0:	bf00      	nop
 80139e2:	370c      	adds	r7, #12
 80139e4:	46bd      	mov	sp, r7
 80139e6:	bc80      	pop	{r7}
 80139e8:	4770      	bx	lr
 80139ea:	bf00      	nop
 80139ec:	20000618 	.word	0x20000618

080139f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80139f0:	f3ef 8009 	mrs	r0, PSP
 80139f4:	f3bf 8f6f 	isb	sy
 80139f8:	4b0d      	ldr	r3, [pc, #52]	@ (8013a30 <pxCurrentTCBConst>)
 80139fa:	681a      	ldr	r2, [r3, #0]
 80139fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8013a00:	6010      	str	r0, [r2, #0]
 8013a02:	e92d 4008 	stmdb	sp!, {r3, lr}
 8013a06:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8013a0a:	f380 8811 	msr	BASEPRI, r0
 8013a0e:	f7fe fb45 	bl	801209c <vTaskSwitchContext>
 8013a12:	f04f 0000 	mov.w	r0, #0
 8013a16:	f380 8811 	msr	BASEPRI, r0
 8013a1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013a1e:	6819      	ldr	r1, [r3, #0]
 8013a20:	6808      	ldr	r0, [r1, #0]
 8013a22:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8013a26:	f380 8809 	msr	PSP, r0
 8013a2a:	f3bf 8f6f 	isb	sy
 8013a2e:	4770      	bx	lr

08013a30 <pxCurrentTCBConst>:
 8013a30:	20001d84 	.word	0x20001d84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013a34:	bf00      	nop
 8013a36:	bf00      	nop

08013a38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013a38:	b580      	push	{r7, lr}
 8013a3a:	b082      	sub	sp, #8
 8013a3c:	af00      	add	r7, sp, #0
	__asm volatile
 8013a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a42:	f383 8811 	msr	BASEPRI, r3
 8013a46:	f3bf 8f6f 	isb	sy
 8013a4a:	f3bf 8f4f 	dsb	sy
 8013a4e:	607b      	str	r3, [r7, #4]
}
 8013a50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013a52:	f7fe fa69 	bl	8011f28 <xTaskIncrementTick>
 8013a56:	4603      	mov	r3, r0
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d003      	beq.n	8013a64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013a5c:	4b06      	ldr	r3, [pc, #24]	@ (8013a78 <xPortSysTickHandler+0x40>)
 8013a5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013a62:	601a      	str	r2, [r3, #0]
 8013a64:	2300      	movs	r3, #0
 8013a66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013a68:	683b      	ldr	r3, [r7, #0]
 8013a6a:	f383 8811 	msr	BASEPRI, r3
}
 8013a6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013a70:	bf00      	nop
 8013a72:	3708      	adds	r7, #8
 8013a74:	46bd      	mov	sp, r7
 8013a76:	bd80      	pop	{r7, pc}
 8013a78:	e000ed04 	.word	0xe000ed04

08013a7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8013a7c:	b480      	push	{r7}
 8013a7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013a80:	4b0a      	ldr	r3, [pc, #40]	@ (8013aac <vPortSetupTimerInterrupt+0x30>)
 8013a82:	2200      	movs	r2, #0
 8013a84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013a86:	4b0a      	ldr	r3, [pc, #40]	@ (8013ab0 <vPortSetupTimerInterrupt+0x34>)
 8013a88:	2200      	movs	r2, #0
 8013a8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013a8c:	4b09      	ldr	r3, [pc, #36]	@ (8013ab4 <vPortSetupTimerInterrupt+0x38>)
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	4a09      	ldr	r2, [pc, #36]	@ (8013ab8 <vPortSetupTimerInterrupt+0x3c>)
 8013a92:	fba2 2303 	umull	r2, r3, r2, r3
 8013a96:	099b      	lsrs	r3, r3, #6
 8013a98:	4a08      	ldr	r2, [pc, #32]	@ (8013abc <vPortSetupTimerInterrupt+0x40>)
 8013a9a:	3b01      	subs	r3, #1
 8013a9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013a9e:	4b03      	ldr	r3, [pc, #12]	@ (8013aac <vPortSetupTimerInterrupt+0x30>)
 8013aa0:	2207      	movs	r2, #7
 8013aa2:	601a      	str	r2, [r3, #0]
}
 8013aa4:	bf00      	nop
 8013aa6:	46bd      	mov	sp, r7
 8013aa8:	bc80      	pop	{r7}
 8013aaa:	4770      	bx	lr
 8013aac:	e000e010 	.word	0xe000e010
 8013ab0:	e000e018 	.word	0xe000e018
 8013ab4:	20000000 	.word	0x20000000
 8013ab8:	10624dd3 	.word	0x10624dd3
 8013abc:	e000e014 	.word	0xe000e014

08013ac0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013ac0:	b480      	push	{r7}
 8013ac2:	b085      	sub	sp, #20
 8013ac4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013ac6:	f3ef 8305 	mrs	r3, IPSR
 8013aca:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	2b0f      	cmp	r3, #15
 8013ad0:	d915      	bls.n	8013afe <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013ad2:	4a17      	ldr	r2, [pc, #92]	@ (8013b30 <vPortValidateInterruptPriority+0x70>)
 8013ad4:	68fb      	ldr	r3, [r7, #12]
 8013ad6:	4413      	add	r3, r2
 8013ad8:	781b      	ldrb	r3, [r3, #0]
 8013ada:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013adc:	4b15      	ldr	r3, [pc, #84]	@ (8013b34 <vPortValidateInterruptPriority+0x74>)
 8013ade:	781b      	ldrb	r3, [r3, #0]
 8013ae0:	7afa      	ldrb	r2, [r7, #11]
 8013ae2:	429a      	cmp	r2, r3
 8013ae4:	d20b      	bcs.n	8013afe <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8013ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013aea:	f383 8811 	msr	BASEPRI, r3
 8013aee:	f3bf 8f6f 	isb	sy
 8013af2:	f3bf 8f4f 	dsb	sy
 8013af6:	607b      	str	r3, [r7, #4]
}
 8013af8:	bf00      	nop
 8013afa:	bf00      	nop
 8013afc:	e7fd      	b.n	8013afa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013afe:	4b0e      	ldr	r3, [pc, #56]	@ (8013b38 <vPortValidateInterruptPriority+0x78>)
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8013b06:	4b0d      	ldr	r3, [pc, #52]	@ (8013b3c <vPortValidateInterruptPriority+0x7c>)
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	429a      	cmp	r2, r3
 8013b0c:	d90b      	bls.n	8013b26 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8013b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b12:	f383 8811 	msr	BASEPRI, r3
 8013b16:	f3bf 8f6f 	isb	sy
 8013b1a:	f3bf 8f4f 	dsb	sy
 8013b1e:	603b      	str	r3, [r7, #0]
}
 8013b20:	bf00      	nop
 8013b22:	bf00      	nop
 8013b24:	e7fd      	b.n	8013b22 <vPortValidateInterruptPriority+0x62>
	}
 8013b26:	bf00      	nop
 8013b28:	3714      	adds	r7, #20
 8013b2a:	46bd      	mov	sp, r7
 8013b2c:	bc80      	pop	{r7}
 8013b2e:	4770      	bx	lr
 8013b30:	e000e3f0 	.word	0xe000e3f0
 8013b34:	200023b0 	.word	0x200023b0
 8013b38:	e000ed0c 	.word	0xe000ed0c
 8013b3c:	200023b4 	.word	0x200023b4

08013b40 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013b40:	b580      	push	{r7, lr}
 8013b42:	b08a      	sub	sp, #40	@ 0x28
 8013b44:	af00      	add	r7, sp, #0
 8013b46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013b48:	2300      	movs	r3, #0
 8013b4a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013b4c:	f7fe f89a 	bl	8011c84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013b50:	4b5c      	ldr	r3, [pc, #368]	@ (8013cc4 <pvPortMalloc+0x184>)
 8013b52:	681b      	ldr	r3, [r3, #0]
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d101      	bne.n	8013b5c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013b58:	f000 f924 	bl	8013da4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013b5c:	4b5a      	ldr	r3, [pc, #360]	@ (8013cc8 <pvPortMalloc+0x188>)
 8013b5e:	681a      	ldr	r2, [r3, #0]
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	4013      	ands	r3, r2
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	f040 8095 	bne.w	8013c94 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d01e      	beq.n	8013bae <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8013b70:	2208      	movs	r2, #8
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	4413      	add	r3, r2
 8013b76:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	f003 0307 	and.w	r3, r3, #7
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d015      	beq.n	8013bae <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	f023 0307 	bic.w	r3, r3, #7
 8013b88:	3308      	adds	r3, #8
 8013b8a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	f003 0307 	and.w	r3, r3, #7
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d00b      	beq.n	8013bae <pvPortMalloc+0x6e>
	__asm volatile
 8013b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b9a:	f383 8811 	msr	BASEPRI, r3
 8013b9e:	f3bf 8f6f 	isb	sy
 8013ba2:	f3bf 8f4f 	dsb	sy
 8013ba6:	617b      	str	r3, [r7, #20]
}
 8013ba8:	bf00      	nop
 8013baa:	bf00      	nop
 8013bac:	e7fd      	b.n	8013baa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d06f      	beq.n	8013c94 <pvPortMalloc+0x154>
 8013bb4:	4b45      	ldr	r3, [pc, #276]	@ (8013ccc <pvPortMalloc+0x18c>)
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	687a      	ldr	r2, [r7, #4]
 8013bba:	429a      	cmp	r2, r3
 8013bbc:	d86a      	bhi.n	8013c94 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013bbe:	4b44      	ldr	r3, [pc, #272]	@ (8013cd0 <pvPortMalloc+0x190>)
 8013bc0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013bc2:	4b43      	ldr	r3, [pc, #268]	@ (8013cd0 <pvPortMalloc+0x190>)
 8013bc4:	681b      	ldr	r3, [r3, #0]
 8013bc6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013bc8:	e004      	b.n	8013bd4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8013bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bcc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bd6:	685b      	ldr	r3, [r3, #4]
 8013bd8:	687a      	ldr	r2, [r7, #4]
 8013bda:	429a      	cmp	r2, r3
 8013bdc:	d903      	bls.n	8013be6 <pvPortMalloc+0xa6>
 8013bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d1f1      	bne.n	8013bca <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013be6:	4b37      	ldr	r3, [pc, #220]	@ (8013cc4 <pvPortMalloc+0x184>)
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013bec:	429a      	cmp	r2, r3
 8013bee:	d051      	beq.n	8013c94 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013bf0:	6a3b      	ldr	r3, [r7, #32]
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	2208      	movs	r2, #8
 8013bf6:	4413      	add	r3, r2
 8013bf8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bfc:	681a      	ldr	r2, [r3, #0]
 8013bfe:	6a3b      	ldr	r3, [r7, #32]
 8013c00:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c04:	685a      	ldr	r2, [r3, #4]
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	1ad2      	subs	r2, r2, r3
 8013c0a:	2308      	movs	r3, #8
 8013c0c:	005b      	lsls	r3, r3, #1
 8013c0e:	429a      	cmp	r2, r3
 8013c10:	d920      	bls.n	8013c54 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013c12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	4413      	add	r3, r2
 8013c18:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013c1a:	69bb      	ldr	r3, [r7, #24]
 8013c1c:	f003 0307 	and.w	r3, r3, #7
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d00b      	beq.n	8013c3c <pvPortMalloc+0xfc>
	__asm volatile
 8013c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c28:	f383 8811 	msr	BASEPRI, r3
 8013c2c:	f3bf 8f6f 	isb	sy
 8013c30:	f3bf 8f4f 	dsb	sy
 8013c34:	613b      	str	r3, [r7, #16]
}
 8013c36:	bf00      	nop
 8013c38:	bf00      	nop
 8013c3a:	e7fd      	b.n	8013c38 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c3e:	685a      	ldr	r2, [r3, #4]
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	1ad2      	subs	r2, r2, r3
 8013c44:	69bb      	ldr	r3, [r7, #24]
 8013c46:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c4a:	687a      	ldr	r2, [r7, #4]
 8013c4c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013c4e:	69b8      	ldr	r0, [r7, #24]
 8013c50:	f000 f90a 	bl	8013e68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013c54:	4b1d      	ldr	r3, [pc, #116]	@ (8013ccc <pvPortMalloc+0x18c>)
 8013c56:	681a      	ldr	r2, [r3, #0]
 8013c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c5a:	685b      	ldr	r3, [r3, #4]
 8013c5c:	1ad3      	subs	r3, r2, r3
 8013c5e:	4a1b      	ldr	r2, [pc, #108]	@ (8013ccc <pvPortMalloc+0x18c>)
 8013c60:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013c62:	4b1a      	ldr	r3, [pc, #104]	@ (8013ccc <pvPortMalloc+0x18c>)
 8013c64:	681a      	ldr	r2, [r3, #0]
 8013c66:	4b1b      	ldr	r3, [pc, #108]	@ (8013cd4 <pvPortMalloc+0x194>)
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	429a      	cmp	r2, r3
 8013c6c:	d203      	bcs.n	8013c76 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013c6e:	4b17      	ldr	r3, [pc, #92]	@ (8013ccc <pvPortMalloc+0x18c>)
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	4a18      	ldr	r2, [pc, #96]	@ (8013cd4 <pvPortMalloc+0x194>)
 8013c74:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c78:	685a      	ldr	r2, [r3, #4]
 8013c7a:	4b13      	ldr	r3, [pc, #76]	@ (8013cc8 <pvPortMalloc+0x188>)
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	431a      	orrs	r2, r3
 8013c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c82:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c86:	2200      	movs	r2, #0
 8013c88:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8013c8a:	4b13      	ldr	r3, [pc, #76]	@ (8013cd8 <pvPortMalloc+0x198>)
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	3301      	adds	r3, #1
 8013c90:	4a11      	ldr	r2, [pc, #68]	@ (8013cd8 <pvPortMalloc+0x198>)
 8013c92:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013c94:	f7fe f804 	bl	8011ca0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013c98:	69fb      	ldr	r3, [r7, #28]
 8013c9a:	f003 0307 	and.w	r3, r3, #7
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d00b      	beq.n	8013cba <pvPortMalloc+0x17a>
	__asm volatile
 8013ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ca6:	f383 8811 	msr	BASEPRI, r3
 8013caa:	f3bf 8f6f 	isb	sy
 8013cae:	f3bf 8f4f 	dsb	sy
 8013cb2:	60fb      	str	r3, [r7, #12]
}
 8013cb4:	bf00      	nop
 8013cb6:	bf00      	nop
 8013cb8:	e7fd      	b.n	8013cb6 <pvPortMalloc+0x176>
	return pvReturn;
 8013cba:	69fb      	ldr	r3, [r7, #28]
}
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	3728      	adds	r7, #40	@ 0x28
 8013cc0:	46bd      	mov	sp, r7
 8013cc2:	bd80      	pop	{r7, pc}
 8013cc4:	200083c0 	.word	0x200083c0
 8013cc8:	200083d4 	.word	0x200083d4
 8013ccc:	200083c4 	.word	0x200083c4
 8013cd0:	200083b8 	.word	0x200083b8
 8013cd4:	200083c8 	.word	0x200083c8
 8013cd8:	200083cc 	.word	0x200083cc

08013cdc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013cdc:	b580      	push	{r7, lr}
 8013cde:	b086      	sub	sp, #24
 8013ce0:	af00      	add	r7, sp, #0
 8013ce2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d04f      	beq.n	8013d8e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013cee:	2308      	movs	r3, #8
 8013cf0:	425b      	negs	r3, r3
 8013cf2:	697a      	ldr	r2, [r7, #20]
 8013cf4:	4413      	add	r3, r2
 8013cf6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013cf8:	697b      	ldr	r3, [r7, #20]
 8013cfa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013cfc:	693b      	ldr	r3, [r7, #16]
 8013cfe:	685a      	ldr	r2, [r3, #4]
 8013d00:	4b25      	ldr	r3, [pc, #148]	@ (8013d98 <vPortFree+0xbc>)
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	4013      	ands	r3, r2
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d10b      	bne.n	8013d22 <vPortFree+0x46>
	__asm volatile
 8013d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d0e:	f383 8811 	msr	BASEPRI, r3
 8013d12:	f3bf 8f6f 	isb	sy
 8013d16:	f3bf 8f4f 	dsb	sy
 8013d1a:	60fb      	str	r3, [r7, #12]
}
 8013d1c:	bf00      	nop
 8013d1e:	bf00      	nop
 8013d20:	e7fd      	b.n	8013d1e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013d22:	693b      	ldr	r3, [r7, #16]
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d00b      	beq.n	8013d42 <vPortFree+0x66>
	__asm volatile
 8013d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d2e:	f383 8811 	msr	BASEPRI, r3
 8013d32:	f3bf 8f6f 	isb	sy
 8013d36:	f3bf 8f4f 	dsb	sy
 8013d3a:	60bb      	str	r3, [r7, #8]
}
 8013d3c:	bf00      	nop
 8013d3e:	bf00      	nop
 8013d40:	e7fd      	b.n	8013d3e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013d42:	693b      	ldr	r3, [r7, #16]
 8013d44:	685a      	ldr	r2, [r3, #4]
 8013d46:	4b14      	ldr	r3, [pc, #80]	@ (8013d98 <vPortFree+0xbc>)
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	4013      	ands	r3, r2
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d01e      	beq.n	8013d8e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013d50:	693b      	ldr	r3, [r7, #16]
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d11a      	bne.n	8013d8e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013d58:	693b      	ldr	r3, [r7, #16]
 8013d5a:	685a      	ldr	r2, [r3, #4]
 8013d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8013d98 <vPortFree+0xbc>)
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	43db      	mvns	r3, r3
 8013d62:	401a      	ands	r2, r3
 8013d64:	693b      	ldr	r3, [r7, #16]
 8013d66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013d68:	f7fd ff8c 	bl	8011c84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013d6c:	693b      	ldr	r3, [r7, #16]
 8013d6e:	685a      	ldr	r2, [r3, #4]
 8013d70:	4b0a      	ldr	r3, [pc, #40]	@ (8013d9c <vPortFree+0xc0>)
 8013d72:	681b      	ldr	r3, [r3, #0]
 8013d74:	4413      	add	r3, r2
 8013d76:	4a09      	ldr	r2, [pc, #36]	@ (8013d9c <vPortFree+0xc0>)
 8013d78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013d7a:	6938      	ldr	r0, [r7, #16]
 8013d7c:	f000 f874 	bl	8013e68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8013d80:	4b07      	ldr	r3, [pc, #28]	@ (8013da0 <vPortFree+0xc4>)
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	3301      	adds	r3, #1
 8013d86:	4a06      	ldr	r2, [pc, #24]	@ (8013da0 <vPortFree+0xc4>)
 8013d88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8013d8a:	f7fd ff89 	bl	8011ca0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013d8e:	bf00      	nop
 8013d90:	3718      	adds	r7, #24
 8013d92:	46bd      	mov	sp, r7
 8013d94:	bd80      	pop	{r7, pc}
 8013d96:	bf00      	nop
 8013d98:	200083d4 	.word	0x200083d4
 8013d9c:	200083c4 	.word	0x200083c4
 8013da0:	200083d0 	.word	0x200083d0

08013da4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013da4:	b480      	push	{r7}
 8013da6:	b085      	sub	sp, #20
 8013da8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013daa:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8013dae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013db0:	4b27      	ldr	r3, [pc, #156]	@ (8013e50 <prvHeapInit+0xac>)
 8013db2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	f003 0307 	and.w	r3, r3, #7
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d00c      	beq.n	8013dd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	3307      	adds	r3, #7
 8013dc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	f023 0307 	bic.w	r3, r3, #7
 8013dca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013dcc:	68ba      	ldr	r2, [r7, #8]
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	1ad3      	subs	r3, r2, r3
 8013dd2:	4a1f      	ldr	r2, [pc, #124]	@ (8013e50 <prvHeapInit+0xac>)
 8013dd4:	4413      	add	r3, r2
 8013dd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013ddc:	4a1d      	ldr	r2, [pc, #116]	@ (8013e54 <prvHeapInit+0xb0>)
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013de2:	4b1c      	ldr	r3, [pc, #112]	@ (8013e54 <prvHeapInit+0xb0>)
 8013de4:	2200      	movs	r2, #0
 8013de6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	68ba      	ldr	r2, [r7, #8]
 8013dec:	4413      	add	r3, r2
 8013dee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013df0:	2208      	movs	r2, #8
 8013df2:	68fb      	ldr	r3, [r7, #12]
 8013df4:	1a9b      	subs	r3, r3, r2
 8013df6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	f023 0307 	bic.w	r3, r3, #7
 8013dfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	4a15      	ldr	r2, [pc, #84]	@ (8013e58 <prvHeapInit+0xb4>)
 8013e04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013e06:	4b14      	ldr	r3, [pc, #80]	@ (8013e58 <prvHeapInit+0xb4>)
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	2200      	movs	r2, #0
 8013e0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013e0e:	4b12      	ldr	r3, [pc, #72]	@ (8013e58 <prvHeapInit+0xb4>)
 8013e10:	681b      	ldr	r3, [r3, #0]
 8013e12:	2200      	movs	r2, #0
 8013e14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013e1a:	683b      	ldr	r3, [r7, #0]
 8013e1c:	68fa      	ldr	r2, [r7, #12]
 8013e1e:	1ad2      	subs	r2, r2, r3
 8013e20:	683b      	ldr	r3, [r7, #0]
 8013e22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013e24:	4b0c      	ldr	r3, [pc, #48]	@ (8013e58 <prvHeapInit+0xb4>)
 8013e26:	681a      	ldr	r2, [r3, #0]
 8013e28:	683b      	ldr	r3, [r7, #0]
 8013e2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013e2c:	683b      	ldr	r3, [r7, #0]
 8013e2e:	685b      	ldr	r3, [r3, #4]
 8013e30:	4a0a      	ldr	r2, [pc, #40]	@ (8013e5c <prvHeapInit+0xb8>)
 8013e32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013e34:	683b      	ldr	r3, [r7, #0]
 8013e36:	685b      	ldr	r3, [r3, #4]
 8013e38:	4a09      	ldr	r2, [pc, #36]	@ (8013e60 <prvHeapInit+0xbc>)
 8013e3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013e3c:	4b09      	ldr	r3, [pc, #36]	@ (8013e64 <prvHeapInit+0xc0>)
 8013e3e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8013e42:	601a      	str	r2, [r3, #0]
}
 8013e44:	bf00      	nop
 8013e46:	3714      	adds	r7, #20
 8013e48:	46bd      	mov	sp, r7
 8013e4a:	bc80      	pop	{r7}
 8013e4c:	4770      	bx	lr
 8013e4e:	bf00      	nop
 8013e50:	200023b8 	.word	0x200023b8
 8013e54:	200083b8 	.word	0x200083b8
 8013e58:	200083c0 	.word	0x200083c0
 8013e5c:	200083c8 	.word	0x200083c8
 8013e60:	200083c4 	.word	0x200083c4
 8013e64:	200083d4 	.word	0x200083d4

08013e68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013e68:	b480      	push	{r7}
 8013e6a:	b085      	sub	sp, #20
 8013e6c:	af00      	add	r7, sp, #0
 8013e6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013e70:	4b27      	ldr	r3, [pc, #156]	@ (8013f10 <prvInsertBlockIntoFreeList+0xa8>)
 8013e72:	60fb      	str	r3, [r7, #12]
 8013e74:	e002      	b.n	8013e7c <prvInsertBlockIntoFreeList+0x14>
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	681b      	ldr	r3, [r3, #0]
 8013e7a:	60fb      	str	r3, [r7, #12]
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	687a      	ldr	r2, [r7, #4]
 8013e82:	429a      	cmp	r2, r3
 8013e84:	d8f7      	bhi.n	8013e76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	685b      	ldr	r3, [r3, #4]
 8013e8e:	68ba      	ldr	r2, [r7, #8]
 8013e90:	4413      	add	r3, r2
 8013e92:	687a      	ldr	r2, [r7, #4]
 8013e94:	429a      	cmp	r2, r3
 8013e96:	d108      	bne.n	8013eaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013e98:	68fb      	ldr	r3, [r7, #12]
 8013e9a:	685a      	ldr	r2, [r3, #4]
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	685b      	ldr	r3, [r3, #4]
 8013ea0:	441a      	add	r2, r3
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	685b      	ldr	r3, [r3, #4]
 8013eb2:	68ba      	ldr	r2, [r7, #8]
 8013eb4:	441a      	add	r2, r3
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	429a      	cmp	r2, r3
 8013ebc:	d118      	bne.n	8013ef0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	681a      	ldr	r2, [r3, #0]
 8013ec2:	4b14      	ldr	r3, [pc, #80]	@ (8013f14 <prvInsertBlockIntoFreeList+0xac>)
 8013ec4:	681b      	ldr	r3, [r3, #0]
 8013ec6:	429a      	cmp	r2, r3
 8013ec8:	d00d      	beq.n	8013ee6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	685a      	ldr	r2, [r3, #4]
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	685b      	ldr	r3, [r3, #4]
 8013ed4:	441a      	add	r2, r3
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	681a      	ldr	r2, [r3, #0]
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	601a      	str	r2, [r3, #0]
 8013ee4:	e008      	b.n	8013ef8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8013f14 <prvInsertBlockIntoFreeList+0xac>)
 8013ee8:	681a      	ldr	r2, [r3, #0]
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	601a      	str	r2, [r3, #0]
 8013eee:	e003      	b.n	8013ef8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	681a      	ldr	r2, [r3, #0]
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013ef8:	68fa      	ldr	r2, [r7, #12]
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	429a      	cmp	r2, r3
 8013efe:	d002      	beq.n	8013f06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	687a      	ldr	r2, [r7, #4]
 8013f04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013f06:	bf00      	nop
 8013f08:	3714      	adds	r7, #20
 8013f0a:	46bd      	mov	sp, r7
 8013f0c:	bc80      	pop	{r7}
 8013f0e:	4770      	bx	lr
 8013f10:	200083b8 	.word	0x200083b8
 8013f14:	200083c0 	.word	0x200083c0

08013f18 <__assert_func>:
 8013f18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013f1a:	4614      	mov	r4, r2
 8013f1c:	461a      	mov	r2, r3
 8013f1e:	4b09      	ldr	r3, [pc, #36]	@ (8013f44 <__assert_func+0x2c>)
 8013f20:	4605      	mov	r5, r0
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	68d8      	ldr	r0, [r3, #12]
 8013f26:	b14c      	cbz	r4, 8013f3c <__assert_func+0x24>
 8013f28:	4b07      	ldr	r3, [pc, #28]	@ (8013f48 <__assert_func+0x30>)
 8013f2a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013f2e:	9100      	str	r1, [sp, #0]
 8013f30:	462b      	mov	r3, r5
 8013f32:	4906      	ldr	r1, [pc, #24]	@ (8013f4c <__assert_func+0x34>)
 8013f34:	f000 f9e0 	bl	80142f8 <fiprintf>
 8013f38:	f000 fd41 	bl	80149be <abort>
 8013f3c:	4b04      	ldr	r3, [pc, #16]	@ (8013f50 <__assert_func+0x38>)
 8013f3e:	461c      	mov	r4, r3
 8013f40:	e7f3      	b.n	8013f2a <__assert_func+0x12>
 8013f42:	bf00      	nop
 8013f44:	20000628 	.word	0x20000628
 8013f48:	08019f5a 	.word	0x08019f5a
 8013f4c:	08019f67 	.word	0x08019f67
 8013f50:	08019f95 	.word	0x08019f95

08013f54 <malloc>:
 8013f54:	4b02      	ldr	r3, [pc, #8]	@ (8013f60 <malloc+0xc>)
 8013f56:	4601      	mov	r1, r0
 8013f58:	6818      	ldr	r0, [r3, #0]
 8013f5a:	f000 b825 	b.w	8013fa8 <_malloc_r>
 8013f5e:	bf00      	nop
 8013f60:	20000628 	.word	0x20000628

08013f64 <sbrk_aligned>:
 8013f64:	b570      	push	{r4, r5, r6, lr}
 8013f66:	4e0f      	ldr	r6, [pc, #60]	@ (8013fa4 <sbrk_aligned+0x40>)
 8013f68:	460c      	mov	r4, r1
 8013f6a:	6831      	ldr	r1, [r6, #0]
 8013f6c:	4605      	mov	r5, r0
 8013f6e:	b911      	cbnz	r1, 8013f76 <sbrk_aligned+0x12>
 8013f70:	f000 fcc0 	bl	80148f4 <_sbrk_r>
 8013f74:	6030      	str	r0, [r6, #0]
 8013f76:	4621      	mov	r1, r4
 8013f78:	4628      	mov	r0, r5
 8013f7a:	f000 fcbb 	bl	80148f4 <_sbrk_r>
 8013f7e:	1c43      	adds	r3, r0, #1
 8013f80:	d103      	bne.n	8013f8a <sbrk_aligned+0x26>
 8013f82:	f04f 34ff 	mov.w	r4, #4294967295
 8013f86:	4620      	mov	r0, r4
 8013f88:	bd70      	pop	{r4, r5, r6, pc}
 8013f8a:	1cc4      	adds	r4, r0, #3
 8013f8c:	f024 0403 	bic.w	r4, r4, #3
 8013f90:	42a0      	cmp	r0, r4
 8013f92:	d0f8      	beq.n	8013f86 <sbrk_aligned+0x22>
 8013f94:	1a21      	subs	r1, r4, r0
 8013f96:	4628      	mov	r0, r5
 8013f98:	f000 fcac 	bl	80148f4 <_sbrk_r>
 8013f9c:	3001      	adds	r0, #1
 8013f9e:	d1f2      	bne.n	8013f86 <sbrk_aligned+0x22>
 8013fa0:	e7ef      	b.n	8013f82 <sbrk_aligned+0x1e>
 8013fa2:	bf00      	nop
 8013fa4:	200083d8 	.word	0x200083d8

08013fa8 <_malloc_r>:
 8013fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013fac:	1ccd      	adds	r5, r1, #3
 8013fae:	f025 0503 	bic.w	r5, r5, #3
 8013fb2:	3508      	adds	r5, #8
 8013fb4:	2d0c      	cmp	r5, #12
 8013fb6:	bf38      	it	cc
 8013fb8:	250c      	movcc	r5, #12
 8013fba:	2d00      	cmp	r5, #0
 8013fbc:	4606      	mov	r6, r0
 8013fbe:	db01      	blt.n	8013fc4 <_malloc_r+0x1c>
 8013fc0:	42a9      	cmp	r1, r5
 8013fc2:	d904      	bls.n	8013fce <_malloc_r+0x26>
 8013fc4:	230c      	movs	r3, #12
 8013fc6:	6033      	str	r3, [r6, #0]
 8013fc8:	2000      	movs	r0, #0
 8013fca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013fce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80140a4 <_malloc_r+0xfc>
 8013fd2:	f000 f869 	bl	80140a8 <__malloc_lock>
 8013fd6:	f8d8 3000 	ldr.w	r3, [r8]
 8013fda:	461c      	mov	r4, r3
 8013fdc:	bb44      	cbnz	r4, 8014030 <_malloc_r+0x88>
 8013fde:	4629      	mov	r1, r5
 8013fe0:	4630      	mov	r0, r6
 8013fe2:	f7ff ffbf 	bl	8013f64 <sbrk_aligned>
 8013fe6:	1c43      	adds	r3, r0, #1
 8013fe8:	4604      	mov	r4, r0
 8013fea:	d158      	bne.n	801409e <_malloc_r+0xf6>
 8013fec:	f8d8 4000 	ldr.w	r4, [r8]
 8013ff0:	4627      	mov	r7, r4
 8013ff2:	2f00      	cmp	r7, #0
 8013ff4:	d143      	bne.n	801407e <_malloc_r+0xd6>
 8013ff6:	2c00      	cmp	r4, #0
 8013ff8:	d04b      	beq.n	8014092 <_malloc_r+0xea>
 8013ffa:	6823      	ldr	r3, [r4, #0]
 8013ffc:	4639      	mov	r1, r7
 8013ffe:	4630      	mov	r0, r6
 8014000:	eb04 0903 	add.w	r9, r4, r3
 8014004:	f000 fc76 	bl	80148f4 <_sbrk_r>
 8014008:	4581      	cmp	r9, r0
 801400a:	d142      	bne.n	8014092 <_malloc_r+0xea>
 801400c:	6821      	ldr	r1, [r4, #0]
 801400e:	4630      	mov	r0, r6
 8014010:	1a6d      	subs	r5, r5, r1
 8014012:	4629      	mov	r1, r5
 8014014:	f7ff ffa6 	bl	8013f64 <sbrk_aligned>
 8014018:	3001      	adds	r0, #1
 801401a:	d03a      	beq.n	8014092 <_malloc_r+0xea>
 801401c:	6823      	ldr	r3, [r4, #0]
 801401e:	442b      	add	r3, r5
 8014020:	6023      	str	r3, [r4, #0]
 8014022:	f8d8 3000 	ldr.w	r3, [r8]
 8014026:	685a      	ldr	r2, [r3, #4]
 8014028:	bb62      	cbnz	r2, 8014084 <_malloc_r+0xdc>
 801402a:	f8c8 7000 	str.w	r7, [r8]
 801402e:	e00f      	b.n	8014050 <_malloc_r+0xa8>
 8014030:	6822      	ldr	r2, [r4, #0]
 8014032:	1b52      	subs	r2, r2, r5
 8014034:	d420      	bmi.n	8014078 <_malloc_r+0xd0>
 8014036:	2a0b      	cmp	r2, #11
 8014038:	d917      	bls.n	801406a <_malloc_r+0xc2>
 801403a:	1961      	adds	r1, r4, r5
 801403c:	42a3      	cmp	r3, r4
 801403e:	6025      	str	r5, [r4, #0]
 8014040:	bf18      	it	ne
 8014042:	6059      	strne	r1, [r3, #4]
 8014044:	6863      	ldr	r3, [r4, #4]
 8014046:	bf08      	it	eq
 8014048:	f8c8 1000 	streq.w	r1, [r8]
 801404c:	5162      	str	r2, [r4, r5]
 801404e:	604b      	str	r3, [r1, #4]
 8014050:	4630      	mov	r0, r6
 8014052:	f000 f82f 	bl	80140b4 <__malloc_unlock>
 8014056:	f104 000b 	add.w	r0, r4, #11
 801405a:	1d23      	adds	r3, r4, #4
 801405c:	f020 0007 	bic.w	r0, r0, #7
 8014060:	1ac2      	subs	r2, r0, r3
 8014062:	bf1c      	itt	ne
 8014064:	1a1b      	subne	r3, r3, r0
 8014066:	50a3      	strne	r3, [r4, r2]
 8014068:	e7af      	b.n	8013fca <_malloc_r+0x22>
 801406a:	6862      	ldr	r2, [r4, #4]
 801406c:	42a3      	cmp	r3, r4
 801406e:	bf0c      	ite	eq
 8014070:	f8c8 2000 	streq.w	r2, [r8]
 8014074:	605a      	strne	r2, [r3, #4]
 8014076:	e7eb      	b.n	8014050 <_malloc_r+0xa8>
 8014078:	4623      	mov	r3, r4
 801407a:	6864      	ldr	r4, [r4, #4]
 801407c:	e7ae      	b.n	8013fdc <_malloc_r+0x34>
 801407e:	463c      	mov	r4, r7
 8014080:	687f      	ldr	r7, [r7, #4]
 8014082:	e7b6      	b.n	8013ff2 <_malloc_r+0x4a>
 8014084:	461a      	mov	r2, r3
 8014086:	685b      	ldr	r3, [r3, #4]
 8014088:	42a3      	cmp	r3, r4
 801408a:	d1fb      	bne.n	8014084 <_malloc_r+0xdc>
 801408c:	2300      	movs	r3, #0
 801408e:	6053      	str	r3, [r2, #4]
 8014090:	e7de      	b.n	8014050 <_malloc_r+0xa8>
 8014092:	230c      	movs	r3, #12
 8014094:	4630      	mov	r0, r6
 8014096:	6033      	str	r3, [r6, #0]
 8014098:	f000 f80c 	bl	80140b4 <__malloc_unlock>
 801409c:	e794      	b.n	8013fc8 <_malloc_r+0x20>
 801409e:	6005      	str	r5, [r0, #0]
 80140a0:	e7d6      	b.n	8014050 <_malloc_r+0xa8>
 80140a2:	bf00      	nop
 80140a4:	200083dc 	.word	0x200083dc

080140a8 <__malloc_lock>:
 80140a8:	4801      	ldr	r0, [pc, #4]	@ (80140b0 <__malloc_lock+0x8>)
 80140aa:	f000 bc70 	b.w	801498e <__retarget_lock_acquire_recursive>
 80140ae:	bf00      	nop
 80140b0:	20008520 	.word	0x20008520

080140b4 <__malloc_unlock>:
 80140b4:	4801      	ldr	r0, [pc, #4]	@ (80140bc <__malloc_unlock+0x8>)
 80140b6:	f000 bc6b 	b.w	8014990 <__retarget_lock_release_recursive>
 80140ba:	bf00      	nop
 80140bc:	20008520 	.word	0x20008520

080140c0 <_strtoul_l.isra.0>:
 80140c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80140c4:	4686      	mov	lr, r0
 80140c6:	460d      	mov	r5, r1
 80140c8:	4e33      	ldr	r6, [pc, #204]	@ (8014198 <_strtoul_l.isra.0+0xd8>)
 80140ca:	4628      	mov	r0, r5
 80140cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80140d0:	5d37      	ldrb	r7, [r6, r4]
 80140d2:	f017 0708 	ands.w	r7, r7, #8
 80140d6:	d1f8      	bne.n	80140ca <_strtoul_l.isra.0+0xa>
 80140d8:	2c2d      	cmp	r4, #45	@ 0x2d
 80140da:	d110      	bne.n	80140fe <_strtoul_l.isra.0+0x3e>
 80140dc:	2701      	movs	r7, #1
 80140de:	782c      	ldrb	r4, [r5, #0]
 80140e0:	1c85      	adds	r5, r0, #2
 80140e2:	f033 0010 	bics.w	r0, r3, #16
 80140e6:	d115      	bne.n	8014114 <_strtoul_l.isra.0+0x54>
 80140e8:	2c30      	cmp	r4, #48	@ 0x30
 80140ea:	d10d      	bne.n	8014108 <_strtoul_l.isra.0+0x48>
 80140ec:	7828      	ldrb	r0, [r5, #0]
 80140ee:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80140f2:	2858      	cmp	r0, #88	@ 0x58
 80140f4:	d108      	bne.n	8014108 <_strtoul_l.isra.0+0x48>
 80140f6:	786c      	ldrb	r4, [r5, #1]
 80140f8:	3502      	adds	r5, #2
 80140fa:	2310      	movs	r3, #16
 80140fc:	e00a      	b.n	8014114 <_strtoul_l.isra.0+0x54>
 80140fe:	2c2b      	cmp	r4, #43	@ 0x2b
 8014100:	bf04      	itt	eq
 8014102:	782c      	ldrbeq	r4, [r5, #0]
 8014104:	1c85      	addeq	r5, r0, #2
 8014106:	e7ec      	b.n	80140e2 <_strtoul_l.isra.0+0x22>
 8014108:	2b00      	cmp	r3, #0
 801410a:	d1f6      	bne.n	80140fa <_strtoul_l.isra.0+0x3a>
 801410c:	2c30      	cmp	r4, #48	@ 0x30
 801410e:	bf14      	ite	ne
 8014110:	230a      	movne	r3, #10
 8014112:	2308      	moveq	r3, #8
 8014114:	f04f 38ff 	mov.w	r8, #4294967295
 8014118:	fbb8 f8f3 	udiv	r8, r8, r3
 801411c:	2600      	movs	r6, #0
 801411e:	fb03 f908 	mul.w	r9, r3, r8
 8014122:	4630      	mov	r0, r6
 8014124:	ea6f 0909 	mvn.w	r9, r9
 8014128:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801412c:	f1bc 0f09 	cmp.w	ip, #9
 8014130:	d810      	bhi.n	8014154 <_strtoul_l.isra.0+0x94>
 8014132:	4664      	mov	r4, ip
 8014134:	42a3      	cmp	r3, r4
 8014136:	dd1e      	ble.n	8014176 <_strtoul_l.isra.0+0xb6>
 8014138:	f1b6 3fff 	cmp.w	r6, #4294967295
 801413c:	d007      	beq.n	801414e <_strtoul_l.isra.0+0x8e>
 801413e:	4580      	cmp	r8, r0
 8014140:	d316      	bcc.n	8014170 <_strtoul_l.isra.0+0xb0>
 8014142:	d101      	bne.n	8014148 <_strtoul_l.isra.0+0x88>
 8014144:	45a1      	cmp	r9, r4
 8014146:	db13      	blt.n	8014170 <_strtoul_l.isra.0+0xb0>
 8014148:	2601      	movs	r6, #1
 801414a:	fb00 4003 	mla	r0, r0, r3, r4
 801414e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014152:	e7e9      	b.n	8014128 <_strtoul_l.isra.0+0x68>
 8014154:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8014158:	f1bc 0f19 	cmp.w	ip, #25
 801415c:	d801      	bhi.n	8014162 <_strtoul_l.isra.0+0xa2>
 801415e:	3c37      	subs	r4, #55	@ 0x37
 8014160:	e7e8      	b.n	8014134 <_strtoul_l.isra.0+0x74>
 8014162:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8014166:	f1bc 0f19 	cmp.w	ip, #25
 801416a:	d804      	bhi.n	8014176 <_strtoul_l.isra.0+0xb6>
 801416c:	3c57      	subs	r4, #87	@ 0x57
 801416e:	e7e1      	b.n	8014134 <_strtoul_l.isra.0+0x74>
 8014170:	f04f 36ff 	mov.w	r6, #4294967295
 8014174:	e7eb      	b.n	801414e <_strtoul_l.isra.0+0x8e>
 8014176:	1c73      	adds	r3, r6, #1
 8014178:	d106      	bne.n	8014188 <_strtoul_l.isra.0+0xc8>
 801417a:	2322      	movs	r3, #34	@ 0x22
 801417c:	4630      	mov	r0, r6
 801417e:	f8ce 3000 	str.w	r3, [lr]
 8014182:	b932      	cbnz	r2, 8014192 <_strtoul_l.isra.0+0xd2>
 8014184:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014188:	b107      	cbz	r7, 801418c <_strtoul_l.isra.0+0xcc>
 801418a:	4240      	negs	r0, r0
 801418c:	2a00      	cmp	r2, #0
 801418e:	d0f9      	beq.n	8014184 <_strtoul_l.isra.0+0xc4>
 8014190:	b106      	cbz	r6, 8014194 <_strtoul_l.isra.0+0xd4>
 8014192:	1e69      	subs	r1, r5, #1
 8014194:	6011      	str	r1, [r2, #0]
 8014196:	e7f5      	b.n	8014184 <_strtoul_l.isra.0+0xc4>
 8014198:	0801a03b 	.word	0x0801a03b

0801419c <strtoul>:
 801419c:	4613      	mov	r3, r2
 801419e:	460a      	mov	r2, r1
 80141a0:	4601      	mov	r1, r0
 80141a2:	4802      	ldr	r0, [pc, #8]	@ (80141ac <strtoul+0x10>)
 80141a4:	6800      	ldr	r0, [r0, #0]
 80141a6:	f7ff bf8b 	b.w	80140c0 <_strtoul_l.isra.0>
 80141aa:	bf00      	nop
 80141ac:	20000628 	.word	0x20000628

080141b0 <std>:
 80141b0:	2300      	movs	r3, #0
 80141b2:	b510      	push	{r4, lr}
 80141b4:	4604      	mov	r4, r0
 80141b6:	e9c0 3300 	strd	r3, r3, [r0]
 80141ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80141be:	6083      	str	r3, [r0, #8]
 80141c0:	8181      	strh	r1, [r0, #12]
 80141c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80141c4:	81c2      	strh	r2, [r0, #14]
 80141c6:	6183      	str	r3, [r0, #24]
 80141c8:	4619      	mov	r1, r3
 80141ca:	2208      	movs	r2, #8
 80141cc:	305c      	adds	r0, #92	@ 0x5c
 80141ce:	f000 fa69 	bl	80146a4 <memset>
 80141d2:	4b0d      	ldr	r3, [pc, #52]	@ (8014208 <std+0x58>)
 80141d4:	6224      	str	r4, [r4, #32]
 80141d6:	6263      	str	r3, [r4, #36]	@ 0x24
 80141d8:	4b0c      	ldr	r3, [pc, #48]	@ (801420c <std+0x5c>)
 80141da:	62a3      	str	r3, [r4, #40]	@ 0x28
 80141dc:	4b0c      	ldr	r3, [pc, #48]	@ (8014210 <std+0x60>)
 80141de:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80141e0:	4b0c      	ldr	r3, [pc, #48]	@ (8014214 <std+0x64>)
 80141e2:	6323      	str	r3, [r4, #48]	@ 0x30
 80141e4:	4b0c      	ldr	r3, [pc, #48]	@ (8014218 <std+0x68>)
 80141e6:	429c      	cmp	r4, r3
 80141e8:	d006      	beq.n	80141f8 <std+0x48>
 80141ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80141ee:	4294      	cmp	r4, r2
 80141f0:	d002      	beq.n	80141f8 <std+0x48>
 80141f2:	33d0      	adds	r3, #208	@ 0xd0
 80141f4:	429c      	cmp	r4, r3
 80141f6:	d105      	bne.n	8014204 <std+0x54>
 80141f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80141fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014200:	f000 bbc4 	b.w	801498c <__retarget_lock_init_recursive>
 8014204:	bd10      	pop	{r4, pc}
 8014206:	bf00      	nop
 8014208:	0801447d 	.word	0x0801447d
 801420c:	0801449f 	.word	0x0801449f
 8014210:	080144d7 	.word	0x080144d7
 8014214:	080144fb 	.word	0x080144fb
 8014218:	200083e0 	.word	0x200083e0

0801421c <stdio_exit_handler>:
 801421c:	4a02      	ldr	r2, [pc, #8]	@ (8014228 <stdio_exit_handler+0xc>)
 801421e:	4903      	ldr	r1, [pc, #12]	@ (801422c <stdio_exit_handler+0x10>)
 8014220:	4803      	ldr	r0, [pc, #12]	@ (8014230 <stdio_exit_handler+0x14>)
 8014222:	f000 b87b 	b.w	801431c <_fwalk_sglue>
 8014226:	bf00      	nop
 8014228:	2000061c 	.word	0x2000061c
 801422c:	080153ad 	.word	0x080153ad
 8014230:	2000062c 	.word	0x2000062c

08014234 <cleanup_stdio>:
 8014234:	6841      	ldr	r1, [r0, #4]
 8014236:	4b0c      	ldr	r3, [pc, #48]	@ (8014268 <cleanup_stdio+0x34>)
 8014238:	b510      	push	{r4, lr}
 801423a:	4299      	cmp	r1, r3
 801423c:	4604      	mov	r4, r0
 801423e:	d001      	beq.n	8014244 <cleanup_stdio+0x10>
 8014240:	f001 f8b4 	bl	80153ac <_fflush_r>
 8014244:	68a1      	ldr	r1, [r4, #8]
 8014246:	4b09      	ldr	r3, [pc, #36]	@ (801426c <cleanup_stdio+0x38>)
 8014248:	4299      	cmp	r1, r3
 801424a:	d002      	beq.n	8014252 <cleanup_stdio+0x1e>
 801424c:	4620      	mov	r0, r4
 801424e:	f001 f8ad 	bl	80153ac <_fflush_r>
 8014252:	68e1      	ldr	r1, [r4, #12]
 8014254:	4b06      	ldr	r3, [pc, #24]	@ (8014270 <cleanup_stdio+0x3c>)
 8014256:	4299      	cmp	r1, r3
 8014258:	d004      	beq.n	8014264 <cleanup_stdio+0x30>
 801425a:	4620      	mov	r0, r4
 801425c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014260:	f001 b8a4 	b.w	80153ac <_fflush_r>
 8014264:	bd10      	pop	{r4, pc}
 8014266:	bf00      	nop
 8014268:	200083e0 	.word	0x200083e0
 801426c:	20008448 	.word	0x20008448
 8014270:	200084b0 	.word	0x200084b0

08014274 <global_stdio_init.part.0>:
 8014274:	b510      	push	{r4, lr}
 8014276:	4b0b      	ldr	r3, [pc, #44]	@ (80142a4 <global_stdio_init.part.0+0x30>)
 8014278:	4c0b      	ldr	r4, [pc, #44]	@ (80142a8 <global_stdio_init.part.0+0x34>)
 801427a:	4a0c      	ldr	r2, [pc, #48]	@ (80142ac <global_stdio_init.part.0+0x38>)
 801427c:	4620      	mov	r0, r4
 801427e:	601a      	str	r2, [r3, #0]
 8014280:	2104      	movs	r1, #4
 8014282:	2200      	movs	r2, #0
 8014284:	f7ff ff94 	bl	80141b0 <std>
 8014288:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801428c:	2201      	movs	r2, #1
 801428e:	2109      	movs	r1, #9
 8014290:	f7ff ff8e 	bl	80141b0 <std>
 8014294:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014298:	2202      	movs	r2, #2
 801429a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801429e:	2112      	movs	r1, #18
 80142a0:	f7ff bf86 	b.w	80141b0 <std>
 80142a4:	20008518 	.word	0x20008518
 80142a8:	200083e0 	.word	0x200083e0
 80142ac:	0801421d 	.word	0x0801421d

080142b0 <__sfp_lock_acquire>:
 80142b0:	4801      	ldr	r0, [pc, #4]	@ (80142b8 <__sfp_lock_acquire+0x8>)
 80142b2:	f000 bb6c 	b.w	801498e <__retarget_lock_acquire_recursive>
 80142b6:	bf00      	nop
 80142b8:	20008521 	.word	0x20008521

080142bc <__sfp_lock_release>:
 80142bc:	4801      	ldr	r0, [pc, #4]	@ (80142c4 <__sfp_lock_release+0x8>)
 80142be:	f000 bb67 	b.w	8014990 <__retarget_lock_release_recursive>
 80142c2:	bf00      	nop
 80142c4:	20008521 	.word	0x20008521

080142c8 <__sinit>:
 80142c8:	b510      	push	{r4, lr}
 80142ca:	4604      	mov	r4, r0
 80142cc:	f7ff fff0 	bl	80142b0 <__sfp_lock_acquire>
 80142d0:	6a23      	ldr	r3, [r4, #32]
 80142d2:	b11b      	cbz	r3, 80142dc <__sinit+0x14>
 80142d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80142d8:	f7ff bff0 	b.w	80142bc <__sfp_lock_release>
 80142dc:	4b04      	ldr	r3, [pc, #16]	@ (80142f0 <__sinit+0x28>)
 80142de:	6223      	str	r3, [r4, #32]
 80142e0:	4b04      	ldr	r3, [pc, #16]	@ (80142f4 <__sinit+0x2c>)
 80142e2:	681b      	ldr	r3, [r3, #0]
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d1f5      	bne.n	80142d4 <__sinit+0xc>
 80142e8:	f7ff ffc4 	bl	8014274 <global_stdio_init.part.0>
 80142ec:	e7f2      	b.n	80142d4 <__sinit+0xc>
 80142ee:	bf00      	nop
 80142f0:	08014235 	.word	0x08014235
 80142f4:	20008518 	.word	0x20008518

080142f8 <fiprintf>:
 80142f8:	b40e      	push	{r1, r2, r3}
 80142fa:	b503      	push	{r0, r1, lr}
 80142fc:	4601      	mov	r1, r0
 80142fe:	ab03      	add	r3, sp, #12
 8014300:	4805      	ldr	r0, [pc, #20]	@ (8014318 <fiprintf+0x20>)
 8014302:	f853 2b04 	ldr.w	r2, [r3], #4
 8014306:	6800      	ldr	r0, [r0, #0]
 8014308:	9301      	str	r3, [sp, #4]
 801430a:	f000 fd27 	bl	8014d5c <_vfiprintf_r>
 801430e:	b002      	add	sp, #8
 8014310:	f85d eb04 	ldr.w	lr, [sp], #4
 8014314:	b003      	add	sp, #12
 8014316:	4770      	bx	lr
 8014318:	20000628 	.word	0x20000628

0801431c <_fwalk_sglue>:
 801431c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014320:	4607      	mov	r7, r0
 8014322:	4688      	mov	r8, r1
 8014324:	4614      	mov	r4, r2
 8014326:	2600      	movs	r6, #0
 8014328:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801432c:	f1b9 0901 	subs.w	r9, r9, #1
 8014330:	d505      	bpl.n	801433e <_fwalk_sglue+0x22>
 8014332:	6824      	ldr	r4, [r4, #0]
 8014334:	2c00      	cmp	r4, #0
 8014336:	d1f7      	bne.n	8014328 <_fwalk_sglue+0xc>
 8014338:	4630      	mov	r0, r6
 801433a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801433e:	89ab      	ldrh	r3, [r5, #12]
 8014340:	2b01      	cmp	r3, #1
 8014342:	d907      	bls.n	8014354 <_fwalk_sglue+0x38>
 8014344:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014348:	3301      	adds	r3, #1
 801434a:	d003      	beq.n	8014354 <_fwalk_sglue+0x38>
 801434c:	4629      	mov	r1, r5
 801434e:	4638      	mov	r0, r7
 8014350:	47c0      	blx	r8
 8014352:	4306      	orrs	r6, r0
 8014354:	3568      	adds	r5, #104	@ 0x68
 8014356:	e7e9      	b.n	801432c <_fwalk_sglue+0x10>

08014358 <iprintf>:
 8014358:	b40f      	push	{r0, r1, r2, r3}
 801435a:	b507      	push	{r0, r1, r2, lr}
 801435c:	4906      	ldr	r1, [pc, #24]	@ (8014378 <iprintf+0x20>)
 801435e:	ab04      	add	r3, sp, #16
 8014360:	6808      	ldr	r0, [r1, #0]
 8014362:	f853 2b04 	ldr.w	r2, [r3], #4
 8014366:	6881      	ldr	r1, [r0, #8]
 8014368:	9301      	str	r3, [sp, #4]
 801436a:	f000 fcf7 	bl	8014d5c <_vfiprintf_r>
 801436e:	b003      	add	sp, #12
 8014370:	f85d eb04 	ldr.w	lr, [sp], #4
 8014374:	b004      	add	sp, #16
 8014376:	4770      	bx	lr
 8014378:	20000628 	.word	0x20000628

0801437c <_puts_r>:
 801437c:	6a03      	ldr	r3, [r0, #32]
 801437e:	b570      	push	{r4, r5, r6, lr}
 8014380:	4605      	mov	r5, r0
 8014382:	460e      	mov	r6, r1
 8014384:	6884      	ldr	r4, [r0, #8]
 8014386:	b90b      	cbnz	r3, 801438c <_puts_r+0x10>
 8014388:	f7ff ff9e 	bl	80142c8 <__sinit>
 801438c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801438e:	07db      	lsls	r3, r3, #31
 8014390:	d405      	bmi.n	801439e <_puts_r+0x22>
 8014392:	89a3      	ldrh	r3, [r4, #12]
 8014394:	0598      	lsls	r0, r3, #22
 8014396:	d402      	bmi.n	801439e <_puts_r+0x22>
 8014398:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801439a:	f000 faf8 	bl	801498e <__retarget_lock_acquire_recursive>
 801439e:	89a3      	ldrh	r3, [r4, #12]
 80143a0:	0719      	lsls	r1, r3, #28
 80143a2:	d502      	bpl.n	80143aa <_puts_r+0x2e>
 80143a4:	6923      	ldr	r3, [r4, #16]
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d135      	bne.n	8014416 <_puts_r+0x9a>
 80143aa:	4621      	mov	r1, r4
 80143ac:	4628      	mov	r0, r5
 80143ae:	f000 f923 	bl	80145f8 <__swsetup_r>
 80143b2:	b380      	cbz	r0, 8014416 <_puts_r+0x9a>
 80143b4:	f04f 35ff 	mov.w	r5, #4294967295
 80143b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80143ba:	07da      	lsls	r2, r3, #31
 80143bc:	d405      	bmi.n	80143ca <_puts_r+0x4e>
 80143be:	89a3      	ldrh	r3, [r4, #12]
 80143c0:	059b      	lsls	r3, r3, #22
 80143c2:	d402      	bmi.n	80143ca <_puts_r+0x4e>
 80143c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80143c6:	f000 fae3 	bl	8014990 <__retarget_lock_release_recursive>
 80143ca:	4628      	mov	r0, r5
 80143cc:	bd70      	pop	{r4, r5, r6, pc}
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	da04      	bge.n	80143dc <_puts_r+0x60>
 80143d2:	69a2      	ldr	r2, [r4, #24]
 80143d4:	429a      	cmp	r2, r3
 80143d6:	dc17      	bgt.n	8014408 <_puts_r+0x8c>
 80143d8:	290a      	cmp	r1, #10
 80143da:	d015      	beq.n	8014408 <_puts_r+0x8c>
 80143dc:	6823      	ldr	r3, [r4, #0]
 80143de:	1c5a      	adds	r2, r3, #1
 80143e0:	6022      	str	r2, [r4, #0]
 80143e2:	7019      	strb	r1, [r3, #0]
 80143e4:	68a3      	ldr	r3, [r4, #8]
 80143e6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80143ea:	3b01      	subs	r3, #1
 80143ec:	60a3      	str	r3, [r4, #8]
 80143ee:	2900      	cmp	r1, #0
 80143f0:	d1ed      	bne.n	80143ce <_puts_r+0x52>
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	da11      	bge.n	801441a <_puts_r+0x9e>
 80143f6:	4622      	mov	r2, r4
 80143f8:	210a      	movs	r1, #10
 80143fa:	4628      	mov	r0, r5
 80143fc:	f000 f8be 	bl	801457c <__swbuf_r>
 8014400:	3001      	adds	r0, #1
 8014402:	d0d7      	beq.n	80143b4 <_puts_r+0x38>
 8014404:	250a      	movs	r5, #10
 8014406:	e7d7      	b.n	80143b8 <_puts_r+0x3c>
 8014408:	4622      	mov	r2, r4
 801440a:	4628      	mov	r0, r5
 801440c:	f000 f8b6 	bl	801457c <__swbuf_r>
 8014410:	3001      	adds	r0, #1
 8014412:	d1e7      	bne.n	80143e4 <_puts_r+0x68>
 8014414:	e7ce      	b.n	80143b4 <_puts_r+0x38>
 8014416:	3e01      	subs	r6, #1
 8014418:	e7e4      	b.n	80143e4 <_puts_r+0x68>
 801441a:	6823      	ldr	r3, [r4, #0]
 801441c:	1c5a      	adds	r2, r3, #1
 801441e:	6022      	str	r2, [r4, #0]
 8014420:	220a      	movs	r2, #10
 8014422:	701a      	strb	r2, [r3, #0]
 8014424:	e7ee      	b.n	8014404 <_puts_r+0x88>
	...

08014428 <puts>:
 8014428:	4b02      	ldr	r3, [pc, #8]	@ (8014434 <puts+0xc>)
 801442a:	4601      	mov	r1, r0
 801442c:	6818      	ldr	r0, [r3, #0]
 801442e:	f7ff bfa5 	b.w	801437c <_puts_r>
 8014432:	bf00      	nop
 8014434:	20000628 	.word	0x20000628

08014438 <siprintf>:
 8014438:	b40e      	push	{r1, r2, r3}
 801443a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801443e:	b510      	push	{r4, lr}
 8014440:	2400      	movs	r4, #0
 8014442:	b09d      	sub	sp, #116	@ 0x74
 8014444:	ab1f      	add	r3, sp, #124	@ 0x7c
 8014446:	9002      	str	r0, [sp, #8]
 8014448:	9006      	str	r0, [sp, #24]
 801444a:	9107      	str	r1, [sp, #28]
 801444c:	9104      	str	r1, [sp, #16]
 801444e:	4809      	ldr	r0, [pc, #36]	@ (8014474 <siprintf+0x3c>)
 8014450:	4909      	ldr	r1, [pc, #36]	@ (8014478 <siprintf+0x40>)
 8014452:	f853 2b04 	ldr.w	r2, [r3], #4
 8014456:	9105      	str	r1, [sp, #20]
 8014458:	6800      	ldr	r0, [r0, #0]
 801445a:	a902      	add	r1, sp, #8
 801445c:	9301      	str	r3, [sp, #4]
 801445e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8014460:	f000 fb58 	bl	8014b14 <_svfiprintf_r>
 8014464:	9b02      	ldr	r3, [sp, #8]
 8014466:	701c      	strb	r4, [r3, #0]
 8014468:	b01d      	add	sp, #116	@ 0x74
 801446a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801446e:	b003      	add	sp, #12
 8014470:	4770      	bx	lr
 8014472:	bf00      	nop
 8014474:	20000628 	.word	0x20000628
 8014478:	ffff0208 	.word	0xffff0208

0801447c <__sread>:
 801447c:	b510      	push	{r4, lr}
 801447e:	460c      	mov	r4, r1
 8014480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014484:	f000 fa24 	bl	80148d0 <_read_r>
 8014488:	2800      	cmp	r0, #0
 801448a:	bfab      	itete	ge
 801448c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801448e:	89a3      	ldrhlt	r3, [r4, #12]
 8014490:	181b      	addge	r3, r3, r0
 8014492:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014496:	bfac      	ite	ge
 8014498:	6563      	strge	r3, [r4, #84]	@ 0x54
 801449a:	81a3      	strhlt	r3, [r4, #12]
 801449c:	bd10      	pop	{r4, pc}

0801449e <__swrite>:
 801449e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144a2:	461f      	mov	r7, r3
 80144a4:	898b      	ldrh	r3, [r1, #12]
 80144a6:	4605      	mov	r5, r0
 80144a8:	05db      	lsls	r3, r3, #23
 80144aa:	460c      	mov	r4, r1
 80144ac:	4616      	mov	r6, r2
 80144ae:	d505      	bpl.n	80144bc <__swrite+0x1e>
 80144b0:	2302      	movs	r3, #2
 80144b2:	2200      	movs	r2, #0
 80144b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80144b8:	f000 f9f8 	bl	80148ac <_lseek_r>
 80144bc:	89a3      	ldrh	r3, [r4, #12]
 80144be:	4632      	mov	r2, r6
 80144c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80144c4:	81a3      	strh	r3, [r4, #12]
 80144c6:	4628      	mov	r0, r5
 80144c8:	463b      	mov	r3, r7
 80144ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80144ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80144d2:	f000 ba1f 	b.w	8014914 <_write_r>

080144d6 <__sseek>:
 80144d6:	b510      	push	{r4, lr}
 80144d8:	460c      	mov	r4, r1
 80144da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80144de:	f000 f9e5 	bl	80148ac <_lseek_r>
 80144e2:	1c43      	adds	r3, r0, #1
 80144e4:	89a3      	ldrh	r3, [r4, #12]
 80144e6:	bf15      	itete	ne
 80144e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80144ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80144ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80144f2:	81a3      	strheq	r3, [r4, #12]
 80144f4:	bf18      	it	ne
 80144f6:	81a3      	strhne	r3, [r4, #12]
 80144f8:	bd10      	pop	{r4, pc}

080144fa <__sclose>:
 80144fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80144fe:	f000 b967 	b.w	80147d0 <_close_r>

08014502 <_vsniprintf_r>:
 8014502:	b530      	push	{r4, r5, lr}
 8014504:	4614      	mov	r4, r2
 8014506:	2c00      	cmp	r4, #0
 8014508:	4605      	mov	r5, r0
 801450a:	461a      	mov	r2, r3
 801450c:	b09b      	sub	sp, #108	@ 0x6c
 801450e:	da05      	bge.n	801451c <_vsniprintf_r+0x1a>
 8014510:	238b      	movs	r3, #139	@ 0x8b
 8014512:	6003      	str	r3, [r0, #0]
 8014514:	f04f 30ff 	mov.w	r0, #4294967295
 8014518:	b01b      	add	sp, #108	@ 0x6c
 801451a:	bd30      	pop	{r4, r5, pc}
 801451c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8014520:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014524:	f04f 0300 	mov.w	r3, #0
 8014528:	9319      	str	r3, [sp, #100]	@ 0x64
 801452a:	bf0c      	ite	eq
 801452c:	4623      	moveq	r3, r4
 801452e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014532:	9302      	str	r3, [sp, #8]
 8014534:	9305      	str	r3, [sp, #20]
 8014536:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801453a:	9100      	str	r1, [sp, #0]
 801453c:	9104      	str	r1, [sp, #16]
 801453e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8014542:	4669      	mov	r1, sp
 8014544:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8014546:	f000 fae5 	bl	8014b14 <_svfiprintf_r>
 801454a:	1c43      	adds	r3, r0, #1
 801454c:	bfbc      	itt	lt
 801454e:	238b      	movlt	r3, #139	@ 0x8b
 8014550:	602b      	strlt	r3, [r5, #0]
 8014552:	2c00      	cmp	r4, #0
 8014554:	d0e0      	beq.n	8014518 <_vsniprintf_r+0x16>
 8014556:	2200      	movs	r2, #0
 8014558:	9b00      	ldr	r3, [sp, #0]
 801455a:	701a      	strb	r2, [r3, #0]
 801455c:	e7dc      	b.n	8014518 <_vsniprintf_r+0x16>
	...

08014560 <vsniprintf>:
 8014560:	b507      	push	{r0, r1, r2, lr}
 8014562:	9300      	str	r3, [sp, #0]
 8014564:	4613      	mov	r3, r2
 8014566:	460a      	mov	r2, r1
 8014568:	4601      	mov	r1, r0
 801456a:	4803      	ldr	r0, [pc, #12]	@ (8014578 <vsniprintf+0x18>)
 801456c:	6800      	ldr	r0, [r0, #0]
 801456e:	f7ff ffc8 	bl	8014502 <_vsniprintf_r>
 8014572:	b003      	add	sp, #12
 8014574:	f85d fb04 	ldr.w	pc, [sp], #4
 8014578:	20000628 	.word	0x20000628

0801457c <__swbuf_r>:
 801457c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801457e:	460e      	mov	r6, r1
 8014580:	4614      	mov	r4, r2
 8014582:	4605      	mov	r5, r0
 8014584:	b118      	cbz	r0, 801458e <__swbuf_r+0x12>
 8014586:	6a03      	ldr	r3, [r0, #32]
 8014588:	b90b      	cbnz	r3, 801458e <__swbuf_r+0x12>
 801458a:	f7ff fe9d 	bl	80142c8 <__sinit>
 801458e:	69a3      	ldr	r3, [r4, #24]
 8014590:	60a3      	str	r3, [r4, #8]
 8014592:	89a3      	ldrh	r3, [r4, #12]
 8014594:	071a      	lsls	r2, r3, #28
 8014596:	d501      	bpl.n	801459c <__swbuf_r+0x20>
 8014598:	6923      	ldr	r3, [r4, #16]
 801459a:	b943      	cbnz	r3, 80145ae <__swbuf_r+0x32>
 801459c:	4621      	mov	r1, r4
 801459e:	4628      	mov	r0, r5
 80145a0:	f000 f82a 	bl	80145f8 <__swsetup_r>
 80145a4:	b118      	cbz	r0, 80145ae <__swbuf_r+0x32>
 80145a6:	f04f 37ff 	mov.w	r7, #4294967295
 80145aa:	4638      	mov	r0, r7
 80145ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145ae:	6823      	ldr	r3, [r4, #0]
 80145b0:	6922      	ldr	r2, [r4, #16]
 80145b2:	b2f6      	uxtb	r6, r6
 80145b4:	1a98      	subs	r0, r3, r2
 80145b6:	6963      	ldr	r3, [r4, #20]
 80145b8:	4637      	mov	r7, r6
 80145ba:	4283      	cmp	r3, r0
 80145bc:	dc05      	bgt.n	80145ca <__swbuf_r+0x4e>
 80145be:	4621      	mov	r1, r4
 80145c0:	4628      	mov	r0, r5
 80145c2:	f000 fef3 	bl	80153ac <_fflush_r>
 80145c6:	2800      	cmp	r0, #0
 80145c8:	d1ed      	bne.n	80145a6 <__swbuf_r+0x2a>
 80145ca:	68a3      	ldr	r3, [r4, #8]
 80145cc:	3b01      	subs	r3, #1
 80145ce:	60a3      	str	r3, [r4, #8]
 80145d0:	6823      	ldr	r3, [r4, #0]
 80145d2:	1c5a      	adds	r2, r3, #1
 80145d4:	6022      	str	r2, [r4, #0]
 80145d6:	701e      	strb	r6, [r3, #0]
 80145d8:	6962      	ldr	r2, [r4, #20]
 80145da:	1c43      	adds	r3, r0, #1
 80145dc:	429a      	cmp	r2, r3
 80145de:	d004      	beq.n	80145ea <__swbuf_r+0x6e>
 80145e0:	89a3      	ldrh	r3, [r4, #12]
 80145e2:	07db      	lsls	r3, r3, #31
 80145e4:	d5e1      	bpl.n	80145aa <__swbuf_r+0x2e>
 80145e6:	2e0a      	cmp	r6, #10
 80145e8:	d1df      	bne.n	80145aa <__swbuf_r+0x2e>
 80145ea:	4621      	mov	r1, r4
 80145ec:	4628      	mov	r0, r5
 80145ee:	f000 fedd 	bl	80153ac <_fflush_r>
 80145f2:	2800      	cmp	r0, #0
 80145f4:	d0d9      	beq.n	80145aa <__swbuf_r+0x2e>
 80145f6:	e7d6      	b.n	80145a6 <__swbuf_r+0x2a>

080145f8 <__swsetup_r>:
 80145f8:	b538      	push	{r3, r4, r5, lr}
 80145fa:	4b29      	ldr	r3, [pc, #164]	@ (80146a0 <__swsetup_r+0xa8>)
 80145fc:	4605      	mov	r5, r0
 80145fe:	6818      	ldr	r0, [r3, #0]
 8014600:	460c      	mov	r4, r1
 8014602:	b118      	cbz	r0, 801460c <__swsetup_r+0x14>
 8014604:	6a03      	ldr	r3, [r0, #32]
 8014606:	b90b      	cbnz	r3, 801460c <__swsetup_r+0x14>
 8014608:	f7ff fe5e 	bl	80142c8 <__sinit>
 801460c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014610:	0719      	lsls	r1, r3, #28
 8014612:	d422      	bmi.n	801465a <__swsetup_r+0x62>
 8014614:	06da      	lsls	r2, r3, #27
 8014616:	d407      	bmi.n	8014628 <__swsetup_r+0x30>
 8014618:	2209      	movs	r2, #9
 801461a:	602a      	str	r2, [r5, #0]
 801461c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014620:	f04f 30ff 	mov.w	r0, #4294967295
 8014624:	81a3      	strh	r3, [r4, #12]
 8014626:	e033      	b.n	8014690 <__swsetup_r+0x98>
 8014628:	0758      	lsls	r0, r3, #29
 801462a:	d512      	bpl.n	8014652 <__swsetup_r+0x5a>
 801462c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801462e:	b141      	cbz	r1, 8014642 <__swsetup_r+0x4a>
 8014630:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014634:	4299      	cmp	r1, r3
 8014636:	d002      	beq.n	801463e <__swsetup_r+0x46>
 8014638:	4628      	mov	r0, r5
 801463a:	f000 f9c7 	bl	80149cc <_free_r>
 801463e:	2300      	movs	r3, #0
 8014640:	6363      	str	r3, [r4, #52]	@ 0x34
 8014642:	89a3      	ldrh	r3, [r4, #12]
 8014644:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014648:	81a3      	strh	r3, [r4, #12]
 801464a:	2300      	movs	r3, #0
 801464c:	6063      	str	r3, [r4, #4]
 801464e:	6923      	ldr	r3, [r4, #16]
 8014650:	6023      	str	r3, [r4, #0]
 8014652:	89a3      	ldrh	r3, [r4, #12]
 8014654:	f043 0308 	orr.w	r3, r3, #8
 8014658:	81a3      	strh	r3, [r4, #12]
 801465a:	6923      	ldr	r3, [r4, #16]
 801465c:	b94b      	cbnz	r3, 8014672 <__swsetup_r+0x7a>
 801465e:	89a3      	ldrh	r3, [r4, #12]
 8014660:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014664:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014668:	d003      	beq.n	8014672 <__swsetup_r+0x7a>
 801466a:	4621      	mov	r1, r4
 801466c:	4628      	mov	r0, r5
 801466e:	f000 feea 	bl	8015446 <__smakebuf_r>
 8014672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014676:	f013 0201 	ands.w	r2, r3, #1
 801467a:	d00a      	beq.n	8014692 <__swsetup_r+0x9a>
 801467c:	2200      	movs	r2, #0
 801467e:	60a2      	str	r2, [r4, #8]
 8014680:	6962      	ldr	r2, [r4, #20]
 8014682:	4252      	negs	r2, r2
 8014684:	61a2      	str	r2, [r4, #24]
 8014686:	6922      	ldr	r2, [r4, #16]
 8014688:	b942      	cbnz	r2, 801469c <__swsetup_r+0xa4>
 801468a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801468e:	d1c5      	bne.n	801461c <__swsetup_r+0x24>
 8014690:	bd38      	pop	{r3, r4, r5, pc}
 8014692:	0799      	lsls	r1, r3, #30
 8014694:	bf58      	it	pl
 8014696:	6962      	ldrpl	r2, [r4, #20]
 8014698:	60a2      	str	r2, [r4, #8]
 801469a:	e7f4      	b.n	8014686 <__swsetup_r+0x8e>
 801469c:	2000      	movs	r0, #0
 801469e:	e7f7      	b.n	8014690 <__swsetup_r+0x98>
 80146a0:	20000628 	.word	0x20000628

080146a4 <memset>:
 80146a4:	4603      	mov	r3, r0
 80146a6:	4402      	add	r2, r0
 80146a8:	4293      	cmp	r3, r2
 80146aa:	d100      	bne.n	80146ae <memset+0xa>
 80146ac:	4770      	bx	lr
 80146ae:	f803 1b01 	strb.w	r1, [r3], #1
 80146b2:	e7f9      	b.n	80146a8 <memset+0x4>

080146b4 <strchr>:
 80146b4:	4603      	mov	r3, r0
 80146b6:	b2c9      	uxtb	r1, r1
 80146b8:	4618      	mov	r0, r3
 80146ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80146be:	b112      	cbz	r2, 80146c6 <strchr+0x12>
 80146c0:	428a      	cmp	r2, r1
 80146c2:	d1f9      	bne.n	80146b8 <strchr+0x4>
 80146c4:	4770      	bx	lr
 80146c6:	2900      	cmp	r1, #0
 80146c8:	bf18      	it	ne
 80146ca:	2000      	movne	r0, #0
 80146cc:	4770      	bx	lr

080146ce <strncmp>:
 80146ce:	b510      	push	{r4, lr}
 80146d0:	b16a      	cbz	r2, 80146ee <strncmp+0x20>
 80146d2:	3901      	subs	r1, #1
 80146d4:	1884      	adds	r4, r0, r2
 80146d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80146da:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80146de:	429a      	cmp	r2, r3
 80146e0:	d103      	bne.n	80146ea <strncmp+0x1c>
 80146e2:	42a0      	cmp	r0, r4
 80146e4:	d001      	beq.n	80146ea <strncmp+0x1c>
 80146e6:	2a00      	cmp	r2, #0
 80146e8:	d1f5      	bne.n	80146d6 <strncmp+0x8>
 80146ea:	1ad0      	subs	r0, r2, r3
 80146ec:	bd10      	pop	{r4, pc}
 80146ee:	4610      	mov	r0, r2
 80146f0:	e7fc      	b.n	80146ec <strncmp+0x1e>

080146f2 <strncpy>:
 80146f2:	4603      	mov	r3, r0
 80146f4:	b510      	push	{r4, lr}
 80146f6:	3901      	subs	r1, #1
 80146f8:	b132      	cbz	r2, 8014708 <strncpy+0x16>
 80146fa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80146fe:	3a01      	subs	r2, #1
 8014700:	f803 4b01 	strb.w	r4, [r3], #1
 8014704:	2c00      	cmp	r4, #0
 8014706:	d1f7      	bne.n	80146f8 <strncpy+0x6>
 8014708:	2100      	movs	r1, #0
 801470a:	441a      	add	r2, r3
 801470c:	4293      	cmp	r3, r2
 801470e:	d100      	bne.n	8014712 <strncpy+0x20>
 8014710:	bd10      	pop	{r4, pc}
 8014712:	f803 1b01 	strb.w	r1, [r3], #1
 8014716:	e7f9      	b.n	801470c <strncpy+0x1a>

08014718 <strtok>:
 8014718:	4b16      	ldr	r3, [pc, #88]	@ (8014774 <strtok+0x5c>)
 801471a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801471e:	681f      	ldr	r7, [r3, #0]
 8014720:	4605      	mov	r5, r0
 8014722:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8014724:	460e      	mov	r6, r1
 8014726:	b9ec      	cbnz	r4, 8014764 <strtok+0x4c>
 8014728:	2050      	movs	r0, #80	@ 0x50
 801472a:	f7ff fc13 	bl	8013f54 <malloc>
 801472e:	4602      	mov	r2, r0
 8014730:	6478      	str	r0, [r7, #68]	@ 0x44
 8014732:	b920      	cbnz	r0, 801473e <strtok+0x26>
 8014734:	215b      	movs	r1, #91	@ 0x5b
 8014736:	4b10      	ldr	r3, [pc, #64]	@ (8014778 <strtok+0x60>)
 8014738:	4810      	ldr	r0, [pc, #64]	@ (801477c <strtok+0x64>)
 801473a:	f7ff fbed 	bl	8013f18 <__assert_func>
 801473e:	e9c0 4400 	strd	r4, r4, [r0]
 8014742:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8014746:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801474a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 801474e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8014752:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8014756:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 801475a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 801475e:	6184      	str	r4, [r0, #24]
 8014760:	7704      	strb	r4, [r0, #28]
 8014762:	6244      	str	r4, [r0, #36]	@ 0x24
 8014764:	4631      	mov	r1, r6
 8014766:	4628      	mov	r0, r5
 8014768:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801476a:	2301      	movs	r3, #1
 801476c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014770:	f000 b806 	b.w	8014780 <__strtok_r>
 8014774:	20000628 	.word	0x20000628
 8014778:	08019f96 	.word	0x08019f96
 801477c:	08019fad 	.word	0x08019fad

08014780 <__strtok_r>:
 8014780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014782:	4604      	mov	r4, r0
 8014784:	b908      	cbnz	r0, 801478a <__strtok_r+0xa>
 8014786:	6814      	ldr	r4, [r2, #0]
 8014788:	b144      	cbz	r4, 801479c <__strtok_r+0x1c>
 801478a:	460f      	mov	r7, r1
 801478c:	4620      	mov	r0, r4
 801478e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8014792:	f817 6b01 	ldrb.w	r6, [r7], #1
 8014796:	b91e      	cbnz	r6, 80147a0 <__strtok_r+0x20>
 8014798:	b965      	cbnz	r5, 80147b4 <__strtok_r+0x34>
 801479a:	6015      	str	r5, [r2, #0]
 801479c:	2000      	movs	r0, #0
 801479e:	e005      	b.n	80147ac <__strtok_r+0x2c>
 80147a0:	42b5      	cmp	r5, r6
 80147a2:	d1f6      	bne.n	8014792 <__strtok_r+0x12>
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d1f0      	bne.n	801478a <__strtok_r+0xa>
 80147a8:	6014      	str	r4, [r2, #0]
 80147aa:	7003      	strb	r3, [r0, #0]
 80147ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80147ae:	461c      	mov	r4, r3
 80147b0:	e00c      	b.n	80147cc <__strtok_r+0x4c>
 80147b2:	b91d      	cbnz	r5, 80147bc <__strtok_r+0x3c>
 80147b4:	460e      	mov	r6, r1
 80147b6:	4627      	mov	r7, r4
 80147b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80147bc:	f816 5b01 	ldrb.w	r5, [r6], #1
 80147c0:	42ab      	cmp	r3, r5
 80147c2:	d1f6      	bne.n	80147b2 <__strtok_r+0x32>
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d0f2      	beq.n	80147ae <__strtok_r+0x2e>
 80147c8:	2300      	movs	r3, #0
 80147ca:	703b      	strb	r3, [r7, #0]
 80147cc:	6014      	str	r4, [r2, #0]
 80147ce:	e7ed      	b.n	80147ac <__strtok_r+0x2c>

080147d0 <_close_r>:
 80147d0:	b538      	push	{r3, r4, r5, lr}
 80147d2:	2300      	movs	r3, #0
 80147d4:	4d05      	ldr	r5, [pc, #20]	@ (80147ec <_close_r+0x1c>)
 80147d6:	4604      	mov	r4, r0
 80147d8:	4608      	mov	r0, r1
 80147da:	602b      	str	r3, [r5, #0]
 80147dc:	f7ed fbad 	bl	8001f3a <_close>
 80147e0:	1c43      	adds	r3, r0, #1
 80147e2:	d102      	bne.n	80147ea <_close_r+0x1a>
 80147e4:	682b      	ldr	r3, [r5, #0]
 80147e6:	b103      	cbz	r3, 80147ea <_close_r+0x1a>
 80147e8:	6023      	str	r3, [r4, #0]
 80147ea:	bd38      	pop	{r3, r4, r5, pc}
 80147ec:	2000851c 	.word	0x2000851c

080147f0 <_reclaim_reent>:
 80147f0:	4b2d      	ldr	r3, [pc, #180]	@ (80148a8 <_reclaim_reent+0xb8>)
 80147f2:	b570      	push	{r4, r5, r6, lr}
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	4604      	mov	r4, r0
 80147f8:	4283      	cmp	r3, r0
 80147fa:	d053      	beq.n	80148a4 <_reclaim_reent+0xb4>
 80147fc:	69c3      	ldr	r3, [r0, #28]
 80147fe:	b31b      	cbz	r3, 8014848 <_reclaim_reent+0x58>
 8014800:	68db      	ldr	r3, [r3, #12]
 8014802:	b163      	cbz	r3, 801481e <_reclaim_reent+0x2e>
 8014804:	2500      	movs	r5, #0
 8014806:	69e3      	ldr	r3, [r4, #28]
 8014808:	68db      	ldr	r3, [r3, #12]
 801480a:	5959      	ldr	r1, [r3, r5]
 801480c:	b9b1      	cbnz	r1, 801483c <_reclaim_reent+0x4c>
 801480e:	3504      	adds	r5, #4
 8014810:	2d80      	cmp	r5, #128	@ 0x80
 8014812:	d1f8      	bne.n	8014806 <_reclaim_reent+0x16>
 8014814:	69e3      	ldr	r3, [r4, #28]
 8014816:	4620      	mov	r0, r4
 8014818:	68d9      	ldr	r1, [r3, #12]
 801481a:	f000 f8d7 	bl	80149cc <_free_r>
 801481e:	69e3      	ldr	r3, [r4, #28]
 8014820:	6819      	ldr	r1, [r3, #0]
 8014822:	b111      	cbz	r1, 801482a <_reclaim_reent+0x3a>
 8014824:	4620      	mov	r0, r4
 8014826:	f000 f8d1 	bl	80149cc <_free_r>
 801482a:	69e3      	ldr	r3, [r4, #28]
 801482c:	689d      	ldr	r5, [r3, #8]
 801482e:	b15d      	cbz	r5, 8014848 <_reclaim_reent+0x58>
 8014830:	4629      	mov	r1, r5
 8014832:	4620      	mov	r0, r4
 8014834:	682d      	ldr	r5, [r5, #0]
 8014836:	f000 f8c9 	bl	80149cc <_free_r>
 801483a:	e7f8      	b.n	801482e <_reclaim_reent+0x3e>
 801483c:	680e      	ldr	r6, [r1, #0]
 801483e:	4620      	mov	r0, r4
 8014840:	f000 f8c4 	bl	80149cc <_free_r>
 8014844:	4631      	mov	r1, r6
 8014846:	e7e1      	b.n	801480c <_reclaim_reent+0x1c>
 8014848:	6961      	ldr	r1, [r4, #20]
 801484a:	b111      	cbz	r1, 8014852 <_reclaim_reent+0x62>
 801484c:	4620      	mov	r0, r4
 801484e:	f000 f8bd 	bl	80149cc <_free_r>
 8014852:	69e1      	ldr	r1, [r4, #28]
 8014854:	b111      	cbz	r1, 801485c <_reclaim_reent+0x6c>
 8014856:	4620      	mov	r0, r4
 8014858:	f000 f8b8 	bl	80149cc <_free_r>
 801485c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801485e:	b111      	cbz	r1, 8014866 <_reclaim_reent+0x76>
 8014860:	4620      	mov	r0, r4
 8014862:	f000 f8b3 	bl	80149cc <_free_r>
 8014866:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014868:	b111      	cbz	r1, 8014870 <_reclaim_reent+0x80>
 801486a:	4620      	mov	r0, r4
 801486c:	f000 f8ae 	bl	80149cc <_free_r>
 8014870:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8014872:	b111      	cbz	r1, 801487a <_reclaim_reent+0x8a>
 8014874:	4620      	mov	r0, r4
 8014876:	f000 f8a9 	bl	80149cc <_free_r>
 801487a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801487c:	b111      	cbz	r1, 8014884 <_reclaim_reent+0x94>
 801487e:	4620      	mov	r0, r4
 8014880:	f000 f8a4 	bl	80149cc <_free_r>
 8014884:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8014886:	b111      	cbz	r1, 801488e <_reclaim_reent+0x9e>
 8014888:	4620      	mov	r0, r4
 801488a:	f000 f89f 	bl	80149cc <_free_r>
 801488e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8014890:	b111      	cbz	r1, 8014898 <_reclaim_reent+0xa8>
 8014892:	4620      	mov	r0, r4
 8014894:	f000 f89a 	bl	80149cc <_free_r>
 8014898:	6a23      	ldr	r3, [r4, #32]
 801489a:	b11b      	cbz	r3, 80148a4 <_reclaim_reent+0xb4>
 801489c:	4620      	mov	r0, r4
 801489e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80148a2:	4718      	bx	r3
 80148a4:	bd70      	pop	{r4, r5, r6, pc}
 80148a6:	bf00      	nop
 80148a8:	20000628 	.word	0x20000628

080148ac <_lseek_r>:
 80148ac:	b538      	push	{r3, r4, r5, lr}
 80148ae:	4604      	mov	r4, r0
 80148b0:	4608      	mov	r0, r1
 80148b2:	4611      	mov	r1, r2
 80148b4:	2200      	movs	r2, #0
 80148b6:	4d05      	ldr	r5, [pc, #20]	@ (80148cc <_lseek_r+0x20>)
 80148b8:	602a      	str	r2, [r5, #0]
 80148ba:	461a      	mov	r2, r3
 80148bc:	f7ed fb61 	bl	8001f82 <_lseek>
 80148c0:	1c43      	adds	r3, r0, #1
 80148c2:	d102      	bne.n	80148ca <_lseek_r+0x1e>
 80148c4:	682b      	ldr	r3, [r5, #0]
 80148c6:	b103      	cbz	r3, 80148ca <_lseek_r+0x1e>
 80148c8:	6023      	str	r3, [r4, #0]
 80148ca:	bd38      	pop	{r3, r4, r5, pc}
 80148cc:	2000851c 	.word	0x2000851c

080148d0 <_read_r>:
 80148d0:	b538      	push	{r3, r4, r5, lr}
 80148d2:	4604      	mov	r4, r0
 80148d4:	4608      	mov	r0, r1
 80148d6:	4611      	mov	r1, r2
 80148d8:	2200      	movs	r2, #0
 80148da:	4d05      	ldr	r5, [pc, #20]	@ (80148f0 <_read_r+0x20>)
 80148dc:	602a      	str	r2, [r5, #0]
 80148de:	461a      	mov	r2, r3
 80148e0:	f7ed fb0e 	bl	8001f00 <_read>
 80148e4:	1c43      	adds	r3, r0, #1
 80148e6:	d102      	bne.n	80148ee <_read_r+0x1e>
 80148e8:	682b      	ldr	r3, [r5, #0]
 80148ea:	b103      	cbz	r3, 80148ee <_read_r+0x1e>
 80148ec:	6023      	str	r3, [r4, #0]
 80148ee:	bd38      	pop	{r3, r4, r5, pc}
 80148f0:	2000851c 	.word	0x2000851c

080148f4 <_sbrk_r>:
 80148f4:	b538      	push	{r3, r4, r5, lr}
 80148f6:	2300      	movs	r3, #0
 80148f8:	4d05      	ldr	r5, [pc, #20]	@ (8014910 <_sbrk_r+0x1c>)
 80148fa:	4604      	mov	r4, r0
 80148fc:	4608      	mov	r0, r1
 80148fe:	602b      	str	r3, [r5, #0]
 8014900:	f7ed fb4c 	bl	8001f9c <_sbrk>
 8014904:	1c43      	adds	r3, r0, #1
 8014906:	d102      	bne.n	801490e <_sbrk_r+0x1a>
 8014908:	682b      	ldr	r3, [r5, #0]
 801490a:	b103      	cbz	r3, 801490e <_sbrk_r+0x1a>
 801490c:	6023      	str	r3, [r4, #0]
 801490e:	bd38      	pop	{r3, r4, r5, pc}
 8014910:	2000851c 	.word	0x2000851c

08014914 <_write_r>:
 8014914:	b538      	push	{r3, r4, r5, lr}
 8014916:	4604      	mov	r4, r0
 8014918:	4608      	mov	r0, r1
 801491a:	4611      	mov	r1, r2
 801491c:	2200      	movs	r2, #0
 801491e:	4d05      	ldr	r5, [pc, #20]	@ (8014934 <_write_r+0x20>)
 8014920:	602a      	str	r2, [r5, #0]
 8014922:	461a      	mov	r2, r3
 8014924:	f7f3 fc38 	bl	8008198 <_write>
 8014928:	1c43      	adds	r3, r0, #1
 801492a:	d102      	bne.n	8014932 <_write_r+0x1e>
 801492c:	682b      	ldr	r3, [r5, #0]
 801492e:	b103      	cbz	r3, 8014932 <_write_r+0x1e>
 8014930:	6023      	str	r3, [r4, #0]
 8014932:	bd38      	pop	{r3, r4, r5, pc}
 8014934:	2000851c 	.word	0x2000851c

08014938 <__errno>:
 8014938:	4b01      	ldr	r3, [pc, #4]	@ (8014940 <__errno+0x8>)
 801493a:	6818      	ldr	r0, [r3, #0]
 801493c:	4770      	bx	lr
 801493e:	bf00      	nop
 8014940:	20000628 	.word	0x20000628

08014944 <__libc_init_array>:
 8014944:	b570      	push	{r4, r5, r6, lr}
 8014946:	2600      	movs	r6, #0
 8014948:	4d0c      	ldr	r5, [pc, #48]	@ (801497c <__libc_init_array+0x38>)
 801494a:	4c0d      	ldr	r4, [pc, #52]	@ (8014980 <__libc_init_array+0x3c>)
 801494c:	1b64      	subs	r4, r4, r5
 801494e:	10a4      	asrs	r4, r4, #2
 8014950:	42a6      	cmp	r6, r4
 8014952:	d109      	bne.n	8014968 <__libc_init_array+0x24>
 8014954:	f000 fe78 	bl	8015648 <_init>
 8014958:	2600      	movs	r6, #0
 801495a:	4d0a      	ldr	r5, [pc, #40]	@ (8014984 <__libc_init_array+0x40>)
 801495c:	4c0a      	ldr	r4, [pc, #40]	@ (8014988 <__libc_init_array+0x44>)
 801495e:	1b64      	subs	r4, r4, r5
 8014960:	10a4      	asrs	r4, r4, #2
 8014962:	42a6      	cmp	r6, r4
 8014964:	d105      	bne.n	8014972 <__libc_init_array+0x2e>
 8014966:	bd70      	pop	{r4, r5, r6, pc}
 8014968:	f855 3b04 	ldr.w	r3, [r5], #4
 801496c:	4798      	blx	r3
 801496e:	3601      	adds	r6, #1
 8014970:	e7ee      	b.n	8014950 <__libc_init_array+0xc>
 8014972:	f855 3b04 	ldr.w	r3, [r5], #4
 8014976:	4798      	blx	r3
 8014978:	3601      	adds	r6, #1
 801497a:	e7f2      	b.n	8014962 <__libc_init_array+0x1e>
 801497c:	0801a144 	.word	0x0801a144
 8014980:	0801a144 	.word	0x0801a144
 8014984:	0801a144 	.word	0x0801a144
 8014988:	0801a148 	.word	0x0801a148

0801498c <__retarget_lock_init_recursive>:
 801498c:	4770      	bx	lr

0801498e <__retarget_lock_acquire_recursive>:
 801498e:	4770      	bx	lr

08014990 <__retarget_lock_release_recursive>:
 8014990:	4770      	bx	lr

08014992 <strcpy>:
 8014992:	4603      	mov	r3, r0
 8014994:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014998:	f803 2b01 	strb.w	r2, [r3], #1
 801499c:	2a00      	cmp	r2, #0
 801499e:	d1f9      	bne.n	8014994 <strcpy+0x2>
 80149a0:	4770      	bx	lr

080149a2 <memcpy>:
 80149a2:	440a      	add	r2, r1
 80149a4:	4291      	cmp	r1, r2
 80149a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80149aa:	d100      	bne.n	80149ae <memcpy+0xc>
 80149ac:	4770      	bx	lr
 80149ae:	b510      	push	{r4, lr}
 80149b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80149b4:	4291      	cmp	r1, r2
 80149b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80149ba:	d1f9      	bne.n	80149b0 <memcpy+0xe>
 80149bc:	bd10      	pop	{r4, pc}

080149be <abort>:
 80149be:	2006      	movs	r0, #6
 80149c0:	b508      	push	{r3, lr}
 80149c2:	f000 fdbf 	bl	8015544 <raise>
 80149c6:	2001      	movs	r0, #1
 80149c8:	f7ed fa8f 	bl	8001eea <_exit>

080149cc <_free_r>:
 80149cc:	b538      	push	{r3, r4, r5, lr}
 80149ce:	4605      	mov	r5, r0
 80149d0:	2900      	cmp	r1, #0
 80149d2:	d040      	beq.n	8014a56 <_free_r+0x8a>
 80149d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80149d8:	1f0c      	subs	r4, r1, #4
 80149da:	2b00      	cmp	r3, #0
 80149dc:	bfb8      	it	lt
 80149de:	18e4      	addlt	r4, r4, r3
 80149e0:	f7ff fb62 	bl	80140a8 <__malloc_lock>
 80149e4:	4a1c      	ldr	r2, [pc, #112]	@ (8014a58 <_free_r+0x8c>)
 80149e6:	6813      	ldr	r3, [r2, #0]
 80149e8:	b933      	cbnz	r3, 80149f8 <_free_r+0x2c>
 80149ea:	6063      	str	r3, [r4, #4]
 80149ec:	6014      	str	r4, [r2, #0]
 80149ee:	4628      	mov	r0, r5
 80149f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80149f4:	f7ff bb5e 	b.w	80140b4 <__malloc_unlock>
 80149f8:	42a3      	cmp	r3, r4
 80149fa:	d908      	bls.n	8014a0e <_free_r+0x42>
 80149fc:	6820      	ldr	r0, [r4, #0]
 80149fe:	1821      	adds	r1, r4, r0
 8014a00:	428b      	cmp	r3, r1
 8014a02:	bf01      	itttt	eq
 8014a04:	6819      	ldreq	r1, [r3, #0]
 8014a06:	685b      	ldreq	r3, [r3, #4]
 8014a08:	1809      	addeq	r1, r1, r0
 8014a0a:	6021      	streq	r1, [r4, #0]
 8014a0c:	e7ed      	b.n	80149ea <_free_r+0x1e>
 8014a0e:	461a      	mov	r2, r3
 8014a10:	685b      	ldr	r3, [r3, #4]
 8014a12:	b10b      	cbz	r3, 8014a18 <_free_r+0x4c>
 8014a14:	42a3      	cmp	r3, r4
 8014a16:	d9fa      	bls.n	8014a0e <_free_r+0x42>
 8014a18:	6811      	ldr	r1, [r2, #0]
 8014a1a:	1850      	adds	r0, r2, r1
 8014a1c:	42a0      	cmp	r0, r4
 8014a1e:	d10b      	bne.n	8014a38 <_free_r+0x6c>
 8014a20:	6820      	ldr	r0, [r4, #0]
 8014a22:	4401      	add	r1, r0
 8014a24:	1850      	adds	r0, r2, r1
 8014a26:	4283      	cmp	r3, r0
 8014a28:	6011      	str	r1, [r2, #0]
 8014a2a:	d1e0      	bne.n	80149ee <_free_r+0x22>
 8014a2c:	6818      	ldr	r0, [r3, #0]
 8014a2e:	685b      	ldr	r3, [r3, #4]
 8014a30:	4408      	add	r0, r1
 8014a32:	6010      	str	r0, [r2, #0]
 8014a34:	6053      	str	r3, [r2, #4]
 8014a36:	e7da      	b.n	80149ee <_free_r+0x22>
 8014a38:	d902      	bls.n	8014a40 <_free_r+0x74>
 8014a3a:	230c      	movs	r3, #12
 8014a3c:	602b      	str	r3, [r5, #0]
 8014a3e:	e7d6      	b.n	80149ee <_free_r+0x22>
 8014a40:	6820      	ldr	r0, [r4, #0]
 8014a42:	1821      	adds	r1, r4, r0
 8014a44:	428b      	cmp	r3, r1
 8014a46:	bf01      	itttt	eq
 8014a48:	6819      	ldreq	r1, [r3, #0]
 8014a4a:	685b      	ldreq	r3, [r3, #4]
 8014a4c:	1809      	addeq	r1, r1, r0
 8014a4e:	6021      	streq	r1, [r4, #0]
 8014a50:	6063      	str	r3, [r4, #4]
 8014a52:	6054      	str	r4, [r2, #4]
 8014a54:	e7cb      	b.n	80149ee <_free_r+0x22>
 8014a56:	bd38      	pop	{r3, r4, r5, pc}
 8014a58:	200083dc 	.word	0x200083dc

08014a5c <__ssputs_r>:
 8014a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a60:	461f      	mov	r7, r3
 8014a62:	688e      	ldr	r6, [r1, #8]
 8014a64:	4682      	mov	sl, r0
 8014a66:	42be      	cmp	r6, r7
 8014a68:	460c      	mov	r4, r1
 8014a6a:	4690      	mov	r8, r2
 8014a6c:	680b      	ldr	r3, [r1, #0]
 8014a6e:	d82d      	bhi.n	8014acc <__ssputs_r+0x70>
 8014a70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014a74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014a78:	d026      	beq.n	8014ac8 <__ssputs_r+0x6c>
 8014a7a:	6965      	ldr	r5, [r4, #20]
 8014a7c:	6909      	ldr	r1, [r1, #16]
 8014a7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014a82:	eba3 0901 	sub.w	r9, r3, r1
 8014a86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014a8a:	1c7b      	adds	r3, r7, #1
 8014a8c:	444b      	add	r3, r9
 8014a8e:	106d      	asrs	r5, r5, #1
 8014a90:	429d      	cmp	r5, r3
 8014a92:	bf38      	it	cc
 8014a94:	461d      	movcc	r5, r3
 8014a96:	0553      	lsls	r3, r2, #21
 8014a98:	d527      	bpl.n	8014aea <__ssputs_r+0x8e>
 8014a9a:	4629      	mov	r1, r5
 8014a9c:	f7ff fa84 	bl	8013fa8 <_malloc_r>
 8014aa0:	4606      	mov	r6, r0
 8014aa2:	b360      	cbz	r0, 8014afe <__ssputs_r+0xa2>
 8014aa4:	464a      	mov	r2, r9
 8014aa6:	6921      	ldr	r1, [r4, #16]
 8014aa8:	f7ff ff7b 	bl	80149a2 <memcpy>
 8014aac:	89a3      	ldrh	r3, [r4, #12]
 8014aae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8014ab2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014ab6:	81a3      	strh	r3, [r4, #12]
 8014ab8:	6126      	str	r6, [r4, #16]
 8014aba:	444e      	add	r6, r9
 8014abc:	6026      	str	r6, [r4, #0]
 8014abe:	463e      	mov	r6, r7
 8014ac0:	6165      	str	r5, [r4, #20]
 8014ac2:	eba5 0509 	sub.w	r5, r5, r9
 8014ac6:	60a5      	str	r5, [r4, #8]
 8014ac8:	42be      	cmp	r6, r7
 8014aca:	d900      	bls.n	8014ace <__ssputs_r+0x72>
 8014acc:	463e      	mov	r6, r7
 8014ace:	4632      	mov	r2, r6
 8014ad0:	4641      	mov	r1, r8
 8014ad2:	6820      	ldr	r0, [r4, #0]
 8014ad4:	f000 fcf3 	bl	80154be <memmove>
 8014ad8:	2000      	movs	r0, #0
 8014ada:	68a3      	ldr	r3, [r4, #8]
 8014adc:	1b9b      	subs	r3, r3, r6
 8014ade:	60a3      	str	r3, [r4, #8]
 8014ae0:	6823      	ldr	r3, [r4, #0]
 8014ae2:	4433      	add	r3, r6
 8014ae4:	6023      	str	r3, [r4, #0]
 8014ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014aea:	462a      	mov	r2, r5
 8014aec:	f000 fd76 	bl	80155dc <_realloc_r>
 8014af0:	4606      	mov	r6, r0
 8014af2:	2800      	cmp	r0, #0
 8014af4:	d1e0      	bne.n	8014ab8 <__ssputs_r+0x5c>
 8014af6:	4650      	mov	r0, sl
 8014af8:	6921      	ldr	r1, [r4, #16]
 8014afa:	f7ff ff67 	bl	80149cc <_free_r>
 8014afe:	230c      	movs	r3, #12
 8014b00:	f8ca 3000 	str.w	r3, [sl]
 8014b04:	89a3      	ldrh	r3, [r4, #12]
 8014b06:	f04f 30ff 	mov.w	r0, #4294967295
 8014b0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014b0e:	81a3      	strh	r3, [r4, #12]
 8014b10:	e7e9      	b.n	8014ae6 <__ssputs_r+0x8a>
	...

08014b14 <_svfiprintf_r>:
 8014b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b18:	4698      	mov	r8, r3
 8014b1a:	898b      	ldrh	r3, [r1, #12]
 8014b1c:	4607      	mov	r7, r0
 8014b1e:	061b      	lsls	r3, r3, #24
 8014b20:	460d      	mov	r5, r1
 8014b22:	4614      	mov	r4, r2
 8014b24:	b09d      	sub	sp, #116	@ 0x74
 8014b26:	d510      	bpl.n	8014b4a <_svfiprintf_r+0x36>
 8014b28:	690b      	ldr	r3, [r1, #16]
 8014b2a:	b973      	cbnz	r3, 8014b4a <_svfiprintf_r+0x36>
 8014b2c:	2140      	movs	r1, #64	@ 0x40
 8014b2e:	f7ff fa3b 	bl	8013fa8 <_malloc_r>
 8014b32:	6028      	str	r0, [r5, #0]
 8014b34:	6128      	str	r0, [r5, #16]
 8014b36:	b930      	cbnz	r0, 8014b46 <_svfiprintf_r+0x32>
 8014b38:	230c      	movs	r3, #12
 8014b3a:	603b      	str	r3, [r7, #0]
 8014b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8014b40:	b01d      	add	sp, #116	@ 0x74
 8014b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b46:	2340      	movs	r3, #64	@ 0x40
 8014b48:	616b      	str	r3, [r5, #20]
 8014b4a:	2300      	movs	r3, #0
 8014b4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8014b4e:	2320      	movs	r3, #32
 8014b50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014b54:	2330      	movs	r3, #48	@ 0x30
 8014b56:	f04f 0901 	mov.w	r9, #1
 8014b5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8014b5e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8014cf8 <_svfiprintf_r+0x1e4>
 8014b62:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014b66:	4623      	mov	r3, r4
 8014b68:	469a      	mov	sl, r3
 8014b6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014b6e:	b10a      	cbz	r2, 8014b74 <_svfiprintf_r+0x60>
 8014b70:	2a25      	cmp	r2, #37	@ 0x25
 8014b72:	d1f9      	bne.n	8014b68 <_svfiprintf_r+0x54>
 8014b74:	ebba 0b04 	subs.w	fp, sl, r4
 8014b78:	d00b      	beq.n	8014b92 <_svfiprintf_r+0x7e>
 8014b7a:	465b      	mov	r3, fp
 8014b7c:	4622      	mov	r2, r4
 8014b7e:	4629      	mov	r1, r5
 8014b80:	4638      	mov	r0, r7
 8014b82:	f7ff ff6b 	bl	8014a5c <__ssputs_r>
 8014b86:	3001      	adds	r0, #1
 8014b88:	f000 80a7 	beq.w	8014cda <_svfiprintf_r+0x1c6>
 8014b8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014b8e:	445a      	add	r2, fp
 8014b90:	9209      	str	r2, [sp, #36]	@ 0x24
 8014b92:	f89a 3000 	ldrb.w	r3, [sl]
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	f000 809f 	beq.w	8014cda <_svfiprintf_r+0x1c6>
 8014b9c:	2300      	movs	r3, #0
 8014b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8014ba2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014ba6:	f10a 0a01 	add.w	sl, sl, #1
 8014baa:	9304      	str	r3, [sp, #16]
 8014bac:	9307      	str	r3, [sp, #28]
 8014bae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014bb2:	931a      	str	r3, [sp, #104]	@ 0x68
 8014bb4:	4654      	mov	r4, sl
 8014bb6:	2205      	movs	r2, #5
 8014bb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014bbc:	484e      	ldr	r0, [pc, #312]	@ (8014cf8 <_svfiprintf_r+0x1e4>)
 8014bbe:	f000 fcff 	bl	80155c0 <memchr>
 8014bc2:	9a04      	ldr	r2, [sp, #16]
 8014bc4:	b9d8      	cbnz	r0, 8014bfe <_svfiprintf_r+0xea>
 8014bc6:	06d0      	lsls	r0, r2, #27
 8014bc8:	bf44      	itt	mi
 8014bca:	2320      	movmi	r3, #32
 8014bcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014bd0:	0711      	lsls	r1, r2, #28
 8014bd2:	bf44      	itt	mi
 8014bd4:	232b      	movmi	r3, #43	@ 0x2b
 8014bd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014bda:	f89a 3000 	ldrb.w	r3, [sl]
 8014bde:	2b2a      	cmp	r3, #42	@ 0x2a
 8014be0:	d015      	beq.n	8014c0e <_svfiprintf_r+0xfa>
 8014be2:	4654      	mov	r4, sl
 8014be4:	2000      	movs	r0, #0
 8014be6:	f04f 0c0a 	mov.w	ip, #10
 8014bea:	9a07      	ldr	r2, [sp, #28]
 8014bec:	4621      	mov	r1, r4
 8014bee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014bf2:	3b30      	subs	r3, #48	@ 0x30
 8014bf4:	2b09      	cmp	r3, #9
 8014bf6:	d94b      	bls.n	8014c90 <_svfiprintf_r+0x17c>
 8014bf8:	b1b0      	cbz	r0, 8014c28 <_svfiprintf_r+0x114>
 8014bfa:	9207      	str	r2, [sp, #28]
 8014bfc:	e014      	b.n	8014c28 <_svfiprintf_r+0x114>
 8014bfe:	eba0 0308 	sub.w	r3, r0, r8
 8014c02:	fa09 f303 	lsl.w	r3, r9, r3
 8014c06:	4313      	orrs	r3, r2
 8014c08:	46a2      	mov	sl, r4
 8014c0a:	9304      	str	r3, [sp, #16]
 8014c0c:	e7d2      	b.n	8014bb4 <_svfiprintf_r+0xa0>
 8014c0e:	9b03      	ldr	r3, [sp, #12]
 8014c10:	1d19      	adds	r1, r3, #4
 8014c12:	681b      	ldr	r3, [r3, #0]
 8014c14:	9103      	str	r1, [sp, #12]
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	bfbb      	ittet	lt
 8014c1a:	425b      	neglt	r3, r3
 8014c1c:	f042 0202 	orrlt.w	r2, r2, #2
 8014c20:	9307      	strge	r3, [sp, #28]
 8014c22:	9307      	strlt	r3, [sp, #28]
 8014c24:	bfb8      	it	lt
 8014c26:	9204      	strlt	r2, [sp, #16]
 8014c28:	7823      	ldrb	r3, [r4, #0]
 8014c2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8014c2c:	d10a      	bne.n	8014c44 <_svfiprintf_r+0x130>
 8014c2e:	7863      	ldrb	r3, [r4, #1]
 8014c30:	2b2a      	cmp	r3, #42	@ 0x2a
 8014c32:	d132      	bne.n	8014c9a <_svfiprintf_r+0x186>
 8014c34:	9b03      	ldr	r3, [sp, #12]
 8014c36:	3402      	adds	r4, #2
 8014c38:	1d1a      	adds	r2, r3, #4
 8014c3a:	681b      	ldr	r3, [r3, #0]
 8014c3c:	9203      	str	r2, [sp, #12]
 8014c3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014c42:	9305      	str	r3, [sp, #20]
 8014c44:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8014cfc <_svfiprintf_r+0x1e8>
 8014c48:	2203      	movs	r2, #3
 8014c4a:	4650      	mov	r0, sl
 8014c4c:	7821      	ldrb	r1, [r4, #0]
 8014c4e:	f000 fcb7 	bl	80155c0 <memchr>
 8014c52:	b138      	cbz	r0, 8014c64 <_svfiprintf_r+0x150>
 8014c54:	2240      	movs	r2, #64	@ 0x40
 8014c56:	9b04      	ldr	r3, [sp, #16]
 8014c58:	eba0 000a 	sub.w	r0, r0, sl
 8014c5c:	4082      	lsls	r2, r0
 8014c5e:	4313      	orrs	r3, r2
 8014c60:	3401      	adds	r4, #1
 8014c62:	9304      	str	r3, [sp, #16]
 8014c64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c68:	2206      	movs	r2, #6
 8014c6a:	4825      	ldr	r0, [pc, #148]	@ (8014d00 <_svfiprintf_r+0x1ec>)
 8014c6c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014c70:	f000 fca6 	bl	80155c0 <memchr>
 8014c74:	2800      	cmp	r0, #0
 8014c76:	d036      	beq.n	8014ce6 <_svfiprintf_r+0x1d2>
 8014c78:	4b22      	ldr	r3, [pc, #136]	@ (8014d04 <_svfiprintf_r+0x1f0>)
 8014c7a:	bb1b      	cbnz	r3, 8014cc4 <_svfiprintf_r+0x1b0>
 8014c7c:	9b03      	ldr	r3, [sp, #12]
 8014c7e:	3307      	adds	r3, #7
 8014c80:	f023 0307 	bic.w	r3, r3, #7
 8014c84:	3308      	adds	r3, #8
 8014c86:	9303      	str	r3, [sp, #12]
 8014c88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014c8a:	4433      	add	r3, r6
 8014c8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8014c8e:	e76a      	b.n	8014b66 <_svfiprintf_r+0x52>
 8014c90:	460c      	mov	r4, r1
 8014c92:	2001      	movs	r0, #1
 8014c94:	fb0c 3202 	mla	r2, ip, r2, r3
 8014c98:	e7a8      	b.n	8014bec <_svfiprintf_r+0xd8>
 8014c9a:	2300      	movs	r3, #0
 8014c9c:	f04f 0c0a 	mov.w	ip, #10
 8014ca0:	4619      	mov	r1, r3
 8014ca2:	3401      	adds	r4, #1
 8014ca4:	9305      	str	r3, [sp, #20]
 8014ca6:	4620      	mov	r0, r4
 8014ca8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014cac:	3a30      	subs	r2, #48	@ 0x30
 8014cae:	2a09      	cmp	r2, #9
 8014cb0:	d903      	bls.n	8014cba <_svfiprintf_r+0x1a6>
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d0c6      	beq.n	8014c44 <_svfiprintf_r+0x130>
 8014cb6:	9105      	str	r1, [sp, #20]
 8014cb8:	e7c4      	b.n	8014c44 <_svfiprintf_r+0x130>
 8014cba:	4604      	mov	r4, r0
 8014cbc:	2301      	movs	r3, #1
 8014cbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8014cc2:	e7f0      	b.n	8014ca6 <_svfiprintf_r+0x192>
 8014cc4:	ab03      	add	r3, sp, #12
 8014cc6:	9300      	str	r3, [sp, #0]
 8014cc8:	462a      	mov	r2, r5
 8014cca:	4638      	mov	r0, r7
 8014ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8014d08 <_svfiprintf_r+0x1f4>)
 8014cce:	a904      	add	r1, sp, #16
 8014cd0:	f3af 8000 	nop.w
 8014cd4:	1c42      	adds	r2, r0, #1
 8014cd6:	4606      	mov	r6, r0
 8014cd8:	d1d6      	bne.n	8014c88 <_svfiprintf_r+0x174>
 8014cda:	89ab      	ldrh	r3, [r5, #12]
 8014cdc:	065b      	lsls	r3, r3, #25
 8014cde:	f53f af2d 	bmi.w	8014b3c <_svfiprintf_r+0x28>
 8014ce2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014ce4:	e72c      	b.n	8014b40 <_svfiprintf_r+0x2c>
 8014ce6:	ab03      	add	r3, sp, #12
 8014ce8:	9300      	str	r3, [sp, #0]
 8014cea:	462a      	mov	r2, r5
 8014cec:	4638      	mov	r0, r7
 8014cee:	4b06      	ldr	r3, [pc, #24]	@ (8014d08 <_svfiprintf_r+0x1f4>)
 8014cf0:	a904      	add	r1, sp, #16
 8014cf2:	f000 f9bd 	bl	8015070 <_printf_i>
 8014cf6:	e7ed      	b.n	8014cd4 <_svfiprintf_r+0x1c0>
 8014cf8:	0801a007 	.word	0x0801a007
 8014cfc:	0801a00d 	.word	0x0801a00d
 8014d00:	0801a011 	.word	0x0801a011
 8014d04:	00000000 	.word	0x00000000
 8014d08:	08014a5d 	.word	0x08014a5d

08014d0c <__sfputc_r>:
 8014d0c:	6893      	ldr	r3, [r2, #8]
 8014d0e:	b410      	push	{r4}
 8014d10:	3b01      	subs	r3, #1
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	6093      	str	r3, [r2, #8]
 8014d16:	da07      	bge.n	8014d28 <__sfputc_r+0x1c>
 8014d18:	6994      	ldr	r4, [r2, #24]
 8014d1a:	42a3      	cmp	r3, r4
 8014d1c:	db01      	blt.n	8014d22 <__sfputc_r+0x16>
 8014d1e:	290a      	cmp	r1, #10
 8014d20:	d102      	bne.n	8014d28 <__sfputc_r+0x1c>
 8014d22:	bc10      	pop	{r4}
 8014d24:	f7ff bc2a 	b.w	801457c <__swbuf_r>
 8014d28:	6813      	ldr	r3, [r2, #0]
 8014d2a:	1c58      	adds	r0, r3, #1
 8014d2c:	6010      	str	r0, [r2, #0]
 8014d2e:	7019      	strb	r1, [r3, #0]
 8014d30:	4608      	mov	r0, r1
 8014d32:	bc10      	pop	{r4}
 8014d34:	4770      	bx	lr

08014d36 <__sfputs_r>:
 8014d36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d38:	4606      	mov	r6, r0
 8014d3a:	460f      	mov	r7, r1
 8014d3c:	4614      	mov	r4, r2
 8014d3e:	18d5      	adds	r5, r2, r3
 8014d40:	42ac      	cmp	r4, r5
 8014d42:	d101      	bne.n	8014d48 <__sfputs_r+0x12>
 8014d44:	2000      	movs	r0, #0
 8014d46:	e007      	b.n	8014d58 <__sfputs_r+0x22>
 8014d48:	463a      	mov	r2, r7
 8014d4a:	4630      	mov	r0, r6
 8014d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d50:	f7ff ffdc 	bl	8014d0c <__sfputc_r>
 8014d54:	1c43      	adds	r3, r0, #1
 8014d56:	d1f3      	bne.n	8014d40 <__sfputs_r+0xa>
 8014d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014d5c <_vfiprintf_r>:
 8014d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d60:	460d      	mov	r5, r1
 8014d62:	4614      	mov	r4, r2
 8014d64:	4698      	mov	r8, r3
 8014d66:	4606      	mov	r6, r0
 8014d68:	b09d      	sub	sp, #116	@ 0x74
 8014d6a:	b118      	cbz	r0, 8014d74 <_vfiprintf_r+0x18>
 8014d6c:	6a03      	ldr	r3, [r0, #32]
 8014d6e:	b90b      	cbnz	r3, 8014d74 <_vfiprintf_r+0x18>
 8014d70:	f7ff faaa 	bl	80142c8 <__sinit>
 8014d74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014d76:	07d9      	lsls	r1, r3, #31
 8014d78:	d405      	bmi.n	8014d86 <_vfiprintf_r+0x2a>
 8014d7a:	89ab      	ldrh	r3, [r5, #12]
 8014d7c:	059a      	lsls	r2, r3, #22
 8014d7e:	d402      	bmi.n	8014d86 <_vfiprintf_r+0x2a>
 8014d80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014d82:	f7ff fe04 	bl	801498e <__retarget_lock_acquire_recursive>
 8014d86:	89ab      	ldrh	r3, [r5, #12]
 8014d88:	071b      	lsls	r3, r3, #28
 8014d8a:	d501      	bpl.n	8014d90 <_vfiprintf_r+0x34>
 8014d8c:	692b      	ldr	r3, [r5, #16]
 8014d8e:	b99b      	cbnz	r3, 8014db8 <_vfiprintf_r+0x5c>
 8014d90:	4629      	mov	r1, r5
 8014d92:	4630      	mov	r0, r6
 8014d94:	f7ff fc30 	bl	80145f8 <__swsetup_r>
 8014d98:	b170      	cbz	r0, 8014db8 <_vfiprintf_r+0x5c>
 8014d9a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014d9c:	07dc      	lsls	r4, r3, #31
 8014d9e:	d504      	bpl.n	8014daa <_vfiprintf_r+0x4e>
 8014da0:	f04f 30ff 	mov.w	r0, #4294967295
 8014da4:	b01d      	add	sp, #116	@ 0x74
 8014da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014daa:	89ab      	ldrh	r3, [r5, #12]
 8014dac:	0598      	lsls	r0, r3, #22
 8014dae:	d4f7      	bmi.n	8014da0 <_vfiprintf_r+0x44>
 8014db0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014db2:	f7ff fded 	bl	8014990 <__retarget_lock_release_recursive>
 8014db6:	e7f3      	b.n	8014da0 <_vfiprintf_r+0x44>
 8014db8:	2300      	movs	r3, #0
 8014dba:	9309      	str	r3, [sp, #36]	@ 0x24
 8014dbc:	2320      	movs	r3, #32
 8014dbe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014dc2:	2330      	movs	r3, #48	@ 0x30
 8014dc4:	f04f 0901 	mov.w	r9, #1
 8014dc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8014dcc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8014f78 <_vfiprintf_r+0x21c>
 8014dd0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014dd4:	4623      	mov	r3, r4
 8014dd6:	469a      	mov	sl, r3
 8014dd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014ddc:	b10a      	cbz	r2, 8014de2 <_vfiprintf_r+0x86>
 8014dde:	2a25      	cmp	r2, #37	@ 0x25
 8014de0:	d1f9      	bne.n	8014dd6 <_vfiprintf_r+0x7a>
 8014de2:	ebba 0b04 	subs.w	fp, sl, r4
 8014de6:	d00b      	beq.n	8014e00 <_vfiprintf_r+0xa4>
 8014de8:	465b      	mov	r3, fp
 8014dea:	4622      	mov	r2, r4
 8014dec:	4629      	mov	r1, r5
 8014dee:	4630      	mov	r0, r6
 8014df0:	f7ff ffa1 	bl	8014d36 <__sfputs_r>
 8014df4:	3001      	adds	r0, #1
 8014df6:	f000 80a7 	beq.w	8014f48 <_vfiprintf_r+0x1ec>
 8014dfa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014dfc:	445a      	add	r2, fp
 8014dfe:	9209      	str	r2, [sp, #36]	@ 0x24
 8014e00:	f89a 3000 	ldrb.w	r3, [sl]
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	f000 809f 	beq.w	8014f48 <_vfiprintf_r+0x1ec>
 8014e0a:	2300      	movs	r3, #0
 8014e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8014e10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014e14:	f10a 0a01 	add.w	sl, sl, #1
 8014e18:	9304      	str	r3, [sp, #16]
 8014e1a:	9307      	str	r3, [sp, #28]
 8014e1c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014e20:	931a      	str	r3, [sp, #104]	@ 0x68
 8014e22:	4654      	mov	r4, sl
 8014e24:	2205      	movs	r2, #5
 8014e26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e2a:	4853      	ldr	r0, [pc, #332]	@ (8014f78 <_vfiprintf_r+0x21c>)
 8014e2c:	f000 fbc8 	bl	80155c0 <memchr>
 8014e30:	9a04      	ldr	r2, [sp, #16]
 8014e32:	b9d8      	cbnz	r0, 8014e6c <_vfiprintf_r+0x110>
 8014e34:	06d1      	lsls	r1, r2, #27
 8014e36:	bf44      	itt	mi
 8014e38:	2320      	movmi	r3, #32
 8014e3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014e3e:	0713      	lsls	r3, r2, #28
 8014e40:	bf44      	itt	mi
 8014e42:	232b      	movmi	r3, #43	@ 0x2b
 8014e44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014e48:	f89a 3000 	ldrb.w	r3, [sl]
 8014e4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8014e4e:	d015      	beq.n	8014e7c <_vfiprintf_r+0x120>
 8014e50:	4654      	mov	r4, sl
 8014e52:	2000      	movs	r0, #0
 8014e54:	f04f 0c0a 	mov.w	ip, #10
 8014e58:	9a07      	ldr	r2, [sp, #28]
 8014e5a:	4621      	mov	r1, r4
 8014e5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014e60:	3b30      	subs	r3, #48	@ 0x30
 8014e62:	2b09      	cmp	r3, #9
 8014e64:	d94b      	bls.n	8014efe <_vfiprintf_r+0x1a2>
 8014e66:	b1b0      	cbz	r0, 8014e96 <_vfiprintf_r+0x13a>
 8014e68:	9207      	str	r2, [sp, #28]
 8014e6a:	e014      	b.n	8014e96 <_vfiprintf_r+0x13a>
 8014e6c:	eba0 0308 	sub.w	r3, r0, r8
 8014e70:	fa09 f303 	lsl.w	r3, r9, r3
 8014e74:	4313      	orrs	r3, r2
 8014e76:	46a2      	mov	sl, r4
 8014e78:	9304      	str	r3, [sp, #16]
 8014e7a:	e7d2      	b.n	8014e22 <_vfiprintf_r+0xc6>
 8014e7c:	9b03      	ldr	r3, [sp, #12]
 8014e7e:	1d19      	adds	r1, r3, #4
 8014e80:	681b      	ldr	r3, [r3, #0]
 8014e82:	9103      	str	r1, [sp, #12]
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	bfbb      	ittet	lt
 8014e88:	425b      	neglt	r3, r3
 8014e8a:	f042 0202 	orrlt.w	r2, r2, #2
 8014e8e:	9307      	strge	r3, [sp, #28]
 8014e90:	9307      	strlt	r3, [sp, #28]
 8014e92:	bfb8      	it	lt
 8014e94:	9204      	strlt	r2, [sp, #16]
 8014e96:	7823      	ldrb	r3, [r4, #0]
 8014e98:	2b2e      	cmp	r3, #46	@ 0x2e
 8014e9a:	d10a      	bne.n	8014eb2 <_vfiprintf_r+0x156>
 8014e9c:	7863      	ldrb	r3, [r4, #1]
 8014e9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8014ea0:	d132      	bne.n	8014f08 <_vfiprintf_r+0x1ac>
 8014ea2:	9b03      	ldr	r3, [sp, #12]
 8014ea4:	3402      	adds	r4, #2
 8014ea6:	1d1a      	adds	r2, r3, #4
 8014ea8:	681b      	ldr	r3, [r3, #0]
 8014eaa:	9203      	str	r2, [sp, #12]
 8014eac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014eb0:	9305      	str	r3, [sp, #20]
 8014eb2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8014f7c <_vfiprintf_r+0x220>
 8014eb6:	2203      	movs	r2, #3
 8014eb8:	4650      	mov	r0, sl
 8014eba:	7821      	ldrb	r1, [r4, #0]
 8014ebc:	f000 fb80 	bl	80155c0 <memchr>
 8014ec0:	b138      	cbz	r0, 8014ed2 <_vfiprintf_r+0x176>
 8014ec2:	2240      	movs	r2, #64	@ 0x40
 8014ec4:	9b04      	ldr	r3, [sp, #16]
 8014ec6:	eba0 000a 	sub.w	r0, r0, sl
 8014eca:	4082      	lsls	r2, r0
 8014ecc:	4313      	orrs	r3, r2
 8014ece:	3401      	adds	r4, #1
 8014ed0:	9304      	str	r3, [sp, #16]
 8014ed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ed6:	2206      	movs	r2, #6
 8014ed8:	4829      	ldr	r0, [pc, #164]	@ (8014f80 <_vfiprintf_r+0x224>)
 8014eda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014ede:	f000 fb6f 	bl	80155c0 <memchr>
 8014ee2:	2800      	cmp	r0, #0
 8014ee4:	d03f      	beq.n	8014f66 <_vfiprintf_r+0x20a>
 8014ee6:	4b27      	ldr	r3, [pc, #156]	@ (8014f84 <_vfiprintf_r+0x228>)
 8014ee8:	bb1b      	cbnz	r3, 8014f32 <_vfiprintf_r+0x1d6>
 8014eea:	9b03      	ldr	r3, [sp, #12]
 8014eec:	3307      	adds	r3, #7
 8014eee:	f023 0307 	bic.w	r3, r3, #7
 8014ef2:	3308      	adds	r3, #8
 8014ef4:	9303      	str	r3, [sp, #12]
 8014ef6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014ef8:	443b      	add	r3, r7
 8014efa:	9309      	str	r3, [sp, #36]	@ 0x24
 8014efc:	e76a      	b.n	8014dd4 <_vfiprintf_r+0x78>
 8014efe:	460c      	mov	r4, r1
 8014f00:	2001      	movs	r0, #1
 8014f02:	fb0c 3202 	mla	r2, ip, r2, r3
 8014f06:	e7a8      	b.n	8014e5a <_vfiprintf_r+0xfe>
 8014f08:	2300      	movs	r3, #0
 8014f0a:	f04f 0c0a 	mov.w	ip, #10
 8014f0e:	4619      	mov	r1, r3
 8014f10:	3401      	adds	r4, #1
 8014f12:	9305      	str	r3, [sp, #20]
 8014f14:	4620      	mov	r0, r4
 8014f16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014f1a:	3a30      	subs	r2, #48	@ 0x30
 8014f1c:	2a09      	cmp	r2, #9
 8014f1e:	d903      	bls.n	8014f28 <_vfiprintf_r+0x1cc>
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d0c6      	beq.n	8014eb2 <_vfiprintf_r+0x156>
 8014f24:	9105      	str	r1, [sp, #20]
 8014f26:	e7c4      	b.n	8014eb2 <_vfiprintf_r+0x156>
 8014f28:	4604      	mov	r4, r0
 8014f2a:	2301      	movs	r3, #1
 8014f2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8014f30:	e7f0      	b.n	8014f14 <_vfiprintf_r+0x1b8>
 8014f32:	ab03      	add	r3, sp, #12
 8014f34:	9300      	str	r3, [sp, #0]
 8014f36:	462a      	mov	r2, r5
 8014f38:	4630      	mov	r0, r6
 8014f3a:	4b13      	ldr	r3, [pc, #76]	@ (8014f88 <_vfiprintf_r+0x22c>)
 8014f3c:	a904      	add	r1, sp, #16
 8014f3e:	f3af 8000 	nop.w
 8014f42:	4607      	mov	r7, r0
 8014f44:	1c78      	adds	r0, r7, #1
 8014f46:	d1d6      	bne.n	8014ef6 <_vfiprintf_r+0x19a>
 8014f48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014f4a:	07d9      	lsls	r1, r3, #31
 8014f4c:	d405      	bmi.n	8014f5a <_vfiprintf_r+0x1fe>
 8014f4e:	89ab      	ldrh	r3, [r5, #12]
 8014f50:	059a      	lsls	r2, r3, #22
 8014f52:	d402      	bmi.n	8014f5a <_vfiprintf_r+0x1fe>
 8014f54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014f56:	f7ff fd1b 	bl	8014990 <__retarget_lock_release_recursive>
 8014f5a:	89ab      	ldrh	r3, [r5, #12]
 8014f5c:	065b      	lsls	r3, r3, #25
 8014f5e:	f53f af1f 	bmi.w	8014da0 <_vfiprintf_r+0x44>
 8014f62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014f64:	e71e      	b.n	8014da4 <_vfiprintf_r+0x48>
 8014f66:	ab03      	add	r3, sp, #12
 8014f68:	9300      	str	r3, [sp, #0]
 8014f6a:	462a      	mov	r2, r5
 8014f6c:	4630      	mov	r0, r6
 8014f6e:	4b06      	ldr	r3, [pc, #24]	@ (8014f88 <_vfiprintf_r+0x22c>)
 8014f70:	a904      	add	r1, sp, #16
 8014f72:	f000 f87d 	bl	8015070 <_printf_i>
 8014f76:	e7e4      	b.n	8014f42 <_vfiprintf_r+0x1e6>
 8014f78:	0801a007 	.word	0x0801a007
 8014f7c:	0801a00d 	.word	0x0801a00d
 8014f80:	0801a011 	.word	0x0801a011
 8014f84:	00000000 	.word	0x00000000
 8014f88:	08014d37 	.word	0x08014d37

08014f8c <_printf_common>:
 8014f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f90:	4616      	mov	r6, r2
 8014f92:	4698      	mov	r8, r3
 8014f94:	688a      	ldr	r2, [r1, #8]
 8014f96:	690b      	ldr	r3, [r1, #16]
 8014f98:	4607      	mov	r7, r0
 8014f9a:	4293      	cmp	r3, r2
 8014f9c:	bfb8      	it	lt
 8014f9e:	4613      	movlt	r3, r2
 8014fa0:	6033      	str	r3, [r6, #0]
 8014fa2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014fa6:	460c      	mov	r4, r1
 8014fa8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014fac:	b10a      	cbz	r2, 8014fb2 <_printf_common+0x26>
 8014fae:	3301      	adds	r3, #1
 8014fb0:	6033      	str	r3, [r6, #0]
 8014fb2:	6823      	ldr	r3, [r4, #0]
 8014fb4:	0699      	lsls	r1, r3, #26
 8014fb6:	bf42      	ittt	mi
 8014fb8:	6833      	ldrmi	r3, [r6, #0]
 8014fba:	3302      	addmi	r3, #2
 8014fbc:	6033      	strmi	r3, [r6, #0]
 8014fbe:	6825      	ldr	r5, [r4, #0]
 8014fc0:	f015 0506 	ands.w	r5, r5, #6
 8014fc4:	d106      	bne.n	8014fd4 <_printf_common+0x48>
 8014fc6:	f104 0a19 	add.w	sl, r4, #25
 8014fca:	68e3      	ldr	r3, [r4, #12]
 8014fcc:	6832      	ldr	r2, [r6, #0]
 8014fce:	1a9b      	subs	r3, r3, r2
 8014fd0:	42ab      	cmp	r3, r5
 8014fd2:	dc2b      	bgt.n	801502c <_printf_common+0xa0>
 8014fd4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014fd8:	6822      	ldr	r2, [r4, #0]
 8014fda:	3b00      	subs	r3, #0
 8014fdc:	bf18      	it	ne
 8014fde:	2301      	movne	r3, #1
 8014fe0:	0692      	lsls	r2, r2, #26
 8014fe2:	d430      	bmi.n	8015046 <_printf_common+0xba>
 8014fe4:	4641      	mov	r1, r8
 8014fe6:	4638      	mov	r0, r7
 8014fe8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014fec:	47c8      	blx	r9
 8014fee:	3001      	adds	r0, #1
 8014ff0:	d023      	beq.n	801503a <_printf_common+0xae>
 8014ff2:	6823      	ldr	r3, [r4, #0]
 8014ff4:	6922      	ldr	r2, [r4, #16]
 8014ff6:	f003 0306 	and.w	r3, r3, #6
 8014ffa:	2b04      	cmp	r3, #4
 8014ffc:	bf14      	ite	ne
 8014ffe:	2500      	movne	r5, #0
 8015000:	6833      	ldreq	r3, [r6, #0]
 8015002:	f04f 0600 	mov.w	r6, #0
 8015006:	bf08      	it	eq
 8015008:	68e5      	ldreq	r5, [r4, #12]
 801500a:	f104 041a 	add.w	r4, r4, #26
 801500e:	bf08      	it	eq
 8015010:	1aed      	subeq	r5, r5, r3
 8015012:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8015016:	bf08      	it	eq
 8015018:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801501c:	4293      	cmp	r3, r2
 801501e:	bfc4      	itt	gt
 8015020:	1a9b      	subgt	r3, r3, r2
 8015022:	18ed      	addgt	r5, r5, r3
 8015024:	42b5      	cmp	r5, r6
 8015026:	d11a      	bne.n	801505e <_printf_common+0xd2>
 8015028:	2000      	movs	r0, #0
 801502a:	e008      	b.n	801503e <_printf_common+0xb2>
 801502c:	2301      	movs	r3, #1
 801502e:	4652      	mov	r2, sl
 8015030:	4641      	mov	r1, r8
 8015032:	4638      	mov	r0, r7
 8015034:	47c8      	blx	r9
 8015036:	3001      	adds	r0, #1
 8015038:	d103      	bne.n	8015042 <_printf_common+0xb6>
 801503a:	f04f 30ff 	mov.w	r0, #4294967295
 801503e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015042:	3501      	adds	r5, #1
 8015044:	e7c1      	b.n	8014fca <_printf_common+0x3e>
 8015046:	2030      	movs	r0, #48	@ 0x30
 8015048:	18e1      	adds	r1, r4, r3
 801504a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801504e:	1c5a      	adds	r2, r3, #1
 8015050:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015054:	4422      	add	r2, r4
 8015056:	3302      	adds	r3, #2
 8015058:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801505c:	e7c2      	b.n	8014fe4 <_printf_common+0x58>
 801505e:	2301      	movs	r3, #1
 8015060:	4622      	mov	r2, r4
 8015062:	4641      	mov	r1, r8
 8015064:	4638      	mov	r0, r7
 8015066:	47c8      	blx	r9
 8015068:	3001      	adds	r0, #1
 801506a:	d0e6      	beq.n	801503a <_printf_common+0xae>
 801506c:	3601      	adds	r6, #1
 801506e:	e7d9      	b.n	8015024 <_printf_common+0x98>

08015070 <_printf_i>:
 8015070:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015074:	7e0f      	ldrb	r7, [r1, #24]
 8015076:	4691      	mov	r9, r2
 8015078:	2f78      	cmp	r7, #120	@ 0x78
 801507a:	4680      	mov	r8, r0
 801507c:	460c      	mov	r4, r1
 801507e:	469a      	mov	sl, r3
 8015080:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015082:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8015086:	d807      	bhi.n	8015098 <_printf_i+0x28>
 8015088:	2f62      	cmp	r7, #98	@ 0x62
 801508a:	d80a      	bhi.n	80150a2 <_printf_i+0x32>
 801508c:	2f00      	cmp	r7, #0
 801508e:	f000 80d1 	beq.w	8015234 <_printf_i+0x1c4>
 8015092:	2f58      	cmp	r7, #88	@ 0x58
 8015094:	f000 80b8 	beq.w	8015208 <_printf_i+0x198>
 8015098:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801509c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80150a0:	e03a      	b.n	8015118 <_printf_i+0xa8>
 80150a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80150a6:	2b15      	cmp	r3, #21
 80150a8:	d8f6      	bhi.n	8015098 <_printf_i+0x28>
 80150aa:	a101      	add	r1, pc, #4	@ (adr r1, 80150b0 <_printf_i+0x40>)
 80150ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80150b0:	08015109 	.word	0x08015109
 80150b4:	0801511d 	.word	0x0801511d
 80150b8:	08015099 	.word	0x08015099
 80150bc:	08015099 	.word	0x08015099
 80150c0:	08015099 	.word	0x08015099
 80150c4:	08015099 	.word	0x08015099
 80150c8:	0801511d 	.word	0x0801511d
 80150cc:	08015099 	.word	0x08015099
 80150d0:	08015099 	.word	0x08015099
 80150d4:	08015099 	.word	0x08015099
 80150d8:	08015099 	.word	0x08015099
 80150dc:	0801521b 	.word	0x0801521b
 80150e0:	08015147 	.word	0x08015147
 80150e4:	080151d5 	.word	0x080151d5
 80150e8:	08015099 	.word	0x08015099
 80150ec:	08015099 	.word	0x08015099
 80150f0:	0801523d 	.word	0x0801523d
 80150f4:	08015099 	.word	0x08015099
 80150f8:	08015147 	.word	0x08015147
 80150fc:	08015099 	.word	0x08015099
 8015100:	08015099 	.word	0x08015099
 8015104:	080151dd 	.word	0x080151dd
 8015108:	6833      	ldr	r3, [r6, #0]
 801510a:	1d1a      	adds	r2, r3, #4
 801510c:	681b      	ldr	r3, [r3, #0]
 801510e:	6032      	str	r2, [r6, #0]
 8015110:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015114:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015118:	2301      	movs	r3, #1
 801511a:	e09c      	b.n	8015256 <_printf_i+0x1e6>
 801511c:	6833      	ldr	r3, [r6, #0]
 801511e:	6820      	ldr	r0, [r4, #0]
 8015120:	1d19      	adds	r1, r3, #4
 8015122:	6031      	str	r1, [r6, #0]
 8015124:	0606      	lsls	r6, r0, #24
 8015126:	d501      	bpl.n	801512c <_printf_i+0xbc>
 8015128:	681d      	ldr	r5, [r3, #0]
 801512a:	e003      	b.n	8015134 <_printf_i+0xc4>
 801512c:	0645      	lsls	r5, r0, #25
 801512e:	d5fb      	bpl.n	8015128 <_printf_i+0xb8>
 8015130:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015134:	2d00      	cmp	r5, #0
 8015136:	da03      	bge.n	8015140 <_printf_i+0xd0>
 8015138:	232d      	movs	r3, #45	@ 0x2d
 801513a:	426d      	negs	r5, r5
 801513c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015140:	230a      	movs	r3, #10
 8015142:	4858      	ldr	r0, [pc, #352]	@ (80152a4 <_printf_i+0x234>)
 8015144:	e011      	b.n	801516a <_printf_i+0xfa>
 8015146:	6821      	ldr	r1, [r4, #0]
 8015148:	6833      	ldr	r3, [r6, #0]
 801514a:	0608      	lsls	r0, r1, #24
 801514c:	f853 5b04 	ldr.w	r5, [r3], #4
 8015150:	d402      	bmi.n	8015158 <_printf_i+0xe8>
 8015152:	0649      	lsls	r1, r1, #25
 8015154:	bf48      	it	mi
 8015156:	b2ad      	uxthmi	r5, r5
 8015158:	2f6f      	cmp	r7, #111	@ 0x6f
 801515a:	6033      	str	r3, [r6, #0]
 801515c:	bf14      	ite	ne
 801515e:	230a      	movne	r3, #10
 8015160:	2308      	moveq	r3, #8
 8015162:	4850      	ldr	r0, [pc, #320]	@ (80152a4 <_printf_i+0x234>)
 8015164:	2100      	movs	r1, #0
 8015166:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801516a:	6866      	ldr	r6, [r4, #4]
 801516c:	2e00      	cmp	r6, #0
 801516e:	60a6      	str	r6, [r4, #8]
 8015170:	db05      	blt.n	801517e <_printf_i+0x10e>
 8015172:	6821      	ldr	r1, [r4, #0]
 8015174:	432e      	orrs	r6, r5
 8015176:	f021 0104 	bic.w	r1, r1, #4
 801517a:	6021      	str	r1, [r4, #0]
 801517c:	d04b      	beq.n	8015216 <_printf_i+0x1a6>
 801517e:	4616      	mov	r6, r2
 8015180:	fbb5 f1f3 	udiv	r1, r5, r3
 8015184:	fb03 5711 	mls	r7, r3, r1, r5
 8015188:	5dc7      	ldrb	r7, [r0, r7]
 801518a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801518e:	462f      	mov	r7, r5
 8015190:	42bb      	cmp	r3, r7
 8015192:	460d      	mov	r5, r1
 8015194:	d9f4      	bls.n	8015180 <_printf_i+0x110>
 8015196:	2b08      	cmp	r3, #8
 8015198:	d10b      	bne.n	80151b2 <_printf_i+0x142>
 801519a:	6823      	ldr	r3, [r4, #0]
 801519c:	07df      	lsls	r7, r3, #31
 801519e:	d508      	bpl.n	80151b2 <_printf_i+0x142>
 80151a0:	6923      	ldr	r3, [r4, #16]
 80151a2:	6861      	ldr	r1, [r4, #4]
 80151a4:	4299      	cmp	r1, r3
 80151a6:	bfde      	ittt	le
 80151a8:	2330      	movle	r3, #48	@ 0x30
 80151aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80151ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 80151b2:	1b92      	subs	r2, r2, r6
 80151b4:	6122      	str	r2, [r4, #16]
 80151b6:	464b      	mov	r3, r9
 80151b8:	4621      	mov	r1, r4
 80151ba:	4640      	mov	r0, r8
 80151bc:	f8cd a000 	str.w	sl, [sp]
 80151c0:	aa03      	add	r2, sp, #12
 80151c2:	f7ff fee3 	bl	8014f8c <_printf_common>
 80151c6:	3001      	adds	r0, #1
 80151c8:	d14a      	bne.n	8015260 <_printf_i+0x1f0>
 80151ca:	f04f 30ff 	mov.w	r0, #4294967295
 80151ce:	b004      	add	sp, #16
 80151d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80151d4:	6823      	ldr	r3, [r4, #0]
 80151d6:	f043 0320 	orr.w	r3, r3, #32
 80151da:	6023      	str	r3, [r4, #0]
 80151dc:	2778      	movs	r7, #120	@ 0x78
 80151de:	4832      	ldr	r0, [pc, #200]	@ (80152a8 <_printf_i+0x238>)
 80151e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80151e4:	6823      	ldr	r3, [r4, #0]
 80151e6:	6831      	ldr	r1, [r6, #0]
 80151e8:	061f      	lsls	r7, r3, #24
 80151ea:	f851 5b04 	ldr.w	r5, [r1], #4
 80151ee:	d402      	bmi.n	80151f6 <_printf_i+0x186>
 80151f0:	065f      	lsls	r7, r3, #25
 80151f2:	bf48      	it	mi
 80151f4:	b2ad      	uxthmi	r5, r5
 80151f6:	6031      	str	r1, [r6, #0]
 80151f8:	07d9      	lsls	r1, r3, #31
 80151fa:	bf44      	itt	mi
 80151fc:	f043 0320 	orrmi.w	r3, r3, #32
 8015200:	6023      	strmi	r3, [r4, #0]
 8015202:	b11d      	cbz	r5, 801520c <_printf_i+0x19c>
 8015204:	2310      	movs	r3, #16
 8015206:	e7ad      	b.n	8015164 <_printf_i+0xf4>
 8015208:	4826      	ldr	r0, [pc, #152]	@ (80152a4 <_printf_i+0x234>)
 801520a:	e7e9      	b.n	80151e0 <_printf_i+0x170>
 801520c:	6823      	ldr	r3, [r4, #0]
 801520e:	f023 0320 	bic.w	r3, r3, #32
 8015212:	6023      	str	r3, [r4, #0]
 8015214:	e7f6      	b.n	8015204 <_printf_i+0x194>
 8015216:	4616      	mov	r6, r2
 8015218:	e7bd      	b.n	8015196 <_printf_i+0x126>
 801521a:	6833      	ldr	r3, [r6, #0]
 801521c:	6825      	ldr	r5, [r4, #0]
 801521e:	1d18      	adds	r0, r3, #4
 8015220:	6961      	ldr	r1, [r4, #20]
 8015222:	6030      	str	r0, [r6, #0]
 8015224:	062e      	lsls	r6, r5, #24
 8015226:	681b      	ldr	r3, [r3, #0]
 8015228:	d501      	bpl.n	801522e <_printf_i+0x1be>
 801522a:	6019      	str	r1, [r3, #0]
 801522c:	e002      	b.n	8015234 <_printf_i+0x1c4>
 801522e:	0668      	lsls	r0, r5, #25
 8015230:	d5fb      	bpl.n	801522a <_printf_i+0x1ba>
 8015232:	8019      	strh	r1, [r3, #0]
 8015234:	2300      	movs	r3, #0
 8015236:	4616      	mov	r6, r2
 8015238:	6123      	str	r3, [r4, #16]
 801523a:	e7bc      	b.n	80151b6 <_printf_i+0x146>
 801523c:	6833      	ldr	r3, [r6, #0]
 801523e:	2100      	movs	r1, #0
 8015240:	1d1a      	adds	r2, r3, #4
 8015242:	6032      	str	r2, [r6, #0]
 8015244:	681e      	ldr	r6, [r3, #0]
 8015246:	6862      	ldr	r2, [r4, #4]
 8015248:	4630      	mov	r0, r6
 801524a:	f000 f9b9 	bl	80155c0 <memchr>
 801524e:	b108      	cbz	r0, 8015254 <_printf_i+0x1e4>
 8015250:	1b80      	subs	r0, r0, r6
 8015252:	6060      	str	r0, [r4, #4]
 8015254:	6863      	ldr	r3, [r4, #4]
 8015256:	6123      	str	r3, [r4, #16]
 8015258:	2300      	movs	r3, #0
 801525a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801525e:	e7aa      	b.n	80151b6 <_printf_i+0x146>
 8015260:	4632      	mov	r2, r6
 8015262:	4649      	mov	r1, r9
 8015264:	4640      	mov	r0, r8
 8015266:	6923      	ldr	r3, [r4, #16]
 8015268:	47d0      	blx	sl
 801526a:	3001      	adds	r0, #1
 801526c:	d0ad      	beq.n	80151ca <_printf_i+0x15a>
 801526e:	6823      	ldr	r3, [r4, #0]
 8015270:	079b      	lsls	r3, r3, #30
 8015272:	d413      	bmi.n	801529c <_printf_i+0x22c>
 8015274:	68e0      	ldr	r0, [r4, #12]
 8015276:	9b03      	ldr	r3, [sp, #12]
 8015278:	4298      	cmp	r0, r3
 801527a:	bfb8      	it	lt
 801527c:	4618      	movlt	r0, r3
 801527e:	e7a6      	b.n	80151ce <_printf_i+0x15e>
 8015280:	2301      	movs	r3, #1
 8015282:	4632      	mov	r2, r6
 8015284:	4649      	mov	r1, r9
 8015286:	4640      	mov	r0, r8
 8015288:	47d0      	blx	sl
 801528a:	3001      	adds	r0, #1
 801528c:	d09d      	beq.n	80151ca <_printf_i+0x15a>
 801528e:	3501      	adds	r5, #1
 8015290:	68e3      	ldr	r3, [r4, #12]
 8015292:	9903      	ldr	r1, [sp, #12]
 8015294:	1a5b      	subs	r3, r3, r1
 8015296:	42ab      	cmp	r3, r5
 8015298:	dcf2      	bgt.n	8015280 <_printf_i+0x210>
 801529a:	e7eb      	b.n	8015274 <_printf_i+0x204>
 801529c:	2500      	movs	r5, #0
 801529e:	f104 0619 	add.w	r6, r4, #25
 80152a2:	e7f5      	b.n	8015290 <_printf_i+0x220>
 80152a4:	0801a018 	.word	0x0801a018
 80152a8:	0801a029 	.word	0x0801a029

080152ac <__sflush_r>:
 80152ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80152b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152b2:	0716      	lsls	r6, r2, #28
 80152b4:	4605      	mov	r5, r0
 80152b6:	460c      	mov	r4, r1
 80152b8:	d454      	bmi.n	8015364 <__sflush_r+0xb8>
 80152ba:	684b      	ldr	r3, [r1, #4]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	dc02      	bgt.n	80152c6 <__sflush_r+0x1a>
 80152c0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	dd48      	ble.n	8015358 <__sflush_r+0xac>
 80152c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80152c8:	2e00      	cmp	r6, #0
 80152ca:	d045      	beq.n	8015358 <__sflush_r+0xac>
 80152cc:	2300      	movs	r3, #0
 80152ce:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80152d2:	682f      	ldr	r7, [r5, #0]
 80152d4:	6a21      	ldr	r1, [r4, #32]
 80152d6:	602b      	str	r3, [r5, #0]
 80152d8:	d030      	beq.n	801533c <__sflush_r+0x90>
 80152da:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80152dc:	89a3      	ldrh	r3, [r4, #12]
 80152de:	0759      	lsls	r1, r3, #29
 80152e0:	d505      	bpl.n	80152ee <__sflush_r+0x42>
 80152e2:	6863      	ldr	r3, [r4, #4]
 80152e4:	1ad2      	subs	r2, r2, r3
 80152e6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80152e8:	b10b      	cbz	r3, 80152ee <__sflush_r+0x42>
 80152ea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80152ec:	1ad2      	subs	r2, r2, r3
 80152ee:	2300      	movs	r3, #0
 80152f0:	4628      	mov	r0, r5
 80152f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80152f4:	6a21      	ldr	r1, [r4, #32]
 80152f6:	47b0      	blx	r6
 80152f8:	1c43      	adds	r3, r0, #1
 80152fa:	89a3      	ldrh	r3, [r4, #12]
 80152fc:	d106      	bne.n	801530c <__sflush_r+0x60>
 80152fe:	6829      	ldr	r1, [r5, #0]
 8015300:	291d      	cmp	r1, #29
 8015302:	d82b      	bhi.n	801535c <__sflush_r+0xb0>
 8015304:	4a28      	ldr	r2, [pc, #160]	@ (80153a8 <__sflush_r+0xfc>)
 8015306:	40ca      	lsrs	r2, r1
 8015308:	07d6      	lsls	r6, r2, #31
 801530a:	d527      	bpl.n	801535c <__sflush_r+0xb0>
 801530c:	2200      	movs	r2, #0
 801530e:	6062      	str	r2, [r4, #4]
 8015310:	6922      	ldr	r2, [r4, #16]
 8015312:	04d9      	lsls	r1, r3, #19
 8015314:	6022      	str	r2, [r4, #0]
 8015316:	d504      	bpl.n	8015322 <__sflush_r+0x76>
 8015318:	1c42      	adds	r2, r0, #1
 801531a:	d101      	bne.n	8015320 <__sflush_r+0x74>
 801531c:	682b      	ldr	r3, [r5, #0]
 801531e:	b903      	cbnz	r3, 8015322 <__sflush_r+0x76>
 8015320:	6560      	str	r0, [r4, #84]	@ 0x54
 8015322:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015324:	602f      	str	r7, [r5, #0]
 8015326:	b1b9      	cbz	r1, 8015358 <__sflush_r+0xac>
 8015328:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801532c:	4299      	cmp	r1, r3
 801532e:	d002      	beq.n	8015336 <__sflush_r+0x8a>
 8015330:	4628      	mov	r0, r5
 8015332:	f7ff fb4b 	bl	80149cc <_free_r>
 8015336:	2300      	movs	r3, #0
 8015338:	6363      	str	r3, [r4, #52]	@ 0x34
 801533a:	e00d      	b.n	8015358 <__sflush_r+0xac>
 801533c:	2301      	movs	r3, #1
 801533e:	4628      	mov	r0, r5
 8015340:	47b0      	blx	r6
 8015342:	4602      	mov	r2, r0
 8015344:	1c50      	adds	r0, r2, #1
 8015346:	d1c9      	bne.n	80152dc <__sflush_r+0x30>
 8015348:	682b      	ldr	r3, [r5, #0]
 801534a:	2b00      	cmp	r3, #0
 801534c:	d0c6      	beq.n	80152dc <__sflush_r+0x30>
 801534e:	2b1d      	cmp	r3, #29
 8015350:	d001      	beq.n	8015356 <__sflush_r+0xaa>
 8015352:	2b16      	cmp	r3, #22
 8015354:	d11d      	bne.n	8015392 <__sflush_r+0xe6>
 8015356:	602f      	str	r7, [r5, #0]
 8015358:	2000      	movs	r0, #0
 801535a:	e021      	b.n	80153a0 <__sflush_r+0xf4>
 801535c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015360:	b21b      	sxth	r3, r3
 8015362:	e01a      	b.n	801539a <__sflush_r+0xee>
 8015364:	690f      	ldr	r7, [r1, #16]
 8015366:	2f00      	cmp	r7, #0
 8015368:	d0f6      	beq.n	8015358 <__sflush_r+0xac>
 801536a:	0793      	lsls	r3, r2, #30
 801536c:	bf18      	it	ne
 801536e:	2300      	movne	r3, #0
 8015370:	680e      	ldr	r6, [r1, #0]
 8015372:	bf08      	it	eq
 8015374:	694b      	ldreq	r3, [r1, #20]
 8015376:	1bf6      	subs	r6, r6, r7
 8015378:	600f      	str	r7, [r1, #0]
 801537a:	608b      	str	r3, [r1, #8]
 801537c:	2e00      	cmp	r6, #0
 801537e:	ddeb      	ble.n	8015358 <__sflush_r+0xac>
 8015380:	4633      	mov	r3, r6
 8015382:	463a      	mov	r2, r7
 8015384:	4628      	mov	r0, r5
 8015386:	6a21      	ldr	r1, [r4, #32]
 8015388:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 801538c:	47e0      	blx	ip
 801538e:	2800      	cmp	r0, #0
 8015390:	dc07      	bgt.n	80153a2 <__sflush_r+0xf6>
 8015392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015396:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801539a:	f04f 30ff 	mov.w	r0, #4294967295
 801539e:	81a3      	strh	r3, [r4, #12]
 80153a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80153a2:	4407      	add	r7, r0
 80153a4:	1a36      	subs	r6, r6, r0
 80153a6:	e7e9      	b.n	801537c <__sflush_r+0xd0>
 80153a8:	20400001 	.word	0x20400001

080153ac <_fflush_r>:
 80153ac:	b538      	push	{r3, r4, r5, lr}
 80153ae:	690b      	ldr	r3, [r1, #16]
 80153b0:	4605      	mov	r5, r0
 80153b2:	460c      	mov	r4, r1
 80153b4:	b913      	cbnz	r3, 80153bc <_fflush_r+0x10>
 80153b6:	2500      	movs	r5, #0
 80153b8:	4628      	mov	r0, r5
 80153ba:	bd38      	pop	{r3, r4, r5, pc}
 80153bc:	b118      	cbz	r0, 80153c6 <_fflush_r+0x1a>
 80153be:	6a03      	ldr	r3, [r0, #32]
 80153c0:	b90b      	cbnz	r3, 80153c6 <_fflush_r+0x1a>
 80153c2:	f7fe ff81 	bl	80142c8 <__sinit>
 80153c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d0f3      	beq.n	80153b6 <_fflush_r+0xa>
 80153ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80153d0:	07d0      	lsls	r0, r2, #31
 80153d2:	d404      	bmi.n	80153de <_fflush_r+0x32>
 80153d4:	0599      	lsls	r1, r3, #22
 80153d6:	d402      	bmi.n	80153de <_fflush_r+0x32>
 80153d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80153da:	f7ff fad8 	bl	801498e <__retarget_lock_acquire_recursive>
 80153de:	4628      	mov	r0, r5
 80153e0:	4621      	mov	r1, r4
 80153e2:	f7ff ff63 	bl	80152ac <__sflush_r>
 80153e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80153e8:	4605      	mov	r5, r0
 80153ea:	07da      	lsls	r2, r3, #31
 80153ec:	d4e4      	bmi.n	80153b8 <_fflush_r+0xc>
 80153ee:	89a3      	ldrh	r3, [r4, #12]
 80153f0:	059b      	lsls	r3, r3, #22
 80153f2:	d4e1      	bmi.n	80153b8 <_fflush_r+0xc>
 80153f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80153f6:	f7ff facb 	bl	8014990 <__retarget_lock_release_recursive>
 80153fa:	e7dd      	b.n	80153b8 <_fflush_r+0xc>

080153fc <__swhatbuf_r>:
 80153fc:	b570      	push	{r4, r5, r6, lr}
 80153fe:	460c      	mov	r4, r1
 8015400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015404:	4615      	mov	r5, r2
 8015406:	2900      	cmp	r1, #0
 8015408:	461e      	mov	r6, r3
 801540a:	b096      	sub	sp, #88	@ 0x58
 801540c:	da0c      	bge.n	8015428 <__swhatbuf_r+0x2c>
 801540e:	89a3      	ldrh	r3, [r4, #12]
 8015410:	2100      	movs	r1, #0
 8015412:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015416:	bf14      	ite	ne
 8015418:	2340      	movne	r3, #64	@ 0x40
 801541a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801541e:	2000      	movs	r0, #0
 8015420:	6031      	str	r1, [r6, #0]
 8015422:	602b      	str	r3, [r5, #0]
 8015424:	b016      	add	sp, #88	@ 0x58
 8015426:	bd70      	pop	{r4, r5, r6, pc}
 8015428:	466a      	mov	r2, sp
 801542a:	f000 f893 	bl	8015554 <_fstat_r>
 801542e:	2800      	cmp	r0, #0
 8015430:	dbed      	blt.n	801540e <__swhatbuf_r+0x12>
 8015432:	9901      	ldr	r1, [sp, #4]
 8015434:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015438:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801543c:	4259      	negs	r1, r3
 801543e:	4159      	adcs	r1, r3
 8015440:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015444:	e7eb      	b.n	801541e <__swhatbuf_r+0x22>

08015446 <__smakebuf_r>:
 8015446:	898b      	ldrh	r3, [r1, #12]
 8015448:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801544a:	079d      	lsls	r5, r3, #30
 801544c:	4606      	mov	r6, r0
 801544e:	460c      	mov	r4, r1
 8015450:	d507      	bpl.n	8015462 <__smakebuf_r+0x1c>
 8015452:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015456:	6023      	str	r3, [r4, #0]
 8015458:	6123      	str	r3, [r4, #16]
 801545a:	2301      	movs	r3, #1
 801545c:	6163      	str	r3, [r4, #20]
 801545e:	b003      	add	sp, #12
 8015460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015462:	466a      	mov	r2, sp
 8015464:	ab01      	add	r3, sp, #4
 8015466:	f7ff ffc9 	bl	80153fc <__swhatbuf_r>
 801546a:	9f00      	ldr	r7, [sp, #0]
 801546c:	4605      	mov	r5, r0
 801546e:	4639      	mov	r1, r7
 8015470:	4630      	mov	r0, r6
 8015472:	f7fe fd99 	bl	8013fa8 <_malloc_r>
 8015476:	b948      	cbnz	r0, 801548c <__smakebuf_r+0x46>
 8015478:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801547c:	059a      	lsls	r2, r3, #22
 801547e:	d4ee      	bmi.n	801545e <__smakebuf_r+0x18>
 8015480:	f023 0303 	bic.w	r3, r3, #3
 8015484:	f043 0302 	orr.w	r3, r3, #2
 8015488:	81a3      	strh	r3, [r4, #12]
 801548a:	e7e2      	b.n	8015452 <__smakebuf_r+0xc>
 801548c:	89a3      	ldrh	r3, [r4, #12]
 801548e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015492:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015496:	81a3      	strh	r3, [r4, #12]
 8015498:	9b01      	ldr	r3, [sp, #4]
 801549a:	6020      	str	r0, [r4, #0]
 801549c:	b15b      	cbz	r3, 80154b6 <__smakebuf_r+0x70>
 801549e:	4630      	mov	r0, r6
 80154a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80154a4:	f000 f868 	bl	8015578 <_isatty_r>
 80154a8:	b128      	cbz	r0, 80154b6 <__smakebuf_r+0x70>
 80154aa:	89a3      	ldrh	r3, [r4, #12]
 80154ac:	f023 0303 	bic.w	r3, r3, #3
 80154b0:	f043 0301 	orr.w	r3, r3, #1
 80154b4:	81a3      	strh	r3, [r4, #12]
 80154b6:	89a3      	ldrh	r3, [r4, #12]
 80154b8:	431d      	orrs	r5, r3
 80154ba:	81a5      	strh	r5, [r4, #12]
 80154bc:	e7cf      	b.n	801545e <__smakebuf_r+0x18>

080154be <memmove>:
 80154be:	4288      	cmp	r0, r1
 80154c0:	b510      	push	{r4, lr}
 80154c2:	eb01 0402 	add.w	r4, r1, r2
 80154c6:	d902      	bls.n	80154ce <memmove+0x10>
 80154c8:	4284      	cmp	r4, r0
 80154ca:	4623      	mov	r3, r4
 80154cc:	d807      	bhi.n	80154de <memmove+0x20>
 80154ce:	1e43      	subs	r3, r0, #1
 80154d0:	42a1      	cmp	r1, r4
 80154d2:	d008      	beq.n	80154e6 <memmove+0x28>
 80154d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80154d8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80154dc:	e7f8      	b.n	80154d0 <memmove+0x12>
 80154de:	4601      	mov	r1, r0
 80154e0:	4402      	add	r2, r0
 80154e2:	428a      	cmp	r2, r1
 80154e4:	d100      	bne.n	80154e8 <memmove+0x2a>
 80154e6:	bd10      	pop	{r4, pc}
 80154e8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80154ec:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80154f0:	e7f7      	b.n	80154e2 <memmove+0x24>

080154f2 <_raise_r>:
 80154f2:	291f      	cmp	r1, #31
 80154f4:	b538      	push	{r3, r4, r5, lr}
 80154f6:	4605      	mov	r5, r0
 80154f8:	460c      	mov	r4, r1
 80154fa:	d904      	bls.n	8015506 <_raise_r+0x14>
 80154fc:	2316      	movs	r3, #22
 80154fe:	6003      	str	r3, [r0, #0]
 8015500:	f04f 30ff 	mov.w	r0, #4294967295
 8015504:	bd38      	pop	{r3, r4, r5, pc}
 8015506:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015508:	b112      	cbz	r2, 8015510 <_raise_r+0x1e>
 801550a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801550e:	b94b      	cbnz	r3, 8015524 <_raise_r+0x32>
 8015510:	4628      	mov	r0, r5
 8015512:	f000 f853 	bl	80155bc <_getpid_r>
 8015516:	4622      	mov	r2, r4
 8015518:	4601      	mov	r1, r0
 801551a:	4628      	mov	r0, r5
 801551c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015520:	f000 b83a 	b.w	8015598 <_kill_r>
 8015524:	2b01      	cmp	r3, #1
 8015526:	d00a      	beq.n	801553e <_raise_r+0x4c>
 8015528:	1c59      	adds	r1, r3, #1
 801552a:	d103      	bne.n	8015534 <_raise_r+0x42>
 801552c:	2316      	movs	r3, #22
 801552e:	6003      	str	r3, [r0, #0]
 8015530:	2001      	movs	r0, #1
 8015532:	e7e7      	b.n	8015504 <_raise_r+0x12>
 8015534:	2100      	movs	r1, #0
 8015536:	4620      	mov	r0, r4
 8015538:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801553c:	4798      	blx	r3
 801553e:	2000      	movs	r0, #0
 8015540:	e7e0      	b.n	8015504 <_raise_r+0x12>
	...

08015544 <raise>:
 8015544:	4b02      	ldr	r3, [pc, #8]	@ (8015550 <raise+0xc>)
 8015546:	4601      	mov	r1, r0
 8015548:	6818      	ldr	r0, [r3, #0]
 801554a:	f7ff bfd2 	b.w	80154f2 <_raise_r>
 801554e:	bf00      	nop
 8015550:	20000628 	.word	0x20000628

08015554 <_fstat_r>:
 8015554:	b538      	push	{r3, r4, r5, lr}
 8015556:	2300      	movs	r3, #0
 8015558:	4d06      	ldr	r5, [pc, #24]	@ (8015574 <_fstat_r+0x20>)
 801555a:	4604      	mov	r4, r0
 801555c:	4608      	mov	r0, r1
 801555e:	4611      	mov	r1, r2
 8015560:	602b      	str	r3, [r5, #0]
 8015562:	f7ec fcf5 	bl	8001f50 <_fstat>
 8015566:	1c43      	adds	r3, r0, #1
 8015568:	d102      	bne.n	8015570 <_fstat_r+0x1c>
 801556a:	682b      	ldr	r3, [r5, #0]
 801556c:	b103      	cbz	r3, 8015570 <_fstat_r+0x1c>
 801556e:	6023      	str	r3, [r4, #0]
 8015570:	bd38      	pop	{r3, r4, r5, pc}
 8015572:	bf00      	nop
 8015574:	2000851c 	.word	0x2000851c

08015578 <_isatty_r>:
 8015578:	b538      	push	{r3, r4, r5, lr}
 801557a:	2300      	movs	r3, #0
 801557c:	4d05      	ldr	r5, [pc, #20]	@ (8015594 <_isatty_r+0x1c>)
 801557e:	4604      	mov	r4, r0
 8015580:	4608      	mov	r0, r1
 8015582:	602b      	str	r3, [r5, #0]
 8015584:	f7ec fcf3 	bl	8001f6e <_isatty>
 8015588:	1c43      	adds	r3, r0, #1
 801558a:	d102      	bne.n	8015592 <_isatty_r+0x1a>
 801558c:	682b      	ldr	r3, [r5, #0]
 801558e:	b103      	cbz	r3, 8015592 <_isatty_r+0x1a>
 8015590:	6023      	str	r3, [r4, #0]
 8015592:	bd38      	pop	{r3, r4, r5, pc}
 8015594:	2000851c 	.word	0x2000851c

08015598 <_kill_r>:
 8015598:	b538      	push	{r3, r4, r5, lr}
 801559a:	2300      	movs	r3, #0
 801559c:	4d06      	ldr	r5, [pc, #24]	@ (80155b8 <_kill_r+0x20>)
 801559e:	4604      	mov	r4, r0
 80155a0:	4608      	mov	r0, r1
 80155a2:	4611      	mov	r1, r2
 80155a4:	602b      	str	r3, [r5, #0]
 80155a6:	f7ec fc90 	bl	8001eca <_kill>
 80155aa:	1c43      	adds	r3, r0, #1
 80155ac:	d102      	bne.n	80155b4 <_kill_r+0x1c>
 80155ae:	682b      	ldr	r3, [r5, #0]
 80155b0:	b103      	cbz	r3, 80155b4 <_kill_r+0x1c>
 80155b2:	6023      	str	r3, [r4, #0]
 80155b4:	bd38      	pop	{r3, r4, r5, pc}
 80155b6:	bf00      	nop
 80155b8:	2000851c 	.word	0x2000851c

080155bc <_getpid_r>:
 80155bc:	f7ec bc7e 	b.w	8001ebc <_getpid>

080155c0 <memchr>:
 80155c0:	4603      	mov	r3, r0
 80155c2:	b510      	push	{r4, lr}
 80155c4:	b2c9      	uxtb	r1, r1
 80155c6:	4402      	add	r2, r0
 80155c8:	4293      	cmp	r3, r2
 80155ca:	4618      	mov	r0, r3
 80155cc:	d101      	bne.n	80155d2 <memchr+0x12>
 80155ce:	2000      	movs	r0, #0
 80155d0:	e003      	b.n	80155da <memchr+0x1a>
 80155d2:	7804      	ldrb	r4, [r0, #0]
 80155d4:	3301      	adds	r3, #1
 80155d6:	428c      	cmp	r4, r1
 80155d8:	d1f6      	bne.n	80155c8 <memchr+0x8>
 80155da:	bd10      	pop	{r4, pc}

080155dc <_realloc_r>:
 80155dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155e0:	4607      	mov	r7, r0
 80155e2:	4614      	mov	r4, r2
 80155e4:	460d      	mov	r5, r1
 80155e6:	b921      	cbnz	r1, 80155f2 <_realloc_r+0x16>
 80155e8:	4611      	mov	r1, r2
 80155ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80155ee:	f7fe bcdb 	b.w	8013fa8 <_malloc_r>
 80155f2:	b92a      	cbnz	r2, 8015600 <_realloc_r+0x24>
 80155f4:	f7ff f9ea 	bl	80149cc <_free_r>
 80155f8:	4625      	mov	r5, r4
 80155fa:	4628      	mov	r0, r5
 80155fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015600:	f000 f81a 	bl	8015638 <_malloc_usable_size_r>
 8015604:	4284      	cmp	r4, r0
 8015606:	4606      	mov	r6, r0
 8015608:	d802      	bhi.n	8015610 <_realloc_r+0x34>
 801560a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801560e:	d8f4      	bhi.n	80155fa <_realloc_r+0x1e>
 8015610:	4621      	mov	r1, r4
 8015612:	4638      	mov	r0, r7
 8015614:	f7fe fcc8 	bl	8013fa8 <_malloc_r>
 8015618:	4680      	mov	r8, r0
 801561a:	b908      	cbnz	r0, 8015620 <_realloc_r+0x44>
 801561c:	4645      	mov	r5, r8
 801561e:	e7ec      	b.n	80155fa <_realloc_r+0x1e>
 8015620:	42b4      	cmp	r4, r6
 8015622:	4622      	mov	r2, r4
 8015624:	4629      	mov	r1, r5
 8015626:	bf28      	it	cs
 8015628:	4632      	movcs	r2, r6
 801562a:	f7ff f9ba 	bl	80149a2 <memcpy>
 801562e:	4629      	mov	r1, r5
 8015630:	4638      	mov	r0, r7
 8015632:	f7ff f9cb 	bl	80149cc <_free_r>
 8015636:	e7f1      	b.n	801561c <_realloc_r+0x40>

08015638 <_malloc_usable_size_r>:
 8015638:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801563c:	1f18      	subs	r0, r3, #4
 801563e:	2b00      	cmp	r3, #0
 8015640:	bfbc      	itt	lt
 8015642:	580b      	ldrlt	r3, [r1, r0]
 8015644:	18c0      	addlt	r0, r0, r3
 8015646:	4770      	bx	lr

08015648 <_init>:
 8015648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801564a:	bf00      	nop
 801564c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801564e:	bc08      	pop	{r3}
 8015650:	469e      	mov	lr, r3
 8015652:	4770      	bx	lr

08015654 <_fini>:
 8015654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015656:	bf00      	nop
 8015658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801565a:	bc08      	pop	{r3}
 801565c:	469e      	mov	lr, r3
 801565e:	4770      	bx	lr
